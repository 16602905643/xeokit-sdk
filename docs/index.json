[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "scene/Scene.js",
    "content": "\nimport {core} from '../core.js';\nimport {utils} from '../utils.js';\nimport {math} from '../math/math.js';\nimport {stats} from '../stats.js';\nimport {Component} from '../Component.js';\nimport {Canvas} from '../canvas/Canvas.js';\nimport {Renderer} from '../webgl/Renderer.js';\nimport {Input} from '../input/Input.js';\nimport {Viewport} from '../viewport/Viewport.js';\nimport {Camera} from '../camera/Camera.js';\nimport {DirLight} from '../lighting/DirLight.js';\nimport {BoxGeometry} from '../geometry/BoxGeometry.js';\nimport {PhongMaterial} from '../materials/PhongMaterial.js';\nimport {EmphasisMaterial} from '../materials/EmphasisMaterial.js';\nimport {EdgeMaterial} from '../materials/EdgeMaterial.js';\nimport {OutlineMaterial} from '../materials/OutlineMaterial.js';\n\n// Cached vars to avoid garbage collection\n\nfunction getMeshIDMap(scene, meshIds) {\n    const map = {};\n    let meshId;\n    let mesh;\n    for (let i = 0, len = meshIds.length; i < len; i++) {\n        meshId = meshIds[i];\n        mesh = scene.meshes[meshId];\n        if (!mesh) {\n            scene.warn(\"pick(): Mesh not found: \" + meshId);\n            continue;\n        }\n        map[meshId] = true;\n    }\n    return map;\n}\n\n/**\n * Fired whenever a debug message is logged on a component within this Scene.\n * @event log\n * @param {String} value The debug message\n */\n\n/**\n * Fired whenever an error is logged on a component within this Scene.\n * @event error\n * @param {String} value The error message\n */\n\n/**\n * Fired whenever a warning is logged on a component within this Scene.\n * @event warn\n * @param {String} value The warning message\n */\n\n/**\n * @desc The container for all 3D scene objects and state.\n *\n * * A {@link Viewer} has a single Scene.\n *\n * # Getting the {@link Viewer}'s Scene:\n *\n * ````javascript\n * var scene = myViewer.scene;\n * ````\n *\n * # Creating and accessing components\n *\n * As a brief introduction to creating Scene components, we'll create a {@link Mesh} that has a\n * {@link TorusGeometry} and a {@link PhongMaterial}:\n *\n * ````javascript\n * var teapotMesh = new Mesh(scene, {\n *     id: \"myMesh\",                               // <<---------- ID automatically generated if not provided\n *     geometry: new TorusGeometry(scene),\n *     material: new PhongMaterial(scene, {\n *         id: \"myMaterial\",\n *         diffuse: [0.2, 0.2, 1.0]\n *     })\n * });\n *\n * teapotMesh.scene.camera.eye = [45, 45, 45];\n * ````\n *\n * Find components by ID in their Scene's {@link Scene/components} map:\n *\n * ````javascript\n * var teapotMesh = scene.components[\"myMesh\"];\n * teapotMesh.visible = false;\n *\n * var teapotMaterial = scene.components[\"myMaterial\"];\n * teapotMaterial.diffuse = [1,0,0]; // Change to red\n * ````\n *\n * A Scene also has a map of component instances for each {@link Component} subtype:\n *\n * ````javascript\n * var meshes = scene.types[\"Mesh\"];\n * var teapotMesh = meshes[\"myMesh\"];\n * teapotMesh.ghosted = true;\n *\n * var phongMaterials = scene.types[\"PhongMaterial\"];\n * var teapotMaterial = phongMaterials[\"myMaterial\"];\n * teapotMaterial.diffuse = [0,1,0]; // Change to green\n * ````\n *\n * See {@link Object}, {@link Group} and {@link Model} for how to create and access more sophisticated content.\n *\n * # Controlling the camera\n *\n * Use the Scene's {@link Camera} to control the current viewpoint and projection:\n *\n * ````javascript\n * var camera = myScene.camera;\n *\n * camera.eye = [-10,0,0];\n * camera.look = [-10,0,0];\n * camera.up = [0,1,0];\n *\n * camera.projection = \"perspective\";\n * camera.perspective.fov = 45;\n * //...\n * ````\n *\n * # Managing the canvas, taking snapshots\n *\n * The Scene's {@link Canvas} component provides various conveniences relevant to the WebGL canvas, such\n * as getting getting snapshots, firing resize events etc:\n *\n * ````javascript\n * var canvas = scene.canvas;\n *\n * canvas.on(\"boundary\", function(boundary) {\n *     //...\n * });\n *\n * var imageData = canvas.getSnapshot({\n *     width: 500,\n *     height: 500,\n *     format: \"png\"\n * });\n * ````\n *\n * # Picking\n *\n * Use {@link Scene#pick} to pick and raycast meshes.\n *\n * For example, to pick a point on the surface of the closest mesh at the given canvas coordinates:\n *\n * ````javascript\n * var hit = scene.pick({\n *      pickSurface: true,\n *      canvasPos: [23, 131]\n * });\n *\n * if (hit) { // Picked a Mesh\n *\n *     var mesh = hit.mesh;\n *\n *     var primitive = hit.primitive; // Type of primitive that was picked, usually \"triangles\"\n *     var primIndex = hit.primIndex; // Position of triangle's first index in the picked Mesh's Geometry's indices array\n *     var indices = hit.indices; // UInt32Array containing the triangle's vertex indices\n *     var localPos = hit.localPos; // Float32Array containing the picked Local-space position on the triangle\n *     var worldPos = hit.worldPos; // Float32Array containing the picked World-space position on the triangle\n *     var viewPos = hit.viewPos; // Float32Array containing the picked View-space position on the triangle\n *     var bary = hit.bary; // Float32Array containing the picked barycentric position within the triangle\n *     var normal = hit.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle\n *     var uv = hit.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle\n * }\n * ````\n *\n * # Pick masking\n *\n * We can use {@link Scene#pick}'s ````includeMeshes```` and ````excludeMeshes````  options to mask which {@link Mesh}es we attempt to pick.\n *\n * This is useful for picking <em>through</em> things, to pick only the Meshes of interest.\n *\n * To pick only Meshes ````\"gearbox#77.0\"```` and ````\"gearbox#79.0\"````, picking through any other Meshes that are\n * in the way, as if they weren't there:\n *\n * ````javascript\n * var hit = scene.pick({\n *      canvasPos: [23, 131],\n *      includeMeshes: [\"gearbox#77.0\", \"gearbox#79.0\"]\n * });\n *\n * if (hit) {\n *       // Mesh will always be either \"gearbox#77.0\" or \"gearbox#79.0\"\n *       var mesh = hit.mesh;\n * }\n * ````\n *\n * To pick any pickable Mesh, except for ````\"gearbox#77.0\"```` and ````\"gearbox#79.0\"````, picking through those\n * Meshes if they happen to be in the way:\n *\n * ````javascript\n * var hit = scene.pick({\n *      canvasPos: [23, 131],\n *      excludeMeshes: [\"gearbox#77.0\", \"gearbox#79.0\"]\n * });\n *\n * if (hit) {\n *       // Mesh will never be \"gearbox#77.0\" or \"gearbox#79.0\"\n *       var mesh = hit.mesh;\n * }\n * ````\n *\n * See {@link Scene#pick} for more info on picking.\n *\n * # Querying and tracking boundaries\n *\n * Getting a Scene's World-space axis-aligned boundary (AABB):\n *\n * ````javascript\n * var aabb = scene.aabb; // [xmin, ymin, zmin, xmax, ymax, zmax]\n * ````\n *\n * Subscribing to updates to the AABB, which occur whenever {@link Mesh}es are transformed, their\n * {@link Geometry}s have been updated, or the {@link Camera} has moved:\n *\n * ````javascript\n * scene.on(\"boundary\", function() {\n *      var aabb = scene.aabb;\n * });\n * ````\n *\n * Getting the AABB of the {@link Object}s with the given IDs:\n *\n * ````JavaScript\n * scene.getAABB(); // Gets collective boundary of all Mesh Objects in the scene\n * scene.getAABB(\"saw\"); // Gets boundary of an Object\n * scene.getAABB([\"saw\", \"gearbox\"]); // Gets collective boundary of two Objects\n * ````\n *\n * See {@link Scene#getAABB\"} and {@link Object} for more info on querying and tracking boundaries.\n *\n * # Managing the viewport\n *\n * The Scene's {@link Viewport} component manages the WebGL viewport:\n *\n * ````javascript\n * var viewport = scene.viewport\n * viewport.boundary = [0, 0, 500, 400];;\n * ````\n *\n * # Controlling rendering\n *\n * You can configure a Scene to perform multiple \"passes\" (renders) per frame. This is useful when we want to render the\n * scene to multiple viewports, such as for stereo effects.\n *\n * In the example, below, we'll configure the Scene to render twice on each frame, each time to different viewport. We'll do this\n * with a callback that intercepts the Scene before each render and sets its {@link Viewport} to a\n * different portion of the canvas. By default, the Scene will clear the canvas only before the first render, allowing the\n * two views to be shown on the canvas at the same time.\n *\n * ````Javascript\n * // Load a glTF model\n * var model = new GLTFModel({\n *     src: \"models/gltf/GearboxAssy/glTF-MaterialsCommon/GearboxAssy.gltf\"\n * });\n *\n * var scene = model.scene;\n * var viewport = scene.viewport;\n *\n * // Configure Scene to render twice for each frame\n * scene.passes = 2; // Default is 1\n * scene.clearEachPass = false; // Default is false\n *\n * // Render to a separate viewport on each render\n *\n * var viewport = scene.viewport;\n * viewport.autoBoundary = false;\n *\n * scene.on(\"rendering\", function (e) {\n *      switch (e.pass) {\n *          case 0:\n *              viewport.boundary = [0, 0, 200, 200]; // xmin, ymin, width, height\n *              break;\n *\n *          case 1:\n *              viewport.boundary = [200, 0, 200, 200];\n *              break;\n *      }\n * });\n *\n * // We can also intercept the Scene after each render,\n * // (though we're not using this for anything here)\n * scene.on(\"rendered\", function (e) {\n *      switch (e.pass) {\n *          case 0:\n *              break;\n *\n *          case 1:\n *              break;\n *      }\n * });\n * ````\n *\n * # Gamma correction\n *\n * Within its shaders, xeokit performs shading calculations in linear space.\n *\n * By default, the Scene expects color textures (eg. {@link PhongMaterial#diffuseMap},\n * {@link MetallicMaterial#baseColorMap} and {@link SpecularMaterial#diffuseMap}) to\n * be in pre-multipled gamma space, so will convert those to linear space before they are used in shaders. Other textures are\n * always expected to be in linear space.\n *\n * By default, the Scene will also gamma-correct its rendered output.\n *\n * You can configure the Scene to expect all those color textures to be linear space, so that it does not gamma-correct them:\n *\n * ````javascript\n * scene.gammaInput = false;\n * ````\n *\n * You would still need to gamma-correct the output, though, if it's going straight to the canvas, so normally we would\n * leave that enabled:\n *\n * ````javascript\n * scene.gammaOutput = true;\n * ````\n *\n * See {@link Texture} for more information on texture encoding and gamma.\n *\n * @class Scene\n */\nclass Scene extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Scene\";\n    }\n\n    /**\n     * @private\n     */\n    init(cfg) {\n\n        super.init(cfg);\n\n        const self = this;\n\n        const transparent = !!cfg.transparent;\n\n        /**\n         The number of models currently loading.\n\n         @property loading\n         @final\n         @type {Number}\n         */\n        this.loading = 0;\n\n        /**\n         The epoch time (in milliseconds since 1970) when this Scene was instantiated.\n\n         @property timeCreated\n         @final\n         @type {Number}\n         */\n        this.startTime = (new Date()).getTime();\n\n        /**\n         {@link Model}s in this Scene, mapped to their IDs.\n\n         @property models\n         @final\n         @type {{String:Model}}\n         */\n        this.models = {};\n\n        /**\n         {@link Object}s in this Scene that have {@link Object#objectId} properties, mapped to those IDs.\n\n         Each Object is registered in this map when its {@link Object#objectId} is assigned a value.\n\n         @property objects\n         @final\n         @type {{String:Object}}\n         */\n        this.objects = {};\n\n        /**\n         Visible entity {@link Object}s within this Scene, mapped to their IDs.\n\n         Each Object is registered in this map when its {@link Object/visible} property is true and its\n         {@link Object/objectId} is assigned a value.\n\n         @property visibleObjects\n         @final\n         @type {{String:Object}}\n         */\n        this.visibleObjects = {};\n\n        /**\n         Ghosted entity {@link Object}s within this Scene, mapped to their IDs.\n\n         Each Object is registered in this map when its {@link Object/ghosted} property is true and its\n         {@link Object/objectId} is assigned a value.\n\n         @property ghostedObjects\n         @final\n         @type {{String:Object}}\n         */\n        this.ghostedObjects = {};\n\n        /**\n         Highlighted entity {@link Object}s within this Scene, mapped to their IDs.\n\n         Each Object is registered in this map when its {@link Object/highlighted} property is true and its\n         {@link Object/objectId} is assigned a value.\n\n         @property highlightedObjects\n         @final\n         @type {{String:Object}}\n         */\n        this.highlightedObjects = {};\n\n        /**\n         Selected entity {@link Object}s within this Scene, mapped to their IDs.\n\n         Each Object is registered in this map when its {@link Object/selected} property is true and its\n         {@link Object/objectId} is assigned a value.\n\n         @property selectedObjects\n         @final\n         @type {{String:Object}}\n         */\n        this.selectedObjects = {};\n\n        // Cached ID arrays, lazy-rebuilt as needed when stale after map updates\n\n        /**\n         Lazy-regenerated ID lists.\n         */\n        this._objectIds = null;\n        this._visibleObjectIds = null;\n        this._ghostedObjectIds = null;\n        this._highlightedObjectIds = null;\n        this._selectedObjectIds = null;\n\n        this._collidables = {}; // Components that contribute to the Scene AABB\n        this._compilables = {}; // Components that require shader compilation\n\n        this._needRecompile = false;\n\n        /**\n         For each {@link Component} type, a map of\n         IDs to {@link Component} instances of that type.\n\n         @property types\n         @final\n         @type {String:{String:Component}}\n         */\n        this.types = {};\n\n\n        /**\n         The {@link Component\"}}Component{{/crossLink}} within this Scene, mapped to their IDs.\n\n         @property components\n         @final\n         @type {String:Component}\n         */\n        this.components = {};\n\n        /**\n         The {@link Clip\"}}Clip{{/crossLink}} components in this Scene, mapped to their IDs.\n\n         @property clips\n         @final\n         @type {{String:Clip}}\n         */\n        this.clips = {};\n\n        /**\n         The {@link PointLight}, {@link DirLight},\n         {@link SpotLight} and {@link AmbientLight} components in this Scene, mapped to their IDs.\n\n         @property lights\n         @final\n         @type {{String:Object}}\n         */\n        this.lights = {};\n\n        /**\n         The {@link LightMap} components in this Scene, mapped to their IDs.\n\n         @property lightMaps\n         @final\n         @type {{String:LightMap}}\n         */\n        this.lightMaps = {};\n\n        /**\n         The {@link ReflectionMap} components in this Scene, mapped to their IDs.\n\n         @property reflectionMaps\n         @final\n         @type {{String:ReflectionMap}}\n         */\n        this.reflectionMaps = {};\n\n        /**\n         Manages the HTML5 canvas for this Scene.\n         @final\n         @property canvas\n         @type {Canvas}\n         */\n        this.canvas = new Canvas(this, {\n            dontClear: true, // Never destroy this component with Scene#clear();\n            canvas: cfg.canvas, // Can be canvas ID, canvas element, or null\n            transparent: transparent,\n            backgroundColor: cfg.backgroundColor,\n            backgroundImage: cfg.backgroundImage,\n            webgl2: cfg.webgl2 !== false,\n            contextAttr: cfg.contextAttr || {},\n            simulateWebGLContextLost: cfg.simulateWebGLContextLost\n        });\n\n        // Redraw as canvas resized\n        this.canvas.on(\"boundary\", function () {\n            self.glRedraw();\n        });\n\n        this.canvas.on(\"webglContextFailed\", function () {\n            alert(\"xeokit failed to find WebGL!\");\n        });\n\n        this._renderer = new Renderer(this, {\n            transparent: transparent\n        });\n\n        this._clipsState = new (function () {\n\n            this.clips = [];\n\n            let hash = null;\n\n            this.getHash = function () {\n                if (hash) {\n                    return hash;\n                }\n                const clips = this.clips;\n                if (clips.length === 0) {\n                    return this.hash = \";\";\n                }\n                let clip;\n                const hashParts = [];\n                for (let i = 0, len = clips.length; i < len; i++) {\n                    clip = clips[i];\n                    hashParts.push(\"cp\");\n                }\n                hashParts.push(\";\");\n                hash = hashParts.join(\"\");\n                return hash;\n            };\n\n            this.addClip = function (clip) {\n                this.clips.push(clip);\n                hash = null;\n            };\n\n            this.removeClip = function (clip) {\n                for (let i = 0, len = this.clips.length; i < len; i++) {\n                    if (this.clips[i].id === clip.id) {\n                        this.clips.splice(i, 1);\n                        hash = null;\n                        return;\n                    }\n                }\n            };\n        })();\n\n        this._lightsState = new (function () {\n\n            const DEFAULT_AMBIENT = math.vec3([0, 0, 0]);\n            const ambientColor = math.vec3();\n\n            this.lights = [];\n            this.reflectionMaps = [];\n            this.lightMaps = [];\n\n            let hash = null;\n            let ambientLight = null;\n\n            this.getHash = function () {\n                if (hash) {\n                    return hash;\n                }\n                const hashParts = [];\n                const lights = this.lights;\n                let light;\n                for (let i = 0, len = lights.length; i < len; i++) {\n                    light = lights[i];\n                    hashParts.push(\"/\");\n                    hashParts.push(light.type);\n                    hashParts.push((light.space === \"world\") ? \"w\" : \"v\");\n                    if (light.castShadow) {\n                        hashParts.push(\"sh\");\n                    }\n                }\n                if (this.lightMaps.length > 0) {\n                    hashParts.push(\"/lm\");\n                }\n                if (this.reflectionMaps.length > 0) {\n                    hashParts.push(\"/rm\");\n                }\n                hashParts.push(\";\");\n                hash = hashParts.join(\"\");\n                return hash;\n            };\n\n            this.addLight = function (state) {\n                this.lights.push(state);\n                ambientLight = null;\n                hash = null;\n            };\n\n            this.removeLight = function (state) {\n                for (let i = 0, len = this.lights.length; i < len; i++) {\n                    const light = this.lights[i];\n                    if (light.id === state.id) {\n                        this.lights.splice(i, 1);\n                        if (ambientLight && ambientLight.id === state.id) {\n                            ambientLight = null;\n                        }\n                        hash = null;\n                        return;\n                    }\n                }\n            };\n\n            this.addReflectionMap = function (state) {\n                this.reflectionMaps.push(state);\n                hash = null;\n            };\n\n            this.removeReflectionMap = function (state) {\n                for (let i = 0, len = this.reflectionMaps.length; i < len; i++) {\n                    if (this.reflectionMaps[i].id === state.id) {\n                        this.reflectionMaps.splice(i, 1);\n                        hash = null;\n                        return;\n                    }\n                }\n            };\n\n            this.addLightMap = function (state) {\n                this.lightMaps.push(state);\n                hash = null;\n            };\n\n            this.removeLightMap = function (state) {\n                for (let i = 0, len = this.lightMaps.length; i < len; i++) {\n                    if (this.lightMaps[i].id === state.id) {\n                        this.lightMaps.splice(i, 1);\n                        hash = null;\n                        return;\n                    }\n                }\n            };\n\n            this.getAmbientColor = function () {\n                if (!ambientLight) {\n                    for (let i = 0, len = this.lights.length; i < len; i++) {\n                        const light = this.lights[i];\n                        if (light.type === \"ambient\") {\n                            ambientLight = light;\n                            break;\n                        }\n                    }\n                }\n                if (ambientLight) {\n                    const color = ambientLight.color;\n                    const intensity = ambientLight.intensity;\n                    ambientColor[0] = color[0] * intensity;\n                    ambientColor[1] = color[1] * intensity;\n                    ambientColor[2] = color[2] * intensity;\n                    return ambientColor;\n                } else {\n                    return DEFAULT_AMBIENT;\n                }\n            };\n\n        })();\n\n        /**\n         Publishes input events that occur on this Scene's canvas.\n\n         @final\n         @property input\n         @type {Input}\n         @final\n         */\n        this.input = new Input(this, {\n            dontClear: true, // Never destroy this component with Scene#clear();\n            element: this.canvas.canvas\n        });\n\n        // Register Scene on xeokit\n        // Do this BEFORE we add components below\n        core._addScene(this);\n\n        this._initDefaults();\n\n        // Global components\n\n        this._viewport = new Viewport(this, {\n            id: \"default.viewport\",\n            autoBoundary: true,\n            dontClear: true // Never destroy this component with Scene#clear();\n        });\n\n        this._camera = new Camera(this, {\n            id: \"default.camera\",\n            dontClear: true // Never destroy this component with Scene#clear();\n        });\n\n        // Default lights\n\n        new DirLight(this, {\n            dir: [0.8, -0.6, -0.8],\n            color: [1.0, 1.0, 1.0],\n            intensity: 1.0,\n            space: \"view\"\n        });\n\n        new DirLight(this, {\n            dir: [-0.8, -0.4, -0.4],\n            color: [1.0, 1.0, 1.0],\n            intensity: 1.0,\n            space: \"view\"\n        });\n\n        new DirLight(this, {\n            dir: [0.2, -0.8, 0.8],\n            color: [0.6, 0.6, 0.6],\n            intensity: 1.0,\n            space: \"view\"\n        });\n\n        // Plug global components into renderer\n\n        const viewport = this._viewport;\n        const renderer = this._renderer;\n        const camera = this._camera;\n\n        camera.on(\"dirty\", function () {\n            renderer.imageDirty();\n        });\n\n        this.ticksPerRender = cfg.ticksPerRender;\n        this.passes = cfg.passes;\n        this.clearEachPass = cfg.clearEachPass;\n        this.gammaInput = cfg.gammaInput;\n        this.gammaOutput = cfg.gammaOutput;\n        this.gammaFactor = cfg.gammaFactor;\n    }\n\n    _initDefaults() {\n\n        // Call this Scene's property accessors to lazy-init their properties\n\n        let dummy; // Keeps Codacy happy\n\n        dummy = this.geometry;\n        dummy = this.material;\n        dummy = this.ghostMaterial;\n        dummy = this.outlineMaterial;\n    }\n\n    _addComponent(component) {\n        if (component.id) { // Manual ID\n            if (this.components[component.id]) {\n                this.error(\"Component \" + utils.inQuotes(component.id) + \" already exists in Scene - ignoring ID, will randomly-generate instead\");\n                component.id = null;\n            }\n        }\n        if (!component.id) { // Auto ID\n            if (window.nextID === undefined) {\n                window.nextID = 0;\n            }\n            //component.id = math.createUUID();\n            component.id = \"_\" + window.nextID++;\n            while (this.components[component.id]) {\n                component.id = math.createUUID();\n            }\n        }\n        this.components[component.id] = component;\n\n        // Register for class type\n        const type = component.type;\n        let types = this.types[component.type];\n        if (!types) {\n            types = this.types[type] = {};\n        }\n        types[component.id] = component;\n\n        if (component.compile) {\n            this._compilables[component.id] = component;\n        }\n        if (component.isDrawable) {\n            this._renderer.addDrawable(component.id, component);\n            this._collidables[component.id] = component;\n        }\n        if (component.isModel) {\n            this.models[component.id] = component;\n        }\n    }\n\n    _removeComponent(component) {\n        var id = component.id;\n        var type = component.type;\n        delete this.components[id];\n        // Unregister for types\n        const types = this.types[type];\n        if (types) {\n            delete types[id];\n            if (utils.isEmptyObject(types)) {\n                delete this.types[type];\n            }\n        }\n        if (component.compile) {\n            delete this._compilables[component.id];\n        }\n        if (component.isDrawable) {\n            this._renderer.removeDrawable(component.id);\n            delete this._collidables[component.id];\n        }\n        if (component.isModel) {\n            delete this.models[component.id];\n        }\n    }\n\n    // Methods below are called by various component types to register themselves on their\n    // Scene. Violates Hollywood Principle, where we could just filter on type in _addComponent,\n    // but this is faster than checking the type of each component in such a filter.\n\n    _clipCreated(clip) {\n        this.clips[clip.id] = clip;\n        this.scene._clipsState.addClip(clip._state);\n        this._needRecompile = true;\n    }\n\n    _lightCreated(light) {\n        this.lights[light.id] = light;\n        this.scene._lightsState.addLight(light._state);\n        this._needRecompile = true;\n    }\n\n    _lightMapCreated(lightMap) {\n        this.lightMaps[lightMap.id] = lightMap;\n        this.scene._lightsState.addLightMap(lightMap._state);\n        this._needRecompile = true;\n    }\n\n    _reflectionMapCreated(reflectionMap) {\n        this.reflectionMaps[reflectionMap.id] = reflectionMap;\n        this.scene._lightsState.addReflectionMap(reflectionMap._state);\n        this._needRecompile = true;\n    }\n\n    _modelCreated(model) {\n        this.models[model.id] = model;\n        stats.components.models++;\n    }\n\n    _clipDestroyed(clip) {\n        delete this.clips[clip.id];\n        this.scene._clipsState.removeClip(clip._state);\n        this._needRecompile = true;\n    }\n\n    _lightDestroyed(light) {\n        delete this.lights[light.id];\n        this.scene._lightsState.removeLight(light._state);\n        this._needRecompile = true;\n    }\n\n    _lightMapDestroyed(lightMap) {\n        delete this.lightMaps[lightMap.id];\n        this.scene._lightsState.removeLightMap(lightMap._state);\n        this._needRecompile = true;\n    }\n\n    _reflectionMapDestroyed(reflectionMap) {\n        delete this.reflectionMaps[reflectionMap.id];\n        this.scene._lightsState.removeReflectionMap(reflectionMap._state);\n        this._needRecompile = true;\n    }\n\n    _registerObject(component) {\n        this.objects[component.objectId] = component;\n        this._objectIds = null; // Lazy regenerate\n    }\n\n    _deregisterObject(component) {\n        delete this.objects[component.objectId];\n        this._objectIds = null; // Lazy regenerate\n    }\n\n    _objectVisibilityUpdated(component, visible) {\n        if (visible) {\n            this.visibleObjects[component.id] = component;\n        } else {\n            delete this.visibleObjects[component.id];\n        }\n        this._visibleObjectIds = null; // Lazy regenerate\n    }\n\n    _objectGhostedUpdated(component, ghosted) {\n        if (ghosted) {\n            this.ghostedObjects[component.id] = component;\n        } else {\n            delete this.ghostedObjects[component.id];\n        }\n        this._ghostedObjectIds = null; // Lazy regenerate\n    }\n\n    _objectHighlightedUpdated(component, highlighted) {\n        if (highlighted) {\n            this.highlightedObjects[component.id] = component;\n        } else {\n            delete this.highlightedObjects[component.id];\n        }\n        this._highlightedObjectIds = null; // Lazy regenerate\n    }\n\n    _objectSelectedUpdated(component, selected) {\n        if (selected) {\n            this.selectedObjects[component.id] = component;\n        } else {\n            delete this.selectedObjects[component.id];\n        }\n        this._selectedObjectIds = null; // Lazy regenerate\n    }\n\n    _webglContextLost() {\n        //  this.loading++;\n        this.canvas.spinner.processes++;\n        for (const id in this.components) {\n            if (this.components.hasOwnProperty(id)) {\n                const component = this.components[id];\n                if (component._webglContextLost) {\n                    component._webglContextLost();\n                }\n            }\n        }\n        this._renderer.webglContextLost();\n    }\n\n    _webglContextRestored() {\n        const gl = this.canvas.gl;\n        for (const id in this.components) {\n            if (this.components.hasOwnProperty(id)) {\n                const component = this.components[id];\n                if (component._webglContextRestored) {\n                    component._webglContextRestored(gl);\n                }\n            }\n        }\n        this._renderer.webglContextRestored(gl);\n        //this.loading--;\n        this.canvas.spinner.processes--;\n    }\n\n    /**\n     * Renders a single frame of this Scene.\n     *\n     * The Scene will periodically render itself after any updates, but you can call this method to force a render\n     * if required. This method is typically used when we want to synchronously take a snapshot of the canvas and\n     * need everything rendered right at that moment.\n     *\n     * @method render\n     * @param {Boolean} [forceRender=false] Forces a render when true, otherwise only renders if something has changed in this Scene\n     * since the last render.\n     */\n    render(forceRender) {\n\n        const renderEvent = {\n            sceneId: null,\n            pass: 0\n        };\n\n\n        if (this._needRecompile) {\n            this._recompile();\n            this._needRecompile = false;\n        }\n\n        if (this.loading > 0 || this.canvas.spinner.processes > 0) {\n            this.canvas.canvas.style.opacity = 0.0;\n            return;\n        }\n\n        let opacity = Number.parseFloat(this.canvas.canvas.style.opacity);\n        if (opacity < 1.0) {\n            opacity += 0.1;\n            this.canvas.canvas.style.opacity = opacity;\n        }\n\n        renderEvent.sceneId = this.id;\n\n        const passes = this._passes;\n        const clearEachPass = this._clearEachPass;\n        let pass;\n        let clear;\n\n        for (pass = 0; pass < passes; pass++) {\n\n            renderEvent.pass = pass;\n\n            /**\n             * Fired when about to render a frame for a Scene.\n             *\n             * @event rendering\n             * @param {String} sceneID The ID of this Scene.\n             * @param {Number} pass Index of the pass we are about to render (see {@link Scene/passes}).\n             */\n            this.fire(\"rendering\", renderEvent, true);\n\n            clear = clearEachPass || (pass === 0);\n\n            this._renderer.render({pass: pass, clear: clear, force: forceRender});\n\n            /**\n             * Fired when we have just rendered a frame for a Scene.\n             *\n             * @event rendering\n             * @param {String} sceneID The ID of this Scene.\n             * @param {Number} pass Index of the pass we rendered (see {@link Scene/passes}).\n             */\n            this.fire(\"rendered\", renderEvent, true);\n        }\n\n        this._saveAmbientColor();\n    }\n\n    _recompile() {\n        for (const id in this._compilables) {\n            if (this._compilables.hasOwnProperty(id)) {\n                this._compilables[id].compile();\n            }\n        }\n    }\n\n    _saveAmbientColor() {\n        const canvas = this.canvas;\n        if (!canvas.transparent && !canvas.backgroundImage && !canvas.backgroundColor) {\n            const ambientColor = this._lightsState.getAmbientColor();\n            if (!this._lastAmbientColor ||\n                this._lastAmbientColor[0] !== ambientColor[0] ||\n                this._lastAmbientColor[1] !== ambientColor[1] ||\n                this._lastAmbientColor[2] !== ambientColor[2] ||\n                this._lastAmbientColor[3] !== ambientColor[3]) {\n                canvas.backgroundColor = ambientColor;\n                if (!this._lastAmbientColor) {\n                    this._lastAmbientColor = math.vec4([0, 0, 0, 1]);\n                }\n                this._lastAmbientColor.set(ambientColor);\n            }\n        } else {\n            this._lastAmbientColor = null;\n        }\n    }\n\n    /**\n     Convenience array of IDs in {@link Scene/objects}.\n     @property objectIds\n     @final\n     @type {Array of String}\n     */\n    get objectIds() {\n        if (!this._objectIds) {\n            this._objectIds = Object.keys(this.objects);\n        }\n        return this._objectIds;\n    }\n\n    /**\n     Convenience array of IDs in {@link Scene/visibleObjects}.\n     @property visibleObjectIds\n     @final\n     @type {Array of String}\n     */\n    get visibleObjectIds() {\n        if (!this._visibleObjectIds) {\n            this._visibleObjectIds = Object.keys(this.visibleObjects);\n        }\n        return this._visibleObjectIds;\n    }\n\n    /**\n     Convenience array of IDs in {@link Scene/ghostedObjects}.\n     @property ghostedObjectIds\n     @final\n     @type {Array of String}\n     */\n    get ghostedObjectIds() {\n        if (!this._ghostedObjectIds) {\n            this._ghostedObjectIds = Object.keys(this.ghostedObjects);\n        }\n        return this._ghostedObjectIds;\n    }\n\n    /**\n     Convenience array of IDs in {@link Scene/highlightedObjects}.\n     @property highlightedObjectIds\n     @final\n     @type {Array of String}\n     */\n    get highlightedObjectIds() {\n        if (!this._highlightedObjectIds) {\n            this._highlightedObjectIds = Object.keys(this.highlightedObjects);\n        }\n        return this._highlightedObjectIds;\n    }\n\n    /**\n     Convenience array of IDs in {@link Scene/selectedObjects}.\n     @property selectedObjectIds\n     @final\n     @type {Array of String}\n     */\n    get selectedObjectIds() {\n        if (!this._selectedObjectIds) {\n            this._selectedObjectIds = Object.keys(this.selectedObjects);\n        }\n        return this._selectedObjectIds;\n    }\n\n    /**\n     The number of {@link Scene/tick} that happen between each render or this Scene.\n\n     @property ticksPerRender\n     @default 1\n     @type Number\n     */\n    set ticksPerRender(value) {\n        if (value === undefined || value === null) {\n            value = 1;\n        } else if (!utils.isNumeric(value) || value <= 0) {\n            this.error(\"Unsupported value for 'ticksPerRender': '\" + value +\n                \"' - should be an integer greater than zero.\");\n            value = 1;\n        }\n        if (value === this._ticksPerRender) {\n            return;\n        }\n        this._ticksPerRender = value;\n    }\n\n    get ticksPerRender() {\n        return this._ticksPerRender;\n    }\n\n    /**\n     The number of times this Scene renders per frame.\n\n     @property passes\n     @default 1\n     @type Number\n     */\n    set passes(value) {\n        if (value === undefined || value === null) {\n            value = 1;\n        } else if (!utils.isNumeric(value) || value <= 0) {\n            this.error(\"Unsupported value for 'passes': '\" + value +\n                \"' - should be an integer greater than zero.\");\n            value = 1;\n        }\n        if (value === this._passes) {\n            return;\n        }\n        this._passes = value;\n        this.glRedraw();\n    }\n\n    get passes() {\n        return this._passes;\n    }\n\n    /**\n     When doing multiple passes per frame, specifies whether to clear the\n     canvas before each pass (true) or just before the first pass (false).\n\n     @property clearEachPass\n     @default false\n     @type {Boolean}\n     */\n    set clearEachPass(value) {\n        value = !!value;\n        if (value === this._clearEachPass) {\n            return;\n        }\n        this._clearEachPass = value;\n        this.glRedraw();\n    }\n\n    get clearEachPass() {\n        return this._clearEachPass;\n    }\n\n    /**\n     When true, expects all textures and colors are premultiplied gamma.\n\n     @property gammaInput\n     @default false\n     @type {Boolean}\n     */\n    set gammaInput(value) {\n        value = value !== false;\n        if (value === this._renderer.gammaInput) {\n            return;\n        }\n        this._renderer.gammaInput = value;\n        this._needRecompile = true;\n    }\n\n    get gammaInput() {\n        return this._renderer.gammaInput;\n    }\n\n    /**\n     Whether or not to render pixels with pre-multiplied gama.\n\n     @property gammaOutput\n     @default true\n     @type Boolean\n     */\n    set gammaOutput(value) {\n        value = value !== false;\n        if (value === this._renderer.gammaOutput) {\n            return;\n        }\n        this._renderer.gammaOutput = value;\n        this._needRecompile = true;\n    }\n\n    get gammaOutput() {\n        return this._renderer.gammaOutput;\n    }\n\n    /**\n     The gamma factor to use when {@link Scene/property:gammaOutput} is set true.\n\n     @property gammaOutput\n     @default 1.0\n     @type Number\n     */\n    set gammaFactor(value) {\n        value = (value === undefined || value === null) ? 2.2 : value;\n        if (value === this._renderer.gammaFactor) {\n            return;\n        }\n        this._renderer.gammaFactor = value;\n        this.glRedraw();\n    }\n\n    get gammaFactor() {\n        return this._renderer.gammaFactor;\n    }\n\n    /**\n     The default geometry for this Scene, which is a {@link BoxGeometry\"}}BoxGeometry{{/crossLink}}.\n\n     This {@link BoxGeometry\"}}BoxGeometry{{/crossLink}} has an {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.geometry\".\n\n     {@link Mesh\"}}Meshes{{/crossLink}} in this Scene are attached to this\n     {@link Geometry}}Geometry{{/crossLink}} by default.\n     @property geometry\n     @final\n     @type BoxGeometry\n     */\n    get geometry() {\n        return this.components[\"default.geometry\"] ||\n            new BoxGeometry(this, {\n                id: \"default.geometry\",\n                dontClear: true\n            });\n    }\n\n    /**\n     The default drawing material for this Scene, which is a {@link PhongMaterial\"}}PhongMaterial{{/crossLink}}.\n\n     This {@link PhongMaterial\"}}PhongMaterial{{/crossLink}} has\n     an {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.material\", with all\n     other properties initialised to their default values.\n\n     {@link Mesh\"}}Meshes{{/crossLink}} in this Scene are attached to this\n     {@link PhongMaterial\"}}PhongMaterial{{/crossLink}} by default.\n     @property material\n     @final\n     @type PhongMaterial\n     */\n    get material() {\n        return this.components[\"default.material\"] || new PhongMaterial(this, {\n            id: \"default.material\",\n            emissive: [0.4, 0.4, 0.4], // Visible by default on geometry without normals\n            dontClear: true\n        });\n    }\n\n    /**\n     The Scene's default {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are ghosted.\n\n     This {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} has\n     an {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.ghostMaterial\", with all\n     other properties initialised to their default values.\n\n     {@link Mesh\"}}Meshes{{/crossLink}} in this Scene are attached to this\n     {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} by default.\n     @property ghostMaterial\n     @final\n     @type EmphasisMaterial\n     */\n    get ghostMaterial() {\n        return this.components[\"default.ghostMaterial\"] || new EmphasisMaterial(this, {\n            id: \"default.ghostMaterial\",\n            preset: \"sepia\",\n            dontClear: true\n        });\n    }\n\n    /**\n     The Scene's default {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are highlighted.\n\n     This {@link HighlightMaterial\"}}HighlightMaterial{{/crossLink}} has\n     an {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.highlightMaterial\", with all\n     other properties initialised to their default values.\n\n     {@link Mesh\"}}Meshes{{/crossLink}} in this Scene are attached to this\n     {@link HighlightMaterial\"}}HighlightMaterial{{/crossLink}} by default.\n     @property highlightMaterial\n     @final\n     @type HighlightMaterial\n     */\n    get highlightMaterial() {\n        return this.components[\"default.highlightMaterial\"] || new EmphasisMaterial(this, {\n            id: \"default.highlightMaterial\",\n            preset: \"yellowHighlight\",\n            dontClear: true\n        });\n    }\n\n    /**\n     The Scene's default {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are selected.\n\n     This {@link SelectedMaterial\"}}SelectedMaterial{{/crossLink}} has\n     an {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.selectedMaterial\", with all\n     other properties initialised to their default values.\n\n     {@link Mesh\"}}Meshes{{/crossLink}} in this Scene are attached to this\n     {@link SelectedMaterial\"}}SelectedMaterial{{/crossLink}} by default.\n     @property selectedMaterial\n     @final\n     @type SelectedMaterial\n     */\n    get selectedMaterial() {\n        return this.components[\"default.selectedMaterial\"] || new EmphasisMaterial(this, {\n            id: \"default.selectedMaterial\",\n            preset: \"greenSelected\",\n            dontClear: true\n        });\n    }\n\n    /**\n     The Scene's default {@link EdgeMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when edges are emphasized.\n\n     This {@link EdgeMaterial\"}}EdgeMaterial{{/crossLink}} has\n     an {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.edgeMaterial\", with all\n     other properties initialised to their default values.\n\n     {@link Mesh\"}}Meshes{{/crossLink}} in this Scene are attached to this\n     {@link EdgeMaterial\"}}EdgeMaterial{{/crossLink}} by default.\n     @property edgeMaterial\n     @final\n     @type EdgeMaterial\n     */\n    get edgeMaterial() {\n        return this.components[\"default.edgeMaterial\"] || new EdgeMaterial(this, {\n            id: \"default.edgeMaterial\",\n            preset: \"default\",\n            edgeColor: [0.0, 0.0, 0.0],\n            edgeAlpha: 1.0,\n            edgeWidth: 1,\n            dontClear: true\n        });\n    }\n\n    /**\n     The Scene's default {@link OutlineMaterial\"}}OutlineMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are outlined.\n\n     This {@link OutlineMaterial\"}}OutlineMaterial{{/crossLink}} has\n     an {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.outlineMaterial\", with all\n     other properties initialised to their default values.\n\n     {@link Mesh\"}}Meshes{{/crossLink}} in this Scene are attached to this\n     {@link OutlineMaterial\"}}OutlineMaterial{{/crossLink}} by default.\n     @property outlineMaterial\n     @final\n     @type OutlineMaterial\n     */\n    get outlineMaterial() {\n        return this.components[\"default.outlineMaterial\"] || new OutlineMaterial(this, {\n            id: \"default.outlineMaterial\",\n            dontClear: true\n        });\n    }\n\n    /**\n     The {@link Viewport} belonging to this Scene.\n\n     @property viewport\n     @final\n     @type Viewport\n     */\n    get viewport() {\n        return this._viewport;\n    }\n\n    /**\n     The {@link Camera} belonging to this Scene.\n\n     @property camera\n     @final\n     @type Camera\n     */\n    get camera() {\n        return this._camera;\n    }\n\n    /**\n     World-space 3D center of this Scene.\n\n     @property center\n     @final\n     @type {Float32Array}\n     */\n    get center() {\n        if (this._aabbDirty || !this._center) {\n            if (!this._center || !this._center) {\n                this._center = math.vec3();\n            }\n            const aabb = this.aabb;\n            this._center[0] = (aabb[0] + aabb[3]) / 2;\n            this._center[1] = (aabb[1] + aabb[4]) / 2;\n            this._center[2] = (aabb[2] + aabb[5]) / 2;\n        }\n        return this._center;\n    }\n\n    /**\n     World-space axis-aligned 3D boundary (AABB) of this Scene.\n\n     The AABB is represented by a six-element Float32Array containing the min/max extents of the\n     axis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.\n\n     @property aabb\n     @final\n     @type {Float32Array}\n     */\n    get aabb() {\n        if (this._aabbDirty) {\n            if (!this._aabb) {\n                this._aabb = math.AABB3();\n            }\n            let xmin = math.MAX_DOUBLE;\n            let ymin = math.MAX_DOUBLE;\n            let zmin = math.MAX_DOUBLE;\n            let xmax = -math.MAX_DOUBLE;\n            let ymax = -math.MAX_DOUBLE;\n            let zmax = -math.MAX_DOUBLE;\n            let aabb;\n            const collidables = this._collidables;\n            let collidable;\n            for (const collidableId in collidables) {\n                if (collidables.hasOwnProperty(collidableId)) {\n                    collidable = collidables[collidableId];\n                    if (collidable.collidable === false) {\n                        continue;\n                    }\n                    aabb = collidable.aabb;\n                    if (aabb[0] < xmin) {\n                        xmin = aabb[0];\n                    }\n                    if (aabb[1] < ymin) {\n                        ymin = aabb[1];\n                    }\n                    if (aabb[2] < zmin) {\n                        zmin = aabb[2];\n                    }\n                    if (aabb[3] > xmax) {\n                        xmax = aabb[3];\n                    }\n                    if (aabb[4] > ymax) {\n                        ymax = aabb[4];\n                    }\n                    if (aabb[5] > zmax) {\n                        zmax = aabb[5];\n                    }\n                }\n            }\n            this._aabb[0] = xmin;\n            this._aabb[1] = ymin;\n            this._aabb[2] = zmin;\n            this._aabb[3] = xmax;\n            this._aabb[4] = ymax;\n            this._aabb[5] = zmax;\n            this._aabbDirty = false;\n        }\n        return this._aabb;\n    }\n\n    _setBoundaryDirty() {\n        //if (!this._aabbDirty) {\n        this._aabbDirty = true;\n        this.fire(\"boundary\");\n        // }\n    }\n\n    /**\n     Attempts to pick an {@link Mesh\"}}Mesh{{/crossLink}} in this Scene.\n\n     Ignores {@link Mesh\"}}Meshes{{/crossLink}} with {@link Mesh/pickable:property\"}}pickable{{/crossLink}}\n     set *false*.\n\n     When a {@link Mesh} is picked, fires a \"pick\" event on the {@link Mesh}\n     with the pick result as parameters.\n\n     Picking the {@link Mesh} at the given canvas coordinates:\n\n     ````javascript\n     var pickResult = scene.pick({\n              canvasPos: [23, 131]\n           });\n\n     if (pickResult) { // Picked a Mesh\n              var mesh = pickResult.mesh;\n          }\n     ````\n\n     **Usage:**\n\n     Picking, with a ray cast through the canvas, hits a {@link Mesh}:\n\n     ````javascript\n     var pickResult = scene.pick({\n              pickSurface: true,\n              canvasPos: [23, 131]\n           });\n\n     if (pickResult) { // Picked a Mesh\n\n              var mesh = pickResult.mesh;\n\n              // These properties are only on the pick result when we do a ray-pick:\n\n              var primitive = pickResult.primitive; // Type of primitive that was picked, usually \"triangles\"\n              var primIndex = pickResult.primIndex; // Position of triangle's first index in the picked Mesh's Geometry's indices array\n              var indices = pickResult.indices; // UInt32Array containing the triangle's vertex indices\n              var localPos = pickResult.localPos; // Float32Array containing the picked Local-space position on the triangle\n              var worldPos = pickResult.worldPos; // Float32Array containing the picked World-space position on the triangle\n              var viewPos = pickResult.viewPos; // Float32Array containing the picked View-space position on the triangle\n              var bary = pickResult.bary; // Float32Array containing the picked barycentric position within the triangle\n              var normal = pickResult.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle\n              var uv = pickResult.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle\n          }\n     ````\n\n     Picking the {@link Mesh} that intersects an arbitrarily-aligned World-space ray:\n\n     ````javascript\n     var pickResult = scene.pick({\n              pickSurface: true,   // Picking with arbitrarily-positioned ray\n              origin: [0,0,-5],    // Ray origin\n              direction: [0,0,1]   // Ray direction\n          });\n\n     if (pickResult) { // Picked a Mesh with the ray\n\n              var mesh = pickResult.mesh;\n\n              var primitive = pickResult.primitive; // Type of primitive that was picked, usually \"triangles\"\n              var primIndex = pickResult.primIndex; // Position of triangle's first index in the picked Mesh's Geometry's indices array\n              var indices = pickResult.indices; // UInt32Array containing the triangle's vertex indices\n              var localPos = pickResult.localPos; // Float32Array containing the picked Local-space position on the triangle\n              var worldPos = pickResult.worldPos; // Float32Array containing the picked World-space position on the triangle\n              var viewPos = pickResult.viewPos; // Float32Array containing the picked View-space position on the triangle\n              var bary = pickResult.bary; // Float32Array containing the picked barycentric position within the triangle\n              var normal = pickResult.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle\n              var uv = pickResult.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle\n              var origin = pickResult.origin; // Float32Array containing the World-space ray origin\n              var direction = pickResult.direction; // Float32Array containing the World-space ray direction\n          }\n     ````\n     @method pick\n\n     @param {*} params Picking parameters.\n     @param {Boolean} [params.pickSurface=false] Whether to find the picked position on the surface of the Mesh.\n     @param {Float32Array} [params.canvasPos] Canvas-space coordinates. When ray-picking, this will override the\n     **origin** and ** direction** parameters and will cause the ray to be fired through the canvas at this position,\n     directly along the negative View-space Z-axis.\n     @param {Float32Array} [params.origin] World-space ray origin when ray-picking. Ignored when canvasPos given.\n     @param {Float32Array} [params.direction] World-space ray direction when ray-picking. Also indicates the length of the ray. Ignored when canvasPos given.\n     @param {Array} [params.includeMeshes] IDs of {@link Mesh\"}}Meshes{{/crossLink}} to restrict picking to. When given, ignores {@link Mesh\"}}Meshes{{/crossLink}} whose IDs are not in this list.\n     @param {Array} [params.excludeMeshes] IDs of {@link Mesh\"}}Meshes{{/crossLink}} to ignore. When given, will pick *through* these {@link Mesh\"}}Meshes{{/crossLink}}, as if they were not there.\n     @param {PickResult} [pickResult] Holds the results of the pick attempt. Will use the Scene's singleton PickResult if you don't supply your own.\n     @returns {PickResult} Holds results of the pick attempt, returned when an {@link Mesh} is picked, else null. See method comments for description.\n     */\n    pick(params, pickResult) {\n\n        if (this.canvas.boundary[2] === 0 || this.canvas.boundary[3] === 0) {\n            this.error(\"Picking not allowed while canvas has zero width or height\");\n            return null;\n        }\n\n        params = params || {};\n\n        params.pickSurface = params.pickSurface || params.rayPick; // Backwards compatibility\n\n        if (!params.canvasPos && (!params.origin || !params.direction)) {\n            this.warn(\"picking without canvasPos or ray origin and direction\");\n        }\n\n        const includeMeshes = params.includeMeshes || params.include; // Backwards compat\n        if (includeMeshes) {\n            params.includeMeshIds = getMeshIDMap(this, includeMeshes);\n        }\n\n        const excludeMeshes = params.excludeMeshes || params.exclude; // Backwards compat\n        if (excludeMeshes) {\n            params.excludeMeshIds = getMeshIDMap(this, excludeMeshes);\n        }\n\n        if (pickResult = this._renderer.pick(params, pickResult)) {\n            utils.apply(params, pickResult);\n            pickResult.object = pickResult.mesh; // Backwards compat\n            if (params.pickSurface) {\n                pickResult.mesh.getPickResult(pickResult);\n            }\n            pickResult.mesh.fire(\"picked\", pickResult); // TODO: BigModelMesh doeosn;t fire events...\n            return pickResult;\n        }\n    }\n\n    /**\n     Returns the collective axis-aligned bounding box of the {@link Object}s, specified by their IDs or objectIds.\n\n     When no arguments are given, returns the total boundary of all objects in the scene.\n\n     Only {@link Mesh\"}}Meshes{{/crossLink}} with {@link Mesh/collidable:property\"}}collidable{{/crossLink}}\n     set ````true```` are included in the boundary.\n\n     # Usage\n\n     ````JavaScript\n     scene.getAABB(); // Gets collective boundary of all objects in the scene\n     scene.getAABB(\"saw\"); // Gets collective boundary of all objects in saw model\n     scene.getAABB([\"saw\", \"gearbox\"]); // Gets collective boundary of all objects in saw and gearbox models\n     scene.getAABB(\"saw#0.1\"); // Get boundary of an object in the saw model\n     scene.getAABB([\"saw#0.1\", \"saw#0.2\"]); // Get collective boundary of two objects in saw model\n     scene.getAABB([\"saw#0.1\", \"surface\", \"support\"]); // Get collective boundary an object, and all objects of the given two entity classes.\n     ````\n\n     @method getAABB\n     @param {String|String[]} target {Array} Array of  {@link Object} IDs of objectIds.\n     @returns {[Number, Number, Number, Number, Number, Number]} An axis-aligned World-space bounding box, given as elements ````[xmin, ymin, zmin, xmax, ymax, zmax]````.\n     */\n    getAABB(target) {\n        if (target === undefined) {\n            return this.aabb;\n        }\n        if (utils.isString(target)) {\n            const component = this.components[target];\n            if (component && component.aabb) { // A Component subclass with an AABB\n                return component.aabb;\n            }\n            target = [target]; // Must be an entity type\n        }\n        if (target.length === 0) {\n            return this.aabb;\n        }\n        let xmin = 100000;\n        let ymin = 100000;\n        let zmin = 100000;\n        let xmax = -100000;\n        let ymax = -100000;\n        let zmax = -100000;\n        let valid;\n        this.withComponents(target, object => {\n                const aabb = object.aabb;\n                if (aabb[0] < xmin) {\n                    xmin = aabb[0];\n                }\n                if (aabb[1] < ymin) {\n                    ymin = aabb[1];\n                }\n                if (aabb[2] < zmin) {\n                    zmin = aabb[2];\n                }\n                if (aabb[3] > xmax) {\n                    xmax = aabb[3];\n                }\n                if (aabb[4] > ymax) {\n                    ymax = aabb[4];\n                }\n                if (aabb[5] > zmax) {\n                    zmax = aabb[5];\n                }\n                valid = true;\n            }\n        );\n        if (valid) {\n            const aabb2 = math.AABB3();\n            aabb2[0] = xmin;\n            aabb2[1] = ymin;\n            aabb2[2] = zmin;\n            aabb2[3] = xmax;\n            aabb2[4] = ymax;\n            aabb2[5] = zmax;\n            return aabb2;\n        } else {\n            return this.aabb; // Scene AABB\n        }\n    }\n\n    /**\n     Resets this Scene to its default state.\n\n     References to any components in this Scene will become invalid.\n\n     @method clear\n     */\n    clear() {\n        var component;\n        for (const id in this.components) {\n            if (this.components.hasOwnProperty(id)) {\n                // Each component fires \"destroyed\" as it is destroyed,\n                // which this Scene handles by removing the component\n                component = this.components[id];\n                if (!component._dontClear) { // Don't destroy components like Camera, Input, Viewport etc.\n                    component.destroy();\n                }\n            }\n        }\n    }\n\n    /**\n     Convenience method that destroys all light sources.\n\n     Removes all {@link AmbientLight\"}}AmbientLights{{/crossLink}}, {@link PointLight\"}}PointLights{{/crossLink}},\n     {@link DirLight\"}}DirLights{{/crossLink}} and {@link SpotLight\"}}SpotLights{{/crossLink}}.\n\n     @method clearLights\n     */\n    clearLights() {\n        const ids = Object.keys(this.lights);\n        for (let i = 0, len = ids.length; i < len; i++) {\n            this.lights[ids[i]].destroy();\n        }\n    }\n\n    /**\n     Convenience method that destroys all {@link Clip\"}}Clips{{/crossLink}}.\n\n     @method clearClips\n     */\n    clearClips() {\n        const ids = Object.keys(this.clips);\n        for (let i = 0, len = ids.length; i < len; i++) {\n            this.clips[ids[i]].destroy();\n        }\n    }\n\n    /**\n     Shows or hides a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.\n\n     Each Object indicates its visibility status in its {@link Object/visibility} property.\n\n     Each visible Object is registered in the {@link Scene}'s\n     {@link Scene/visibleObjects} map while its {@link Object/objectId}\n     is assigned a value.\n\n     @method setVisible\n     @param ids {Array} Array of  {@link Object} IDs, GUIDs or entity types.\n     @param visible {Boolean} The new visibility state.\n     @returns {Boolean} True if any {@link Object}s changed visibility, else false if all updates were redundant and not applied.\n     */\n    setVisible(ids, visible) {\n        return this.withComponents(ids, object => {\n            const changed = (object.visible !== visible);\n            object.visible = visible;\n            return changed;\n        });\n    }\n\n    /**\n     Culls or unculls a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.\n\n     Each Object indicates its culled status in its {@link Object/visibility} property.\n\n     @method setVisible\n     @param ids {Array} Array of  {@link Object} IDs, GUIDs or entity types.\n     @param culled {Boolean} The new cull state.\n     @returns {Boolean} True if any {@link Object}s changed culled state, else false if all updates were redundant and not applied.\n     */\n    setCulled(ids, culled) {\n        return this.withComponents(ids, object => {\n            const changed = (object.culled !== culled);\n            object.culled = culled;\n            return changed;\n        });\n    }\n\n    /**\n     Selects or de-selects a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.\n\n     Each Object indicates its selected status in its {@link Object/selected} property.\n\n     Each selected Object is registered in the {@link Scene}'s\n     {@link Scene/selectedObjects} map while its {@link Object/objectId}\n     is assigned a value.\n\n     @method setSelected\n     @param ids {Array} Array of  {@link Object} IDs, GUIDs or entity types.\n     @param selected {Boolean} Whether to select or deselect.\n     @returns {Boolean} True if any {@link Object}s changed selection state, else false if all updates were redundant and not applied.\n     */\n    setSelected(ids, selected) {\n        return this.withComponents(ids, object => {\n            const changed = (object.selected !== selected);\n            object.selected = selected;\n            return changed;\n        });\n    }\n\n    /**\n     Highlights or de-highlights a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.\n\n     Each Object indicates its highlight status in its {@link Object/highlighted} property.\n\n     Each highlighted Object is registered in the {@link Scene}'s\n     {@link Scene/highlightedObjects} map while its {@link Object/objectId}\n     is assigned a value.\n\n     @method setHighlighted\n     @param ids {Array} Array of  {@link Object} IDs, GUIDs or entity types.\n     @param highlighted {Boolean} Whether to highlight or un-highlight.\n     @returns {Boolean} True if any {@link Object}s changed highlighted state, else false if all updates were redundant and not applied.\n     */\n    setHighlighted(ids, highlighted) {\n        return this.withComponents(ids, object => {\n            const changed = (object.highlighted !== highlighted);\n            object.highlighted = highlighted;\n            return changed;\n        });\n    }\n\n    /**\n     Ghosts or un-ghosts a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.\n\n     Each Object indicates its ghosted status in its {@link Object/ghosted} property.\n\n     Each ghosted Object is registered in the {@link Scene}'s\n     {@link Scene/ghostedObjects} map when its {@link Object/objectId}\n     is assigned a value.\n\n     @method setGhosted\n     @param ids {Array} Array of  {@link Object} IDs, GUIDs or entity types.\n     @param ghosted {Float32Array} Whether to ghost or un-ghost.\n     @returns {Boolean} True if any {@link Object}s changed ghosted state, else false if all updates were redundant and not applied.\n     */\n    setGhosted(ids, ghosted) {\n        return this.withComponents(ids, object => {\n            const changed = (object.ghosted !== ghosted);\n            object.ghosted = ghosted;\n            return changed;\n        });\n    }\n\n    /**\n     Shows or hides wireeframe edges for batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.\n\n     @method setEdges\n     @param ids {Array} Array of  {@link Object} IDs, GUIDs or entity types.\n     @param edges {Float32Array} Whether to show or hide edges.\n     @returns {Boolean} True if any {@link Object}s changed edges state, else false if all updates were redundant and not applied.\n     */\n    setEdges(ids, edges) {\n        return this.withComponents(ids, object => {\n            const changed = (object.edges !== edges);\n            object.edges = edges;\n            return changed;\n        });\n    }\n\n    /**\n     Shows or hides an outline around a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.\n\n     Each Object indicates its outlined status in its {@link Object/outlined} property.\n\n     Each outlined Object is registered in the {@link Scene}'s\n     {@link Scene/outlinedObjects} map when its {@link Object/entityType}\n     is assigned a value.\n\n     @method setOutlined\n     @param ids {Array} Array of  {@link Object} IDs, GUIDs or entity types.\n     @param outlined {Float32Array} Whether to show or hide the outline.\n     @returns {Boolean} True if any {@link Object}s changed outlined state, else false if all updates were redundant and not applied.\n     */\n    setOutlined(ids, outlined) {\n        return this.withComponents(ids, object => {\n            const changed = (object.outlined !== outlined);\n            object.outlined = outlined;\n            return changed;\n        });\n    }\n\n    /**\n     Colorizes a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.\n\n     @method setColorize\n     @param ids {Array} Array of  {@link Object} IDs, GUIDs or entity types.\n     @param [colorize=(1,1,1)] Float32Array RGB colorize factors, multiplied by the rendered pixel colors.\n     */\n    setColorize(ids, colorize) {\n        return this.withComponents(ids, object => {\n            object.colorize = colorize;\n        });\n    }\n\n    /**\n     Updates opacities of a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.\n\n     @method setOpacity\n     @param ids {Array} Array of  {@link Object} IDs, GUIDs or entity types.\n     @param [opacity=1] Number Opacity factor in range ````[0..1]````, multiplies by the rendered pixel alphas.\n     */\n    setOpacity(ids, opacity) {\n        return this.withComponents(ids, object => {\n            object.opacity = opacity;\n        });\n    }\n\n    /**\n     Sets a batch of {@link Object}s pickable or unpickable, specified by their IDs, GUIDs and/or entity types.\n\n     Picking is done via calls to {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.\n\n     @method setPickable\n     @param ids {Array} Array of  {@link Object} IDs, GUIDs or entity types.\n     @param pickable {Float32Array} Whether to ghost or un-ghost.\n     @returns {Boolean} True if any {@link Object}s changed pickable state, else false if all updates were redundant and not applied.\n     */\n    setPickable(ids, pickable) {\n        return this.withComponents(ids, object => {\n            const changed = (object.pickable !== pickable);\n            object.pickable = pickable;\n            return changed;\n        });\n    }\n\n    /**\n     Iterates with a callback over {@link Component}s, specified by their IDs or objectIds.\n\n     @method withComponents\n     @param ids {String|Array} One or more {@link Component} IDs or objectIds.\n     @param callback {Function} The callback, which takes each object as its argument.\n     */\n    withComponents(ids, callback) {\n        if (utils.isString(ids)) {\n            ids = [ids];\n        }\n        let changed = false;\n        for (let i = 0, len = ids.length; i < len; i++) {\n            const id = ids[i];\n            let component = this.components[id];\n            if (component) {\n                changed = callback(component) || changed;\n            } else {\n                component = this.objects[id];\n                if (component) {\n                    changed = callback(component) || changed;\n                }\n            }\n        }\n        return changed;\n    }\n\n    destroy() {\n\n        super.destroy();\n\n        for (const id in this.components) {\n            if (this.components.hasOwnProperty(id)) {\n                this.components[id].destroy();\n            }\n        }\n\n        this.canvas.gl = null;\n\n        // Memory leak prevention\n        this.models = null;\n        this.components = null;\n        this.objects = null;\n        this.visibleObjects = null;\n        this.ghostedObjects = null;\n        this.highlightedObjects = null;\n        this.selectedObjects = null;\n        this.clips = null;\n        this.lights = null;\n        this.lightMaps = null;\n        this.reflectionMaps = null;\n        this._objectGUIDs = null;\n        this._objectIds = null;\n        this._visibleObjectIds = null;\n        this._ghostedObjectIds = null;\n        this._highlightedObjectIds = null;\n        this._selectedObjectIds = null;\n        this.types = null;\n        this.components = null;\n        this.canvas = null;\n        this._renderer = null;\n        this.input = null;\n        this._viewport = null;\n        this._camera = null;\n    }\n}\n\nexport {Scene};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/scene/Scene.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "function",
    "name": "getMeshIDMap",
    "memberof": "scene/Scene.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/Scene.js~getMeshIDMap",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/Scene.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "scene",
        "types": [
          "*"
        ]
      },
      {
        "name": "meshIds",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 50,
    "kind": "class",
    "name": "Scene",
    "memberof": "scene/Scene.js",
    "static": true,
    "longname": "scene/Scene.js~Scene",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/Scene.js",
    "importStyle": "{Scene}",
    "description": "The container for all 3D scene objects and state.\n\n* A {@link Viewer} has a single Scene.\n\n# Getting the {@link Viewer}'s Scene:\n\n````javascript\nvar scene = myViewer.scene;\n````\n\n# Creating and accessing components\n\nAs a brief introduction to creating Scene components, we'll create a {@link Mesh} that has a\n{@link TorusGeometry} and a {@link PhongMaterial}:\n\n````javascript\nvar teapotMesh = new Mesh(scene, {\n    id: \"myMesh\",                               // <<---------- ID automatically generated if not provided\n    geometry: new TorusGeometry(scene),\n    material: new PhongMaterial(scene, {\n        id: \"myMaterial\",\n        diffuse: [0.2, 0.2, 1.0]\n    })\n});\n\nteapotMesh.scene.camera.eye = [45, 45, 45];\n````\n\nFind components by ID in their Scene's {@link Scene/components} map:\n\n````javascript\nvar teapotMesh = scene.components[\"myMesh\"];\nteapotMesh.visible = false;\n\nvar teapotMaterial = scene.components[\"myMaterial\"];\nteapotMaterial.diffuse = [1,0,0]; // Change to red\n````\n\nA Scene also has a map of component instances for each {@link Component} subtype:\n\n````javascript\nvar meshes = scene.types[\"Mesh\"];\nvar teapotMesh = meshes[\"myMesh\"];\nteapotMesh.ghosted = true;\n\nvar phongMaterials = scene.types[\"PhongMaterial\"];\nvar teapotMaterial = phongMaterials[\"myMaterial\"];\nteapotMaterial.diffuse = [0,1,0]; // Change to green\n````\n\nSee {@link Object}, {@link Group} and {@link Model} for how to create and access more sophisticated content.\n\n# Controlling the camera\n\nUse the Scene's {@link Camera} to control the current viewpoint and projection:\n\n````javascript\nvar camera = myScene.camera;\n\ncamera.eye = [-10,0,0];\ncamera.look = [-10,0,0];\ncamera.up = [0,1,0];\n\ncamera.projection = \"perspective\";\ncamera.perspective.fov = 45;\n//...\n````\n\n# Managing the canvas, taking snapshots\n\nThe Scene's {@link Canvas} component provides various conveniences relevant to the WebGL canvas, such\nas getting getting snapshots, firing resize events etc:\n\n````javascript\nvar canvas = scene.canvas;\n\ncanvas.on(\"boundary\", function(boundary) {\n    //...\n});\n\nvar imageData = canvas.getSnapshot({\n    width: 500,\n    height: 500,\n    format: \"png\"\n});\n````\n\n# Picking\n\nUse {@link Scene#pick} to pick and raycast meshes.\n\nFor example, to pick a point on the surface of the closest mesh at the given canvas coordinates:\n\n````javascript\nvar hit = scene.pick({\n     pickSurface: true,\n     canvasPos: [23, 131]\n});\n\nif (hit) { // Picked a Mesh\n\n    var mesh = hit.mesh;\n\n    var primitive = hit.primitive; // Type of primitive that was picked, usually \"triangles\"\n    var primIndex = hit.primIndex; // Position of triangle's first index in the picked Mesh's Geometry's indices array\n    var indices = hit.indices; // UInt32Array containing the triangle's vertex indices\n    var localPos = hit.localPos; // Float32Array containing the picked Local-space position on the triangle\n    var worldPos = hit.worldPos; // Float32Array containing the picked World-space position on the triangle\n    var viewPos = hit.viewPos; // Float32Array containing the picked View-space position on the triangle\n    var bary = hit.bary; // Float32Array containing the picked barycentric position within the triangle\n    var normal = hit.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle\n    var uv = hit.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle\n}\n````\n\n# Pick masking\n\nWe can use {@link Scene#pick}'s ````includeMeshes```` and ````excludeMeshes````  options to mask which {@link Mesh}es we attempt to pick.\n\nThis is useful for picking <em>through</em> things, to pick only the Meshes of interest.\n\nTo pick only Meshes ````\"gearbox#77.0\"```` and ````\"gearbox#79.0\"````, picking through any other Meshes that are\nin the way, as if they weren't there:\n\n````javascript\nvar hit = scene.pick({\n     canvasPos: [23, 131],\n     includeMeshes: [\"gearbox#77.0\", \"gearbox#79.0\"]\n});\n\nif (hit) {\n      // Mesh will always be either \"gearbox#77.0\" or \"gearbox#79.0\"\n      var mesh = hit.mesh;\n}\n````\n\nTo pick any pickable Mesh, except for ````\"gearbox#77.0\"```` and ````\"gearbox#79.0\"````, picking through those\nMeshes if they happen to be in the way:\n\n````javascript\nvar hit = scene.pick({\n     canvasPos: [23, 131],\n     excludeMeshes: [\"gearbox#77.0\", \"gearbox#79.0\"]\n});\n\nif (hit) {\n      // Mesh will never be \"gearbox#77.0\" or \"gearbox#79.0\"\n      var mesh = hit.mesh;\n}\n````\n\nSee {@link Scene#pick} for more info on picking.\n\n# Querying and tracking boundaries\n\nGetting a Scene's World-space axis-aligned boundary (AABB):\n\n````javascript\nvar aabb = scene.aabb; // [xmin, ymin, zmin, xmax, ymax, zmax]\n````\n\nSubscribing to updates to the AABB, which occur whenever {@link Mesh}es are transformed, their\n{@link Geometry}s have been updated, or the {@link Camera} has moved:\n\n````javascript\nscene.on(\"boundary\", function() {\n     var aabb = scene.aabb;\n});\n````\n\nGetting the AABB of the {@link Object}s with the given IDs:\n\n````JavaScript\nscene.getAABB(); // Gets collective boundary of all Mesh Objects in the scene\nscene.getAABB(\"saw\"); // Gets boundary of an Object\nscene.getAABB([\"saw\", \"gearbox\"]); // Gets collective boundary of two Objects\n````\n\nSee {@link Scene#getAABB\"} and {@link Object} for more info on querying and tracking boundaries.\n\n# Managing the viewport\n\nThe Scene's {@link Viewport} component manages the WebGL viewport:\n\n````javascript\nvar viewport = scene.viewport\nviewport.boundary = [0, 0, 500, 400];;\n````\n\n# Controlling rendering\n\nYou can configure a Scene to perform multiple \"passes\" (renders) per frame. This is useful when we want to render the\nscene to multiple viewports, such as for stereo effects.\n\nIn the example, below, we'll configure the Scene to render twice on each frame, each time to different viewport. We'll do this\nwith a callback that intercepts the Scene before each render and sets its {@link Viewport} to a\ndifferent portion of the canvas. By default, the Scene will clear the canvas only before the first render, allowing the\ntwo views to be shown on the canvas at the same time.\n\n````Javascript\n// Load a glTF model\nvar model = new GLTFModel({\n    src: \"models/gltf/GearboxAssy/glTF-MaterialsCommon/GearboxAssy.gltf\"\n});\n\nvar scene = model.scene;\nvar viewport = scene.viewport;\n\n// Configure Scene to render twice for each frame\nscene.passes = 2; // Default is 1\nscene.clearEachPass = false; // Default is false\n\n// Render to a separate viewport on each render\n\nvar viewport = scene.viewport;\nviewport.autoBoundary = false;\n\nscene.on(\"rendering\", function (e) {\n     switch (e.pass) {\n         case 0:\n             viewport.boundary = [0, 0, 200, 200]; // xmin, ymin, width, height\n             break;\n\n         case 1:\n             viewport.boundary = [200, 0, 200, 200];\n             break;\n     }\n});\n\n// We can also intercept the Scene after each render,\n// (though we're not using this for anything here)\nscene.on(\"rendered\", function (e) {\n     switch (e.pass) {\n         case 0:\n             break;\n\n         case 1:\n             break;\n     }\n});\n````\n\n# Gamma correction\n\nWithin its shaders, xeokit performs shading calculations in linear space.\n\nBy default, the Scene expects color textures (eg. {@link PhongMaterial#diffuseMap},\n{@link MetallicMaterial#baseColorMap} and {@link SpecularMaterial#diffuseMap}) to\nbe in pre-multipled gamma space, so will convert those to linear space before they are used in shaders. Other textures are\nalways expected to be in linear space.\n\nBy default, the Scene will also gamma-correct its rendered output.\n\nYou can configure the Scene to expect all those color textures to be linear space, so that it does not gamma-correct them:\n\n````javascript\nscene.gammaInput = false;\n````\n\nYou would still need to gamma-correct the output, though, if it's going straight to the canvas, so normally we would\nleave that enabled:\n\n````javascript\nscene.gammaOutput = true;\n````\n\nSee {@link Texture} for more information on texture encoding and gamma.",
    "lineNumber": 326,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Scene"
      }
    ],
    "interface": false,
    "extends": [
      "Component.js~Component"
    ]
  },
  {
    "__docId__": 51,
    "kind": "get",
    "name": "type",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 337,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "init",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#init",
    "access": "private",
    "description": "",
    "lineNumber": 344,
    "ignore": true,
    "params": [
      {
        "name": "cfg",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "loading",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#loading",
    "access": "public",
    "description": "The number of models currently loading.",
    "lineNumber": 359,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "loading",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "startTime",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#startTime",
    "access": "public",
    "description": "The epoch time (in milliseconds since 1970) when this Scene was instantiated.",
    "lineNumber": 368,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "timeCreated",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "models",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#models",
    "access": "public",
    "description": "{@link Model}s in this Scene, mapped to their IDs.",
    "lineNumber": 377,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "models",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Model}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "objects",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#objects",
    "access": "public",
    "description": "{@link Object}s in this Scene that have {@link Object#objectId} properties, mapped to those IDs.\n\nEach Object is registered in this map when its {@link Object#objectId} is assigned a value.",
    "lineNumber": 388,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objects",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Object}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "visibleObjects",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#visibleObjects",
    "access": "public",
    "description": "Visible entity {@link Object}s within this Scene, mapped to their IDs.\n\nEach Object is registered in this map when its {@link Object/visible} property is true and its\n{@link Object/objectId} is assigned a value.",
    "lineNumber": 400,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "visibleObjects",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Object}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "ghostedObjects",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#ghostedObjects",
    "access": "public",
    "description": "Ghosted entity {@link Object}s within this Scene, mapped to their IDs.\n\nEach Object is registered in this map when its {@link Object/ghosted} property is true and its\n{@link Object/objectId} is assigned a value.",
    "lineNumber": 412,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghostedObjects",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Object}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "highlightedObjects",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#highlightedObjects",
    "access": "public",
    "description": "Highlighted entity {@link Object}s within this Scene, mapped to their IDs.\n\nEach Object is registered in this map when its {@link Object/highlighted} property is true and its\n{@link Object/objectId} is assigned a value.",
    "lineNumber": 424,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightedObjects",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Object}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "selectedObjects",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#selectedObjects",
    "access": "public",
    "description": "Selected entity {@link Object}s within this Scene, mapped to their IDs.\n\nEach Object is registered in this map when its {@link Object/selected} property is true and its\n{@link Object/objectId} is assigned a value.",
    "lineNumber": 436,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedObjects",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Object}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 61,
    "kind": "member",
    "name": "_objectIds",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_objectIds",
    "access": "private",
    "description": "Lazy-regenerated ID lists.",
    "lineNumber": 443,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "_visibleObjectIds",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_visibleObjectIds",
    "access": "private",
    "description": null,
    "lineNumber": 444,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "_ghostedObjectIds",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_ghostedObjectIds",
    "access": "private",
    "description": null,
    "lineNumber": 445,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "_highlightedObjectIds",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_highlightedObjectIds",
    "access": "private",
    "description": null,
    "lineNumber": 446,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "_selectedObjectIds",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_selectedObjectIds",
    "access": "private",
    "description": null,
    "lineNumber": 447,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_collidables",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_collidables",
    "access": "private",
    "description": null,
    "lineNumber": 449,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "_compilables",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_compilables",
    "access": "private",
    "description": null,
    "lineNumber": 450,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_needRecompile",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_needRecompile",
    "access": "private",
    "description": null,
    "lineNumber": 452,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "types",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#types",
    "access": "public",
    "description": "For each {@link Component} type, a map of\nIDs to {@link Component} instances of that type.",
    "lineNumber": 462,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "types",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String:{String:Component}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "components",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#components",
    "access": "public",
    "description": "The {@link Component\"}}Component{{/crossLink}} within this Scene, mapped to their IDs.",
    "lineNumber": 472,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "components",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String:Component"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "clips",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#clips",
    "access": "public",
    "description": "The {@link Clip\"}}Clip{{/crossLink}} components in this Scene, mapped to their IDs.",
    "lineNumber": 481,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "clips",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Clip}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "lights",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#lights",
    "access": "public",
    "description": "The {@link PointLight}, {@link DirLight},\n{@link SpotLight} and {@link AmbientLight} components in this Scene, mapped to their IDs.",
    "lineNumber": 491,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "lights",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Object}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "lightMaps",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#lightMaps",
    "access": "public",
    "description": "The {@link LightMap} components in this Scene, mapped to their IDs.",
    "lineNumber": 500,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "lightMaps",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:LightMap}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "reflectionMaps",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#reflectionMaps",
    "access": "public",
    "description": "The {@link ReflectionMap} components in this Scene, mapped to their IDs.",
    "lineNumber": 509,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "reflectionMaps",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:ReflectionMap}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "canvas",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#canvas",
    "access": "public",
    "description": "Manages the HTML5 canvas for this Scene.",
    "lineNumber": 517,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Canvas"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "_renderer",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_renderer",
    "access": "private",
    "description": null,
    "lineNumber": 537,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "_clipsState",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_clipsState",
    "access": "private",
    "description": null,
    "lineNumber": 541,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 79,
    "kind": "member",
    "name": "_lightsState",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_lightsState",
    "access": "private",
    "description": null,
    "lineNumber": 582,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 83,
    "kind": "member",
    "name": "input",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#input",
    "access": "public",
    "description": "Publishes input events that occur on this Scene's canvas.",
    "lineNumber": 703,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Input"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 84,
    "kind": "member",
    "name": "_viewport",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_viewport",
    "access": "private",
    "description": null,
    "lineNumber": 716,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 85,
    "kind": "member",
    "name": "_camera",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_camera",
    "access": "private",
    "description": null,
    "lineNumber": 722,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "_initDefaults",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_initDefaults",
    "access": "private",
    "description": null,
    "lineNumber": 768,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "_addComponent",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_addComponent",
    "access": "private",
    "description": null,
    "lineNumber": 780,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 94,
    "kind": "method",
    "name": "_removeComponent",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_removeComponent",
    "access": "private",
    "description": null,
    "lineNumber": 819,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "_clipCreated",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_clipCreated",
    "access": "private",
    "description": null,
    "lineNumber": 847,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "clip",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "_lightCreated",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_lightCreated",
    "access": "private",
    "description": null,
    "lineNumber": 853,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "light",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "_lightMapCreated",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_lightMapCreated",
    "access": "private",
    "description": null,
    "lineNumber": 859,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "lightMap",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "_reflectionMapCreated",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_reflectionMapCreated",
    "access": "private",
    "description": null,
    "lineNumber": 865,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "reflectionMap",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "_modelCreated",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_modelCreated",
    "access": "private",
    "description": null,
    "lineNumber": 871,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "model",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "_clipDestroyed",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_clipDestroyed",
    "access": "private",
    "description": null,
    "lineNumber": 876,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "clip",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "_lightDestroyed",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_lightDestroyed",
    "access": "private",
    "description": null,
    "lineNumber": 882,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "light",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "_lightMapDestroyed",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_lightMapDestroyed",
    "access": "private",
    "description": null,
    "lineNumber": 888,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "lightMap",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "_reflectionMapDestroyed",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_reflectionMapDestroyed",
    "access": "private",
    "description": null,
    "lineNumber": 894,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "reflectionMap",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "_registerObject",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_registerObject",
    "access": "private",
    "description": null,
    "lineNumber": 900,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "_deregisterObject",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_deregisterObject",
    "access": "private",
    "description": null,
    "lineNumber": 905,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 116,
    "kind": "method",
    "name": "_objectVisibilityUpdated",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_objectVisibilityUpdated",
    "access": "private",
    "description": null,
    "lineNumber": 910,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      },
      {
        "name": "visible",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 118,
    "kind": "method",
    "name": "_objectGhostedUpdated",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_objectGhostedUpdated",
    "access": "private",
    "description": null,
    "lineNumber": 919,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      },
      {
        "name": "ghosted",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "_objectHighlightedUpdated",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_objectHighlightedUpdated",
    "access": "private",
    "description": null,
    "lineNumber": 928,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      },
      {
        "name": "highlighted",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 122,
    "kind": "method",
    "name": "_objectSelectedUpdated",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_objectSelectedUpdated",
    "access": "private",
    "description": null,
    "lineNumber": 937,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      },
      {
        "name": "selected",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 124,
    "kind": "method",
    "name": "_webglContextLost",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_webglContextLost",
    "access": "private",
    "description": null,
    "lineNumber": 946,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 125,
    "kind": "method",
    "name": "_webglContextRestored",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_webglContextRestored",
    "access": "private",
    "description": null,
    "lineNumber": 960,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "render",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#render",
    "access": "public",
    "description": "Renders a single frame of this Scene.\n\nThe Scene will periodically render itself after any updates, but you can call this method to force a render\nif required. This method is typically used when we want to synchronously take a snapshot of the canvas and\nneed everything rendered right at that moment.",
    "lineNumber": 986,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "render"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "forceRender",
        "description": "Forces a render when true, otherwise only renders if something has changed in this Scene\nsince the last render."
      }
    ],
    "return": null
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "_recompile",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_recompile",
    "access": "private",
    "description": null,
    "lineNumber": 1047,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 129,
    "kind": "method",
    "name": "_saveAmbientColor",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_saveAmbientColor",
    "access": "private",
    "description": null,
    "lineNumber": 1055,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "_lastAmbientColor",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_lastAmbientColor",
    "access": "private",
    "description": null,
    "lineNumber": 1066,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "get",
    "name": "objectIds",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#objectIds",
    "access": "public",
    "description": "Convenience array of IDs in {@link Scene/objects}.",
    "lineNumber": 1081,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objectIds",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Array of String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 134,
    "kind": "get",
    "name": "visibleObjectIds",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#visibleObjectIds",
    "access": "public",
    "description": "Convenience array of IDs in {@link Scene/visibleObjects}.",
    "lineNumber": 1094,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "visibleObjectIds",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Array of String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "get",
    "name": "ghostedObjectIds",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#ghostedObjectIds",
    "access": "public",
    "description": "Convenience array of IDs in {@link Scene/ghostedObjects}.",
    "lineNumber": 1107,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghostedObjectIds",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Array of String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "get",
    "name": "highlightedObjectIds",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#highlightedObjectIds",
    "access": "public",
    "description": "Convenience array of IDs in {@link Scene/highlightedObjects}.",
    "lineNumber": 1120,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightedObjectIds",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Array of String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 140,
    "kind": "get",
    "name": "selectedObjectIds",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#selectedObjectIds",
    "access": "public",
    "description": "Convenience array of IDs in {@link Scene/selectedObjects}.",
    "lineNumber": 1133,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedObjectIds",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Array of String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 142,
    "kind": "set",
    "name": "ticksPerRender",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#ticksPerRender",
    "access": "public",
    "description": "The number of {@link Scene/tick} that happen between each render or this Scene.",
    "lineNumber": 1147,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ticksPerRender",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "_ticksPerRender",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_ticksPerRender",
    "access": "private",
    "description": null,
    "lineNumber": 1158,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "get",
    "name": "ticksPerRender",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#ticksPerRender",
    "access": "public",
    "description": null,
    "lineNumber": 1161,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "set",
    "name": "passes",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#passes",
    "access": "public",
    "description": "The number of times this Scene renders per frame.",
    "lineNumber": 1172,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "passes",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 146,
    "kind": "member",
    "name": "_passes",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_passes",
    "access": "private",
    "description": null,
    "lineNumber": 1183,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 147,
    "kind": "get",
    "name": "passes",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#passes",
    "access": "public",
    "description": null,
    "lineNumber": 1187,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 148,
    "kind": "set",
    "name": "clearEachPass",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#clearEachPass",
    "access": "public",
    "description": "When doing multiple passes per frame, specifies whether to clear the\ncanvas before each pass (true) or just before the first pass (false).",
    "lineNumber": 1199,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "clearEachPass",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 149,
    "kind": "member",
    "name": "_clearEachPass",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_clearEachPass",
    "access": "private",
    "description": null,
    "lineNumber": 1204,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 150,
    "kind": "get",
    "name": "clearEachPass",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#clearEachPass",
    "access": "public",
    "description": null,
    "lineNumber": 1208,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "set",
    "name": "gammaInput",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#gammaInput",
    "access": "public",
    "description": "When true, expects all textures and colors are premultiplied gamma.",
    "lineNumber": 1219,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaInput",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 153,
    "kind": "get",
    "name": "gammaInput",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#gammaInput",
    "access": "public",
    "description": null,
    "lineNumber": 1228,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 154,
    "kind": "set",
    "name": "gammaOutput",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#gammaOutput",
    "access": "public",
    "description": "Whether or not to render pixels with pre-multiplied gama.",
    "lineNumber": 1239,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaOutput",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 156,
    "kind": "get",
    "name": "gammaOutput",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#gammaOutput",
    "access": "public",
    "description": null,
    "lineNumber": 1248,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 157,
    "kind": "set",
    "name": "gammaFactor",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#gammaFactor",
    "access": "public",
    "description": "The gamma factor to use when {@link Scene/property:gammaOutput} is set true.",
    "lineNumber": 1259,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaOutput",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "get",
    "name": "gammaFactor",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#gammaFactor",
    "access": "public",
    "description": null,
    "lineNumber": 1268,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "get",
    "name": "geometry",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#geometry",
    "access": "public",
    "description": "The default geometry for this Scene, which is a {@link BoxGeometry\"}}BoxGeometry{{/crossLink}}.\n\nThis {@link BoxGeometry\"}}BoxGeometry{{/crossLink}} has an {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.geometry\".\n\n{@link Mesh\"}}Meshes{{/crossLink}} in this Scene are attached to this\n{@link Geometry}}Geometry{{/crossLink}} by default.",
    "lineNumber": 1283,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "geometry",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 160,
    "kind": "get",
    "name": "material",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#material",
    "access": "public",
    "description": "The default drawing material for this Scene, which is a {@link PhongMaterial\"}}PhongMaterial{{/crossLink}}.\n\nThis {@link PhongMaterial\"}}PhongMaterial{{/crossLink}} has\nan {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.material\", with all\nother properties initialised to their default values.\n\n{@link Mesh\"}}Meshes{{/crossLink}} in this Scene are attached to this\n{@link PhongMaterial\"}}PhongMaterial{{/crossLink}} by default.",
    "lineNumber": 1304,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "material",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 161,
    "kind": "get",
    "name": "ghostMaterial",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#ghostMaterial",
    "access": "public",
    "description": "The Scene's default {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are ghosted.\n\nThis {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} has\nan {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.ghostMaterial\", with all\nother properties initialised to their default values.\n\n{@link Mesh\"}}Meshes{{/crossLink}} in this Scene are attached to this\n{@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} by default.",
    "lineNumber": 1325,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghostMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "get",
    "name": "highlightMaterial",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#highlightMaterial",
    "access": "public",
    "description": "The Scene's default {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are highlighted.\n\nThis {@link HighlightMaterial\"}}HighlightMaterial{{/crossLink}} has\nan {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.highlightMaterial\", with all\nother properties initialised to their default values.\n\n{@link Mesh\"}}Meshes{{/crossLink}} in this Scene are attached to this\n{@link HighlightMaterial\"}}HighlightMaterial{{/crossLink}} by default.",
    "lineNumber": 1346,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "get",
    "name": "selectedMaterial",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#selectedMaterial",
    "access": "public",
    "description": "The Scene's default {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are selected.\n\nThis {@link SelectedMaterial\"}}SelectedMaterial{{/crossLink}} has\nan {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.selectedMaterial\", with all\nother properties initialised to their default values.\n\n{@link Mesh\"}}Meshes{{/crossLink}} in this Scene are attached to this\n{@link SelectedMaterial\"}}SelectedMaterial{{/crossLink}} by default.",
    "lineNumber": 1367,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 164,
    "kind": "get",
    "name": "edgeMaterial",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#edgeMaterial",
    "access": "public",
    "description": "The Scene's default {@link EdgeMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when edges are emphasized.\n\nThis {@link EdgeMaterial\"}}EdgeMaterial{{/crossLink}} has\nan {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.edgeMaterial\", with all\nother properties initialised to their default values.\n\n{@link Mesh\"}}Meshes{{/crossLink}} in this Scene are attached to this\n{@link EdgeMaterial\"}}EdgeMaterial{{/crossLink}} by default.",
    "lineNumber": 1388,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 165,
    "kind": "get",
    "name": "outlineMaterial",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#outlineMaterial",
    "access": "public",
    "description": "The Scene's default {@link OutlineMaterial\"}}OutlineMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are outlined.\n\nThis {@link OutlineMaterial\"}}OutlineMaterial{{/crossLink}} has\nan {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.outlineMaterial\", with all\nother properties initialised to their default values.\n\n{@link Mesh\"}}Meshes{{/crossLink}} in this Scene are attached to this\n{@link OutlineMaterial\"}}OutlineMaterial{{/crossLink}} by default.",
    "lineNumber": 1412,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outlineMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 166,
    "kind": "get",
    "name": "viewport",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#viewport",
    "access": "public",
    "description": "The {@link Viewport} belonging to this Scene.",
    "lineNumber": 1426,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "viewport",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 167,
    "kind": "get",
    "name": "camera",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#camera",
    "access": "public",
    "description": "The {@link Camera} belonging to this Scene.",
    "lineNumber": 1437,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "camera",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 168,
    "kind": "get",
    "name": "center",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#center",
    "access": "public",
    "description": "World-space 3D center of this Scene.",
    "lineNumber": 1448,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "center",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "member",
    "name": "_center",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_center",
    "access": "private",
    "description": null,
    "lineNumber": 1451,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "get",
    "name": "aabb",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#aabb",
    "access": "public",
    "description": "World-space axis-aligned 3D boundary (AABB) of this Scene.\n\nThe AABB is represented by a six-element Float32Array containing the min/max extents of the\naxis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.",
    "lineNumber": 1471,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "aabb",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "member",
    "name": "_aabb",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_aabb",
    "access": "private",
    "description": null,
    "lineNumber": 1474,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "member",
    "name": "_aabbDirty",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_aabbDirty",
    "access": "private",
    "description": null,
    "lineNumber": 1518,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 173,
    "kind": "method",
    "name": "_setBoundaryDirty",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#_setBoundaryDirty",
    "access": "private",
    "description": null,
    "lineNumber": 1523,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "pick",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#pick",
    "access": "public",
    "description": "Attempts to pick an {@link Mesh\"}}Mesh{{/crossLink}} in this Scene.\n\nIgnores {@link Mesh\"}}Meshes{{/crossLink}} with {@link Mesh/pickable:property\"}}pickable{{/crossLink}}\nset *false*.\n\nWhen a {@link Mesh} is picked, fires a \"pick\" event on the {@link Mesh}\nwith the pick result as parameters.\n\nPicking the {@link Mesh} at the given canvas coordinates:\n\n````javascript\nvar pickResult = scene.pick({\ncanvasPos: [23, 131]\n});\n\nif (pickResult) { // Picked a Mesh\nvar mesh = pickResult.mesh;\n}\n````\n\n*Usage:**\n\nPicking, with a ray cast through the canvas, hits a {@link Mesh}:\n\n````javascript\nvar pickResult = scene.pick({\npickSurface: true,\ncanvasPos: [23, 131]\n});\n\nif (pickResult) { // Picked a Mesh\n\nvar mesh = pickResult.mesh;\n\n// These properties are only on the pick result when we do a ray-pick:\n\nvar primitive = pickResult.primitive; // Type of primitive that was picked, usually \"triangles\"\nvar primIndex = pickResult.primIndex; // Position of triangle's first index in the picked Mesh's Geometry's indices array\nvar indices = pickResult.indices; // UInt32Array containing the triangle's vertex indices\nvar localPos = pickResult.localPos; // Float32Array containing the picked Local-space position on the triangle\nvar worldPos = pickResult.worldPos; // Float32Array containing the picked World-space position on the triangle\nvar viewPos = pickResult.viewPos; // Float32Array containing the picked View-space position on the triangle\nvar bary = pickResult.bary; // Float32Array containing the picked barycentric position within the triangle\nvar normal = pickResult.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle\nvar uv = pickResult.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle\n}\n````\n\nPicking the {@link Mesh} that intersects an arbitrarily-aligned World-space ray:\n\n````javascript\nvar pickResult = scene.pick({\npickSurface: true,   // Picking with arbitrarily-positioned ray\norigin: [0,0,-5],    // Ray origin\ndirection: [0,0,1]   // Ray direction\n});\n\nif (pickResult) { // Picked a Mesh with the ray\n\nvar mesh = pickResult.mesh;\n\nvar primitive = pickResult.primitive; // Type of primitive that was picked, usually \"triangles\"\nvar primIndex = pickResult.primIndex; // Position of triangle's first index in the picked Mesh's Geometry's indices array\nvar indices = pickResult.indices; // UInt32Array containing the triangle's vertex indices\nvar localPos = pickResult.localPos; // Float32Array containing the picked Local-space position on the triangle\nvar worldPos = pickResult.worldPos; // Float32Array containing the picked World-space position on the triangle\nvar viewPos = pickResult.viewPos; // Float32Array containing the picked View-space position on the triangle\nvar bary = pickResult.bary; // Float32Array containing the picked barycentric position within the triangle\nvar normal = pickResult.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle\nvar uv = pickResult.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle\nvar origin = pickResult.origin; // Float32Array containing the World-space ray origin\nvar direction = pickResult.direction; // Float32Array containing the World-space ray direction\n}\n````",
    "lineNumber": 1619,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "pick"
      },
      {
        "tagName": "@returns",
        "tagValue": "{PickResult} Holds results of the pick attempt, returned when an {@link Mesh} is picked, else null. See method comments for description."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Picking parameters."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.pickSurface",
        "description": "Whether to find the picked position on the surface of the Mesh."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "name": "params.canvasPos",
        "description": "Canvas-space coordinates. When ray-picking, this will override the\n*origin** and ** direction** parameters and will cause the ray to be fired through the canvas at this position,\ndirectly along the negative View-space Z-axis."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "name": "params.origin",
        "description": "World-space ray origin when ray-picking. Ignored when canvasPos given."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "name": "params.direction",
        "description": "World-space ray direction when ray-picking. Also indicates the length of the ray. Ignored when canvasPos given."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "params.includeMeshes",
        "description": "IDs of {@link Mesh\"}}Meshes{{/crossLink}} to restrict picking to. When given, ignores {@link Mesh\"}}Meshes{{/crossLink}} whose IDs are not in this list."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "params.excludeMeshes",
        "description": "IDs of {@link Mesh\"}}Meshes{{/crossLink}} to ignore. When given, will pick *through* these {@link Mesh\"}}Meshes{{/crossLink}}, as if they were not there."
      },
      {
        "nullable": null,
        "types": [
          "PickResult"
        ],
        "spread": false,
        "optional": true,
        "name": "pickResult",
        "description": "Holds the results of the pick attempt. Will use the Scene's singleton PickResult if you don't supply your own."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PickResult"
      ],
      "spread": false,
      "description": "Holds results of the pick attempt, returned when an {@link Mesh} is picked, else null. See method comments for description."
    }
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "getAABB",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#getAABB",
    "access": "public",
    "description": "Returns the collective axis-aligned bounding box of the {@link Object}s, specified by their IDs or objectIds.\n\nWhen no arguments are given, returns the total boundary of all objects in the scene.\n\nOnly {@link Mesh\"}}Meshes{{/crossLink}} with {@link Mesh/collidable:property\"}}collidable{{/crossLink}}\nset ````true```` are included in the boundary.\n\n# Usage\n\n````JavaScript\nscene.getAABB(); // Gets collective boundary of all objects in the scene\nscene.getAABB(\"saw\"); // Gets collective boundary of all objects in saw model\nscene.getAABB([\"saw\", \"gearbox\"]); // Gets collective boundary of all objects in saw and gearbox models\nscene.getAABB(\"saw#0.1\"); // Get boundary of an object in the saw model\nscene.getAABB([\"saw#0.1\", \"saw#0.2\"]); // Get collective boundary of two objects in saw model\nscene.getAABB([\"saw#0.1\", \"surface\", \"support\"]); // Get collective boundary an object, and all objects of the given two entity classes.\n````",
    "lineNumber": 1678,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getAABB"
      },
      {
        "tagName": "@returns",
        "tagValue": "{[Number, Number, Number, Number, Number, Number]} An axis-aligned World-space bounding box, given as elements ````[xmin, ymin, zmin, xmax, ymax, zmax]````."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "{Array} Array of  {@link Object} IDs of objectIds."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[Number, Number, Number, Number, Number, Number]"
      ],
      "spread": false,
      "description": "An axis-aligned World-space bounding box, given as elements ````[xmin, ymin, zmin, xmax, ymax, zmax]````."
    }
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "clear",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#clear",
    "access": "public",
    "description": "Resets this Scene to its default state.\n\nReferences to any components in this Scene will become invalid.",
    "lineNumber": 1743,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "clear"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "clearLights",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#clearLights",
    "access": "public",
    "description": "Convenience method that destroys all light sources.\n\nRemoves all {@link AmbientLight\"}}AmbientLights{{/crossLink}}, {@link PointLight\"}}PointLights{{/crossLink}},\n{@link DirLight\"}}DirLights{{/crossLink}} and {@link SpotLight\"}}SpotLights{{/crossLink}}.",
    "lineNumber": 1765,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "clearLights"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "clearClips",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#clearClips",
    "access": "public",
    "description": "Convenience method that destroys all {@link Clip\"}}Clips{{/crossLink}}.",
    "lineNumber": 1777,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "clearClips"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "setVisible",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#setVisible",
    "access": "public",
    "description": "Shows or hides a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.\n\nEach Object indicates its visibility status in its {@link Object/visibility} property.\n\nEach visible Object is registered in the {@link Scene}'s\n{@link Scene/visibleObjects} map while its {@link Object/objectId}\nis assigned a value.",
    "lineNumber": 1798,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setVisible"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Object}s changed visibility, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Object} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "visible",
        "description": "{Boolean} The new visibility state."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Object}s changed visibility, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "setCulled",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#setCulled",
    "access": "public",
    "description": "Culls or unculls a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.\n\nEach Object indicates its culled status in its {@link Object/visibility} property.",
    "lineNumber": 1816,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setVisible"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Object}s changed culled state, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Object} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "culled",
        "description": "{Boolean} The new cull state."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Object}s changed culled state, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 182,
    "kind": "method",
    "name": "setSelected",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#setSelected",
    "access": "public",
    "description": "Selects or de-selects a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.\n\nEach Object indicates its selected status in its {@link Object/selected} property.\n\nEach selected Object is registered in the {@link Scene}'s\n{@link Scene/selectedObjects} map while its {@link Object/objectId}\nis assigned a value.",
    "lineNumber": 1838,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setSelected"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Object}s changed selection state, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Object} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selected",
        "description": "{Boolean} Whether to select or deselect."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Object}s changed selection state, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 183,
    "kind": "method",
    "name": "setHighlighted",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#setHighlighted",
    "access": "public",
    "description": "Highlights or de-highlights a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.\n\nEach Object indicates its highlight status in its {@link Object/highlighted} property.\n\nEach highlighted Object is registered in the {@link Scene}'s\n{@link Scene/highlightedObjects} map while its {@link Object/objectId}\nis assigned a value.",
    "lineNumber": 1860,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setHighlighted"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Object}s changed highlighted state, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Object} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlighted",
        "description": "{Boolean} Whether to highlight or un-highlight."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Object}s changed highlighted state, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "setGhosted",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#setGhosted",
    "access": "public",
    "description": "Ghosts or un-ghosts a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.\n\nEach Object indicates its ghosted status in its {@link Object/ghosted} property.\n\nEach ghosted Object is registered in the {@link Scene}'s\n{@link Scene/ghostedObjects} map when its {@link Object/objectId}\nis assigned a value.",
    "lineNumber": 1882,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setGhosted"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Object}s changed ghosted state, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Object} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghosted",
        "description": "{Float32Array} Whether to ghost or un-ghost."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Object}s changed ghosted state, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 185,
    "kind": "method",
    "name": "setEdges",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#setEdges",
    "access": "public",
    "description": "Shows or hides wireeframe edges for batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.",
    "lineNumber": 1898,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setEdges"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Object}s changed edges state, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Object} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edges",
        "description": "{Float32Array} Whether to show or hide edges."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Object}s changed edges state, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 186,
    "kind": "method",
    "name": "setOutlined",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#setOutlined",
    "access": "public",
    "description": "Shows or hides an outline around a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.\n\nEach Object indicates its outlined status in its {@link Object/outlined} property.\n\nEach outlined Object is registered in the {@link Scene}'s\n{@link Scene/outlinedObjects} map when its {@link Object/entityType}\nis assigned a value.",
    "lineNumber": 1920,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setOutlined"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Object}s changed outlined state, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Object} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outlined",
        "description": "{Float32Array} Whether to show or hide the outline."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Object}s changed outlined state, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 187,
    "kind": "method",
    "name": "setColorize",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#setColorize",
    "access": "public",
    "description": "Colorizes a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.",
    "lineNumber": 1935,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setColorize"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Object} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "(1,1,1)",
        "defaultRaw": "(1,1,1)",
        "name": "colorize",
        "description": "Float32Array RGB colorize factors, multiplied by the rendered pixel colors."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "method",
    "name": "setOpacity",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#setOpacity",
    "access": "public",
    "description": "Updates opacities of a batch of {@link Object}s, specified by their IDs, GUIDs and/or entity types.",
    "lineNumber": 1948,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setOpacity"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Object} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "opacity",
        "description": "Number Opacity factor in range ````[0..1]````, multiplies by the rendered pixel alphas."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "method",
    "name": "setPickable",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#setPickable",
    "access": "public",
    "description": "Sets a batch of {@link Object}s pickable or unpickable, specified by their IDs, GUIDs and/or entity types.\n\nPicking is done via calls to {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.",
    "lineNumber": 1964,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setPickable"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Object}s changed pickable state, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Object} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pickable",
        "description": "{Float32Array} Whether to ghost or un-ghost."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Object}s changed pickable state, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "withComponents",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#withComponents",
    "access": "public",
    "description": "Iterates with a callback over {@link Component}s, specified by their IDs or objectIds.",
    "lineNumber": 1979,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "withComponents"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{String|Array} One or more {@link Component} IDs or objectIds."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "{Function} The callback, which takes each object as its argument."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Scene.js~Scene#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 1999,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "_objectGUIDs",
    "memberof": "scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/Scene.js~Scene#_objectGUIDs",
    "access": "private",
    "description": null,
    "lineNumber": 2023,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# xeokit-sdk\n\nThe **xeokit-sdk** is a [GPL3-licensed](https://github.com/xeolabs/xeokit.io/wiki/License) software development kit\nfrom [xeolabs](http://xeolabs.com) for building Web-based 3D viewers for BIM and engineering. The SDK provides\na 3D viewer framework on the open source [xeogl](http://xeogl.org) WebGL library, with a collection bundled of\nplugins focused on BIM and CAD.\n\nThe SDK uses advanced rendering techniques to view and interact with high-detail\nmodels in most major browsers, on both desktop and mobile platforms.\n\n### Links\n\n* [Website](https://xeokit.io/)\n* [Examples](http://xeolabs.com/xeokit-examples/)\n* [Docs](http://xeolabs.com/xeokit-sdk/docs/)\n* [Source code](https://github.com/xeolabs/xeokit-sdk)\n* [Wiki](https://github.com/xeolabs/xeokit.io/wiki)\n* [License](https://github.com/xeolabs/xeokit.io/wiki/License)\n* [Contact](http://xeolabs.com/)\n\n![](https://xeokit.io/images/officePlan300x200.png)",
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"xeokit-sdk\",\n  \"version\": \"1.0.0\",\n  \"description\": \"SDK for building high-performance visualizations on xeogl\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/xeolabs/xeokit-sdk.git\"\n  },\n  \"keywords\": [\n    \"webgl\",\n    \"xeogl\",\n    \"bim\",\n    \"cad\"\n  ],\n  \"author\": \"Lindsay Kay\",\n  \"license\": \"SEE LICENSE IN LICENSE.txt\",\n  \"bugs\": {\n    \"url\": \"https://github.com/xeolabs/xeokit-sdk/issues\"\n  },\n  \"homepage\": \"https://github.com/xeolabs/xeokit-sdk#readme\",\n  \"dependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\"\n  }\n}\n",
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]