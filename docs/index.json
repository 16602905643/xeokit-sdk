[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "scene/.external-ecmascript.js",
    "static": true,
    "longname": "scene/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "scene/Component.js",
    "content": "/**\n The **Component** class is the base class for all xeokit components.\n\n ## Usage\n\n * [Component IDs](#component-ids)\n * [Metadata](#metadata)\n * [Logging](#logging)\n * [Destruction](#destruction)\n * [Creating custom Components](#creating-custom-components)\n\n ### Component IDs\n\n Every Component has an ID that's unique within the parent {@link Scene}. xeokit generates\n the IDs automatically by default, however you can also specify them yourself. In the example below, we're creating a\n scene comprised of {@link Scene}, {@link Material}, {@link Geometry} and\n {@link Mesh} components, while letting xeokit generate its own ID for\n the {@link Geometry}:\n\n ````javascript\n // The Scene is a Component too\n var scene = new xeokit.Scene({\n    id: \"myScene\"\n });\n\n var material = new xeokit.PhongMaterial(scene, {\n    id: \"myMaterial\"\n });\n\n var geometry = new xeokit.Geometry(scene, {\n    id: \"myGeometry\"\n });\n\n // Let xeokit automatically generate the ID for our Mesh\n var mesh = new xeokit.Mesh(scene, {\n    material: material,\n    geometry: geometry\n });\n ````\n\n We can then find those components like this:\n\n ````javascript\n // Find the Scene\n var theScene = xeokit.scenes[\"myScene\"];\n\n // Find the Material\n var theMaterial = theScene.components[\"myMaterial\"];\n\n // Find all PhongMaterials in the Scene\n var phongMaterials = theScene.types[\"PhongMaterial\"];\n\n // Find our Material within the PhongMaterials\n var theMaterial = phongMaterials[\"myMaterial\"];\n ````\n\n ### Component inheritance\n\n\n TODO\n\n All xeokit components are (at least indirect) subclasses of the Component base type.\n\n For most components, you can get the name of its class via its {@link Component#type} property:\n\n ````javascript\n var type = theMaterial.type; // \"PhongMaterial\"\n ````\n\n You can also test if a component implements or extends a given component class, like so:\n\n ````javascript\n // Evaluates true:\n var isComponent = theMaterial.isType(\"Component\");\n\n // Evaluates true:\n var isMaterial = theMaterial.isType(\"Material\");\n\n // Evaluates true:\n var isPhongMaterial = theMaterial.isType(\"PhongMaterial\");\n\n // Evaluates false:\n var isMetallicMaterial = theMaterial.isType(\"MetallicMaterial\");\n ````\n\n ### Metadata\n\n You can set optional **metadata** on your Components, which can be anything you like. These are intended\n to help manage your components within your application code or content pipeline. You could use metadata to attach\n authoring or version information, like this:\n\n ````javascript\n // Scene with authoring metadata\n var scene = new xeokit.Scene({\n    id: \"myScene\",\n    meta: {\n        title: \"My bodacious 3D scene\",\n        author: \"@xeographics\",\n        date: \"February 30 2018\"\n    }\n });\n\n // Material with descriptive metadata\n var material = new xeokit.PhongMaterial(scene, {\n    id: \"myMaterial\",\n    diffuse: [1, 0, 0],\n    meta: {\n        description: \"Bright red color with no textures\",\n        version: \"0.1\",\n        foo: \"bar\"\n    }\n });\n ````\n\n ### Logging\n\n Components have methods to log ID-prefixed messages to the JavaScript console:\n\n ````javascript\n material.log(\"Everything is fine, situation normal.\");\n material.warn(\"Wait, whats that red light?\");\n material.error(\"Aw, snap!\");\n ````\n\n The logged messages will look like this in the console:\n\n ````text\n [LOG]   myMaterial: Everything is fine, situation normal.\n [WARN]  myMaterial: Wait, whats that red light..\n [ERROR] myMaterial: Aw, snap!\n ````\n\n ### Destruction\n\n Get notification of destruction directly on the Components:\n\n ````javascript\n material.once(\"destroyed\", function() {\n    this.log(\"Component was destroyed: \" + this.id);\n });\n ````\n\n Or get notification of destruction of any Component within its {@link Scene}, indiscriminately:\n\n ````javascript\n scene.on(\"componentDestroyed\", function(component) {\n    this.log(\"Component was destroyed: \" + component.id);\n });\n ````\n\n Then destroy a component like this:\n\n ````javascript\n material.destroy();\n ````\n\n ### Creating custom Components\n\n Subclassing a Component to create a new ````xeokit.ColoredTorus```` type:\n\n ````javascript\n class ColoredTorus extends xeokit.Component{\n\n     get type() {\n        return \"ColoredTorus\";\n     }\n\n     constructor(scene=null, cfg) { // Constructor\n\n         super(scene. cfg);\n\n         this._torus = new xeokit.Mesh({\n             geometry: new xeokit.TorusGeometry({radius: 2, tube: .6}),\n             material: new xeokit.MetallicMaterial({\n                 baseColor: [1.0, 0.5, 0.5],\n                 roughness: 0.4,\n                 metallic: 0.1\n             })\n         });\n\n         this.color = cfg.color;\n     },\n\n     set color(color) {\n         this._torus.material.baseColor = color;\n     }\n\n     get color() {\n         return this._torus.material.baseColor;\n     }\n\n     destroy() {\n         super.destroy();\n         this._torus.geometry.destroy();\n         this._torus.material.destroy();\n         this._torus.destroy();\n     }\n };\n ````\n\n #### Examples\n\n * [Custom component definition](../../examples/#extending_component_basic)\n * [Custom component that fires events](../../examples/#extending_component_changeEvents)\n * [Custom component that manages child components](../../examples/#extending_component_childCleanup)\n * [Custom component that schedules asynch tasks](../../examples/#extending_component_update)\n\n @class Component\n @module xeokit\n @constructor\n @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n @param {*} [cfg] DepthBuf configuration\n @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this Component.\n */\n\nimport {core} from \"./core.js\";\nimport {utils} from './utils.js';\nimport {Map} from \"./utils/Map.js\";\n\nclass Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Component\";\n    }\n\n    /**\n     * @private\n     */\n    get isComponent() {\n        return true;\n    }\n\n    constructor(owner=null, cfg={}) {\n\n        /**\n         The parent {@link Scene} that contains this Component.\n\n         @property scene\n         @type {Scene}\n         @final\n         */\n        this.scene = null;\n\n        if (this.type === \"Scene\") {\n            this.scene = this;\n            /**\n             * @property {Viewer} viewer The viewer that contains this Scene.\n             */\n            this.viewer = cfg.viewer;\n        } else {\n                if (owner.type === \"Scene\") {\n                    this.scene = owner;\n                } else if (owner instanceof Component) {\n                    this.scene = owner.scene;\n                } else {\n                    throw \"Invalid paramL owner must be a Component\"\n                }\n            this._owner = owner;\n            this._renderer = this.scene._renderer;\n        }\n\n        this._dontClear = !!cfg.dontClear; // Prevent Scene#clear from destroying this component\n\n        this._renderer = this.scene._renderer;\n\n        /**\n         Arbitrary, user-defined metadata on this component.\n\n         @property metadata\n         @type Object\n         */\n        this.meta = cfg.meta || {};\n\n        /**\n         Unique ID for this Component within its {@link Scene}.\n\n         @property id\n         @type String\n         @final\n         */\n        this.id = cfg.id; // Auto-generated by Scene by default\n\n        /**\n         True as soon as this Component has been destroyed\n\n         @property destroyed\n         @type Boolean\n         */\n        this.destroyed = false;\n\n        this._attached = {}; // Attached components with names.\n        this._attachments = null; // Attached components keyed to IDs - lazy-instantiated\n        this._subIdMap = null; // Subscription subId pool\n        this._subIdEvents = null; // Subscription subIds mapped to event names\n        this._eventSubs = null; // Event names mapped to subscribers\n        this._events = null; // Maps names to events\n        this._eventCallDepth = 0; // Helps us catch stack overflows from recursive events\n        this._ownedComponents = null; // // Components created with #create - lazy-instantiated\n\n        if (this !== this.scene) { // Don't add scene to itself\n            this.scene._addComponent(this); // Assigns this component an automatic ID if not yet assigned\n        }\n\n        this._updateScheduled = false; // True when #_update will be called on next tick\n\n        if (owner) {\n            owner._own(this);\n        }\n    }\n\n    /**\n     Indicates that we need to redraw the scene.\n\n     This is called by certain subclasses after they have made some sort of state update that requires the\n     renderer to perform a redraw.\n\n     For example: a {@link Mesh} calls this on itself whenever you update its\n     {@link Mesh#layer} property, which manually controls its render order in\n     relation to other Meshes.\n\n     If this component has a ````castShadow```` property that's set ````true````, then this will also indicate\n     that the renderer needs to redraw shadow map associated with this component. Components like\n     {@link DirLight} have that property set when they produce light that creates shadows, while\n     components like {@link Mesh\"}}layer{{/crossLink}} have that property set when they cast shadows.\n\n     @protected\n     */\n    glRedraw() {\n        this._renderer.imageDirty();\n        if (this.castShadow) { // Light source or object\n            this._renderer.shadowsDirty();\n        }\n    }\n\n    /**\n     Indicates that we need to re-sort the renderer's state-ordered drawables list.\n\n     For efficiency, the renderer keeps its list of drawables ordered so that runs of the same state updates can be\n     combined.  This method is called by certain subclasses after they have made some sort of state update that would\n     require re-ordering of the drawables list.\n\n     For example: a {@link DirLight} calls this on itself whenever you update its\n     {@link DirLight/dir:property\"}}dir{{/crossLink}} property.\n\n     @protected\n     */\n    glResort() {\n        this._renderer.needStateSort();\n    }\n\n    /**\n     The {@link Component} that owns the lifecycle of this Component, if any.\n\n     When that component is destroyed, this component will be automatically destroyed also.\n\n     Will be null if this Component has no owner.\n\n     @property owner\n     @final\n     @type Component\n     */\n    get owner() {\n        return this._owner;\n    }\n\n    /**\n     Tests if this component is of the given type, or is a subclass of the given type.\n\n     The type may be given as either a string or a component constructor.\n\n     This method works by walking up the inheritance type chain, which this component provides in\n     property {@link Component/superTypes}, returning true as soon as one of the type strings in\n     the chain matches the given type, of false if none match.\n\n     #### Examples:\n\n     ````javascript\n     var myRotate = new xeokit.Rotate({ ... });\n\n     myRotate.isType(xeokit.Component); // Returns true for all xeokit components\n     myRotate.isType(\"Component\"); // Returns true for all xeokit components\n     myRotate.isType(xeokit.Rotate); // Returns true\n     myRotate.isType(xeokit.Transform); // Returns true\n     myRotate.isType(\"Transform\"); // Returns true\n     myRotate.isType(xeokit.Mesh); // Returns false, because xeokit.Rotate does not (even indirectly) extend xeokit.Mesh\n     ````\n\n     @method isType\n     @param  {String|Function} type Component type to compare with, eg \"PhongMaterial\", or a xeokit component constructor.\n     @returns {Boolean} True if this component is of given type or is subclass of the given type.\n     */\n    isType(type) {\n        return this.type === type;\n    }\n\n    /**\n     * Fires an event on this component.\n     *\n     * Notifies existing subscribers to the event, optionally retains the event to give to\n     * any subsequent notifications on the event as they are made.\n     *\n     * @method fire\n     * @param {String} event The event type name\n     * @param {Object} value The event parameters\n     * @param {Boolean} [forget=false] When true, does not retain for subsequent subscribers\n     */\n    fire(event, value, forget) {\n        if (!this._events) {\n            this._events = {};\n        }\n        if (!this._eventSubs) {\n            this._eventSubs = {};\n        }\n        if (forget !== true) {\n            this._events[event] = value || true; // Save notification\n        }\n        const subs = this._eventSubs[event];\n        let sub;\n        if (subs) { // Notify subscriptions\n            for (const subId in subs) {\n                if (subs.hasOwnProperty(subId)) {\n                    sub = subs[subId];\n                    this._eventCallDepth++;\n                    if (this._eventCallDepth < 300) {\n                        sub.callback.call(sub.scope, value);\n                    } else {\n                        this.error(\"fire: potential stack overflow from recursive event '\" + event + \"' - dropping this event\");\n                    }\n                    this._eventCallDepth--;\n                }\n            }\n        }\n    }\n\n    /**\n     * Subscribes to an event on this component.\n     *\n     * The callback is be called with this component as scope.\n     *\n     * @method on\n     * @param {String} event The event\n     * @param {Function} callback Called fired on the event\n     * @param {Object} [scope=this] Scope for the callback\n     * @return {String} Handle to the subscription, which may be used to unsubscribe with {@link #off}.\n     */\n    on(event, callback, scope) {\n        if (!this._events) {\n            this._events = {};\n        }\n        if (!this._subIdMap) {\n            this._subIdMap = new Map(); // Subscription subId pool\n        }\n        if (!this._subIdEvents) {\n            this._subIdEvents = {};\n        }\n        if (!this._eventSubs) {\n            this._eventSubs = {};\n        }\n        let subs = this._eventSubs[event];\n        if (!subs) {\n            subs = {};\n            this._eventSubs[event] = subs;\n        }\n        const subId = this._subIdMap.addItem(); // Create unique subId\n        subs[subId] = {\n            callback: callback,\n            scope: scope || this\n        };\n        this._subIdEvents[subId] = event;\n        const value = this._events[event];\n        if (value !== undefined) { // A publication exists, notify callback immediately\n            callback.call(scope || this, value);\n        }\n        return subId;\n    }\n\n    /**\n     * Cancels an event subscription that was previously made with {@link Component/on:method\"}}Component#on(){{/crossLink}} or\n     * {@link Component/once:method\"}}Component#once(){{/crossLink}}.\n     *\n     * @method off\n     * @param {String} subId Publication subId\n     */\n    off(subId) {\n        if (subId === undefined || subId === null) {\n            return;\n        }\n        if (!this._subIdEvents) {\n            return;\n        }\n        const event = this._subIdEvents[subId];\n        if (event) {\n            delete this._subIdEvents[subId];\n            const subs = this._eventSubs[event];\n            if (subs) {\n                delete subs[subId];\n            }\n            this._subIdMap.removeItem(subId); // Release subId\n        }\n    }\n\n    /**\n     * Subscribes to the next occurrence of the given event, then un-subscribes as soon as the event is subIdd.\n     *\n     * This is equivalent to calling {@link Component/on:method\"}}Component#on(){{/crossLink}}, and then calling\n     * {@link Component/off:method\"}}Component#off(){{/crossLink}} inside the callback function.\n     *\n     * @method once\n     * @param {String} event Data event to listen to\n     * @param {Function(data)} callback Called when fresh data is available at the event\n     * @param {Object} [scope=this] Scope for the callback\n     */\n    once(event, callback, scope) {\n        const self = this;\n        const subId = this.on(event,\n            function (value) {\n                self.off(subId);\n                callback(value);\n            },\n            scope);\n    }\n\n    /**\n     * Returns true if there are any subscribers to the given event on this component.\n     *\n     * @method hasSubs\n     * @param {String} event The event\n     * @return {Boolean} True if there are any subscribers to the given event on this component.\n     */\n    hasSubs(event) {\n        return (this._eventSubs && !!this._eventSubs[event]);\n    }\n\n    /**\n     * Logs a console debugging message for this component.\n     *\n     * The console message will have this format: *````[LOG] [<component type> <component id>: <message>````*\n     *\n     * Also fires the message as a {@link Scene/log:event} event on the\n     * parent {@link Scene}.\n     *\n     * @method log\n     * @param {String} message The message to log\n     */\n    log(message) {\n        message = \"[LOG]\" + this._message(message);\n        window.console.log(message);\n        this.scene.fire(\"log\", message);\n    }\n\n    _message(message) {\n        return \" [\" + this.type + \" \" + utils.inQuotes(this.id) + \"]: \" + message;\n    }\n\n    /**\n     * Logs a warning for this component to the JavaScript console.\n     *\n     * The console message will have this format: *````[WARN] [<component type> =<component id>: <message>````*\n     *\n     * Also fires the message as a {@link Scene/warn:event} event on the\n     * parent {@link Scene}.\n     *\n     * @method warn\n     * @param {String} message The message to log\n     */\n    warn(message) {\n        message = \"[WARN]\" + this._message(message);\n        window.console.warn(message);\n        this.scene.fire(\"warn\", message);\n    }\n\n    /**\n     * Logs an error for this component to the JavaScript console.\n     *\n     * The console message will have this format: *````[ERROR] [<component type> =<component id>: <message>````*\n     *\n     * Also fires the message as an {@link Scene/error:event} event on the\n     * parent {@link Scene}.\n     *\n     * @method error\n     * @param {String} message The message to log\n     */\n    error(message) {\n        message = \"[ERROR]\" + this._message(message);\n        window.console.error(message);\n        this.scene.fire(\"error\", message);\n    }\n\n    /**\n     * Adds a child component to this.\n     * When component not given, attaches the scene's default instance for the given name (if any).\n     * Publishes the new child component on this component, keyed to the given name.\n     *\n     * @param {*} params\n     * @param {String} params.name component name\n     * @param {Component} [params.component] The component\n     * @param {String} [params.type] Optional expected type of base type of the child; when supplied, will\n     * cause an exception if the given child is not the same type or a subtype of this.\n     * @param {Boolean} [params.sceneDefault=false]\n     * @param {Boolean} [params.sceneSingleton=false]\n     * @param {Function} [params.onAttached] Optional callback called when component attached\n     * @param {Function} [params.onAttached.callback] Callback function\n     * @param {Function} [params.onAttached.scope] Optional scope for callback\n     * @param {Function} [params.onDetached] Optional callback called when component is detached\n     * @param {Function} [params.onDetached.callback] Callback function\n     * @param {Function} [params.onDetached.scope] Optional scope for callback\n     * @param {{String:Function}} [params.on] Callbacks to subscribe to properties on component\n     * @param {Boolean} [params.recompiles=true] When true, fires \"dirty\" events on this component\n     * @private\n     */\n    _attach(params) {\n\n        const name = params.name;\n\n        if (!name) {\n            this.error(\"Component 'name' expected\");\n            return;\n        }\n\n        let component = params.component;\n        const sceneDefault = params.sceneDefault;\n        const sceneSingleton = params.sceneSingleton;\n        const type = params.type;\n        const on = params.on;\n        const recompiles = params.recompiles !== false;\n\n        // True when child given as config object, where parent manages its instantiation and destruction\n        let managingLifecycle = false;\n\n        if (component) {\n\n            if (utils.isNumeric(component) || utils.isString(component)) {\n\n                // Component ID given\n                // Both numeric and string IDs are supported\n\n                const id = component;\n\n                component = this.scene.components[id];\n\n                if (!component) {\n\n                    // Quote string IDs in errors\n\n                    this.error(\"Component not found: \" + utils.inQuotes(id));\n                    return;\n                }\n\n            } else if (utils.isObject(component)) {\n\n                // Component config given\n\n                const componentCfg = component;\n                const componentType = componentCfg.type || type || \"Component\";\n                const componentClass = componentClasses[componentType];\n\n                if (!componentClass) {\n                    this.error(\"Component type not found: \" + componentType);\n                    return;\n                }\n\n                if (type) {\n                    if (!core.isComponentType(componentType, type)) {\n                        this.error(\"Expected a \" + type + \" type or subtype, not a \" + componentType);\n                        return;\n                    }\n                }\n\n                component = new componentClass(this.scene, componentCfg);\n\n                managingLifecycle = true;\n            }\n        }\n\n        if (!component) {\n\n            if (sceneSingleton === true) {\n\n                // Using the first instance of the component type we find\n\n                const instances = this.scene.types[type];\n                for (const id2 in instances) {\n                    if (instances.hasOwnProperty) {\n                        component = instances[id2];\n                        break;\n                    }\n                }\n\n                if (!component) {\n                    this.error(\"Scene has no default component for '\" + name + \"'\");\n                    return null;\n                }\n\n            } else if (sceneDefault === true) {\n\n                // Using a default scene component\n\n                component = this.scene[name];\n\n                if (!component) {\n                    this.error(\"Scene has no default component for '\" + name + \"'\");\n                    return null;\n                }\n            }\n        }\n\n        if (component) {\n\n            if (component.scene.id !== this.scene.id) {\n                this.error(\"Not in same scene: \" + component.type + \" \" + utils.inQuotes(component.id));\n                return;\n            }\n\n            if (type) {\n\n                if (!component.isType(type)) {\n                    this.error(\"Expected a \" + type + \" type or subtype: \" + component.type + \" \" + utils.inQuotes(component.id));\n                    return;\n                }\n            }\n        }\n\n        if (!this._attachments) {\n            this._attachments = {};\n        }\n\n        const oldComponent = this._attached[name];\n        let subs;\n        let i;\n        let len;\n\n        if (oldComponent) {\n\n            if (component && oldComponent.id === component.id) {\n\n                // Reject attempt to reattach same component\n                return;\n            }\n\n            const oldAttachment = this._attachments[oldComponent.id];\n\n            // Unsubscribe from events on old component\n\n            subs = oldAttachment.subs;\n\n            for (i = 0, len = subs.length; i < len; i++) {\n                oldComponent.off(subs[i]);\n            }\n\n            delete this._attached[name];\n            delete this._attachments[oldComponent.id];\n\n            const onDetached = oldAttachment.params.onDetached;\n            if (onDetached) {\n                if (utils.isFunction(onDetached)) {\n                    onDetached(oldComponent);\n                } else {\n                    onDetached.scope ? onDetached.callback.call(onDetached.scope, oldComponent) : onDetached.callback(oldComponent);\n                }\n            }\n\n            if (oldAttachment.managingLifecycle) {\n\n                // Note that we just unsubscribed from all events fired by the child\n                // component, so destroying it won't fire events back at us now.\n\n                oldComponent.destroy();\n            }\n        }\n\n        if (component) {\n\n            // Set and publish the new component on this component\n\n            const attachment = {\n                params: params,\n                component: component,\n                subs: [],\n                managingLifecycle: managingLifecycle\n            };\n\n            attachment.subs.push(\n                component.once(\"destroyed\",\n                    function () {\n                        attachment.params.component = null;\n                        this._attach(attachment.params);\n                    },\n                    this));\n\n            if (recompiles) {\n                attachment.subs.push(\n                    component.on(\"dirty\",\n                        function () {\n                            this.fire(\"dirty\", this);\n                        },\n                        this));\n            }\n\n            this._attached[name] = component;\n            this._attachments[component.id] = attachment;\n\n            // Bind destruct listener to new component to remove it\n            // from this component when destroyed\n\n            const onAttached = params.onAttached;\n            if (onAttached) {\n                if (utils.isFunction(onAttached)) {\n                    onAttached(component);\n                } else {\n                    onAttached.scope ? onAttached.callback.call(onAttached.scope, component) : onAttached.callback(component);\n                }\n            }\n\n            if (on) {\n\n                let event;\n                let subIdr;\n                let callback;\n                let scope;\n\n                for (event in on) {\n                    if (on.hasOwnProperty(event)) {\n\n                        subIdr = on[event];\n\n                        if (utils.isFunction(subIdr)) {\n                            callback = subIdr;\n                            scope = null;\n                        } else {\n                            callback = subIdr.callback;\n                            scope = subIdr.scope;\n                        }\n\n                        if (!callback) {\n                            continue;\n                        }\n\n                        attachment.subs.push(component.on(event, callback, scope));\n                    }\n                }\n            }\n        }\n\n        if (recompiles) {\n            this.fire(\"dirty\", this); // FIXME: May trigger spurous mesh recompilations unless able to limit with param?\n        }\n\n        this.fire(name, component); // Component can be null\n\n        return component;\n    }\n\n    _checkComponent(expectedType, component) {\n        if (!component.isComponent) {\n            if (utils.isID(component)) {\n                const id = component;\n                component = this.scene.components[id];\n                if (!component) {\n                    this.error(\"Component not found: \" + id);\n                    return;\n                }\n            } else {\n                this.error(\"Expected a Component or ID\");\n                return;\n            }\n        }\n        if (expectedType !== component.type) {\n            this.error(\"Expected a \" + expectedType + \" Component\");\n            return;\n        }\n        if (component.scene.id !== this.scene.id) {\n            this.error(\"Not in same scene: \" + component.type);\n            return;\n        }\n        return component;\n    }\n\n    _checkComponent2(expectedTypes, component) {\n        if (!component.isComponent) {\n            if (utils.isID(component)) {\n                const id = component;\n                component = this.scene.components[id];\n                if (!component) {\n                    this.error(\"Component not found: \" + id);\n                    return;\n                }\n            } else {\n                this.error(\"Expected a Component or ID\");\n                return;\n            }\n        }\n        if (component.scene.id !== this.scene.id) {\n            this.error(\"Not in same scene: \" + component.type);\n            return;\n        }\n        for (var i = 0, len = expectedTypes.length; i < len; i++) {\n            if (expectedTypes[i] === component.type) {\n                return component;\n            }\n        }\n        this.error(\"Expected component types: \" + expectedTypes);\n        return null;\n    }\n\n    _own(component) {\n        if (!this._ownedComponents) {\n            this._ownedComponents = {};\n        }\n        if (!this._ownedComponents[component.id]) {\n            this._ownedComponents[component.id] = component;\n        }\n        component.once(\"destroyed\", function () {\n            delete this._ownedComponents[component.id];\n        }, this);\n    }\n\n    /**\n     * Protected method, called by sub-classes to queue a call to _update().\n     * @protected\n     * @param {Number} [priority=1]\n     */\n    _needUpdate(priority) {\n        if (!this._updateScheduled) {\n            this._updateScheduled = true;\n            if (priority === 0) {\n                this._doUpdate();\n            } else {\n                core.scheduleTask(this._doUpdate, this);\n            }\n        }\n    }\n\n    /**\n     * @private\n     */\n    _doUpdate() {\n        if (this._updateScheduled) {\n            this._updateScheduled = false;\n            if (this._update) {\n                this._update();\n            }\n        }\n    }\n\n    /**\n     * Protected virtual template method, optionally implemented\n     * by sub-classes to perform a scheduled task.\n     *\n     * @protected\n     */\n    _update() {\n    }\n\n    /**\n     Destroys all {@link Component}s that are owned by this. These are Components that were instantiated with\n     this Component as their first constructor argument.\n     @method clear\n     */\n    clear() {\n        if (this._ownedComponents) {\n            for (var id in this._ownedComponents) {\n                if (this._ownedComponents.hasOwnProperty(id)) {\n                    const component = this._ownedComponents[id];\n                    component.destroy();\n                    delete this._ownedComponents[id];\n                }\n            }\n        }\n    }\n\n    /**\n     * Destroys this component.\n     *\n     * Fires a {@link Component/destroyed:event} event on this Component.\n     *\n     * Automatically disassociates this component from other components, causing them to fall back on any\n     * defaults that this component overrode on them.\n     *\n     * TODO: describe effect with respect to #create\n     *\n     * @method destroy\n     */\n    destroy() {\n\n        if (this.destroyed) {\n            return;\n        }\n\n        // Unsubscribe from child components and destroy then\n\n        let id;\n        let attachment;\n        let component;\n        let subs;\n        let i;\n        let len;\n\n        if (this._attachments) {\n            for (id in this._attachments) {\n                if (this._attachments.hasOwnProperty(id)) {\n                    attachment = this._attachments[id];\n                    component = attachment.component;\n                    subs = attachment.subs;\n                    for (i = 0, len = subs.length; i < len; i++) {\n                        component.off(subs[i]);\n                    }\n                    if (attachment.managingLifecycle) {\n                        component.destroy();\n                    }\n                }\n            }\n        }\n\n        if (this._ownedComponents) {\n            for (id in this._ownedComponents) {\n                if (this._ownedComponents.hasOwnProperty(id)) {\n                    component = this._ownedComponents[id];\n                    component.destroy();\n                    delete this._ownedComponents[id];\n                }\n            }\n        }\n\n        this.scene._removeComponent(this);\n\n        // Memory leak avoidance\n        this._attached = {};\n        this._attachments = null;\n        this._subIdMap = null;\n        this._subIdEvents = null;\n        this._eventSubs = null;\n        this._events = null;\n        this._eventCallDepth = 0;\n        this._ownedComponents = null;\n        this._updateScheduled = false;\n\n        /**\n         * Fired when this Component is destroyed.\n         * @event destroyed\n         */\n        this.fire(\"destroyed\", this.destroyed = true);\n    }\n}\n\nexport {Component};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/Component.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Component",
    "memberof": "scene/Component.js",
    "static": true,
    "longname": "scene/Component.js~Component",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/Component.js",
    "importStyle": "{Component}",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "get",
    "name": "type",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 232,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 51,
    "kind": "get",
    "name": "isComponent",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#isComponent",
    "access": "private",
    "description": "",
    "lineNumber": 239,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 52,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 243,
    "undocument": true
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "scene",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#scene",
    "access": "public",
    "description": "The parent {@link Scene} that contains this Component.",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "scene",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Scene"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "viewer",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#viewer",
    "access": "public",
    "description": "",
    "lineNumber": 259,
    "properties": [
      {
        "nullable": null,
        "types": [
          "Viewer"
        ],
        "spread": false,
        "optional": false,
        "name": "viewer",
        "description": "The viewer that contains this Scene."
      }
    ],
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "_owner",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#_owner",
    "access": "private",
    "description": null,
    "lineNumber": 268,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "member",
    "name": "_renderer",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#_renderer",
    "access": "private",
    "description": null,
    "lineNumber": 269,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "member",
    "name": "_dontClear",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#_dontClear",
    "access": "private",
    "description": null,
    "lineNumber": 272,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 62,
    "kind": "member",
    "name": "meta",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#meta",
    "access": "public",
    "description": "Arbitrary, user-defined metadata on this component.",
    "lineNumber": 282,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "metadata",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 63,
    "kind": "member",
    "name": "id",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#id",
    "access": "public",
    "description": "Unique ID for this Component within its {@link Scene}.",
    "lineNumber": 291,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 64,
    "kind": "member",
    "name": "destroyed",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#destroyed",
    "access": "public",
    "description": "True as soon as this Component has been destroyed",
    "lineNumber": 299,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "destroyed",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 65,
    "kind": "member",
    "name": "_attached",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#_attached",
    "access": "private",
    "description": null,
    "lineNumber": 301,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 66,
    "kind": "member",
    "name": "_attachments",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#_attachments",
    "access": "private",
    "description": null,
    "lineNumber": 302,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "member",
    "name": "_subIdMap",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#_subIdMap",
    "access": "private",
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 68,
    "kind": "member",
    "name": "_subIdEvents",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#_subIdEvents",
    "access": "private",
    "description": null,
    "lineNumber": 304,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "_eventSubs",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#_eventSubs",
    "access": "private",
    "description": null,
    "lineNumber": 305,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "_events",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#_events",
    "access": "private",
    "description": null,
    "lineNumber": 306,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "_eventCallDepth",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#_eventCallDepth",
    "access": "private",
    "description": null,
    "lineNumber": 307,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "_ownedComponents",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#_ownedComponents",
    "access": "private",
    "description": null,
    "lineNumber": 308,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "_updateScheduled",
    "memberof": "scene/Component.js~Component",
    "static": false,
    "longname": "scene/Component.js~Component#_updateScheduled",
    "access": "private",
    "description": null,
    "lineNumber": 314,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 74,
    "kind": "method",
    "name": "glRedraw",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#glRedraw",
    "access": "protected",
    "description": "Indicates that we need to redraw the scene.\n\nThis is called by certain subclasses after they have made some sort of state update that requires the\nrenderer to perform a redraw.\n\nFor example: a {@link Mesh} calls this on itself whenever you update its\n{@link Mesh#layer} property, which manually controls its render order in\nrelation to other Meshes.\n\nIf this component has a ````castShadow```` property that's set ````true````, then this will also indicate\nthat the renderer needs to redraw shadow map associated with this component. Components like\n{@link DirLight} have that property set when they produce light that creates shadows, while\ncomponents like {@link Mesh\"}}layer{{/crossLink}} have that property set when they cast shadows.",
    "lineNumber": 338,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 75,
    "kind": "method",
    "name": "glResort",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#glResort",
    "access": "protected",
    "description": "Indicates that we need to re-sort the renderer's state-ordered drawables list.\n\nFor efficiency, the renderer keeps its list of drawables ordered so that runs of the same state updates can be\ncombined.  This method is called by certain subclasses after they have made some sort of state update that would\nrequire re-ordering of the drawables list.\n\nFor example: a {@link DirLight} calls this on itself whenever you update its\n{@link DirLight/dir:property\"}}dir{{/crossLink}} property.",
    "lineNumber": 357,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 76,
    "kind": "get",
    "name": "owner",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#owner",
    "access": "public",
    "description": "The {@link Component} that owns the lifecycle of this Component, if any.\n\nWhen that component is destroyed, this component will be automatically destroyed also.\n\nWill be null if this Component has no owner.",
    "lineNumber": 372,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "isType",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#isType",
    "access": "public",
    "description": "Tests if this component is of the given type, or is a subclass of the given type.\n\nThe type may be given as either a string or a component constructor.\n\nThis method works by walking up the inheritance type chain, which this component provides in\nproperty {@link Component/superTypes}, returning true as soon as one of the type strings in\nthe chain matches the given type, of false if none match.\n\n#### Examples:\n\n````javascript\nvar myRotate = new xeokit.Rotate({ ... });\n\nmyRotate.isType(xeokit.Component); // Returns true for all xeokit components\nmyRotate.isType(\"Component\"); // Returns true for all xeokit components\nmyRotate.isType(xeokit.Rotate); // Returns true\nmyRotate.isType(xeokit.Transform); // Returns true\nmyRotate.isType(\"Transform\"); // Returns true\nmyRotate.isType(xeokit.Mesh); // Returns false, because xeokit.Rotate does not (even indirectly) extend xeokit.Mesh\n````",
    "lineNumber": 402,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "isType"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if this component is of given type or is subclass of the given type."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "Component type to compare with, eg \"PhongMaterial\", or a xeokit component constructor."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if this component is of given type or is subclass of the given type."
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "fire",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#fire",
    "access": "public",
    "description": "Fires an event on this component.\n\nNotifies existing subscribers to the event, optionally retains the event to give to\nany subsequent notifications on the event as they are made.",
    "lineNumber": 417,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "fire"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event type name"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": "The event parameters"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "forget",
        "description": "When true, does not retain for subsequent subscribers"
      }
    ],
    "return": null
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "on",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#on",
    "access": "public",
    "description": "Subscribes to an event on this component.\n\nThe callback is be called with this component as scope.",
    "lineNumber": 456,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "on"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called fired on the event"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this",
        "defaultRaw": "this",
        "name": "scope",
        "description": "Scope for the callback"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "Handle to the subscription, which may be used to unsubscribe with {@link #off}."
    }
  },
  {
    "__docId__": 86,
    "kind": "method",
    "name": "off",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#off",
    "access": "public",
    "description": "Cancels an event subscription that was previously made with {@link Component/on:method\"}}Component#on(){{/crossLink}} or\n{@link Component/once:method\"}}Component#once(){{/crossLink}}.",
    "lineNumber": 494,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "off"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "subId",
        "description": "Publication subId"
      }
    ],
    "return": null
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "once",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#once",
    "access": "public",
    "description": "Subscribes to the next occurrence of the given event, then un-subscribes as soon as the event is subIdd.\n\nThis is equivalent to calling {@link Component/on:method\"}}Component#on(){{/crossLink}}, and then calling\n{@link Component/off:method\"}}Component#off(){{/crossLink}} inside the callback function.",
    "lineNumber": 523,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "once"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "Data event to listen to"
      },
      {
        "nullable": null,
        "types": [
          "Function(data)"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "Called when fresh data is available at the event"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "this",
        "defaultRaw": "this",
        "name": "scope",
        "description": "Scope for the callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "hasSubs",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#hasSubs",
    "access": "public",
    "description": "Returns true if there are any subscribers to the given event on this component.",
    "lineNumber": 540,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "hasSubs"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "event",
        "description": "The event"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if there are any subscribers to the given event on this component."
    }
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "log",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#log",
    "access": "public",
    "description": "Logs a console debugging message for this component.\n\nThe console message will have this format: *````[LOG] [<component type> <component id>: <message>````*\n\nAlso fires the message as a {@link Scene/log:event} event on the\nparent {@link Scene}.",
    "lineNumber": 555,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "log"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to log"
      }
    ],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "method",
    "name": "_message",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#_message",
    "access": "private",
    "description": null,
    "lineNumber": 561,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "message",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "method",
    "name": "warn",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#warn",
    "access": "public",
    "description": "Logs a warning for this component to the JavaScript console.\n\nThe console message will have this format: *````[WARN] [<component type> =<component id>: <message>````*\n\nAlso fires the message as a {@link Scene/warn:event} event on the\nparent {@link Scene}.",
    "lineNumber": 576,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "warn"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to log"
      }
    ],
    "return": null
  },
  {
    "__docId__": 92,
    "kind": "method",
    "name": "error",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#error",
    "access": "public",
    "description": "Logs an error for this component to the JavaScript console.\n\nThe console message will have this format: *````[ERROR] [<component type> =<component id>: <message>````*\n\nAlso fires the message as an {@link Scene/error:event} event on the\nparent {@link Scene}.",
    "lineNumber": 593,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "error"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "The message to log"
      }
    ],
    "return": null
  },
  {
    "__docId__": 93,
    "kind": "method",
    "name": "_attach",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#_attach",
    "access": "private",
    "description": "Adds a child component to this.\nWhen component not given, attaches the scene's default instance for the given name (if any).\nPublishes the new child component on this component, keyed to the given name.",
    "lineNumber": 621,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "params.name",
        "description": "component name"
      },
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": true,
        "name": "params.component",
        "description": "The component"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "params.type",
        "description": "Optional expected type of base type of the child; when supplied, will\ncause an exception if the given child is not the same type or a subtype of this."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.sceneDefault",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.sceneSingleton",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "params.onAttached",
        "description": "Optional callback called when component attached"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "params.onAttached.callback",
        "description": "Callback function"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "params.onAttached.scope",
        "description": "Optional scope for callback"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "params.onDetached",
        "description": "Optional callback called when component is detached"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "params.onDetached.callback",
        "description": "Callback function"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "params.onDetached.scope",
        "description": "Optional scope for callback"
      },
      {
        "nullable": null,
        "types": [
          "{String:Function}"
        ],
        "spread": false,
        "optional": true,
        "name": "params.on",
        "description": "Callbacks to subscribe to properties on component"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.recompiles",
        "description": "When true, fires \"dirty\" events on this component"
      }
    ],
    "ignore": true,
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 95,
    "kind": "method",
    "name": "_checkComponent",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#_checkComponent",
    "access": "private",
    "description": null,
    "lineNumber": 863,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "expectedType",
        "types": [
          "*"
        ]
      },
      {
        "name": "component",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "method",
    "name": "_checkComponent2",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#_checkComponent2",
    "access": "private",
    "description": null,
    "lineNumber": 888,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "expectedTypes",
        "types": [
          "*"
        ]
      },
      {
        "name": "component",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 97,
    "kind": "method",
    "name": "_own",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#_own",
    "access": "private",
    "description": null,
    "lineNumber": 915,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "_needUpdate",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#_needUpdate",
    "access": "protected",
    "description": "Protected method, called by sub-classes to queue a call to _update().",
    "lineNumber": 932,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "priority",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "_doUpdate",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#_doUpdate",
    "access": "private",
    "description": "",
    "lineNumber": 946,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "_update",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#_update",
    "access": "protected",
    "description": "Protected virtual template method, optionally implemented\nby sub-classes to perform a scheduled task.",
    "lineNumber": 961,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "clear",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#clear",
    "access": "public",
    "description": "Destroys all {@link Component}s that are owned by this. These are Components that were instantiated with\nthis Component as their first constructor argument.",
    "lineNumber": 969,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "clear"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/Component.js~Component",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/Component.js~Component#destroy",
    "access": "public",
    "description": "Destroys this component.\n\nFires a {@link Component/destroyed:event} event on this Component.\n\nAutomatically disassociates this component from other components, causing them to fall back on any\ndefaults that this component overrode on them.\n\nTODO: describe effect with respect to #create",
    "lineNumber": 993,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "destroy"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 115,
    "kind": "file",
    "name": "scene/Drawable.js",
    "content": "/**\n * @interface\n */\nclass Drawable {\n\n}\n\nexport {Drawable};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/Drawable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 116,
    "kind": "class",
    "name": "Drawable",
    "memberof": "scene/Drawable.js",
    "static": true,
    "longname": "scene/Drawable.js~Drawable",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/Drawable.js",
    "importStyle": "{Drawable}",
    "description": "",
    "lineNumber": 4,
    "interface": true
  },
  {
    "__docId__": 117,
    "kind": "file",
    "name": "scene/Entity.js",
    "content": "/**\n * @interface\n */\nclass Entity {\n\n}\n\nexport {Entity};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/Entity.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 118,
    "kind": "class",
    "name": "Entity",
    "memberof": "scene/Entity.js",
    "static": true,
    "longname": "scene/Entity.js~Entity",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/Entity.js",
    "importStyle": "{Entity}",
    "description": "",
    "lineNumber": 4,
    "interface": true
  },
  {
    "__docId__": 119,
    "kind": "file",
    "name": "scene/Model.js",
    "content": "/**\n * @interface\n */\nclass Model {\n\n}\n\nexport {Model};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/Model.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 120,
    "kind": "class",
    "name": "Model",
    "memberof": "scene/Model.js",
    "static": true,
    "longname": "scene/Model.js~Model",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/Model.js",
    "importStyle": "{Model}",
    "description": "",
    "lineNumber": 4,
    "interface": true
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "scene/bigModels/BigModel.js",
    "content": "import {Component} from \"./../Component.js\";\nimport {Mesh} from \"../mesh/Mesh.js\";\nimport {AABBGeometry} from \"../geometry/AABBGeometry.js\";\nimport {PhongMaterial} from \"../materials/PhongMaterial.js\";\nimport {math} from \"../math/math.js\";\nimport {WEBGL_INFO} from './../webglInfo.js';\n\nimport {BigModelMesh} from './bigModelMesh.js';\nimport {BigModelObject} from './bigModelObject.js';\nimport {getBatchingBuffer, putBatchingBuffer} from \"./batching/batchingBuffer.js\";\nimport {BatchingLayer} from './batching/batchingLayer.js';\nimport {InstancingLayer} from './instancing/instancingLayer.js';\nimport {RENDER_FLAGS} from './renderFlags.js';\n\nconst instancedArraysSupported = WEBGL_INFO.SUPPORTED_EXTENSIONS[\"ANGLE_instanced_arrays\"];\n\nvar tempColor = new Uint8Array(3);\nvar tempMat4 = math.mat4();\n\n/**\n A **BigModel** is a lightweight representation used for huge engineering models, in which the quantity of objects\n is more important than a realistic appearance or the ability to dynamically translate them.\n\n * Like the rest of xeokit, is compatible with WebGL version 1.\n * Used for high-detail engineering visualizations containing millions of objects.\n * Represents each of its objects with a {@link BigModelMesh}, which is a lightweight alternative to {@link Node}.\n * Renders flat-shaded, without textures. Each object has simply a color and an opacity to describe its surface appearance.\n * Objects can be individually visible, clippable, collidable, ghosted, highlighted, selected, edge-enhanced etc.\n * The transforms of a BigModel and its BigModelObjects are static, ie. they cannot be dynamically translated, rotated and scaled.\n * For a low memory footprint, does not retain geometry data in CPU memory. Keeps geometry only in GPU memory (which cannot be read).\n * Rendered using a combination of WebGL instancing and geometry batching. Instances objects that share geometries, while batching objects that have unique geometries.\n * Uses the {@link Scene}'s {@link Scene/ghostMaterial}, {@link Scene/highlightMaterial},\n {@link Scene/selectedMaterial} and {@link Scene/edgeMaterial} to define appearance when emphasised.\n\n ## Examples\n\n * [BigModel with objects having unique geometries](../../examples/#models_BigModel_batching)\n * [BigModel with objects reusing the same geometries](../../examples/#models_BigModel_instancing)\n\n ## Usage\n\n xeokit renders BigModels using a combination of [geometry batching]() and WebGL [hardware instancing]().\n\n For objects that share geometries, xeokit batches their geometries into uber-vertex buffers, which enables those objects\n to be rendered collectively with a single draw call. For objects that do share geometries, xeokit uses instancing to render\n each of those geometry's objects with a single draw call.\n\n The BigModel API gives you the ability to select which technique to apply for each object, as described below. Its BigGLTFModel\n subclass, which loads glTF, will automatically determine which technique to apply for each object, by tracking the amount of\n reuse of geometries within the glTF.\n\n ### Creating objects with unique geometries\n\n To create objects that each have their own unique geometry, specify the geometry as you create those objects:\n\n ````javascript\n var bigModel = new xeokit.BigModel();\n\n // Create a red box object\n\n var object1 = bigModel.createMesh({\n     id: \"myObject1\",\n     primitive: \"triangles\",\n     positions: [2, 2, 2, -2, 2, 2, -2, -2, ... ],\n     normals: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, ... ],\n     indices: [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, ... ],\n     color: [1, 0, 0],\n     matrix: xeokit.math.translationMat4c(-7, 0, 0)\n });\n\n // Create a green box object\n\n var object2 = bigModel.createMesh({\n     id: \"myObject2\",\n     primitive: \"triangles\",\n     positions: [2, 2, 2, -2, 2, 2, -2, -2, ... ],\n     normals: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, ... ],\n     indices: [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, ... ],\n     color: [0, 1, 0],\n     matrix: xeokit.math.translationMat4c(0, 0, 0)\n });\n ````\n\n ### Creating objects with shared geometries\n\n To create multiple objects that share the same geometry, create the geometry first then reference it by ID within each of those objects:\n\n ```` javascript\n\n // Create a box-shaped geometry\n\n bigModel.createGeometry({\n     id: \"myGeometry\",\n     primitive: \"triangles\",\n     positions: [2, 2, 2, -2, 2, 2, -2, -2, ... ],\n     normals: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, ... ],\n     indices: [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, ... ],\n });\n\n // Create a blue object that instances the geometry\n\n var object3 = bigModel.createMesh({\n     id: \"myObject3\",\n     geometryId: \"mGeometry\",\n     color: [0, 0, 1],\n     matrix: xeokit.math.translationMat4c(-7, -7, 0)\n });\n\n // Create a yellow object that instances the geometry\n\n var object4 = bigModel.createMesh({\n     id: \"myObject4\",\n     geometryId: \"mGeometry\",\n     color: [1, 1, 0],\n     matrix: xeokit.math.translationMat4c(0, -7, 0)\n });\n ````\n\n ### Finalizing\n\n Once we've created all our objects, we need to finalize the BigModel before it will render. Once finalized, we can no longer\n create objects within it.\n\n ```` javascript\n bigModel.finalize();\n ````\n\n ### Finding objects\n\n TODO\n\n\n @class BigModel\n @module xeokit\n @submodule models\n @constructor\n @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n @param {*} [cfg] Configs\n @param {String} [cfg.id] Optional ID, unique among all components in the parent scene, generated automatically when omitted.\n @param {String:Object} [cfg.meta] Optional map of user-defined metadata.\n @param [cfg.objectId] {String} Optional entity classification when using within a semantic data model. See the {@link Node} documentation for usage.\n @param [cfg.parent] {Object} The parent.\n @param [cfg.position=[0,0,0]] {Float32Array} Local 3D position.\n @param [cfg.scale=[1,1,1]] {Float32Array} Local scale.\n @param [cfg.rotation=[0,0,0]] {Float32Array} Local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n @param [cfg.matrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1] {Float32Array} Local modelling transform matrix. Overrides the position, scale and rotation parameters.\n @param [cfg.visible=true] {Boolean}        Indicates if visible.\n @param [cfg.culled=false] {Boolean}        Indicates if culled from view.\n @param [cfg.pickable=true] {Boolean}       Indicates if pickable.\n @param [cfg.clippable=true] {Boolean}      Indicates if clippable.\n @param [cfg.collidable=true] {Boolean}     Indicates if included in boundary calculations.\n @param [cfg.castShadow=true] {Boolean}     Indicates if casting shadows.\n @param [cfg.receiveShadow=true] {Boolean}  Indicates if receiving shadows.\n @param [cfg.outlined=false] {Boolean}      Indicates if outline is rendered.\n @param [cfg.ghosted=false] {Boolean}       Indicates if rendered as ghosted.\n @param [cfg.highlighted=false] {Boolean}   Indicates if rendered as highlighted.\n @param [cfg.selected=false] {Boolean}      Indicates if rendered as selected.\n @param [cfg.edges=false] {Boolean}         Indicates if edges are emphasized.\n @param [cfg.aabbVisible=false] {Boolean}   Indicates if the BigModel's axis-aligned World-space bounding box is visible.\n @param [cfg.colorize=[1.0,1.0,1.0]] {Float32Array}  RGB colorize color, multiplies by the rendered fragment colors.\n @param [cfg.opacity=1.0] {Number} Opacity factor, multiplies by the rendered fragment alpha.\n\n @extends Component\n */\nclass BigModel extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"BigModel\";\n    }\n\n    /**\n     * @private\n     */\n    get isModel() {\n        return true;\n    }\n\n    /**\n     * @private\n     */\n    get isDrawable() {\n        return true;\n    }\n\n    constructor(owner, cfg={}) {\n\n        super(owner, cfg);\n\n        this._aabb = math.collapseAABB3();\n        this._layers = []; // For GL state efficiency when drawing, InstancingLayers are in first part, BatchingLayers are in second\n        this._instancingLayers = {}; // InstancingLayer for each geometry - can build many of these concurrently\n        this._currentBatchingLayer = null; // Current BatchingLayer - can only build one of these at a time due to its use of global geometry buffers\n        this._objectIds = [];\n        this._buffer = getBatchingBuffer(); // Each BigModel gets it's own batching buffer - allows multiple BigModels to load concurrently\n\n\n        /**\n         All contained {@link BigModelMesh\"}}BigModelMesh{{/crossLink}} instances, mapped to their IDs.\n\n         @property meshes\n         @final\n         @type {{String:BigModelMesh}}\n         */\n        this.meshes = {};\n\n        /**\n         All contained {@link BigModelObject\"}}BigModelObject{{/crossLink}} instances, mapped to their IDs.\n\n         @property objects\n         @final\n         @type {{String:BigModelObject}}\n         */\n        this.objects = {};\n\n        this.numGeometries = 0; // Number of instance-able geometries created with createGeometry()\n\n        // These counts are used to avoid unnecessary render passes\n        this.numObjects = 0;\n        this.numVisibleObjects = 0;\n        this.numTransparentObjects = 0;\n        this.numGhostedObjects = 0;\n        this.numHighlightedObjects = 0;\n        this.numSelectedObjects = 0;\n        this.numEdgesObjects = 0;\n\n        this.visible = cfg.visible;\n        this.culled = cfg.culled;\n        this.pickable = cfg.pickable;\n        this.clippable = cfg.clippable;\n        this.collidable = cfg.collidable;\n        this.castShadow = cfg.castShadow;\n        this.receiveShadow = cfg.receiveShadow;\n        this.outlined = cfg.outlined;\n        this.ghosted = cfg.ghosted;\n        this.highlighted = cfg.highlighted;\n        this.selected = cfg.selected;\n        this.edges = cfg.edges;\n        this.aabbVisible = cfg.aabbVisible;\n        this.layer = cfg.layer;\n        this.colorize = cfg.colorize;\n        this.opacity = cfg.opacity;\n\n        // Build static matrix\n\n        this._position = new Float32Array(cfg.position || [0, 0, 0]);\n        this._rotation = new Float32Array(cfg.rotation || [0, 0, 0]);\n        this._quaternion = new Float32Array(cfg.quaternion || [0, 0, 0, 1]);\n        if (cfg.rotation) {\n            math.eulerToQuaternion(this._rotation, \"XYZ\", this._quaternion);\n        }\n        this._scale = new Float32Array(cfg.scale || [1, 1, 1]);\n        this._worldMatrix = math.mat4();\n        math.composeMat4(this._position, this._quaternion, this._scale, this._worldMatrix);\n        this._worldNormalMatrix = math.mat4();\n        math.inverseMat4(this._worldMatrix, this._worldNormalMatrix);\n        math.transposeMat4(this._worldNormalMatrix);\n    }\n\n    /**\n     Translation offsets.\n\n     @property position\n     @default [0,0,0]\n     @type {Float32Array}\n     @final\n     */\n    get position() {\n        return this._position;\n    }\n\n    /**\n     Rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n\n     @property rotation\n     @default [0,0,0]\n     @type {Float32Array}\n     @final\n     */\n    get rotation() {\n        return this._rotation;\n    }\n\n    /**\n     Rotation quaternion.\n\n     @property quaternion\n     @default [0,0,0, 1]\n     @type {Float32Array}\n     @final\n     */\n    get quaternion() {\n        return this._quaternion;\n    }\n\n    /**\n     Scale factors.\n\n     @property scale\n     @default [1,1,1]\n     @type {Float32Array}\n     @final\n     */\n    get scale() {\n        return this._scale;\n    }\n\n    /**\n     * Modeling matrix. Same as the World matrix.\n     *\n     * @property matrix\n     * @default [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n     * @type {Float32Array}\n     * @final\n     */\n    get matrix() {\n        return this._worldMatrix;\n    }\n\n    /**\n     * World matrix. Same as the Modeling matrix.\n     *\n     * @property worldMatrix\n     * @type {Float32Array}\n     * @final\n     */\n    get worldMatrix() {\n        return this._worldMatrix;\n    }\n\n    /**\n     * World normal matrix.\n     *\n     * @property worldNormalMatrix\n     * @default [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n     * @type {Float32Array}\n     * @final\n     */\n    get worldNormalMatrix() {\n        return this._worldNormalMatrix;\n    }\n\n    static getGeometryBytesUsed(positions, colors, indices, normals) {\n        // var bytes = 0;\n        // bytes += positions.length * 2;\n        // if (colors != null) {\n        //     bytes += colors.length;\n        // }\n        // //bytes += positions.length * 8;\n        // if (indices.length < 65536 && useSmallIndicesIfPossible) {\n        //     bytes += indices.length * 2;\n        // } else {\n        //     bytes += indices.length * 4;\n        // }\n        // bytes += normals.length;\n        // return bytes;\n    }\n\n    /**\n     Creates a reusable geometry within this BigModel.\n\n     We can then call {@link BigModel/createMesh:method\"}}createMesh(){{/crossLink}} with the\n     ID of the geometry to create a {@link BigModelMesh} within this BigModel that instances it.\n\n     @method createGeometry\n     @param {*} cfg Geometry properties.\n     @param {String|Number} cfg.id ID for the geometry, to refer to with {@link BigModel/createMesh:method\"}}createMesh(){{/crossLink}}\n     @param [cfg.primitive=\"triangles\"] {String} The primitive type. Accepted values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'.\n     @param {Array} cfg.positions Flat array of positions.\n     @param {Array} cfg.normals Flat array of normal vectors.\n     @param {Array} cfg.indices Array of triangle indices.\n     @param {Array} cfg.edgeIndices Array of edge line indices.\n     */\n    createGeometry(cfg) {\n        if (!instancedArraysSupported) {\n            this.error(\"WebGL instanced arrays not supported\"); // TODO: Gracefully use batching?\n            return;\n        }\n        var geometryId = cfg.id;\n        if (geometryId === undefined || geometryId === null) {\n            this.error(\"Config missing: id\");\n            return;\n        }\n        if (this._instancingLayers[geometryId]) {\n            this.error(\"Geometry already created: \" + geometryId);\n            return;\n        }\n        var instancingLayer = new InstancingLayer(this, cfg);\n        this._layers.unshift(instancingLayer); // Instancing layers are rendered before batching layers\n        this._instancingLayers[geometryId] = instancingLayer;\n        this.numGeometries++;\n    }\n\n    /**\n     Creates a {@link BigModelMesh} within this BigModel.\n\n     You can provide either geometry data arrays or the ID of a geometry that was previously created\n     with {@link BigModel/createGeometry:method\"}}createGeometry(){{/crossLink}}.\n\n     When you provide arrays, then that geometry will be used solely by the BigModelObject, which will be rendered\n     using geometry batching.\n\n     When you provide a geometry ID, then the BigModelMesh will instance that geometry, and will be\n     rendered using WebGL instancing.\n\n     @method createMesh\n     @param {*} cfg Object properties.\n     @param {String} cfg.id ID for the new object. Must not clash with any existing components within the {@link Scene}.\n     @param {String} [cfg.parentId] ID if the parent object, if any. Must resolve to a {@link BigModelMesh} that has already been created within this BigModel.\n     @param {String|Number} [cfg.geometryId] ID of a geometry to instance, previously created with {@link BigModel/createGeometry:method\"}}createMesh(){{/crossLink}}. Overrides all other geometry parameters given to this method.\n     @param [cfg.primitive=\"triangles\"] {String} Geometry primitive type. Ignored when geometryId is given. Accepted values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'.\n     @param {Array} [cfg.positions] Flat array of geometry positions. Ignored when geometryId is given.\n     @param {Array} [cfg.normals] Flat array of normal vectors. Ignored when geometryId is given.\n     @param {Array} [cfg.indices] Array of triangle indices. Ignored when geometryId is given.\n     @param {Array} [cfg.edgeIndices] Array of edge line indices. Ignored when geometryId is given.\n     @param {Array} [cfg.matrix] Modeling matrix.\n\n     @returns {BigModelMesh}\n     */\n    createMesh(cfg) {\n\n        var id = cfg.id;\n\n        if (this.scene.components[id]) {\n            this.error(\"Scene already has a Component with this ID: \" + id + \" - will assign random ID\");\n            id = math.createUUID();\n        }\n\n        const geometryId = cfg.geometryId;\n        const instancing = (geometryId !== undefined);\n\n        if (instancing) {\n            if (!instancedArraysSupported) {\n                this.error(\"WebGL instanced arrays not supported\"); // TODO: Gracefully use batching?\n                return;\n            }\n            if (!this._instancingLayers[geometryId]) {\n                this.error(\"Geometry not found: \" + geometryId + \" - ensure that you create it first with createGeometry()\");\n                return;\n            }\n        }\n\n        var flags = 0;\n        var matrix = cfg.matrix ? math.mulMat4(this._worldMatrix, cfg.matrix, tempMat4) : this._worldMatrix;\n        var layer;\n        var portionId;\n        var aabb = math.collapseAABB3();\n\n        var color = cfg.color;\n        color = new Uint8Array([ // Quantize color\n            color ? Math.floor(color[0] * 255) : 255,\n            color ? Math.floor(color[1] * 255) : 255,\n            color ? Math.floor(color[2] * 255) : 255,\n            (cfg.opacity !== undefined) ? (cfg.opacity * 255) : (color ? Math.floor(color[3] * 255) : 255)\n        ]);\n        if (color[3] < 255) {\n            this.numTransparentObjects++;\n        }\n\n        // TODO: A small hack where BigModelMesh gets it's pickId from xeokit Renderer, which gets fed into its layer portion on instantiation, meaning that we need to attach the later and portionId to mesh afterwards.\n\n        var mesh = new BigModelMesh(this, id);\n        var pickId = mesh.pickId;\n        const a = pickId >> 24 & 0xFF;\n        const b = pickId >> 16 & 0xFF;\n        const g = pickId >> 8 & 0xFF;\n        const r = pickId & 0xFF;\n        const pickColor = new Uint8Array([r, g, b, a]); // Quantized color\n\n        if (instancing) {\n            var instancingLayer = this._instancingLayers[geometryId];\n            layer = instancingLayer;\n            portionId = instancingLayer.createPortion(flags, color, matrix, aabb, pickColor);\n            math.expandAABB3(this._aabb, aabb);\n\n        } else {\n\n            var primitive = cfg.primitive || \"triangles\";\n            if (primitive !== \"points\" && primitive !== \"lines\" && primitive !== \"line-loop\" &&\n                primitive !== \"line-strip\" && primitive !== \"triangles\" && primitive !== \"triangle-strip\" && primitive !== \"triangle-fan\") {\n                this.error(`Unsupported value for 'primitive': '${primitive}' - supported values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'. Defaulting to 'triangles'.`);\n                primitive = \"triangles\";\n            }\n            var indices = cfg.indices;\n            var edgeIndices = cfg.edgeIndices;\n            var positions = cfg.positions;\n            if (!positions) {\n                this.error(\"Config missing: positions (no meshIds provided, so expecting geometry arrays instead)\");\n                return null;\n            }\n            var normals = cfg.normals;\n            if (!normals) {\n                this.error(\"Config missing: normals (no meshIds provided, so expecting geometry arrays instead)\");\n                return null;\n            }\n            if (!edgeIndices && !indices) {\n                this.error(\"Config missing: must have one or both of indices and edgeIndices  (no meshIds provided, so expecting geometry arrays instead)\");\n                return null;\n            }\n            if (this._currentBatchingLayer) {\n                if (!this._currentBatchingLayer.canCreatePortion(cfg.positions.length)) {\n                    this._currentBatchingLayer.finalize();\n                    this._currentBatchingLayer = null;\n                }\n            }\n            if (!this._currentBatchingLayer) {\n                this._currentBatchingLayer = new BatchingLayer(this, {primitive: \"triangles\", buffer: this._buffer});\n                this._layers.push(this._currentBatchingLayer); // For efficient GL state sorting, instancing layers rendered before batching layers\n            }\n            layer = this._currentBatchingLayer;\n            if (!edgeIndices && indices) {\n                edgeIndices = math.buildEdgeIndices(positions, indices, null, 10, false);\n            }\n            portionId = this._currentBatchingLayer.createPortion(positions, normals, indices, edgeIndices, flags, color, matrix, aabb, pickColor);\n            math.expandAABB3(this._aabb, aabb);\n            this.numGeometries++;\n        }\n\n        mesh.object = null; // Will be set within BigModelObject constructor\n        mesh._layer = layer;\n        mesh._portionId = portionId;\n        mesh.aabb = aabb;\n\n        this.meshes[id] = mesh;\n\n\n        // console.log(\"mesh \" + id + \" = \" + aabb);\n\n        if (false) {\n            new Mesh(this.scene, {\n                geometry: new AABBGeometry(this.scene, {\n                    targetAABB: mesh.aabb\n                }),\n                material: new PhongMaterial(this.scene, {\n                    diffuse: [0.5, 1.0, 0.5],\n                    emissive: [0.5, 1.0, 0.5],\n                    lineWidth: 1\n                })\n            });\n        }\n\n        return mesh;\n    }\n\n    /**\n     Creates a {@link BigModelObject} within this BigModel, giving it one or\n     more meshes previously created with {@link BigModel/createMesh\"}}createMesh(){{/crossLink}}.\n\n     A mesh can only belong to one BigModelObject, so you'll get an error if you try to reuse a mesh among\n     multiple BigModelObjects.\n\n     @param cfg\n     @returns {BigModelObject}\n     */\n    createObject(cfg) {\n        // Validate or generate BigModelObject ID\n        var id = cfg.id;\n        if (id === undefined) {\n            id = math.createUUID();\n        } else if (this.scene.components[id]) {\n            this.error(\"Scene already has a Component with this ID: \" + id + \" - will assign random ID\");\n            id = math.createUUID();\n        }\n        // Collect BigModelObject's BigModelMeshes\n        var meshIds = cfg.meshIds;\n        if (meshIds === undefined) {\n            this.error(\"Config missing: meshIds\");\n            return;\n        }\n        var i;\n        var len;\n        var meshId;\n        var mesh;\n        var meshes = [];\n        for (i = 0, len = meshIds.length; i < len; i++) {\n            meshId = meshIds[i];\n            mesh = this.meshes[meshId];\n            if (!mesh) {\n                this.error(\"Mesh with this ID not found: \" + meshId + \" - ignoring this mesh\");\n                continue;\n            }\n            if (mesh.object) {\n                this.error(\"Mesh with ID \" + meshId + \" already belongs to object with ID \" + mesh.object.id + \" - ignoring this mesh\");\n                continue;\n            }\n            meshes.push(mesh);\n        }\n        // Create BigModelObject flags\n        var flags = 0;\n        if (this._visible && cfg.visible !== false) { // Apply flags fom xeokit.Object base class\n            flags = flags | RENDER_FLAGS.VISIBLE;\n            this.numVisibleObjects++;\n        }\n        if (this._pickable && cfg.pickable !== false) {\n            flags = flags | RENDER_FLAGS.PICKABLE;\n        }\n        if (this._clippable && cfg.clippable !== false) {\n            flags = flags | RENDER_FLAGS.CLIPPABLE;\n        }\n        if (this._collidable && cfg.collidable !== false) {\n            flags = flags | RENDER_FLAGS.COLLIDABLE;\n        }\n        if (this._edges && cfg.edges !== false) {\n            flags = flags | RENDER_FLAGS.EDGES;\n            this.numEdgesObjects++;\n        }\n        if (this._ghosted && cfg.ghosted !== false) {\n            flags = flags | RENDER_FLAGS.GHOSTED;\n            this.numGhostedObjects++;\n        }\n        if (this._highlighted && cfg.highlighted !== false) {\n            flags = flags | RENDER_FLAGS.HIGHLIGHTED;\n            this.numHighlightedObjects++;\n        }\n        if (this._selected && cfg.selected !== false) {\n            flags = flags | RENDER_FLAGS.SELECTED;\n            this.numSelectedObjects++;\n        }\n        // Create BigModelObject AABB\n        var aabb;\n        if (meshes.length === 1) {\n            aabb = meshes[0].aabb;\n        } else {\n            aabb = math.collapseAABB3();\n            for (i = 0, len = meshes.length; i < len; i++) {\n                math.expandAABB3(aabb, meshes[i].aabb);\n            }\n        }\n        var object = new BigModelObject(this, cfg.objectId, id, meshes, flags, aabb); // Internally sets BigModelMesh#object to this BigModelObject\n        this.objects[id] = object;\n        this._objectIds.push(id);\n        this.numObjects++;\n        return object;\n    }\n\n    /**\n     Finalizes this BigModel.\n\n     Internally, this builds any geometry batches or instanced arrays that are currently under construction.\n\n     Once finalized, you can't create any more objects within this BigModel.\n\n     @method finalize\n     */\n    finalize() {\n        if (this._currentBatchingLayer) {\n            this._currentBatchingLayer.finalize();\n            this._currentBatchingLayer = null;\n        }\n        if (this._buffer) {\n            putBatchingBuffer(this._buffer);\n            this._buffer = null;\n        }\n        for (const geometryId in this._instancingLayers) {\n            if (this._instancingLayers.hasOwnProperty(geometryId)) {\n                this._instancingLayers[geometryId].finalize();\n            }\n        }\n        for (var id in this.objects) {\n            if (this.objects.hasOwnProperty(id)) {\n                this.objects[id]._finalize();\n            }\n        }\n        this.glRedraw();\n        this.scene._aabbDirty = true;\n        console.log(\"[BigModel] finalize() - numObjects = \" + this.numObjects + \", numGeometries = \" + this.numGeometries);\n    }\n\n    /**\n     Gets the IDs of objects within this BigModel.\n\n     @method getObjectIds\n     @returns {Array}\n     */\n    getObjectIDs() {\n        return this._objectIds;\n    }\n\n    /**\n     World-space 3D axis-aligned bounding box (AABB) enclosing the objects within this BigModel.\n\n     Represented by a six-element Float32Array containing the min/max extents of the\n     axis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.\n\n     @property aabb\n     @final\n     @type {Float32Array}\n     */\n    get aabb() {\n        return this._aabb;\n    }\n\n    /**\n     Indicates if objects in this BigModel are visible.\n\n     Only rendered when {@link BigModel/visible} is true and\n     {@link BigModel/culled} is false.\n\n     @property visible\n     @default true\n     @type Boolean\n     */\n    set visible(visible) {\n        visible = visible !== false;\n        this._visible = visible;\n        for (var i = 0, len = this._objectIds.length; i < len; i++) {\n            this.objects[this._objectIds[i]].visible = visible;\n        }\n        this.glRedraw();\n    }\n\n    get visible() {\n        return (this.numVisibleObjects > 0);\n    }\n\n    /**\n     Indicates if objects in this BigModel are highlighted.\n\n     Highlighted appearance for the entire BigModel is configured by the {@link Scene/highlightMaterial:property\"}}Scene highlightMaterial{{/crossLink}}.\n\n     @property highlighted\n     @default false\n     @type Boolean\n     */\n    set highlighted(highlighted) {\n        highlighted = !!highlighted;\n        this._highlighted = highlighted;\n        for (var i = 0, len = this._objectIds.length; i < len; i++) {\n            this.objects[this._objectIds[i]].highlighted = highlighted;\n        }\n        this.glRedraw();\n    }\n\n    get highlighted() {\n        return (this.numHighlightedObjects > 0);\n    }\n\n    /**\n     Indicates if objects in this BigModel are selected.\n\n     Selected appearance for the entire BigModel is configured by the {@link Scene/selectedMaterial:property\"}}Scene selectedMaterial{{/crossLink}}.\n\n     @property selected\n     @default false\n     @type Boolean\n     */\n    set selected(selected) {\n        selected = !!selected;\n        this._selected = selected;\n        for (var i = 0, len = this._objectIds.length; i < len; i++) {\n            this.objects[this._objectIds[i]].selected = selected;\n        }\n        this.glRedraw();\n    }\n\n    get selected() {\n        return (this.numSelectedObjects > 0);\n    }\n\n    /**\n     Indicates if objects in this BigModel are ghosted.\n\n     Ghosted appearance for the entire BigModel is configured by the {@link Scene/ghostMaterial:property\"}}Scene ghostMaterial{{/crossLink}}.\n\n     @property ghosted\n     @default false\n     @type Boolean\n     */\n    set ghosted(ghosted) {\n        ghosted = !!ghosted;\n        this._ghosted = ghosted;\n        for (var i = 0, len = this._objectIds.length; i < len; i++) {\n            this.objects[this._objectIds[i]].ghosted = ghosted;\n        }\n        this.glRedraw();\n    }\n\n    get ghosted() {\n        return (this.numGhostedObjects > 0);\n    }\n\n    /**\n     Indicates if objects in BigModel are shown with emphasized edges.\n\n     Edges appearance for the entire BigModel is configured by the {@link Scene/edgeMaterial:property\"}}Scene edgeMaterial{{/crossLink}}.\n\n     @property edges\n     @default false\n     @type Boolean\n     */\n    set edges(edges) {\n        edges = !!edges;\n        this._edges = edges;\n        for (var i = 0, len = this._objectIds.length; i < len; i++) {\n            this.objects[this._objectIds[i]].edges = edges;\n        }\n        this.glRedraw();\n    }\n\n    get edges() {\n        return (this.numEdgesObjects > 0);\n    }\n\n    /**\n     Indicates if this BigModel is culled from view.\n\n     The BigModel is only rendered when {@link BigModel/visible} is true and\n     {@link BigModel/culled} is false.\n\n     @property culled\n     @default false\n     @type Boolean\n     */\n    set culled(culled) {\n        culled = !!culled;\n        this._culled = culled; // Whole BigModel is culled\n        this.glRedraw();\n    }\n\n    get culled() {\n        return this._culled;\n    }\n\n    /**\n     Indicates if this BigModel is clippable.\n\n     Clipping is done by the {@link Scene}'s {@link Clips} component.\n\n     @property clippable\n     @default true\n     @type Boolean\n     */\n    set clippable(clippable) {\n        clippable = clippable !== false;\n        this._clippable = clippable;\n        for (var i = 0, len = this._objectIds.length; i < len; i++) {\n            this.objects[this._objectIds[i]].clippable = clippable;\n        }\n        this.glRedraw();\n    }\n\n    get clippable() {\n        return this._clippable;\n    }\n\n    /**\n     Indicates if this BigModel is included in the {@link Scene/aabb:property\"}}Scene aabb{{/crossLink}}.\n\n     @property collidable\n     @default true\n     @type Boolean\n     */\n    set collidable(collidable) {\n        collidable = collidable !== false;\n        this._collidable = collidable;\n        for (var i = 0, len = this._objectIds.length; i < len; i++) {\n            this.objects[this._objectIds[i]].collidable = collidable;\n        }\n    }\n\n    get collidable() {\n        return this._collidable;\n    }\n\n    /**\n     Whether or not to allow picking on this BigModel.\n\n     Picking is done via calls to {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.\n\n     @property pickable\n     @default true\n     @type Boolean\n     */\n    set pickable(pickable) {\n        pickable = pickable !== false;\n        this._pickable = pickable;\n        for (var i = 0, len = this._objectIds.length; i < len; i++) {\n            this.objects[this._objectIds[i]].pickable = pickable;\n        }\n    }\n\n    get pickable() {\n        return this._pickable;\n    }\n\n    /**\n     Defines the appearance of edges of objects within this BigModel.\n\n     This is the {@link Scene/edgeMaterial:property\"}}Scene edgeMaterial{{/crossLink}}.\n\n     @property edgeMaterial\n     @type EdgeMaterial\n     */\n    get edgeMaterial() {\n        return this.scene.edgeMaterial;\n    }\n\n    /**\n     Defines the appearance of ghosted objects within this BigModel.\n\n     This is the {@link Scene/ghostMaterial:property\"}}Scene ghostMaterial{{/crossLink}}.\n\n     @property ghostMaterial\n     @type EmphasisMaterial\n     */\n    get ghostMaterial() {\n        return this.scene.ghostMaterial;\n    }\n\n    /**\n     Defines the appearance of highlighted objects within this BigModel.\n\n     This is the {@link Scene/highlightMaterial:property\"}}Scene highlightMaterial{{/crossLink}}.\n\n     @property highlightMaterial\n     @type EmphasisMaterial\n     */\n    get highlightMaterial() {\n        return this.scene.highlightMaterial;\n    }\n\n    /**\n     Defines the appearance of selected objects within this BigModel.\n\n     This is the {@link Scene/selectedMaterial:property\"}}Scene selectedMaterial{{/crossLink}}.\n\n     @property selectedMaterial\n     @type EmphasisMaterial\n     */\n    get selectedMaterial() {\n        return this.scene.selectedMaterial;\n    }\n\n    compile() {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].compileShaders();\n        }\n        this.glRedraw();\n    }\n\n    /**\n     * Called by the renderer to check if this drawable should be included in it's state-sorted drawables list.\n     * @private\n     * @returns {boolean}\n     */\n    get isStateSortable() { // BigModel contains essentially a uniform rendering state, so doesn't need state sorting\n        return false;\n    }\n\n    /**\n     *  Called by xeokit, when about to render this BigModel Drawable, to get flags indicating what rendering effects to apply for it.\n     *\n     * @method getRenderFlags\n     * @param {RenderFlags} renderFlags Returns the rendering flags.\n     */\n    getRenderFlags(renderFlags) {\n\n        // Unlike xeokit.Mesh, rendering modes are less mutually exclusive\n        // because a BigModel contains multiple BigModelMesh objects, which\n        // can have a mixture of rendering states.\n\n        // TODO: can we optimize to avoid tests for ghosted objects from also being\n        // highlighted in shader etc?\n\n        renderFlags.reset();\n\n        if (this.numVisibleObjects === 0) {\n            return;\n        }\n\n        if (this.numGhostedObjects > 0) {\n            const ghostMaterial = this.scene.ghostMaterial._state;\n            if (ghostMaterial.fill) {\n                if (ghostMaterial.fillAlpha < 1.0) {\n                    renderFlags.ghostedFillTransparent = true;\n                } else {\n                    renderFlags.ghostedFillOpaque = true;\n                }\n            }\n            if (ghostMaterial.edges) {\n                if (ghostMaterial.edgeAlpha < 1.0) {\n                    renderFlags.ghostedFillTransparent = true;\n                } else {\n                    renderFlags.ghostedFillOpaque = true;\n                }\n            }\n        }\n\n        if (this.numEdgesObjects > 0) {\n            const edgeMaterial = this.scene.edgeMaterial._state;\n            if (edgeMaterial.alpha < 1.0) {\n                renderFlags.normalEdgesTransparent = true;\n            } else {\n                renderFlags.normalEdgesOpaque = true;\n            }\n        }\n\n        // if (this.numGhostedObjects < this.numVisibleObjects) {\n        //     renderFlags.normalFillOpaque = true;\n        // }\n\n        if (this.numTransparentObjects > 0) {\n            renderFlags.normalFillTransparent = true;\n        }\n\n       renderFlags.normalFillOpaque = true;\n\n        // if (this.numVisibleObjects > this.numGhostedObjects && this.numVisibleObjects > this.numHighlightedObjects && this.numVisibleObjects > this.numSelectedObjects) {\n        //     if (this.numTransparentObjects < this.numVisibleObjects) {\n        //         renderFlags.normalFillTransparent = true;\n        //     }\n        //\n        //     {\n        //         renderFlags.normalFillOpaque = true;\n        //     }\n        // }\n\n        if (this.numSelectedObjects > 0) {\n            const selectedMaterial = this.scene.selectedMaterial._state;\n            if (selectedMaterial.fill) {\n                if (selectedMaterial.fillAlpha < 1.0) {\n                    renderFlags.selectedFillTransparent = true;\n                } else {\n                    renderFlags.selectedFillOpaque = true;\n                }\n            }\n            if (selectedMaterial.edges) {\n                if (selectedMaterial.edgeAlpha < 1.0) {\n                    renderFlags.selectedEdgesTransparent = true;\n                } else {\n                    renderFlags.selectedEdgesOpaque = true;\n                }\n            }\n        }\n\n        if (this.numHighlightedObjects > 0) {\n            const highlightMaterial = this.scene.highlightMaterial._state;\n            if (highlightMaterial.fill) {\n                if (highlightMaterial.fillAlpha < 1.0) {\n                    renderFlags.highlightFillTransparent = true;\n                } else {\n                    renderFlags.highlightFillOpaque = true;\n                }\n            }\n            if (highlightMaterial.edges) {\n                if (highlightMaterial.edgeAlpha < 1.0) {\n                    renderFlags.highlightEdgesTransparent = true;\n                } else {\n                    renderFlags.highlightEdgesOpaque = true;\n                }\n            }\n        }\n    }\n\n    //-- NORMAL --------------------------------------------------------------------------------------------------------\n\n    drawNormalFillOpaque(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawNormalFillOpaque(frameCtx);\n        }\n    }\n\n    drawNormalEdgesOpaque(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawNormalEdgesOpaque(frameCtx);\n        }\n    }\n\n    drawNormalFillTransparent(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawNormalFillTransparent(frameCtx);\n        }\n    }\n\n    drawNormalEdgesTransparent(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawNormalEdgesTransparent(frameCtx);\n        }\n    }\n\n    //-- GHOSTED -------------------------------------------------------------------------------------------------------\n\n    drawGhostedFillOpaque(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawGhostedFillOpaque(frameCtx);\n        }\n    }\n\n    drawGhostedEdgesOpaque(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawGhostedEdgesOpaque(frameCtx);\n        }\n    }\n\n    drawGhostedFillTransparent(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawGhostedFillTransparent(frameCtx);\n        }\n    }\n\n    drawGhostedEdgesTransparent(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawGhostedEdgesTransparent(frameCtx);\n        }\n    }\n\n    //-- HIGHLIGHTED ---------------------------------------------------------------------------------------------------\n\n    drawHighlightedFillOpaque(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawHighlightedFillOpaque(frameCtx);\n        }\n    }\n\n    drawHighlightedEdgesOpaque(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawHighlightedEdgesOpaque(frameCtx);\n        }\n    }\n\n    drawHighlightedFillTransparent(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawHighlightedFillTransparent(frameCtx);\n        }\n    }\n\n    drawHighlightedEdgesTransparent(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawHighlightedEdgesTransparent(frameCtx);\n        }\n    }\n\n    //-- SELECTED ------------------------------------------------------------------------------------------------------\n\n    drawSelectedFillOpaque(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawSelectedFillOpaque(frameCtx);\n        }\n    }\n\n    drawSelectedEdgesOpaque(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawSelectedEdgesOpaque(frameCtx);\n        }\n    }\n\n    drawSelectedFillTransparent(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawSelectedFillTransparent(frameCtx);\n        }\n    }\n\n    drawSelectedEdgesTransparent(frameCtx) {\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawSelectedEdgesTransparent(frameCtx);\n        }\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n\n    drawOutline(frameCtx) {\n    }\n\n    drawShadow(frameCtx) {\n    }\n\n    drawPickMesh(frameCtx) {\n        if (this.numVisibleObjects === 0) {\n            return;\n        }\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].drawPickMesh(frameCtx);\n        }\n    }\n\n    _findPickedObject(color) {\n        // TODO: map color back to an object\n    }\n\n    destroy() {\n        super.destroy();\n        for (var i = 0, len = this._layers.length; i < len; i++) {\n            this._layers[i].destroy();\n        }\n        for (var i = 0, len = this._objectIds.length; i < len; i++) {\n            this.objects[this._objectIds[i]]._destroy();\n        }\n        this.scene._aabbDirty = true;\n    }\n}\n\nexport {BigModel};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/BigModel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "variable",
    "name": "instancedArraysSupported",
    "memberof": "scene/bigModels/BigModel.js",
    "static": true,
    "longname": "scene/bigModels/BigModel.js~instancedArraysSupported",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/BigModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 123,
    "kind": "variable",
    "name": "tempColor",
    "memberof": "scene/bigModels/BigModel.js",
    "static": true,
    "longname": "scene/bigModels/BigModel.js~tempColor",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/BigModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 124,
    "kind": "variable",
    "name": "tempMat4",
    "memberof": "scene/bigModels/BigModel.js",
    "static": true,
    "longname": "scene/bigModels/BigModel.js~tempMat4",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/BigModel.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 125,
    "kind": "class",
    "name": "BigModel",
    "memberof": "scene/bigModels/BigModel.js",
    "static": true,
    "longname": "scene/bigModels/BigModel.js~BigModel",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/BigModel.js",
    "importStyle": "{BigModel}",
    "description": "A **BigModel** is a lightweight representation used for huge engineering models, in which the quantity of objects\nis more important than a realistic appearance or the ability to dynamically translate them.\n\nLike the rest of xeokit, is compatible with WebGL version 1.\nUsed for high-detail engineering visualizations containing millions of objects.\nRepresents each of its objects with a {@link BigModelMesh}, which is a lightweight alternative to {@link Node}.\nRenders flat-shaded, without textures. Each object has simply a color and an opacity to describe its surface appearance.\nObjects can be individually visible, clippable, collidable, ghosted, highlighted, selected, edge-enhanced etc.\nThe transforms of a BigModel and its BigModelObjects are static, ie. they cannot be dynamically translated, rotated and scaled.\nFor a low memory footprint, does not retain geometry data in CPU memory. Keeps geometry only in GPU memory (which cannot be read).\nRendered using a combination of WebGL instancing and geometry batching. Instances objects that share geometries, while batching objects that have unique geometries.\nUses the {@link Scene}'s {@link Scene/ghostMaterial}, {@link Scene/highlightMaterial},\n{@link Scene/selectedMaterial} and {@link Scene/edgeMaterial} to define appearance when emphasised.\n\n## Examples\n\n[BigModel with objects having unique geometries](../../examples/#models_BigModel_batching)\n[BigModel with objects reusing the same geometries](../../examples/#models_BigModel_instancing)\n\n## Usage\n\nxeokit renders BigModels using a combination of [geometry batching]() and WebGL [hardware instancing]().\n\nFor objects that share geometries, xeokit batches their geometries into uber-vertex buffers, which enables those objects\nto be rendered collectively with a single draw call. For objects that do share geometries, xeokit uses instancing to render\neach of those geometry's objects with a single draw call.\n\nThe BigModel API gives you the ability to select which technique to apply for each object, as described below. Its BigGLTFModel\nsubclass, which loads glTF, will automatically determine which technique to apply for each object, by tracking the amount of\nreuse of geometries within the glTF.\n\n### Creating objects with unique geometries\n\nTo create objects that each have their own unique geometry, specify the geometry as you create those objects:\n\n````javascript\nvar bigModel = new xeokit.BigModel();\n\n// Create a red box object\n\nvar object1 = bigModel.createMesh({\nid: \"myObject1\",\nprimitive: \"triangles\",\npositions: [2, 2, 2, -2, 2, 2, -2, -2, ... ],\nnormals: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, ... ],\nindices: [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, ... ],\ncolor: [1, 0, 0],\nmatrix: xeokit.math.translationMat4c(-7, 0, 0)\n});\n\n// Create a green box object\n\nvar object2 = bigModel.createMesh({\nid: \"myObject2\",\nprimitive: \"triangles\",\npositions: [2, 2, 2, -2, 2, 2, -2, -2, ... ],\nnormals: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, ... ],\nindices: [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, ... ],\ncolor: [0, 1, 0],\nmatrix: xeokit.math.translationMat4c(0, 0, 0)\n});\n````\n\n### Creating objects with shared geometries\n\nTo create multiple objects that share the same geometry, create the geometry first then reference it by ID within each of those objects:\n\n```` javascript\n\n// Create a box-shaped geometry\n\nbigModel.createGeometry({\nid: \"myGeometry\",\nprimitive: \"triangles\",\npositions: [2, 2, 2, -2, 2, 2, -2, -2, ... ],\nnormals: [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, ... ],\nindices: [0, 1, 2, 0, 2, 3, 4, 5, 6, 4, ... ],\n});\n\n// Create a blue object that instances the geometry\n\nvar object3 = bigModel.createMesh({\nid: \"myObject3\",\ngeometryId: \"mGeometry\",\ncolor: [0, 0, 1],\nmatrix: xeokit.math.translationMat4c(-7, -7, 0)\n});\n\n// Create a yellow object that instances the geometry\n\nvar object4 = bigModel.createMesh({\nid: \"myObject4\",\ngeometryId: \"mGeometry\",\ncolor: [1, 1, 0],\nmatrix: xeokit.math.translationMat4c(0, -7, 0)\n});\n````\n\n### Finalizing\n\nOnce we've created all our objects, we need to finalize the BigModel before it will render. Once finalized, we can no longer\ncreate objects within it.\n\n```` javascript\nbigModel.finalize();\n````\n\n### Finding objects\n\nTODO",
    "lineNumber": 165,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "BigModel"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "models"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "Configs"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent scene, generated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "String:Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.meta",
        "description": "Optional map of user-defined metadata."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.objectId",
        "description": "{String} Optional entity classification when using within a semantic data model. See the {@link Node} documentation for usage."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.parent",
        "description": "{Object} The parent."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "cfg.position",
        "description": "{Float32Array} Local 3D position."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,1,1]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "cfg.scale",
        "description": "{Float32Array} Local scale."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "cfg.rotation",
        "description": "{Float32Array} Local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1] {Float32Array} Local modelling transform matrix. Overrides the position, scale and rotation parameters.",
        "defaultRaw": "[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1] {Float32Array} Local modelling transform matrix. Overrides the position, scale and rotation parameters.",
        "name": "cfg.matrix",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cfg.visible",
        "description": "{Boolean}        Indicates if visible."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.culled",
        "description": "{Boolean}        Indicates if culled from view."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cfg.pickable",
        "description": "{Boolean}       Indicates if pickable."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cfg.clippable",
        "description": "{Boolean}      Indicates if clippable."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cfg.collidable",
        "description": "{Boolean}     Indicates if included in boundary calculations."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cfg.castShadow",
        "description": "{Boolean}     Indicates if casting shadows."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cfg.receiveShadow",
        "description": "{Boolean}  Indicates if receiving shadows."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.outlined",
        "description": "{Boolean}      Indicates if outline is rendered."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.ghosted",
        "description": "{Boolean}       Indicates if rendered as ghosted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.highlighted",
        "description": "{Boolean}   Indicates if rendered as highlighted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.selected",
        "description": "{Boolean}      Indicates if rendered as selected."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.edges",
        "description": "{Boolean}         Indicates if edges are emphasized."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.aabbVisible",
        "description": "{Boolean}   Indicates if the BigModel's axis-aligned World-space bounding box is visible."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1.0,1.0,1.0]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "cfg.colorize",
        "description": "{Float32Array}  RGB colorize color, multiplies by the rendered fragment colors."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "cfg.opacity",
        "description": "{Number} Opacity factor, multiplies by the rendered fragment alpha."
      }
    ],
    "interface": false,
    "extends": [
      "*"
    ]
  },
  {
    "__docId__": 126,
    "kind": "get",
    "name": "type",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 176,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 127,
    "kind": "get",
    "name": "isModel",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#isModel",
    "access": "private",
    "description": "",
    "lineNumber": 183,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 128,
    "kind": "get",
    "name": "isDrawable",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#isDrawable",
    "access": "private",
    "description": "",
    "lineNumber": 190,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 129,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 194,
    "undocument": true
  },
  {
    "__docId__": 130,
    "kind": "member",
    "name": "_aabb",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_aabb",
    "access": "private",
    "description": null,
    "lineNumber": 198,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 131,
    "kind": "member",
    "name": "_layers",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_layers",
    "access": "private",
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 132,
    "kind": "member",
    "name": "_instancingLayers",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_instancingLayers",
    "access": "private",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "_currentBatchingLayer",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_currentBatchingLayer",
    "access": "private",
    "description": null,
    "lineNumber": 201,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "_objectIds",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_objectIds",
    "access": "private",
    "description": null,
    "lineNumber": 202,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "_buffer",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_buffer",
    "access": "private",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "meshes",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#meshes",
    "access": "public",
    "description": "All contained {@link BigModelMesh\"}}BigModelMesh{{/crossLink}} instances, mapped to their IDs.",
    "lineNumber": 213,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "meshes",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:BigModelMesh}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "objects",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#objects",
    "access": "public",
    "description": "All contained {@link BigModelObject\"}}BigModelObject{{/crossLink}} instances, mapped to their IDs.",
    "lineNumber": 222,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objects",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:BigModelObject}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "numGeometries",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#numGeometries",
    "access": "public",
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "numObjects",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#numObjects",
    "access": "public",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "numVisibleObjects",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#numVisibleObjects",
    "access": "public",
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 141,
    "kind": "member",
    "name": "numTransparentObjects",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#numTransparentObjects",
    "access": "public",
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 142,
    "kind": "member",
    "name": "numGhostedObjects",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#numGhostedObjects",
    "access": "public",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 143,
    "kind": "member",
    "name": "numHighlightedObjects",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#numHighlightedObjects",
    "access": "public",
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 144,
    "kind": "member",
    "name": "numSelectedObjects",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#numSelectedObjects",
    "access": "public",
    "description": null,
    "lineNumber": 232,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 145,
    "kind": "member",
    "name": "numEdgesObjects",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#numEdgesObjects",
    "access": "public",
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 151,
    "kind": "member",
    "name": "castShadow",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#castShadow",
    "access": "public",
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 152,
    "kind": "member",
    "name": "receiveShadow",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#receiveShadow",
    "access": "public",
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 153,
    "kind": "member",
    "name": "outlined",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#outlined",
    "access": "public",
    "description": null,
    "lineNumber": 242,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 158,
    "kind": "member",
    "name": "aabbVisible",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#aabbVisible",
    "access": "public",
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 159,
    "kind": "member",
    "name": "layer",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#layer",
    "access": "public",
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 160,
    "kind": "member",
    "name": "colorize",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#colorize",
    "access": "public",
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "opacity",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#opacity",
    "access": "public",
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "_position",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_position",
    "access": "private",
    "description": null,
    "lineNumber": 254,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "_rotation",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_rotation",
    "access": "private",
    "description": null,
    "lineNumber": 255,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "_quaternion",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_quaternion",
    "access": "private",
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "_scale",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_scale",
    "access": "private",
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 166,
    "kind": "member",
    "name": "_worldMatrix",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_worldMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 261,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 167,
    "kind": "member",
    "name": "_worldNormalMatrix",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_worldNormalMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 263,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 168,
    "kind": "get",
    "name": "position",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#position",
    "access": "public",
    "description": "Translation offsets.",
    "lineNumber": 276,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0,0,0]"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 169,
    "kind": "get",
    "name": "rotation",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#rotation",
    "access": "public",
    "description": "Rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.",
    "lineNumber": 288,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0,0,0]"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rotation",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 170,
    "kind": "get",
    "name": "quaternion",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#quaternion",
    "access": "public",
    "description": "Rotation quaternion.",
    "lineNumber": 300,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0,0,0, 1]"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "quaternion",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 171,
    "kind": "get",
    "name": "scale",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#scale",
    "access": "public",
    "description": "Scale factors.",
    "lineNumber": 312,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1,1,1]"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "scale",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "get",
    "name": "matrix",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#matrix",
    "access": "public",
    "description": "Modeling matrix. Same as the World matrix.",
    "lineNumber": 324,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 173,
    "kind": "get",
    "name": "worldMatrix",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#worldMatrix",
    "access": "public",
    "description": "World matrix. Same as the Modeling matrix.",
    "lineNumber": 335,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "worldMatrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 174,
    "kind": "get",
    "name": "worldNormalMatrix",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#worldNormalMatrix",
    "access": "public",
    "description": "World normal matrix.",
    "lineNumber": 347,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "worldNormalMatrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 175,
    "kind": "method",
    "name": "getGeometryBytesUsed",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/BigModel.js~BigModel.getGeometryBytesUsed",
    "access": "public",
    "description": null,
    "lineNumber": 351,
    "undocument": true,
    "params": [
      {
        "name": "positions",
        "types": [
          "*"
        ]
      },
      {
        "name": "colors",
        "types": [
          "*"
        ]
      },
      {
        "name": "indices",
        "types": [
          "*"
        ]
      },
      {
        "name": "normals",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 176,
    "kind": "method",
    "name": "createGeometry",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#createGeometry",
    "access": "public",
    "description": "Creates a reusable geometry within this BigModel.\n\nWe can then call {@link BigModel/createMesh:method\"}}createMesh(){{/crossLink}} with the\nID of the geometry to create a {@link BigModelMesh} within this BigModel that instances it.",
    "lineNumber": 382,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "createGeometry"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Geometry properties."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.id",
        "description": "ID for the geometry, to refer to with {@link BigModel/createMesh:method\"}}createMesh(){{/crossLink}}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"triangles\"",
        "defaultRaw": "triangles",
        "name": "cfg.primitive",
        "description": "{String} The primitive type. Accepted values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.positions",
        "description": "Flat array of positions."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.normals",
        "description": "Flat array of normal vectors."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.indices",
        "description": "Array of triangle indices."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.edgeIndices",
        "description": "Array of edge line indices."
      }
    ],
    "return": null
  },
  {
    "__docId__": 177,
    "kind": "method",
    "name": "createMesh",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#createMesh",
    "access": "public",
    "description": "Creates a {@link BigModelMesh} within this BigModel.\n\nYou can provide either geometry data arrays or the ID of a geometry that was previously created\nwith {@link BigModel/createGeometry:method\"}}createGeometry(){{/crossLink}}.\n\nWhen you provide arrays, then that geometry will be used solely by the BigModelObject, which will be rendered\nusing geometry batching.\n\nWhen you provide a geometry ID, then the BigModelMesh will instance that geometry, and will be\nrendered using WebGL instancing.",
    "lineNumber": 428,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "createMesh"
      },
      {
        "tagName": "@returns",
        "tagValue": "{BigModelMesh}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "Object properties."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.id",
        "description": "ID for the new object. Must not clash with any existing components within the {@link Scene}."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.parentId",
        "description": "ID if the parent object, if any. Must resolve to a {@link BigModelMesh} that has already been created within this BigModel."
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.geometryId",
        "description": "ID of a geometry to instance, previously created with {@link BigModel/createGeometry:method\"}}createMesh(){{/crossLink}}. Overrides all other geometry parameters given to this method."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"triangles\"",
        "defaultRaw": "triangles",
        "name": "cfg.primitive",
        "description": "{String} Geometry primitive type. Ignored when geometryId is given. Accepted values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.positions",
        "description": "Flat array of geometry positions. Ignored when geometryId is given."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.normals",
        "description": "Flat array of normal vectors. Ignored when geometryId is given."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.indices",
        "description": "Array of triangle indices. Ignored when geometryId is given."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.edgeIndices",
        "description": "Array of edge line indices. Ignored when geometryId is given."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.matrix",
        "description": "Modeling matrix."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigModelMesh"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "createObject",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#createObject",
    "access": "public",
    "description": "Creates a {@link BigModelObject} within this BigModel, giving it one or\nmore meshes previously created with {@link BigModel/createMesh\"}}createMesh(){{/crossLink}}.\n\nA mesh can only belong to one BigModelObject, so you'll get an error if you try to reuse a mesh among\nmultiple BigModelObjects.",
    "lineNumber": 563,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{BigModelObject}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BigModelObject"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 181,
    "kind": "method",
    "name": "finalize",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#finalize",
    "access": "public",
    "description": "Finalizes this BigModel.\n\nInternally, this builds any geometry batches or instanced arrays that are currently under construction.\n\nOnce finalized, you can't create any more objects within this BigModel.",
    "lineNumber": 653,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "finalize"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 184,
    "kind": "method",
    "name": "getObjectIDs",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#getObjectIDs",
    "access": "public",
    "description": "Gets the IDs of objects within this BigModel.",
    "lineNumber": 683,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getObjectIds"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 185,
    "kind": "get",
    "name": "aabb",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#aabb",
    "access": "public",
    "description": "World-space 3D axis-aligned bounding box (AABB) enclosing the objects within this BigModel.\n\nRepresented by a six-element Float32Array containing the min/max extents of the\naxis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.",
    "lineNumber": 697,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "aabb",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 186,
    "kind": "set",
    "name": "visible",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#visible",
    "access": "public",
    "description": "Indicates if objects in this BigModel are visible.\n\nOnly rendered when {@link BigModel/visible} is true and\n{@link BigModel/culled} is false.",
    "lineNumber": 711,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "visible",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "_visible",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_visible",
    "access": "private",
    "description": null,
    "lineNumber": 713,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 188,
    "kind": "get",
    "name": "visible",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#visible",
    "access": "public",
    "description": null,
    "lineNumber": 720,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 189,
    "kind": "set",
    "name": "highlighted",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#highlighted",
    "access": "public",
    "description": "Indicates if objects in this BigModel are highlighted.\n\nHighlighted appearance for the entire BigModel is configured by the {@link Scene/highlightMaterial:property\"}}Scene highlightMaterial{{/crossLink}}.",
    "lineNumber": 733,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlighted",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 190,
    "kind": "member",
    "name": "_highlighted",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_highlighted",
    "access": "private",
    "description": null,
    "lineNumber": 735,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 191,
    "kind": "get",
    "name": "highlighted",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#highlighted",
    "access": "public",
    "description": null,
    "lineNumber": 742,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 192,
    "kind": "set",
    "name": "selected",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#selected",
    "access": "public",
    "description": "Indicates if objects in this BigModel are selected.\n\nSelected appearance for the entire BigModel is configured by the {@link Scene/selectedMaterial:property\"}}Scene selectedMaterial{{/crossLink}}.",
    "lineNumber": 755,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selected",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 193,
    "kind": "member",
    "name": "_selected",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_selected",
    "access": "private",
    "description": null,
    "lineNumber": 757,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 194,
    "kind": "get",
    "name": "selected",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#selected",
    "access": "public",
    "description": null,
    "lineNumber": 764,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 195,
    "kind": "set",
    "name": "ghosted",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#ghosted",
    "access": "public",
    "description": "Indicates if objects in this BigModel are ghosted.\n\nGhosted appearance for the entire BigModel is configured by the {@link Scene/ghostMaterial:property\"}}Scene ghostMaterial{{/crossLink}}.",
    "lineNumber": 777,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghosted",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 196,
    "kind": "member",
    "name": "_ghosted",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_ghosted",
    "access": "private",
    "description": null,
    "lineNumber": 779,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 197,
    "kind": "get",
    "name": "ghosted",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#ghosted",
    "access": "public",
    "description": null,
    "lineNumber": 786,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 198,
    "kind": "set",
    "name": "edges",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#edges",
    "access": "public",
    "description": "Indicates if objects in BigModel are shown with emphasized edges.\n\nEdges appearance for the entire BigModel is configured by the {@link Scene/edgeMaterial:property\"}}Scene edgeMaterial{{/crossLink}}.",
    "lineNumber": 799,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edges",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "_edges",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_edges",
    "access": "private",
    "description": null,
    "lineNumber": 801,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 200,
    "kind": "get",
    "name": "edges",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#edges",
    "access": "public",
    "description": null,
    "lineNumber": 808,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "set",
    "name": "culled",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#culled",
    "access": "public",
    "description": "Indicates if this BigModel is culled from view.\n\nThe BigModel is only rendered when {@link BigModel/visible} is true and\n{@link BigModel/culled} is false.",
    "lineNumber": 822,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "culled",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "_culled",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_culled",
    "access": "private",
    "description": null,
    "lineNumber": 824,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 203,
    "kind": "get",
    "name": "culled",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#culled",
    "access": "public",
    "description": null,
    "lineNumber": 828,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 204,
    "kind": "set",
    "name": "clippable",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#clippable",
    "access": "public",
    "description": "Indicates if this BigModel is clippable.\n\nClipping is done by the {@link Scene}'s {@link Clips} component.",
    "lineNumber": 841,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "clippable",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "_clippable",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_clippable",
    "access": "private",
    "description": null,
    "lineNumber": 843,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 206,
    "kind": "get",
    "name": "clippable",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#clippable",
    "access": "public",
    "description": null,
    "lineNumber": 850,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 207,
    "kind": "set",
    "name": "collidable",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#collidable",
    "access": "public",
    "description": "Indicates if this BigModel is included in the {@link Scene/aabb:property\"}}Scene aabb{{/crossLink}}.",
    "lineNumber": 861,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "collidable",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 208,
    "kind": "member",
    "name": "_collidable",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_collidable",
    "access": "private",
    "description": null,
    "lineNumber": 863,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 209,
    "kind": "get",
    "name": "collidable",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#collidable",
    "access": "public",
    "description": null,
    "lineNumber": 869,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 210,
    "kind": "set",
    "name": "pickable",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#pickable",
    "access": "public",
    "description": "Whether or not to allow picking on this BigModel.\n\nPicking is done via calls to {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.",
    "lineNumber": 882,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pickable",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 211,
    "kind": "member",
    "name": "_pickable",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_pickable",
    "access": "private",
    "description": null,
    "lineNumber": 884,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 212,
    "kind": "get",
    "name": "pickable",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#pickable",
    "access": "public",
    "description": null,
    "lineNumber": 890,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "get",
    "name": "edgeMaterial",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#edgeMaterial",
    "access": "public",
    "description": "Defines the appearance of edges of objects within this BigModel.\n\nThis is the {@link Scene/edgeMaterial:property\"}}Scene edgeMaterial{{/crossLink}}.",
    "lineNumber": 902,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 214,
    "kind": "get",
    "name": "ghostMaterial",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#ghostMaterial",
    "access": "public",
    "description": "Defines the appearance of ghosted objects within this BigModel.\n\nThis is the {@link Scene/ghostMaterial:property\"}}Scene ghostMaterial{{/crossLink}}.",
    "lineNumber": 914,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghostMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 215,
    "kind": "get",
    "name": "highlightMaterial",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#highlightMaterial",
    "access": "public",
    "description": "Defines the appearance of highlighted objects within this BigModel.\n\nThis is the {@link Scene/highlightMaterial:property\"}}Scene highlightMaterial{{/crossLink}}.",
    "lineNumber": 926,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 216,
    "kind": "get",
    "name": "selectedMaterial",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#selectedMaterial",
    "access": "public",
    "description": "Defines the appearance of selected objects within this BigModel.\n\nThis is the {@link Scene/selectedMaterial:property\"}}Scene selectedMaterial{{/crossLink}}.",
    "lineNumber": 938,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 217,
    "kind": "method",
    "name": "compile",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#compile",
    "access": "public",
    "description": null,
    "lineNumber": 942,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 218,
    "kind": "get",
    "name": "isStateSortable",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#isStateSortable",
    "access": "private",
    "description": "Called by the renderer to check if this drawable should be included in it's state-sorted drawables list.",
    "lineNumber": 954,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 219,
    "kind": "method",
    "name": "getRenderFlags",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#getRenderFlags",
    "access": "public",
    "description": " Called by xeokit, when about to render this BigModel Drawable, to get flags indicating what rendering effects to apply for it.",
    "lineNumber": 964,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getRenderFlags"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "RenderFlags"
        ],
        "spread": false,
        "optional": false,
        "name": "renderFlags",
        "description": "Returns the rendering flags."
      }
    ],
    "return": null
  },
  {
    "__docId__": 220,
    "kind": "method",
    "name": "drawNormalFillOpaque",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawNormalFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1065,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 221,
    "kind": "method",
    "name": "drawNormalEdgesOpaque",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawNormalEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1071,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 222,
    "kind": "method",
    "name": "drawNormalFillTransparent",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawNormalFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1077,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 223,
    "kind": "method",
    "name": "drawNormalEdgesTransparent",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawNormalEdgesTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1083,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 224,
    "kind": "method",
    "name": "drawGhostedFillOpaque",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawGhostedFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1091,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 225,
    "kind": "method",
    "name": "drawGhostedEdgesOpaque",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawGhostedEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1097,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 226,
    "kind": "method",
    "name": "drawGhostedFillTransparent",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawGhostedFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1103,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 227,
    "kind": "method",
    "name": "drawGhostedEdgesTransparent",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawGhostedEdgesTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1109,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 228,
    "kind": "method",
    "name": "drawHighlightedFillOpaque",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawHighlightedFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1117,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 229,
    "kind": "method",
    "name": "drawHighlightedEdgesOpaque",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawHighlightedEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1123,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 230,
    "kind": "method",
    "name": "drawHighlightedFillTransparent",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawHighlightedFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1129,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 231,
    "kind": "method",
    "name": "drawHighlightedEdgesTransparent",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawHighlightedEdgesTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1135,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 232,
    "kind": "method",
    "name": "drawSelectedFillOpaque",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawSelectedFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1143,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 233,
    "kind": "method",
    "name": "drawSelectedEdgesOpaque",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawSelectedEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1149,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "drawSelectedFillTransparent",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawSelectedFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1155,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 235,
    "kind": "method",
    "name": "drawSelectedEdgesTransparent",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawSelectedEdgesTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1161,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 236,
    "kind": "method",
    "name": "drawOutline",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawOutline",
    "access": "public",
    "description": null,
    "lineNumber": 1169,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 237,
    "kind": "method",
    "name": "drawShadow",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawShadow",
    "access": "public",
    "description": null,
    "lineNumber": 1172,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 238,
    "kind": "method",
    "name": "drawPickMesh",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#drawPickMesh",
    "access": "public",
    "description": null,
    "lineNumber": 1175,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 239,
    "kind": "method",
    "name": "_findPickedObject",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#_findPickedObject",
    "access": "private",
    "description": null,
    "lineNumber": 1184,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 240,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/bigModels/BigModel.js~BigModel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/BigModel.js~BigModel#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 1188,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 241,
    "kind": "file",
    "name": "scene/bigModels/batching/batchingBuffer.js",
    "content": "import {WEBGL_INFO} from \"../../webglInfo.js\";\n\n\nconst bigIndicesSupported = WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"];\nconst SLICING = true;\nconst MAX_VERTS = SLICING ? (bigIndicesSupported ? 5000000 : 65530) : 5000000;\n\n/**\n * @private\n */\nclass BatchingBuffer {\n    constructor() {\n        this.slicing = SLICING;\n        this.maxVerts = MAX_VERTS;\n\n        this.positions = new Float32Array(MAX_VERTS * 3); // Uncompressed\n        this.colors = new Uint8Array(MAX_VERTS * 4); // Compressed\n        this.quantizedPositions = new Uint16Array(MAX_VERTS * 3); // Compressed\n        this.normals = new Int8Array(MAX_VERTS * 3); // Compressed\n        this.pickColors = new Uint8Array(MAX_VERTS * 4); // Compressed\n        this.flags = new Uint8Array(MAX_VERTS * 4);\n        this.indices = bigIndicesSupported ? new Uint32Array(MAX_VERTS * 6) : new Uint16Array(MAX_VERTS * 6); // FIXME\n        this.edgeIndices = bigIndicesSupported ? new Uint32Array(MAX_VERTS * 6) : new Uint16Array(MAX_VERTS * 6); // FIXME\n\n        this.lenPositions = 0;\n        this.lenColors = 0;\n        this.lenNormals = 0;\n        this.lenPickColors = 0;\n        this.lenFlags = 0;\n        this.lenIndices = 0;\n        this.lenEdgeIndices = 0;\n    }\n}\n\nconst freeBuffers = [];\n\n/**\n * @private\n */\nfunction getBatchingBuffer() {\n    return freeBuffers.length > 0 ? freeBuffers.pop() : new BatchingBuffer();\n}\n\n/**\n * @private\n */\nfunction putBatchingBuffer(buffer) {\n    //freeBuffers.push(buffer);\n}\n\nexport {getBatchingBuffer, putBatchingBuffer};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/batching/batchingBuffer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 242,
    "kind": "variable",
    "name": "bigIndicesSupported",
    "memberof": "scene/bigModels/batching/batchingBuffer.js",
    "static": true,
    "longname": "scene/bigModels/batching/batchingBuffer.js~bigIndicesSupported",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingBuffer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "SLICING",
    "memberof": "scene/bigModels/batching/batchingBuffer.js",
    "static": true,
    "longname": "scene/bigModels/batching/batchingBuffer.js~SLICING",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingBuffer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 244,
    "kind": "variable",
    "name": "MAX_VERTS",
    "memberof": "scene/bigModels/batching/batchingBuffer.js",
    "static": true,
    "longname": "scene/bigModels/batching/batchingBuffer.js~MAX_VERTS",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingBuffer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 245,
    "kind": "class",
    "name": "BatchingBuffer",
    "memberof": "scene/bigModels/batching/batchingBuffer.js",
    "static": true,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingBuffer.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 11,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 246,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 247,
    "kind": "member",
    "name": "slicing",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#slicing",
    "access": "public",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "maxVerts",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#maxVerts",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "positions",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#positions",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 250,
    "kind": "member",
    "name": "colors",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#colors",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 251,
    "kind": "member",
    "name": "quantizedPositions",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#quantizedPositions",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 252,
    "kind": "member",
    "name": "normals",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#normals",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 253,
    "kind": "member",
    "name": "pickColors",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#pickColors",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 254,
    "kind": "member",
    "name": "flags",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#flags",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "indices",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#indices",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "edgeIndices",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#edgeIndices",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 257,
    "kind": "member",
    "name": "lenPositions",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#lenPositions",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 258,
    "kind": "member",
    "name": "lenColors",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#lenColors",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 259,
    "kind": "member",
    "name": "lenNormals",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#lenNormals",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 260,
    "kind": "member",
    "name": "lenPickColors",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#lenPickColors",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "lenFlags",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#lenFlags",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "lenIndices",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#lenIndices",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "lenEdgeIndices",
    "memberof": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingBuffer.js~BatchingBuffer#lenEdgeIndices",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 264,
    "kind": "variable",
    "name": "freeBuffers",
    "memberof": "scene/bigModels/batching/batchingBuffer.js",
    "static": true,
    "longname": "scene/bigModels/batching/batchingBuffer.js~freeBuffers",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingBuffer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 265,
    "kind": "function",
    "name": "getBatchingBuffer",
    "memberof": "scene/bigModels/batching/batchingBuffer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/batchingBuffer.js~getBatchingBuffer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingBuffer.js",
    "importStyle": "{getBatchingBuffer}",
    "description": "",
    "lineNumber": 40,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 266,
    "kind": "function",
    "name": "putBatchingBuffer",
    "memberof": "scene/bigModels/batching/batchingBuffer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/batchingBuffer.js~putBatchingBuffer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingBuffer.js",
    "importStyle": "{putBatchingBuffer}",
    "description": "",
    "lineNumber": 47,
    "ignore": true,
    "params": [
      {
        "name": "buffer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 267,
    "kind": "file",
    "name": "scene/bigModels/batching/batchingLayer.js",
    "content": "import {math} from \"../../math/math.js\";\nimport {WEBGL_INFO} from \"../../webglInfo.js\";\nimport {RenderState} from \"../../webgl/RenderState.js\";\nimport {ArrayBuf} from \"../../webgl/ArrayBuf.js\";\n\nimport {BatchingDrawRenderer} from \"./draw/batchingDrawRenderer.js\";\nimport {BatchingEmphasisFillRenderer} from \"./emphasis/batchingEmphasisFillRenderer.js\";\nimport {BatchingEmphasisEdgesRenderer} from \"./emphasis/batchingEmphasisEdgesRenderer.js\";\nimport {BatchingPickRenderer} from \"./pick/batchingPickRenderer.js\";\n\nimport {RENDER_FLAGS} from '../renderFlags.js';\nimport {RENDER_PASSES} from '../renderPasses.js';\n\nconst bigIndicesSupported = WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"];\nconst uint8Vec4Temp = new Uint8Array((bigIndicesSupported ? 5000000 : 65530) * 4); // Scratch memory for dynamic flags VBO update\nconst tempMat4 = math.mat4();\nconst tempMat4b = math.mat4();\nconst tempVec3a = math.vec4([0, 0, 0, 1]);\nconst tempVec3b = math.vec4([0, 0, 0, 1]);\n\nvar currentBatchingLayer = null;\n\n/**\n * @private\n */\nclass BatchingLayer {\n\n    /**\n     * @param model\n     * @param cfg\n     * @param cfg.buffer\n     * @param cfg.primitive\n     */\n    constructor(model, cfg) {\n        this.model = model;\n        this._buffer = cfg.buffer;\n        var primitiveName = cfg.primitive || \"triangles\";\n        var primitive;\n        const gl = model.scene.canvas.gl;\n        switch (primitiveName) {\n            case \"points\":\n                primitive = gl.POINTS;\n                break;\n            case \"lines\":\n                primitive = gl.LINES;\n                break;\n            case \"line-loop\":\n                primitive = gl.LINE_LOOP;\n                break;\n            case \"line-strip\":\n                primitive = gl.LINE_STRIP;\n                break;\n            case \"triangles\":\n                primitive = gl.TRIANGLES;\n                break;\n            case \"triangle-strip\":\n                primitive = gl.TRIANGLE_STRIP;\n                break;\n            case \"triangle-fan\":\n                primitive = gl.TRIANGLE_FAN;\n                break;\n            default:\n                throw `Unsupported value for 'primitive': '${primitiveName}' - supported values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'. Defaulting to 'triangles'.`;\n                primitive = gl.TRIANGLES;\n                primitiveName = \"triangles\";\n        }\n\n        this._state = new RenderState({\n            primitiveName: primitiveName,\n            primitive: primitive,\n            positionsBuf: null,\n            normalsBuf: null,\n            colorsbuf: null,\n            flagsBuf: null,\n            indicesBuf: null,\n            edgeIndicesBuf: null,\n            positionsDecodeMatrix: math.mat4()\n        });\n\n        // These counts are used to avoid unnecessary render passes\n        this.numObjects = 0;\n        this.numVisibleObjects = 0;\n        this.numTransparentObjects = 0;\n        this.numGhostedObjects = 0;\n        this.numSelectedObjects = 0;\n        this.numHighlightedObjects = 0;\n        this.numEdgesObjects = 0;\n\n        //this.pickObjectBaseIndex = cfg.pickObjectBaseIndex;\n\n        this._aabb = math.collapseAABB3();\n        this._portions = [];\n\n        this._finalized = false;\n\n        this.compileShaders();\n    }\n\n    /**\n     * Tests if there is room for another portion in this BatchingLayer.\n     *\n     * @param lenPositions Number of positions we'd like to create in the portion.\n     * @returns {boolean} True if OK to creatye another portion.\n     */\n    canCreatePortion(lenPositions) {\n        if (this._finalized) {\n            throw \"Already finalized\";\n        }\n        return (!this._finalized && this._buffer.lenPositions + lenPositions) < (this._buffer.maxVerts * 3);\n    }\n\n    /**\n     *\n     * Creates a new portion within this InstancingLayer, returns the new portion ID.\n     *\n     * Gives the portion the specified geometry, flags, color and matrix.\n     *\n     * @param positions Flat float Local-space positions array.\n     * @param normals Flat float normals array.\n     * @param indices  Flat int indices array.\n     * @param edgeIndices Flat int edges indices array.\n     * @param flags Unsigned long int\n     * @param color Quantized RGBA color\n     * @param matrix Flat float 4x4 matrix\n     * @param aabb Flat float AABB\n     * @param pickColor Quantized pick color\n     * @returns {number} Portion ID\n     */\n    createPortion(positions, normals, indices, edgeIndices, flags, color, matrix, aabb, pickColor) {\n        if (this._finalized) {\n            throw \"Already finalized\";\n        }\n        if (this._finalized) {\n            throw \"BatchingLayer full - check first with canCreatePortion()\";\n        }\n        if (currentBatchingLayer !== null) {\n            if (currentBatchingLayer !== this) {\n                throw \"Already packing another BatchingLayer\";\n            }\n        } else {\n            currentBatchingLayer = this;\n        }\n        const buffer = this._buffer;\n        const positionsIndex = buffer.lenPositions;\n        const vertsIndex = positionsIndex / 3;\n        const numVerts = positions.length / 3;\n        const lenPositions = positions.length;\n        { // Positions\n            buffer.positions.set(positions, buffer.lenPositions);\n            if (matrix) {\n                for (var i = buffer.lenPositions, len = buffer.lenPositions + lenPositions; i < len; i += 3) {\n                    tempVec3a[0] = buffer.positions[i + 0];\n                    tempVec3a[1] = buffer.positions[i + 1];\n                    tempVec3a[2] = buffer.positions[i + 2];\n                    math.transformPoint4(matrix, tempVec3a, tempVec3b);\n                    math.expandAABB3Point3(aabb, tempVec3b); // Expand portion AABB\n                    math.expandAABB3Point3(this._aabb, tempVec3b); // Expand BatchingLayer AABB\n                    buffer.positions[i + 0] = tempVec3b[0];\n                    buffer.positions[i + 1] = tempVec3b[1];\n                    buffer.positions[i + 2] = tempVec3b[2];\n                }\n            } else {\n                for (var i = buffer.lenPositions, len = buffer.lenPositions + lenPositions; i < len; i += 3) {\n                    tempVec3a[0] = buffer.positions[i + 0];\n                    tempVec3a[1] = buffer.positions[i + 1];\n                    tempVec3a[2] = buffer.positions[i + 2];\n                    math.expandAABB3Point3(aabb, tempVec3a);\n                    math.expandAABB3Point3(this._aabb, tempVec3a);\n                }\n            }\n            buffer.lenPositions += lenPositions;\n        }\n        if (normals) {\n            var modelNormalMatrix = tempMat4;\n            if (matrix) {\n                // Note: order of inverse and transpose doesn't matter\n                math.inverseMat4(math.transposeMat4(matrix, tempMat4b), modelNormalMatrix);\n            } else {\n                math.identityMat4(modelNormalMatrix, modelNormalMatrix);\n            }\n            buffer.lenNormals = transformAndOctEncodeNormals(modelNormalMatrix, normals, normals.length, buffer.normals, buffer.lenNormals); // BOTTLENECK - better to have these precomputed in the pipeline!\n        }\n        if (flags !== undefined) {\n            const lenFlags = (numVerts * 4);\n            var visible = !!(flags & RENDER_FLAGS.VISIBLE) ? 255 : 0;\n            var ghosted = !!(flags & RENDER_FLAGS.GHOSTED) ? 255 : 0;\n            var highlighted = !!(flags & RENDER_FLAGS.HIGHLIGHTED) ? 255 : 0;\n            var selected = !!(flags & RENDER_FLAGS.SELECTED) ? 255 : 0;\n            var clippable = !!(flags & RENDER_FLAGS.CLIPPABLE) ? 255 : 0;\n            var edges = !!(flags & RENDER_FLAGS.EDGES) ? 255 : 0;\n            //   edges = Math.random() < .5;\n            for (var i = buffer.lenFlags, len = buffer.lenFlags + lenFlags; i < len; i += 4) {\n                buffer.flags[i + 0] = visible;\n                buffer.flags[i + 1] = ghosted;\n                buffer.flags[i + 2] = highlighted;\n                buffer.flags[i + 3] = clippable;\n            }\n            buffer.lenFlags += lenFlags;\n            if (visible) {\n                this.numVisibleObjects++;\n            }\n            if (ghosted) {\n                this.numGhostedObjects++;\n            }\n            if (highlighted) {\n                this.numHighlightedObjects++;\n            }\n            if (selected) {\n                this.numSelectedObjects++;\n            }\n            if (edges) {\n                this.numEdgesObjects++;\n            }\n        }\n        if (color) {\n            const lenColors = (numVerts * 4);\n\n            // Color is pre-quantized\n            const r = color[0];\n            const g = color[1];\n            const b = color[2];\n            const a = color[3];\n\n            for (var i = buffer.lenColors, len = buffer.lenColors + lenColors; i < len; i += 4) {\n                buffer.colors[i + 0] = r;\n                buffer.colors[i + 1] = g;\n                buffer.colors[i + 2] = b;\n                buffer.colors[i + 3] = a;\n            }\n            buffer.lenColors += lenColors;\n            if (a < 255) {\n                this.numTransparentObjects++;\n            }\n        }\n        if (indices) {\n            for (var i = 0, len = indices.length; i < len; i++) {\n                buffer.indices[buffer.lenIndices + i] = indices[i] + vertsIndex;\n            }\n            buffer.lenIndices += indices.length;\n        }\n        if (edgeIndices) {\n            for (var i = 0, len = edgeIndices.length; i < len; i++) {\n                buffer.edgeIndices[buffer.lenEdgeIndices + i] = edgeIndices[i] + vertsIndex;\n            }\n            buffer.lenEdgeIndices += edgeIndices.length;\n        }\n        {\n            const lenPickColors = numVerts * 4;\n            for (var i = buffer.lenPickColors, len = buffer.lenPickColors + lenPickColors; i < len; i += 4) {\n                buffer.pickColors[i + 0] = pickColor[0];\n                buffer.pickColors[i + 1] = pickColor[1];\n                buffer.pickColors[i + 2] = pickColor[2];\n                buffer.pickColors[i + 3] = pickColor[3];\n            }\n            buffer.lenPickColors += lenPickColors;\n        }\n\n        var portionId = this._portions.length / 2;\n        this._portions.push(vertsIndex);\n        this._portions.push(numVerts);\n        this.numObjects++;\n        return portionId;\n    }\n\n    /**\n     * Builds batch VBOs from appended geometries.\n     * No more portions can then be created.\n     */\n    finalize() {\n        if (this._finalized) {\n            this.error(\"Already finalized\");\n            return;\n        }\n\n        const state = this._state;\n        const gl = this.model.scene.canvas.gl;\n        const buffer = this._buffer;\n\n        quantizePositions(buffer.positions, buffer.lenPositions, this._aabb, buffer.quantizedPositions, state.positionsDecodeMatrix); // BOTTLENECK\n\n        //if (buffer.slicing) {\n        if (buffer.lenPositions > 0) {\n            state.positionsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, buffer.quantizedPositions.slice(0, buffer.lenPositions), buffer.lenPositions, 3, gl.STATIC_DRAW);\n        }\n        if (buffer.lenNormals > 0) {\n            let normalized = true; // For oct encoded UIn\n            //let normalized = false; // For scaled\n            state.normalsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, buffer.normals.slice(0, buffer.lenNormals), buffer.lenNormals, 3, gl.STATIC_DRAW, normalized);\n        }\n        if (buffer.lenColors > 0) {\n            let normalized = false;\n            state.colorsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, buffer.colors.slice(0, buffer.lenColors), buffer.lenColors, 4, gl.STATIC_DRAW, normalized);\n        }\n        if (buffer.lenFlags > 0) {\n            let normalized = true;\n            state.flagsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, buffer.flags.slice(0, buffer.lenFlags), buffer.lenFlags, 4, gl.STATIC_DRAW, normalized);\n        }\n        if (buffer.lenPickColors > 0) {\n            let normalized = false;\n            state.pickColorsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, buffer.pickColors.slice(0, buffer.lenPickColors), buffer.lenPickColors, 4, gl.STATIC_DRAW, normalized);\n        }\n        if (buffer.lenIndices > 0) {\n            state.indicesBuf = new ArrayBuf(gl, gl.ELEMENT_ARRAY_BUFFER, buffer.indices.slice(0, buffer.lenIndices), buffer.lenIndices, 1, gl.STATIC_DRAW);\n        }\n        if (buffer.lenEdgeIndices > 0) {\n            state.edgeIndicesBuf = new ArrayBuf(gl, gl.ELEMENT_ARRAY_BUFFER, buffer.edgeIndices.slice(0, buffer.lenEdgeIndices), buffer.lenEdgeIndices, 1, gl.STATIC_DRAW);\n        }\n        // } else {\n        //     state.positionsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, buffer.quantizedPositions, buffer.quantizedPositions.length, 3, gl.STATIC_DRAW);\n        //     if (buffer.lenNormals > 0) {\n        //         state.normalsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, buffer.normals, buffer.normals.length, 2, gl.STATIC_DRAW);\n        //     }\n        //     if (buffer.lenColors > 0) {\n        //         state.colorsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, buffer.colors, buffer.colors.length, 4, gl.STATIC_DRAW);\n        //     }\n        //     state.flagsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, buffer.flags, buffer.flags.length, 4, gl.STATIC_DRAW);\n        //     if (buffer.lenIndices > 0) {\n        //         state.indicesBuf = new ArrayBuf(gl, gl.ELEMENT_ARRAY_BUFFER, buffer.indices, buffer.indices.length, 1, gl.STATIC_DRAW);\n        //     }\n        //     if (buffer.lenEdgeIndices > 0) {\n        //         state.edgeIndicesBuf = new ArrayBuf(gl, gl.ELEMENT_ARRAY_BUFFER, buffer.edgeIndices, buffer.edgeIndices.length, 1, gl.STATIC_DRAW);\n        //     }\n        // }\n\n        buffer.lenPositions = 0;\n        buffer.lenColors = 0;\n        buffer.lenNormals = 0;\n        buffer.lenFlags = 0;\n        buffer.lenPickColors = 0;\n        buffer.lenIndices = 0;\n        buffer.lenEdgeIndices = 0;\n\n        currentBatchingLayer = null;\n\n        this._buffer = null;\n        this._finalized = true;\n    }\n\n    setPickID(portionId, pickId) {\n        if (!this._finalized) {\n            throw \"Not finalized\";\n        }\n        var portionsIdx = portionId * 2;\n        var vertexBase = this._portions[portionsIdx];\n        var numVerts = this._portions[portionsIdx + 1];\n        var firstFlag = vertexBase * 4;\n        var lenPickColors = numVerts * 2;\n        for (var i = 0; i < lenPickColors; i += 2) {\n            uint8Vec4Temp[i] = pickId;\n        }\n        this._state.pickColorsBuf.setData(uint8Vec4Temp.slice(0, lenPickColors), firstFlag, lenPickColors);\n    }\n\n    setFlags(portionId, flags) {\n        if (!this._finalized) {\n            throw \"Not finalized\";\n        }\n        var portionsIdx = portionId * 2;\n        var vertexBase = this._portions[portionsIdx];\n        var numVerts = this._portions[portionsIdx + 1];\n        var firstFlag = vertexBase * 4;\n        var lenFlags = numVerts * 4;\n        var visible = !!(flags & RENDER_FLAGS.VISIBLE) ? 255 : 0;\n        var ghosted = !!(flags & RENDER_FLAGS.GHOSTED) ? 255 : 0;\n        var highlighted = !!(flags & RENDER_FLAGS.HIGHLIGHTED) ? 255 : 0;\n        var clippable = !!(flags & RENDER_FLAGS.CLIPPABLE) ? 255 : 0;\n        for (var i = 0; i < lenFlags; i += 4) {\n            uint8Vec4Temp[i + 0] = visible;\n            uint8Vec4Temp[i + 1] = ghosted;\n            uint8Vec4Temp[i + 2] = highlighted;\n            uint8Vec4Temp[i + 3] = clippable;\n        }\n        this._state.flagsBuf.setData(uint8Vec4Temp.slice(0, lenFlags), firstFlag, lenFlags);\n    }\n\n    setColor(portionId, color) {\n        if (!this._finalized) {\n            throw \"Not finalized\";\n        }\n        var portionsIdx = portionId * 2;\n        var vertexBase = this._portions[portionsIdx];\n        var numVerts = this._portions[portionsIdx + 1];\n        var firstColor = vertexBase * 4;\n        var lenColors = numVerts * 4;\n        const r = color[0];\n        const g = color[1];\n        const b = color[2];\n        const a = color[3];\n        for (var i = 0; i < lenColors; i += 4) {\n            uint8Vec4Temp[i + 0] = r;\n            uint8Vec4Temp[i + 1] = g;\n            uint8Vec4Temp[i + 2] = b;\n            uint8Vec4Temp[i + 3] = a;\n        }\n        this._state.colorsBuf.setData(uint8Vec4Temp.slice(0, lenColors), firstColor, lenColors);\n    }\n\n    setMatrix(portionId, matrix) { // TODO\n    }\n\n    //-- NORMAL --------------------------------------------------------------------------------------------------------\n\n    drawNormalFillOpaque(frameCtx) {\n        if (this.numVisibleObjects === 0 || this.numTransparentObjects === this.numObjects || this.numGhostedObjects === this.numObjects) {\n            return;\n        }\n        if (this._drawRenderer) {\n            this._drawRenderer.drawLayer(frameCtx, this, RENDER_PASSES.OPAQUE);\n        }\n    }\n\n    drawNormalEdgesOpaque(frameCtx) {\n        if (this.numEdgesObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.OPAQUE);\n        }\n    }\n\n    drawNormalFillTransparent(frameCtx) {\n        if (this.numVisibleObjects === 0 || this.numTransparentObjects === 0 || this.numGhostedObjects === this.numObjects) {\n            return;\n        }\n        if (this._drawRenderer) {\n            this._drawRenderer.drawLayer(frameCtx, this, RENDER_PASSES.TRANSPARENT);\n        }\n    }\n\n    drawNormalTransparentEdges(frameCtx) {\n        if (this.numEdgesObjects === 0 || this.numTransparentObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.TRANSPARENT);\n        }\n    }\n\n    //-- GHOSTED--------------------------------------------------------------------------------------------------------\n\n    drawGhostedFillOpaque(frameCtx) {\n        if (this.numVisibleObjects === 0 || this.numGhostedObjects === 0) {\n            return;\n        }\n        if (this._fillRenderer) {\n            this._fillRenderer.drawLayer(frameCtx, this, RENDER_PASSES.GHOSTED);\n        }\n    }\n\n    drawGhostedEdgesOpaque(frameCtx) {\n        if (this.numVisibleObjects === 0 || this.numGhostedObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.GHOSTED);\n        }\n    }\n\n    drawGhostedFillTransparent(frameCtx) {\n        if (this.numVisibleObjects === 0 || this.numGhostedObjects === 0) {\n            return;\n        }\n        if (this._fillRenderer) {\n            this._fillRenderer.drawLayer(frameCtx, this, RENDER_PASSES.GHOSTED);\n        }\n    }\n\n    drawGhostedEdgesTransparent(frameCtx) {\n        if (this.numVisibleObjects === 0 || this.numGhostedObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.GHOSTED);\n        }\n    }\n\n    //-- HIGHLIGHTED ---------------------------------------------------------------------------------------------------\n\n    drawHighlightedFillOpaque(frameCtx) {\n        if (this.numVisibleObjects === 0 || this.numHighlightedObjects === 0) {\n            return;\n        }\n        if (this._fillRenderer) {\n            this._fillRenderer.drawLayer(frameCtx, this, RENDER_PASSES.HIGHLIGHTED);\n        }\n    }\n\n    drawHighlightedEdgesOpaque(frameCtx) {\n        if (this.numVisibleObjects === 0 || this.numHighlightedObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.HIGHLIGHTED);\n        }\n    }\n\n    drawHighlightedFillTransparent(frameCtx) {\n        if (this.numVisibleObjects === 0 || this.numHighlightedObjects === 0) {\n            return;\n        }\n        if (this._fillRenderer) {\n            this._fillRenderer.drawLayer(frameCtx, this, RENDER_PASSES.HIGHLIGHTED);\n        }\n    }\n\n    drawHighlightedEdgesTransparent(frameCtx) {\n        if (this.numVisibleObjects === 0 || this.numHighlightedObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.HIGHLIGHTED);\n        }\n    }\n\n    //-- SELECTED ------------------------------------------------------------------------------------------------------\n\n    drawSelectedFillOpaque(frameCtx) {\n        if (this.numVisibleObjects === 0 || this.numSelectedObjects === 0) {\n            return;\n        }\n        if (this._fillRenderer) {\n            this._fillRenderer.drawLayer(frameCtx, this, RENDER_PASSES.SELECTED);\n        }\n    }\n\n    drawSelectedEdgesOpaque(frameCtx) {\n        if (this.numVisibleObjects === 0 || this.numSelectedObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.SELECTED);\n        }\n    }\n\n    drawSelectedFillTransparent(frameCtx) {\n        if (this.numVisibleObjects === 0 || this.numSelectedObjects === 0) {\n            return;\n        }\n        if (this._fillRenderer) {\n            this._fillRenderer.drawLayer(frameCtx, this, RENDER_PASSES.SELECTED);\n        }\n    }\n\n    drawSelectedEdgesTransparent(frameCtx) {\n        if (this.numVisibleObjects === 0 || this.numSelectedObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.SELECTED);\n        }\n    }\n\n    //---- PICKING ----------------------------------------------------------------------------------------------------\n\n    drawPickMesh(frameCtx) {\n        if (this.numVisibleObjects === 0) {\n            return;\n        }\n        if (this._pickRenderer) {\n            this._pickRenderer.drawLayer(frameCtx, this);\n        }\n    }\n\n    compileShaders() {\n        if (this._drawRenderer && this._drawRenderer.getValid() === false) {\n            this._drawRenderer.put();\n            this._drawRenderer = null;\n        }\n        if (this._fillRenderer && this._fillRenderer.getValid() === false) {\n            this._fillRenderer.put();\n            this._fillRenderer = null;\n        }\n        if (this._edgesRenderer && this._edgesRenderer.getValid() === false) {\n            this._edgesRenderer.put();\n            this._edgesRenderer = null;\n        }\n        if (this._pickRenderer && this._pickRenderer.getValid() === false) {\n            this._pickRenderer.put();\n            this._pickRenderer = null;\n        }\n        if (!this._drawRenderer) {\n            this._drawRenderer = BatchingDrawRenderer.get(this);\n        }\n        if (!this._fillRenderer) {\n            this._fillRenderer = BatchingEmphasisFillRenderer.get(this);\n        }\n        if (!this._edgesRenderer) {\n            this._edgesRenderer = BatchingEmphasisEdgesRenderer.get(this);\n        }\n        if (!this._pickRenderer) {\n            this._pickRenderer = BatchingPickRenderer.get(this);\n        }\n    }\n\n    destroy() {\n\n        if (this._drawRenderer) {\n            this._drawRenderer.put();\n            this._drawRenderer = null;\n        }\n        if (this._fillRenderer) {\n            this._fillRenderer.put();\n            this._fillRenderer = null;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.put();\n            this._edgesRenderer = null;\n        }\n        if (this._pickRenderer) {\n            this._pickRenderer.put();\n            this._pickRenderer = null;\n        }\n\n        const state = this._state;\n        if (state.positionsBuf) {\n            state.positionsBuf.destroy();\n            state.positionsBuf = null;\n        }\n        if (state.normalsBuf) {\n            state.normalsBuf.destroy();\n            state.normalsBuf = null;\n        }\n        if (state.colorsBuf) {\n            state.colorsBuf.destroy();\n            state.colorsBuf = null;\n        }\n        if (state.flagsBuf) {\n            state.flagsBuf.destroy();\n            state.flagsBuf = null;\n        }\n        if (state.pickColorsBuf) {\n            state.pickColorsBuf.destroy();\n            state.pickColorsBuf = null;\n        }\n        if (state.indicesBuf) {\n            state.indicesBuf.destroy();\n            state.indicessBuf = null;\n        }\n        if (state.edgeIndicesBuf) {\n            state.edgeIndicesBuf.destroy();\n            state.edgeIndicessBuf = null;\n        }\n        state.destroy();\n    }\n}\n\nvar quantizePositions = (function () { // http://cg.postech.ac.kr/research/mesh_comp_mobile/mesh_comp_mobile_conference.pdf\n    const translate = math.mat4();\n    const scale = math.mat4();\n    return function (positions, lenPositions, aabb, quantizedPositions, positionsDecodeMatrix) {\n        const xmin = aabb[0];\n        const ymin = aabb[1];\n        const zmin = aabb[2];\n        const xwid = aabb[3] - xmin;\n        const ywid = aabb[4] - ymin;\n        const zwid = aabb[5] - zmin;\n        // const maxInt = 2000000;\n        const maxInt = 65525;\n        const xMultiplier = maxInt / xwid;\n        const yMultiplier = maxInt / ywid;\n        const zMultiplier = maxInt / zwid;\n        let i;\n        for (i = 0; i < lenPositions; i += 3) {\n            quantizedPositions[i + 0] = Math.floor((positions[i + 0] - xmin) * xMultiplier);\n            quantizedPositions[i + 1] = Math.floor((positions[i + 1] - ymin) * yMultiplier);\n            quantizedPositions[i + 2] = Math.floor((positions[i + 2] - zmin) * zMultiplier);\n        }\n        math.identityMat4(translate);\n        math.translationMat4v(aabb, translate);\n        math.identityMat4(scale);\n        math.scalingMat4v([xwid / maxInt, ywid / maxInt, zwid / maxInt], scale);\n        math.mulMat4(translate, scale, positionsDecodeMatrix);\n    };\n})();\n\nfunction transformAndOctEncodeNormals(modelNormalMatrix, normals, lenNormals, compressedNormals, lenCompressedNormals) {\n    // http://jcgt.org/published/0003/02/01/\n    let oct, dec, best, currentCos, bestCos;\n    let i, ei;\n    let localNormal = new Float32Array([0, 0, 0, 0]);\n    let worldNormal = new Float32Array([0, 0, 0, 0]);\n    for (i = 0; i < lenNormals; i += 3) {\n        localNormal[0] = normals[i];\n        localNormal[1] = normals[i + 1];\n        localNormal[2] = normals[i + 2];\n\n        math.transformVec3(modelNormalMatrix, localNormal, worldNormal);\n        math.normalizeVec3(worldNormal, worldNormal);\n\n        // Test various combinations of ceil and floor to minimize rounding errors\n        best = oct = octEncodeVec3(worldNormal, \"floor\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = bestCos = dot(worldNormal, dec);\n        oct = octEncodeVec3(worldNormal, \"ceil\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(worldNormal, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(worldNormal, \"floor\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(worldNormal, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(worldNormal, \"ceil\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(worldNormal, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        compressedNormals[lenCompressedNormals + i + 0] = best[0];\n        compressedNormals[lenCompressedNormals + i + 1] = best[1];\n        compressedNormals[lenCompressedNormals + i + 2] = 0.0; // Unused\n    }\n    lenCompressedNormals += lenNormals;\n    return lenCompressedNormals;\n}\n\nfunction octEncodeVec3(p, xfunc, yfunc) { // Oct-encode single normal vector in 2 bytes\n    let x = p[0] / (Math.abs(p[0]) + Math.abs(p[1]) + Math.abs(p[2]));\n    let y = p[1] / (Math.abs(p[0]) + Math.abs(p[1]) + Math.abs(p[2]));\n    if (p[2] < 0) {\n        let tempx = x;\n        let tempy = y;\n        tempx = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        tempy = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        x = tempx;\n        y = tempy;\n    }\n    return new Int8Array([\n        Math[xfunc](x * 127.5 + (x < 0 ? -1 : 0)),\n        Math[yfunc](y * 127.5 + (y < 0 ? -1 : 0))\n    ]);\n}\n\nfunction octDecodeVec2(oct) { // Decode an oct-encoded normal\n    let x = oct[0];\n    let y = oct[1];\n    x /= x < 0 ? 127 : 128;\n    y /= y < 0 ? 127 : 128;\n    const z = 1 - Math.abs(x) - Math.abs(y);\n    if (z < 0) {\n        x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n    }\n    const length = Math.sqrt(x * x + y * y + z * z);\n    return [\n        x / length,\n        y / length,\n        z / length\n    ];\n}\n\nfunction dot(p, vec3) { // Dot product of a normal in an array against a candidate decoding\n    return p[0] * vec3[0] + p[1] * vec3[1] + p[2] * vec3[2];\n}\n\nexport {BatchingLayer};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/batching/batchingLayer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 268,
    "kind": "variable",
    "name": "bigIndicesSupported",
    "memberof": "scene/bigModels/batching/batchingLayer.js",
    "static": true,
    "longname": "scene/bigModels/batching/batchingLayer.js~bigIndicesSupported",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 269,
    "kind": "variable",
    "name": "uint8Vec4Temp",
    "memberof": "scene/bigModels/batching/batchingLayer.js",
    "static": true,
    "longname": "scene/bigModels/batching/batchingLayer.js~uint8Vec4Temp",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 270,
    "kind": "variable",
    "name": "tempMat4",
    "memberof": "scene/bigModels/batching/batchingLayer.js",
    "static": true,
    "longname": "scene/bigModels/batching/batchingLayer.js~tempMat4",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 271,
    "kind": "variable",
    "name": "tempMat4b",
    "memberof": "scene/bigModels/batching/batchingLayer.js",
    "static": true,
    "longname": "scene/bigModels/batching/batchingLayer.js~tempMat4b",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 272,
    "kind": "variable",
    "name": "tempVec3a",
    "memberof": "scene/bigModels/batching/batchingLayer.js",
    "static": true,
    "longname": "scene/bigModels/batching/batchingLayer.js~tempVec3a",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 273,
    "kind": "variable",
    "name": "tempVec3b",
    "memberof": "scene/bigModels/batching/batchingLayer.js",
    "static": true,
    "longname": "scene/bigModels/batching/batchingLayer.js~tempVec3b",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 274,
    "kind": "variable",
    "name": "currentBatchingLayer",
    "memberof": "scene/bigModels/batching/batchingLayer.js",
    "static": true,
    "longname": "scene/bigModels/batching/batchingLayer.js~currentBatchingLayer",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 275,
    "kind": "variable",
    "name": "quantizePositions",
    "memberof": "scene/bigModels/batching/batchingLayer.js",
    "static": true,
    "longname": "scene/bigModels/batching/batchingLayer.js~quantizePositions",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 647,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 276,
    "kind": "function",
    "name": "transformAndOctEncodeNormals",
    "memberof": "scene/bigModels/batching/batchingLayer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/batchingLayer.js~transformAndOctEncodeNormals",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 676,
    "undocument": true,
    "params": [
      {
        "name": "modelNormalMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "normals",
        "types": [
          "*"
        ]
      },
      {
        "name": "lenNormals",
        "types": [
          "*"
        ]
      },
      {
        "name": "compressedNormals",
        "types": [
          "*"
        ]
      },
      {
        "name": "lenCompressedNormals",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 277,
    "kind": "function",
    "name": "octEncodeVec3",
    "memberof": "scene/bigModels/batching/batchingLayer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/batchingLayer.js~octEncodeVec3",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 723,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "xfunc",
        "types": [
          "*"
        ]
      },
      {
        "name": "yfunc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 278,
    "kind": "function",
    "name": "octDecodeVec2",
    "memberof": "scene/bigModels/batching/batchingLayer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/batchingLayer.js~octDecodeVec2",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 740,
    "undocument": true,
    "params": [
      {
        "name": "oct",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 279,
    "kind": "function",
    "name": "dot",
    "memberof": "scene/bigModels/batching/batchingLayer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/batchingLayer.js~dot",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 758,
    "undocument": true,
    "params": [
      {
        "name": "p",
        "types": [
          "*"
        ]
      },
      {
        "name": "vec3",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 280,
    "kind": "class",
    "name": "BatchingLayer",
    "memberof": "scene/bigModels/batching/batchingLayer.js",
    "static": true,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/batching/batchingLayer.js",
    "importStyle": "{BatchingLayer}",
    "description": "",
    "lineNumber": 26,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 281,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 34,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.buffer",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.primitive",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 282,
    "kind": "member",
    "name": "model",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#model",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 283,
    "kind": "member",
    "name": "_buffer",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#_buffer",
    "access": "private",
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 284,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#_state",
    "access": "private",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 285,
    "kind": "member",
    "name": "numObjects",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#numObjects",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 286,
    "kind": "member",
    "name": "numVisibleObjects",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#numVisibleObjects",
    "access": "public",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 287,
    "kind": "member",
    "name": "numTransparentObjects",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#numTransparentObjects",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "numGhostedObjects",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#numGhostedObjects",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "numSelectedObjects",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#numSelectedObjects",
    "access": "public",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "numHighlightedObjects",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#numHighlightedObjects",
    "access": "public",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "numEdgesObjects",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#numEdgesObjects",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 292,
    "kind": "member",
    "name": "_aabb",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#_aabb",
    "access": "private",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "member",
    "name": "_portions",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#_portions",
    "access": "private",
    "description": null,
    "lineNumber": 92,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 294,
    "kind": "member",
    "name": "_finalized",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#_finalized",
    "access": "private",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 295,
    "kind": "method",
    "name": "canCreatePortion",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#canCreatePortion",
    "access": "public",
    "description": "Tests if there is room for another portion in this BatchingLayer.",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean} True if OK to creatye another portion."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "lenPositions",
        "description": "Number of positions we'd like to create in the portion."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": "True if OK to creatye another portion."
    }
  },
  {
    "__docId__": 296,
    "kind": "method",
    "name": "createPortion",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#createPortion",
    "access": "public",
    "description": "\nCreates a new portion within this InstancingLayer, returns the new portion ID.\n\nGives the portion the specified geometry, flags, color and matrix.",
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Portion ID"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "positions",
        "description": "Flat float Local-space positions array."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "normals",
        "description": "Flat float normals array."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "indices",
        "description": "Flat int indices array."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeIndices",
        "description": "Flat int edges indices array."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "flags",
        "description": "Unsigned long int"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "Quantized RGBA color"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": "Flat float 4x4 matrix"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "aabb",
        "description": "Flat float AABB"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pickColor",
        "description": "Quantized pick color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Portion ID"
    }
  },
  {
    "__docId__": 297,
    "kind": "method",
    "name": "finalize",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#finalize",
    "access": "public",
    "description": "Builds batch VBOs from appended geometries.\nNo more portions can then be created.",
    "lineNumber": 269,
    "params": [],
    "return": null
  },
  {
    "__docId__": 300,
    "kind": "method",
    "name": "setPickID",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#setPickID",
    "access": "public",
    "description": null,
    "lineNumber": 339,
    "undocument": true,
    "params": [
      {
        "name": "portionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "pickId",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 301,
    "kind": "method",
    "name": "setFlags",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#setFlags",
    "access": "public",
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "params": [
      {
        "name": "portionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "flags",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "setColor",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#setColor",
    "access": "public",
    "description": null,
    "lineNumber": 376,
    "undocument": true,
    "params": [
      {
        "name": "portionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 303,
    "kind": "method",
    "name": "setMatrix",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#setMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 398,
    "undocument": true,
    "params": [
      {
        "name": "portionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "matrix",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 304,
    "kind": "method",
    "name": "drawNormalFillOpaque",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawNormalFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 403,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 305,
    "kind": "method",
    "name": "drawNormalEdgesOpaque",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawNormalEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 412,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 306,
    "kind": "method",
    "name": "drawNormalFillTransparent",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawNormalFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 421,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 307,
    "kind": "method",
    "name": "drawNormalTransparentEdges",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawNormalTransparentEdges",
    "access": "public",
    "description": null,
    "lineNumber": 430,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 308,
    "kind": "method",
    "name": "drawGhostedFillOpaque",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawGhostedFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 441,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 309,
    "kind": "method",
    "name": "drawGhostedEdgesOpaque",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawGhostedEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 450,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 310,
    "kind": "method",
    "name": "drawGhostedFillTransparent",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawGhostedFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 459,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "drawGhostedEdgesTransparent",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawGhostedEdgesTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 468,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 312,
    "kind": "method",
    "name": "drawHighlightedFillOpaque",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawHighlightedFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 479,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 313,
    "kind": "method",
    "name": "drawHighlightedEdgesOpaque",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawHighlightedEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 488,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 314,
    "kind": "method",
    "name": "drawHighlightedFillTransparent",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawHighlightedFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 497,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 315,
    "kind": "method",
    "name": "drawHighlightedEdgesTransparent",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawHighlightedEdgesTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 506,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 316,
    "kind": "method",
    "name": "drawSelectedFillOpaque",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawSelectedFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 517,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 317,
    "kind": "method",
    "name": "drawSelectedEdgesOpaque",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawSelectedEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 526,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 318,
    "kind": "method",
    "name": "drawSelectedFillTransparent",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawSelectedFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 535,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 319,
    "kind": "method",
    "name": "drawSelectedEdgesTransparent",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawSelectedEdgesTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 544,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "drawPickMesh",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#drawPickMesh",
    "access": "public",
    "description": null,
    "lineNumber": 555,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 321,
    "kind": "method",
    "name": "compileShaders",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#compileShaders",
    "access": "public",
    "description": null,
    "lineNumber": 564,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 322,
    "kind": "member",
    "name": "_drawRenderer",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#_drawRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 567,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 323,
    "kind": "member",
    "name": "_fillRenderer",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#_fillRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 571,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 324,
    "kind": "member",
    "name": "_edgesRenderer",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#_edgesRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 575,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "_pickRenderer",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#_pickRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 579,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/bigModels/batching/batchingLayer.js~BatchingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/batchingLayer.js~BatchingLayer#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 595,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 335,
    "kind": "file",
    "name": "scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "content": "import {Map} from \"../../../utils/Map.js\";\nimport {stats} from \"../../../stats.js\"\nimport {Program} from \"../../../webgl/Program.js\";\nimport {BatchingDrawShaderSource} from \"./batchingDrawShaderSource.js\";\nimport {RENDER_PASSES} from '../../renderPasses.js';\n\nconst ids = new Map({});\n\n/**\n * @private\n * @constructor\n */\nconst BatchingDrawRenderer = function (hash, layer) {\n    this.id = ids.addItem({});\n    this._hash = hash;\n    this._scene = layer.model.scene;\n    this._useCount = 0;\n    this._shaderSource = new BatchingDrawShaderSource(layer);\n    this._allocate(layer);\n};\n\nconst renderers = {};\nconst defaultColorize = new Float32Array([1.0, 1.0, 1.0, 1.0]);\n\nBatchingDrawRenderer.get = function (layer) {\n    const scene = layer.model.scene;\n    const hash = getHash(scene);\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new BatchingDrawRenderer(hash, layer);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        stats.memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nfunction getHash(scene) {\n    return [scene.canvas.canvas.id, \"\", scene._lightsState.getHash(), scene._clipsState.getHash()].join(\";\")\n}\n\nBatchingDrawRenderer.prototype.getValid = function () {\n    return this._hash === getHash(this._scene);\n};\n\nBatchingDrawRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        stats.memory.programs--;\n    }\n};\n\nBatchingDrawRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nBatchingDrawRenderer.prototype.drawLayer = function (frameCtx, layer, renderPass) {\n    const model = layer.model;\n    const scene = model.scene;\n    const gl = scene.canvas.gl;\n    const state = layer._state;\n    if (!this._program) {\n        this._allocate(layer);\n    }\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx, layer);\n    }\n    gl.uniform1i(this._uRenderPass, renderPass);\n    this._aPosition.bindArrayBuffer(state.positionsBuf);\n    frameCtx.bindArray++;\n    if (this._aNormal) {\n        this._aNormal.bindArrayBuffer(state.normalsBuf);\n        frameCtx.bindArray++;\n    }\n    if (this._aColor) {\n        this._aColor.bindArrayBuffer(state.colorsBuf);\n        frameCtx.bindArray++;\n    }\n    if (this._aFlags) {\n        this._aFlags.bindArrayBuffer(state.flagsBuf);\n        frameCtx.bindArray++;\n    }\n    state.indicesBuf.bind();\n    frameCtx.bindArray++;\n    if (renderPass === RENDER_PASSES.GHOSTED) {\n        const material = scene.ghostMaterial._state;\n        const fillColor = material.fillColor;\n        const fillAlpha = material.fillAlpha;\n        gl.uniform4f(this._uColorize, fillColor[0], fillColor[1], fillColor[2], fillAlpha);\n    } else if (renderPass === RENDER_PASSES.HIGHLIGHTED) {\n        const material = scene.highlightMaterial._state;\n        const fillColor = material.fillColor;\n        const fillAlpha = material.fillAlpha;\n        gl.uniform4f(this._uColorize, fillColor[0], fillColor[1], fillColor[2], fillAlpha);\n    } else {\n        gl.uniform4fv(this._uColorize, defaultColorize);\n    }\n    gl.drawElements(state.primitive, state.indicesBuf.numItems, state.indicesBuf.itemType, 0);\n    frameCtx.drawElements++;\n};\n\nBatchingDrawRenderer.prototype._allocate = function (layer) {\n    var scene = layer.model.scene;\n    const gl = scene.canvas.gl;\n    const lightsState = scene._lightsState;\n    const clipsState = scene._clipsState;\n    this._program = new Program(gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uRenderPass = program.getLocation(\"renderPass\");\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uViewNormalMatrix = program.getLocation(\"viewNormalMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uColorize = program.getLocation(\"colorize\");\n    this._uLightAmbient = [];\n    this._uLightColor = [];\n    this._uLightDir = [];\n    this._uLightPos = [];\n    this._uLightAttenuation = [];\n    const lights = lightsState.lights;\n    let light;\n\n    for (var i = 0, len = lights.length; i < len; i++) {\n        light = lights[i];\n        switch (light.type) {\n            case \"ambient\":\n                this._uLightAmbient[i] = program.getLocation(\"lightAmbient\");\n                break;\n            case \"dir\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = null;\n                this._uLightDir[i] = program.getLocation(\"lightDir\" + i);\n                break;\n            case \"point\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = program.getLocation(\"lightPos\" + i);\n                this._uLightDir[i] = null;\n                this._uLightAttenuation[i] = program.getLocation(\"lightAttenuation\" + i);\n                break;\n            case \"spot\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = program.getLocation(\"lightPos\" + i);\n                this._uLightDir[i] = program.getLocation(\"lightDir\" + i);\n                this._uLightAttenuation[i] = program.getLocation(\"lightAttenuation\" + i);\n                break;\n        }\n    }\n    this._uClips = [];\n    const clips = clipsState.clips;\n    for (var i = 0, len = clips.length; i < len; i++) {\n        this._uClips.push({\n            active: program.getLocation(\"clipActive\" + i),\n            pos: program.getLocation(\"clipPos\" + i),\n            dir: program.getLocation(\"clipDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._aNormal = program.getAttribute(\"normal\");\n    this._aColor = program.getAttribute(\"color\");\n    this._aFlags = program.getAttribute(\"flags\");\n};\n\nBatchingDrawRenderer.prototype._bindProgram = function (frameCtx, layer) {\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const program = this._program;\n    const lightsState = scene._lightsState;\n    const clipsState = scene._clipsState;\n    const lights = lightsState.lights;\n    let light;\n    program.bind();\n    frameCtx.useProgram++;\n    const camera = scene.camera;\n    const cameraState = camera._state;\n    gl.uniformMatrix4fv(this._uViewMatrix, false, cameraState.matrix);\n    gl.uniformMatrix4fv(this._uViewNormalMatrix, false, cameraState.normalMatrix);\n    gl.uniformMatrix4fv(this._uProjMatrix, false, camera._project._state.matrix);\n    gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, layer._state.positionsDecodeMatrix);\n    for (var i = 0, len = lights.length; i < len; i++) {\n        light = lights[i];\n        if (this._uLightAmbient[i]) {\n            gl.uniform4f(this._uLightAmbient[i], light.color[0], light.color[1], light.color[2], light.intensity);\n        } else {\n            if (this._uLightColor[i]) {\n                gl.uniform4f(this._uLightColor[i], light.color[0], light.color[1], light.color[2], light.intensity);\n            }\n            if (this._uLightPos[i]) {\n                gl.uniform3fv(this._uLightPos[i], light.pos);\n                if (this._uLightAttenuation[i]) {\n                    gl.uniform1f(this._uLightAttenuation[i], light.attenuation);\n                }\n            }\n            if (this._uLightDir[i]) {\n                gl.uniform3fv(this._uLightDir[i], light.dir);\n            }\n        }\n    }\n    if (clipsState.clips.length > 0) {\n        const clips = scene._clipsState.clips;\n        let clipUniforms;\n        let uClipActive;\n        let clip;\n        let uClipPos;\n        let uClipDir;\n        for (var i = 0, len = this._uClips.length; i < len; i++) {\n            clipUniforms = this._uClips[i];\n            uClipActive = clipUniforms.active;\n            clip = clips[i];\n            if (uClipActive) {\n                gl.uniform1i(uClipActive, clip.active);\n            }\n            uClipPos = clipUniforms.pos;\n            if (uClipPos) {\n                gl.uniform3fv(clipUniforms.pos, clip.pos);\n            }\n            uClipDir = clipUniforms.dir;\n            if (uClipDir) {\n                gl.uniform3fv(clipUniforms.dir, clip.dir);\n            }\n        }\n    }\n};\n\nexport {BatchingDrawRenderer};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 336,
    "kind": "variable",
    "name": "ids",
    "memberof": "scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "static": true,
    "longname": "scene/bigModels/batching/draw/batchingDrawRenderer.js~ids",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "scene/utils/Map.js~Map"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 337,
    "kind": "variable",
    "name": "renderers",
    "memberof": "scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "static": true,
    "longname": "scene/bigModels/batching/draw/batchingDrawRenderer.js~renderers",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 338,
    "kind": "variable",
    "name": "defaultColorize",
    "memberof": "scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "static": true,
    "longname": "scene/bigModels/batching/draw/batchingDrawRenderer.js~defaultColorize",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 339,
    "kind": "function",
    "name": "get",
    "memberof": "scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/draw/batchingDrawRenderer.js~get",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 340,
    "kind": "function",
    "name": "getHash",
    "memberof": "scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/draw/batchingDrawRenderer.js~getHash",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "scene",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 341,
    "kind": "function",
    "name": "getValid",
    "memberof": "scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/draw/batchingDrawRenderer.js~getValid",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 342,
    "kind": "function",
    "name": "put",
    "memberof": "scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/draw/batchingDrawRenderer.js~put",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 343,
    "kind": "function",
    "name": "webglContextRestored",
    "memberof": "scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/draw/batchingDrawRenderer.js~webglContextRestored",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 344,
    "kind": "function",
    "name": "drawLayer",
    "memberof": "scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/draw/batchingDrawRenderer.js~drawLayer",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderPass",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 345,
    "kind": "function",
    "name": "_allocate",
    "memberof": "scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/draw/batchingDrawRenderer.js~_allocate",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 346,
    "kind": "function",
    "name": "_bindProgram",
    "memberof": "scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/draw/batchingDrawRenderer.js~_bindProgram",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 176,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 347,
    "kind": "function",
    "name": "BatchingDrawRenderer",
    "memberof": "scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/draw/batchingDrawRenderer.js~BatchingDrawRenderer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/batching/draw/batchingDrawRenderer.js",
    "importStyle": "{BatchingDrawRenderer}",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "ignore": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 348,
    "kind": "file",
    "name": "scene/bigModels/batching/draw/batchingDrawShaderSource.js",
    "content": "import {RENDER_PASSES} from '../../renderPasses.js';\n\n/**\n * @private\n * @constructor\n */\nconst BatchingDrawShaderSource = function (layer) {\n    this.vertex = buildVertex(layer);\n    this.fragment = buildFragment(layer);\n};\n\nfunction buildVertex(layer) {\n    var scene = layer.model.scene;\n    const clipsState = scene._clipsState;\n    const lightsState = scene._lightsState;\n    const clipping = clipsState.clips.length > 0;\n    let i;\n    let len;\n    let light;\n    const src = [];\n\n    src.push(\"// Batched geometry drawing vertex shader\");\n\n    src.push(\"uniform int renderPass;\");\n\n    src.push(\"attribute vec3 position;\");\n    src.push(\"attribute vec3 normal;\");\n    src.push(\"attribute vec4 color;\");\n    src.push(\"attribute vec4 flags;\");\n\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform mat4 viewNormalMatrix;\");\n    src.push(\"uniform mat4 positionsDecodeMatrix;\");\n\n    src.push(\"uniform vec4 colorize;\");\n\n    src.push(\"uniform vec4 lightAmbient;\");\n\n    for (i = 0, len = lightsState.lights.length; i < len; i++) {\n        light = lightsState.lights[i];\n        if (light.type === \"ambient\") {\n            continue;\n        }\n        src.push(\"uniform vec4 lightColor\" + i + \";\");\n        if (light.type === \"dir\") {\n            src.push(\"uniform vec3 lightDir\" + i + \";\");\n        }\n        if (light.type === \"point\") {\n            src.push(\"uniform vec3 lightPos\" + i + \";\");\n        }\n        if (light.type === \"spot\") {\n            src.push(\"uniform vec3 lightPos\" + i + \";\");\n            src.push(\"uniform vec3 lightDir\" + i + \";\");\n        }\n    }\n\n    src.push(\"vec3 octDecodeNormal(vec2 oct) {\");\n    src.push(\"    vec3 v = vec3(oct.xy, 1.0 - abs(oct.x) - abs(oct.y));\");\n    src.push(\"    if (v.z < 0.0) {\");\n    src.push(\"        v.xy = (1.0 - abs(v.yx)) * vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);\");\n    src.push(\"    }\");\n    src.push(\"    return normalize(v);\");\n    src.push(\"}\");\n\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"varying vec4 vColor;\");\n\n    src.push(\"void main(void) {\");\n\n\n    src.push(\"bool visible      = (float(flags.x) > 0.0);\");\n    src.push(\"bool ghosted      = (float(flags.y) > 0.0);\");\n    src.push(\"bool highlighted  = (float(flags.z) > 0.0);\");\n    src.push(\"bool transparent  = ((float(color.a) / 255.0) < 1.0);\");\n\n    src.push(`if (!visible || (renderPass == ${RENDER_PASSES.OPAQUE} && (transparent || ghosted || highlighted)) || (renderPass == ${RENDER_PASSES.TRANSPARENT} && (!transparent || ghosted || highlighted)) || (renderPass == ${RENDER_PASSES.GHOSTED} && (!ghosted || highlighted)) || (renderPass == ${RENDER_PASSES.HIGHLIGHTED} && !highlighted)) {`);\n    src.push(\"   gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\"); // Cull vertex\n    src.push(\"} else {\");\n\n    src.push(\"vec4 worldPosition = (positionsDecodeMatrix * vec4(position, 1.0)); \");\n    src.push(\"vec4 viewPosition  = viewMatrix * worldPosition; \");\n\n    src.push(\"vec4 worldNormal =  vec4(octDecodeNormal(normal.xy), 0.0); \");\n\n    src.push(\"vec3 viewNormal = normalize((viewNormalMatrix * worldNormal).xyz);\");\n\n    src.push(\"vec3 reflectedColor = vec3(0.0, 0.0, 0.0);\");\n    src.push(\"vec3 viewLightDir = vec3(0.0, 0.0, -1.0);\");\n\n\n    src.push(\"float lambertian = 1.0;\");\n    for (i = 0, len = lightsState.lights.length; i < len; i++) {\n        light = lightsState.lights[i];\n        if (light.type === \"ambient\") {\n            continue;\n        }\n        if (light.type === \"dir\") {\n            if (light.space === \"view\") {\n                src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n            } else {\n                src.push(\"viewLightDir = normalize((viewMatrix * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n            }\n        } else if (light.type === \"point\") {\n            if (light.space === \"view\") {\n                src.push(\"viewLightDir = normalize(lightPos\" + i + \" - viewPosition.xyz);\");\n            } else {\n                src.push(\"viewLightDir = normalize((viewMatrix * vec4(lightPos\" + i + \", 0.0)).xyz);\");\n            }\n        } else if (light.type === \"spot\") {\n            if (light.space === \"view\") {\n                src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n            } else {\n                src.push(\"viewLightDir = normalize((viewMatrix * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n            }\n        } else {\n            continue;\n        }\n        src.push(\"lambertian = max(dot(-viewNormal, viewLightDir), 0.0);\");\n        src.push(\"reflectedColor += lambertian * (lightColor\" + i + \".rgb * lightColor\" + i + \".a);\");\n    }\n\n    src.push(\"vColor = colorize * vec4(reflectedColor * vec3(float(color.r) / 255.0, float(color.g) / 255.0, float(color.b) / 255.0), float(color.a) / 255.0);\");\n\n    // src.push(\"vColor.r += 1.0;\");\n    // src.push(\"vColor.g += 1.0;\");\n    // src.push(\"vColor.b += 1.0;\");\n\n\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    src.push(\"gl_Position = projMatrix * viewPosition;\");\n    src.push(\"}\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(layer) {\n    const scene = layer.model.scene;\n    const clipsState = scene._clipsState;\n    let i;\n    let len;\n    const clipping = clipsState.clips.length > 0;\n    const src = [];\n    src.push(\"// Batched geometry drawing fragment shader\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (i = 0, len = clipsState.clips.length; i < len; i++) {\n            src.push(\"uniform bool clipActive\" + i + \";\");\n            src.push(\"uniform vec3 clipPos\" + i + \";\");\n            src.push(\"uniform vec3 clipDir\" + i + \";\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (i = 0, len = clipsState.clips.length; i < len; i++) {\n            src.push(\"if (clipActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-clipDir\" + i + \".xyz, vWorldPosition.xyz - clipPos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n//    src.push(\"gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\");\n    src.push(\"gl_FragColor = vColor;\");\n    src.push(\"}\");\n    return src;\n}\n\nexport {BatchingDrawShaderSource};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/batching/draw/batchingDrawShaderSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 349,
    "kind": "function",
    "name": "buildVertex",
    "memberof": "scene/bigModels/batching/draw/batchingDrawShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/draw/batchingDrawShaderSource.js~buildVertex",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/draw/batchingDrawShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 350,
    "kind": "function",
    "name": "buildFragment",
    "memberof": "scene/bigModels/batching/draw/batchingDrawShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/draw/batchingDrawShaderSource.js~buildFragment",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/draw/batchingDrawShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 351,
    "kind": "function",
    "name": "BatchingDrawShaderSource",
    "memberof": "scene/bigModels/batching/draw/batchingDrawShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/draw/batchingDrawShaderSource.js~BatchingDrawShaderSource",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/batching/draw/batchingDrawShaderSource.js",
    "importStyle": "{BatchingDrawShaderSource}",
    "description": "",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "ignore": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 352,
    "kind": "file",
    "name": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "content": "import {Map} from \"../../../utils/Map.js\";\nimport {stats} from \"../../../stats.js\"\nimport {Program} from \"../../../webgl/Program.js\";\nimport {BatchingEmphasisEdgesShaderSource} from \"./batchingEmphasisEdgesShaderSource.js\";\nimport {RENDER_PASSES} from '../../renderPasses.js';\n\nconst ids = new Map({});\n\n/**\n * @private\n * @constructor\n */\nconst BatchingEmphasisEdgesRenderer = function (hash, layer) {\n    this.id = ids.addItem({});\n    this._hash = hash;\n    this._scene = layer.model.scene;\n    this._useCount = 0;\n    this._shaderSource = new BatchingEmphasisEdgesShaderSource(layer);\n    this._allocate(layer);\n};\n\nconst renderers = {};\nconst defaultColorize = new Float32Array([1.0, 1.0, 1.0, 1.0]);\n\nBatchingEmphasisEdgesRenderer.get = function (layer) {\n    const scene = layer.model.scene;\n    const hash = getHash(scene);\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new BatchingEmphasisEdgesRenderer(hash, layer);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        stats.memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nfunction getHash(scene) {\n    return [scene.canvas.canvas.id, \"\", scene._clipsState.getHash()].join(\";\")\n}\n\nBatchingEmphasisEdgesRenderer.prototype.getValid = function () {\n    return this._hash === getHash(this._scene);\n};\n\nBatchingEmphasisEdgesRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        stats.memory.programs--;\n    }\n};\n\nBatchingEmphasisEdgesRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nBatchingEmphasisEdgesRenderer.prototype.drawLayer = function (frameCtx, layer, renderPass) {\n    const model = layer.model;\n    const scene = model.scene;\n    const gl = scene.canvas.gl;\n    const state = layer._state;\n    if (!this._program) {\n        this._allocate(layer);\n    }\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx, layer);\n    }\n    if (renderPass === RENDER_PASSES.GHOSTED) {\n        const material = scene.ghostMaterial._state;\n        const edgeColor = material.edgeColor;\n        const edgeAlpha = material.edgeAlpha;\n        gl.uniform4f(this._uColor, edgeColor[0], edgeColor[1], edgeColor[2], edgeAlpha);\n    } else if (renderPass === RENDER_PASSES.HIGHLIGHTED) {\n        const material = scene.highlightMaterial._state;\n        const edgeColor = material.edgeColor;\n        const edgeAlpha = material.edgeAlpha;\n        gl.uniform4f(this._uColor, edgeColor[0], edgeColor[1], edgeColor[2], edgeAlpha);\n    } else {\n        const material = scene.edgeMaterial._state;\n        const edgeColor = material.edgeColor;\n        const edgeAlpha = material.edgeAlpha;\n        gl.uniform4f(this._uColor, edgeColor[0], edgeColor[1], edgeColor[2], edgeAlpha);\n    }\n    gl.uniform1i(this._uRenderPass, renderPass);\n    this._aPosition.bindArrayBuffer(state.positionsBuf);\n    frameCtx.bindArray++;\n    if (this._aFlags) {\n        this._aFlags.bindArrayBuffer(state.flagsBuf);\n        frameCtx.bindArray++;\n    }\n    state.edgeIndicesBuf.bind();\n    frameCtx.bindArray++;\n    gl.drawElements(gl.LINES, state.edgeIndicesBuf.numItems, state.edgeIndicesBuf.itemType, 0);\n    frameCtx.drawElements++;\n};\n\nBatchingEmphasisEdgesRenderer.prototype._allocate = function (layer) {\n    var scene = layer.model.scene;\n    const gl = scene.canvas.gl;\n    const clipsState = scene._clipsState;\n    this._program = new Program(gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uColor = program.getLocation(\"color\");\n    this._uRenderPass = program.getLocation(\"renderPass\");\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uClips = [];\n    const clips = clipsState.clips;\n    for (var i = 0, len = clips.length; i < len; i++) {\n        this._uClips.push({\n            active: program.getLocation(\"clipActive\" + i),\n            pos: program.getLocation(\"clipPos\" + i),\n            dir: program.getLocation(\"clipDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._aFlags = program.getAttribute(\"flags\");\n};\n\nBatchingEmphasisEdgesRenderer.prototype._bindProgram = function (frameCtx, layer) {\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const program = this._program;\n    const clipsState = scene._clipsState;\n    program.bind();\n    frameCtx.useProgram++;\n    const camera = scene.camera;\n    const cameraState = camera._state;\n    gl.uniformMatrix4fv(this._uViewMatrix, false, cameraState.matrix);\n    gl.uniformMatrix4fv(this._uProjMatrix, false, camera._project._state.matrix);\n    gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, layer._state.positionsDecodeMatrix);\n    if (clipsState.clips.length > 0) {\n        const clips = scene._clipsState.clips;\n        let clipUniforms;\n        let uClipActive;\n        let clip;\n        let uClipPos;\n        let uClipDir;\n        for (var i = 0, len = this._uClips.length; i < len; i++) {\n            clipUniforms = this._uClips[i];\n            uClipActive = clipUniforms.active;\n            clip = clips[i];\n            if (uClipActive) {\n                gl.uniform1i(uClipActive, clip.active);\n            }\n            uClipPos = clipUniforms.pos;\n            if (uClipPos) {\n                gl.uniform3fv(clipUniforms.pos, clip.pos);\n            }\n            uClipDir = clipUniforms.dir;\n            if (uClipDir) {\n                gl.uniform3fv(clipUniforms.dir, clip.dir);\n            }\n        }\n    }\n};\n\nexport {BatchingEmphasisEdgesRenderer};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 353,
    "kind": "variable",
    "name": "ids",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js~ids",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "scene/utils/Map.js~Map"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 354,
    "kind": "variable",
    "name": "renderers",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js~renderers",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 355,
    "kind": "variable",
    "name": "defaultColorize",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js~defaultColorize",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 356,
    "kind": "function",
    "name": "get",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js~get",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 357,
    "kind": "function",
    "name": "getHash",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js~getHash",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "scene",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 358,
    "kind": "function",
    "name": "getValid",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js~getValid",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 359,
    "kind": "function",
    "name": "put",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js~put",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 360,
    "kind": "function",
    "name": "webglContextRestored",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js~webglContextRestored",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 361,
    "kind": "function",
    "name": "drawLayer",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js~drawLayer",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderPass",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 362,
    "kind": "function",
    "name": "_allocate",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js~_allocate",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 363,
    "kind": "function",
    "name": "_bindProgram",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js~_bindProgram",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 364,
    "kind": "function",
    "name": "BatchingEmphasisEdgesRenderer",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js~BatchingEmphasisEdgesRenderer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisEdgesRenderer.js",
    "importStyle": "{BatchingEmphasisEdgesRenderer}",
    "description": "",
    "lineNumber": 13,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "ignore": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 365,
    "kind": "file",
    "name": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesShaderSource.js",
    "content": "import {RENDER_PASSES} from '../../renderPasses.js';\n\n/**\n * @private\n * @constructor\n */\nconst BatchingEmphasisEdgesShaderSource = function (layer) {\n    this.vertex = buildVertex(layer);\n    this.fragment = buildFragment(layer);\n};\n\nfunction buildVertex(layer) {\n    const clipsState = layer.model.scene._clipsState;\n    const clipping = clipsState.clips.length > 0;\n    const src = [];\n\n    src.push(\"// Batched geometry edges drawing vertex shader\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    src.push(\"uniform int renderPass;\");\n    src.push(\"attribute vec3 position;\");\n    src.push(\"attribute vec4 flags;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"uniform vec4 color;\");\n\n    src.push(\"void main(void) {\");\n\n    /*\n     pass 0 - opaque, non-ghosted objects only\n     pass 1 - transparent, non-ghosted objects only\n     pass 2 - ghosted objects only\n     pass 3 - highlighted objects only\n     */\n    src.push(\"bool visible      = (float(flags.x) > 0.0);\");\n    src.push(\"bool ghosted      = (float(flags.y) > 0.0);\");\n    src.push(\"bool highlighted  = (float(flags.z) > 0.0);\");\n\n    src.push(\"bool transparent  = ((float(color.a) / 255.0) < 1.0);\");\n\n    src.push(`if (!visible || (renderPass == ${RENDER_PASSES.OPAQUE} && (transparent || ghosted)) || (renderPass == ${RENDER_PASSES.TRANSPARENT} && (!transparent || ghosted)) || (renderPass == ${RENDER_PASSES.GHOSTED} && !ghosted) || (renderPass == ${RENDER_PASSES.HIGHLIGHTED} && !highlighted)) {`);\n    src.push(\"   gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\"); // Cull vertex\n    src.push(\"} else {\");\n\n    src.push(\"  vec4 worldPosition = positionsDecodeMatrix * vec4(position, 1.0); \");\n    src.push(\"  vec4 viewPosition  = viewMatrix * worldPosition; \");\n    if (clipping) {\n        src.push(\"  vWorldPosition = worldPosition;\");\n    }\n    src.push(\"  gl_Position = projMatrix * viewPosition;\");\n    src.push(\"}\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(layer) {\n    const scene = layer.model.scene;\n    const clipsState = scene._clipsState;\n    let i;\n    let len;\n    const clipping = clipsState.clips.length > 0;\n    const src = [];\n    src.push(\"// Batched geometry edges drawing fragment shader\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (i = 0, len = clipsState.clips.length; i < len; i++) {\n            src.push(\"uniform bool clipActive\" + i + \";\");\n            src.push(\"uniform vec3 clipPos\" + i + \";\");\n            src.push(\"uniform vec3 clipDir\" + i + \";\");\n        }\n    }\n    src.push(\"uniform vec4 color;\");\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (i = 0, len = clipsState.clips.length; i < len; i++) {\n            src.push(\"if (clipActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-clipDir\" + i + \".xyz, vWorldPosition.xyz - clipPos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    src.push(\"gl_FragColor = color;\");\n    src.push(\"}\");\n    return src;\n}\n\nexport {BatchingEmphasisEdgesShaderSource};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/batching/emphasis/batchingEmphasisEdgesShaderSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 366,
    "kind": "function",
    "name": "buildVertex",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesShaderSource.js~buildVertex",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisEdgesShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 367,
    "kind": "function",
    "name": "buildFragment",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesShaderSource.js~buildFragment",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisEdgesShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 368,
    "kind": "function",
    "name": "BatchingEmphasisEdgesShaderSource",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisEdgesShaderSource.js~BatchingEmphasisEdgesShaderSource",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisEdgesShaderSource.js",
    "importStyle": "{BatchingEmphasisEdgesShaderSource}",
    "description": "",
    "lineNumber": 7,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "ignore": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 369,
    "kind": "file",
    "name": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "content": "import {Map} from \"../../../utils/Map.js\";\nimport {stats} from \"../../../stats.js\"\nimport {Program} from \"../../../webgl/Program.js\";\nimport {BatchingEmphasisFillShaderSource} from \"./batchingEmphasisFillShaderSource.js\";\nimport {RENDER_PASSES} from '../../renderPasses.js';\n\nconst ids = new Map({});\n\n/**\n * @private\n */\nconst BatchingEmphasisFillRenderer = function (hash, layer) {\n    this.id = ids.addItem({});\n    this._hash = hash;\n    this._scene = layer.model.scene;\n    this._useCount = 0;\n    this._shaderSource = new BatchingEmphasisFillShaderSource(layer);\n    this._allocate(layer);\n};\n\nconst renderers = {};\nconst defaultColor = new Float32Array([1.0, 1.0, 1.0, 1.0]);\n\nBatchingEmphasisFillRenderer.get = function (layer) {\n    const scene = layer.model.scene;\n    const hash = getHash(scene);\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new BatchingEmphasisFillRenderer(hash, layer);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        stats.memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nfunction getHash(scene) {\n    return [scene.canvas.canvas.id, \"\", scene._lightsState.getHash(), scene._clipsState.getHash()].join(\";\")\n}\n\nBatchingEmphasisFillRenderer.prototype.getValid = function () {\n    return this._hash === getHash(this._scene);\n};\n\nBatchingEmphasisFillRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        stats.memory.programs--;\n    }\n};\n\nBatchingEmphasisFillRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nBatchingEmphasisFillRenderer.prototype.drawLayer = function (frameCtx, layer, renderPass) {\n    const model = layer.model;\n    const scene = model.scene;\n    const gl = scene.canvas.gl;\n    const state = layer._state;\n    if (!this._program) {\n        this._allocate(layer);\n    }\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx, layer);\n    }\n    gl.uniform1i(this._uRenderPass, renderPass);\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, model.worldMatrix);\n    gl.uniformMatrix4fv(this._uModelNormalMatrix, gl.FALSE, model.worldNormalMatrix);\n    this._aPosition.bindArrayBuffer(state.positionsBuf);\n    frameCtx.bindArray++;\n    if (this._aNormal) {\n        this._aNormal.bindArrayBuffer(state.normalsBuf);\n        frameCtx.bindArray++;\n    }\n    if (this._aFlags) {\n        this._aFlags.bindArrayBuffer(state.flagsBuf);\n        frameCtx.bindArray++;\n    }\n    state.indicesBuf.bind();\n    frameCtx.bindArray++;\n    if (renderPass === RENDER_PASSES.GHOSTED) {\n        const material = scene.ghostMaterial._state;\n        const fillColor = material.fillColor;\n        const fillAlpha = material.fillAlpha;\n        gl.uniform4f(this._uColor, fillColor[0], fillColor[1], fillColor[2], fillAlpha);\n    } else if (renderPass === RENDER_PASSES.HIGHLIGHTED) {\n        const material = scene.highlightMaterial._state;\n        const fillColor = material.fillColor;\n        const fillAlpha = material.fillAlpha;\n        gl.uniform4f(this._uColor, fillColor[0], fillColor[1], fillColor[2], fillAlpha);\n    } else {\n        gl.uniform4fv(this._uColor, defaultColor);\n    }\n    gl.drawElements(state.primitive, state.indicesBuf.numItems, state.indicesBuf.itemType, 0);\n    frameCtx.drawElements++;\n};\n\nBatchingEmphasisFillRenderer.prototype._allocate = function (layer) {\n    const scene = layer.model.scene;\n    const gl = scene.canvas.gl;\n    const lightsState = scene._lightsState;\n    const clipsState = scene._clipsState;\n    this._program = new Program(gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uRenderPass = program.getLocation(\"renderPass\");\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uModelNormalMatrix = program.getLocation(\"modelNormalMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uViewNormalMatrix = program.getLocation(\"viewNormalMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uColor = program.getLocation(\"color\");\n    this._uLightAmbient = [];\n    this._uLightColor = [];\n    this._uLightDir = [];\n    this._uLightPos = [];\n    this._uLightAttenuation = [];\n    const lights = lightsState.lights;\n    let light;\n\n    for (var i = 0, len = lights.length; i < len; i++) {\n        light = lights[i];\n        switch (light.type) {\n            case \"ambient\":\n                this._uLightAmbient[i] = program.getLocation(\"lightAmbient\");\n                break;\n            case \"dir\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = null;\n                this._uLightDir[i] = program.getLocation(\"lightDir\" + i);\n                break;\n            case \"point\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = program.getLocation(\"lightPos\" + i);\n                this._uLightDir[i] = null;\n                this._uLightAttenuation[i] = program.getLocation(\"lightAttenuation\" + i);\n                break;\n            case \"spot\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = program.getLocation(\"lightPos\" + i);\n                this._uLightDir[i] = program.getLocation(\"lightDir\" + i);\n                this._uLightAttenuation[i] = program.getLocation(\"lightAttenuation\" + i);\n                break;\n        }\n    }\n    this._uClips = [];\n    const clips = clipsState.clips;\n    for (var i = 0, len = clips.length; i < len; i++) {\n        this._uClips.push({\n            active: program.getLocation(\"clipActive\" + i),\n            pos: program.getLocation(\"clipPos\" + i),\n            dir: program.getLocation(\"clipDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._aNormal = program.getAttribute(\"normal\");\n    this._aFlags = program.getAttribute(\"flags\");\n};\n\nBatchingEmphasisFillRenderer.prototype._bindProgram = function (frameCtx, layer) {\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const program = this._program;\n    const lightsState = scene._lightsState;\n    const clipsState = scene._clipsState;\n    const lights = lightsState.lights;\n    let light;\n    program.bind();\n    frameCtx.useProgram++;\n    const camera = scene.camera;\n    const cameraState = camera._state;\n    gl.uniformMatrix4fv(this._uViewMatrix, false, cameraState.matrix);\n    gl.uniformMatrix4fv(this._uViewNormalMatrix, false, cameraState.normalMatrix);\n    gl.uniformMatrix4fv(this._uProjMatrix, false, camera._project._state.matrix);\n    gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, layer._state.positionsDecodeMatrix);\n    for (var i = 0, len = lights.length; i < len; i++) {\n        light = lights[i];\n        if (this._uLightAmbient[i]) {\n            gl.uniform4f(this._uLightAmbient[i], light.color[0], light.color[1], light.color[2], light.intensity);\n        } else {\n            if (this._uLightColor[i]) {\n                gl.uniform4f(this._uLightColor[i], light.color[0], light.color[1], light.color[2], light.intensity);\n            }\n            if (this._uLightPos[i]) {\n                gl.uniform3fv(this._uLightPos[i], light.pos);\n                if (this._uLightAttenuation[i]) {\n                    gl.uniform1f(this._uLightAttenuation[i], light.attenuation);\n                }\n            }\n            if (this._uLightDir[i]) {\n                gl.uniform3fv(this._uLightDir[i], light.dir);\n            }\n        }\n    }\n    if (clipsState.clips.length > 0) {\n        const clips = scene._clipsState.clips;\n        let clipUniforms;\n        let uClipActive;\n        let clip;\n        let uClipPos;\n        let uClipDir;\n        for (var i = 0, len = this._uClips.length; i < len; i++) {\n            clipUniforms = this._uClips[i];\n            uClipActive = clipUniforms.active;\n            clip = clips[i];\n            if (uClipActive) {\n                gl.uniform1i(uClipActive, clip.active);\n            }\n            uClipPos = clipUniforms.pos;\n            if (uClipPos) {\n                gl.uniform3fv(clipUniforms.pos, clip.pos);\n            }\n            uClipDir = clipUniforms.dir;\n            if (uClipDir) {\n                gl.uniform3fv(clipUniforms.dir, clip.dir);\n            }\n        }\n    }\n};\n\nexport {BatchingEmphasisFillRenderer};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 370,
    "kind": "variable",
    "name": "ids",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js~ids",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "scene/utils/Map.js~Map"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 371,
    "kind": "variable",
    "name": "renderers",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js~renderers",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 372,
    "kind": "variable",
    "name": "defaultColor",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js~defaultColor",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 373,
    "kind": "function",
    "name": "get",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js~get",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 374,
    "kind": "function",
    "name": "getHash",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js~getHash",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "scene",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 375,
    "kind": "function",
    "name": "getValid",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js~getValid",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 376,
    "kind": "function",
    "name": "put",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js~put",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 377,
    "kind": "function",
    "name": "webglContextRestored",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js~webglContextRestored",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 378,
    "kind": "function",
    "name": "drawLayer",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js~drawLayer",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderPass",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 379,
    "kind": "function",
    "name": "_allocate",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js~_allocate",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 380,
    "kind": "function",
    "name": "_bindProgram",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js~_bindProgram",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 381,
    "kind": "function",
    "name": "BatchingEmphasisFillRenderer",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js~BatchingEmphasisFillRenderer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisFillRenderer.js",
    "importStyle": "{BatchingEmphasisFillRenderer}",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 382,
    "kind": "file",
    "name": "scene/bigModels/batching/emphasis/batchingEmphasisFillShaderSource.js",
    "content": "import {RENDER_PASSES} from '../../renderPasses.js';\n\n/**\n * @private\n */\nconst BatchingEmphasisFillShaderSource = function (layer) {\n    this.vertex = buildVertex(layer);\n    this.fragment = buildFragment(layer);\n};\n\nfunction buildVertex(layer) {\n    const scene = layer.model.scene;\n    const clipsState = scene._clipsState;\n    const lightsState = scene._lightsState;\n    const clipping = clipsState.clips.length > 0;\n    let i;\n    let len;\n    let light;\n    const src = [];\n\n    src.push(\"// Batched geometry drawing vertex shader\");\n\n    src.push(\"uniform int renderPass;\");\n\n    src.push(\"attribute vec3 position;\");\n    src.push(\"attribute vec4 flags;\");\n    src.push(\"attribute vec2 normal;\");\n\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform mat4 viewNormalMatrix;\");\n    src.push(\"uniform mat4 positionsDecodeMatrix;\");\n\n    src.push(\"uniform vec4 color;\");\n\n    src.push(\"uniform vec4 lightAmbient;\");\n\n    for (i = 0, len = lightsState.lights.length; i < len; i++) {\n        light = lightsState.lights[i];\n        if (light.type === \"ambient\") {\n            continue;\n        }\n        src.push(\"uniform vec4 lightColor\" + i + \";\");\n        if (light.type === \"dir\") {\n            src.push(\"uniform vec3 lightDir\" + i + \";\");\n        }\n        if (light.type === \"point\") {\n            src.push(\"uniform vec3 lightPos\" + i + \";\");\n        }\n        if (light.type === \"spot\") {\n            src.push(\"uniform vec3 lightPos\" + i + \";\");\n            src.push(\"uniform vec3 lightDir\" + i + \";\");\n        }\n    }\n\n    src.push(\"vec3 octDecode(vec2 oct) {\");\n    src.push(\"    vec3 v = vec3(oct.xy, 1.0 - abs(oct.x) - abs(oct.y));\");\n    src.push(\"    if (v.z < 0.0) {\");\n    src.push(\"        v.xy = (1.0 - abs(v.yx)) * vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);\");\n    src.push(\"    }\");\n    src.push(\"    return normalize(v);\");\n    src.push(\"}\");\n\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"varying vec4 vColor;\");\n\n    src.push(\"void main(void) {\");\n\n\n    src.push(\"bool visible      = (float(flags.x) > 0.0);\");\n    src.push(\"bool ghosted      = (float(flags.y) > 0.0);\");\n    src.push(\"bool highlighted  = (float(flags.z) > 0.0);\");\n\n    src.push(\"bool transparent  = ((float(color.a) / 255.0) < 1.0);\");\n\n    //src.push(`if (!visible || (renderPass == ${RENDER_PASSES.OPAQUE} && (transparent || ghosted || highlighted)) || (renderPass == ${RENDER_PASSES.TRANSPARENT} && (!transparent || ghosted || highlighted)) || (renderPass == ${RENDER_PASSES.GHOSTED} && !ghosted || highlighted) || (renderPass == ${RENDER_PASSES.HIGHLIGHTED} && !highlighted)) {`);\n    src.push(`if (!visible || (renderPass == ${RENDER_PASSES.OPAQUE} && (transparent || ghosted || highlighted)) || (renderPass == ${RENDER_PASSES.TRANSPARENT} && (!transparent || ghosted || highlighted)) || (renderPass == ${RENDER_PASSES.GHOSTED} && (!ghosted || highlighted)) || (renderPass == ${RENDER_PASSES.HIGHLIGHTED} && !highlighted)) {`);\n    src.push(\"   gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\"); // Cull vertex\n    src.push(\"} else {\");\n\n    src.push(\"vec4 worldPosition = positionsDecodeMatrix * vec4(position, 1.0); \");\n    src.push(\"vec4 viewPosition  = viewMatrix * worldPosition; \");\n    src.push(\"vec4 worldNormal = vec4(octDecode(vec2(float(normal.x), float(normal.y))), 1.0); \");\n    src.push(\"vec3 viewNormal = normalize((viewNormalMatrix * worldNormal).xyz);\");\n\n    src.push(\"vec3 reflectedColor = vec3(0.0, 0.0, 0.0);\");\n    src.push(\"vec3 viewLightDir = vec3(0.0, 0.0, -1.0);\");\n\n    src.push(\"float lambertian = 1.0;\");\n    for (i = 0, len = lightsState.lights.length; i < len; i++) {\n        light = lightsState.lights[i];\n        if (light.type === \"ambient\") {\n            continue;\n        }\n        if (light.type === \"dir\") {\n            if (light.space === \"view\") {\n                src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n            } else {\n                src.push(\"viewLightDir = normalize((viewMatrix * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n            }\n        } else if (light.type === \"point\") {\n            if (light.space === \"view\") {\n                src.push(\"viewLightDir = normalize(lightPos\" + i + \" - viewPosition.xyz);\");\n            } else {\n                src.push(\"viewLightDir = normalize((viewMatrix * vec4(lightPos\" + i + \", 0.0)).xyz);\");\n            }\n        } else if (light.type === \"spot\") {\n            if (light.space === \"view\") {\n                src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n            } else {\n                src.push(\"viewLightDir = normalize((viewMatrix * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n            }\n        } else {\n            continue;\n        }\n        src.push(\"lambertian = max(dot(-viewNormal, viewLightDir), 0.0);\");\n        src.push(\"reflectedColor += lambertian * (lightColor\" + i + \".rgb * lightColor\" + i + \".a);\");\n    }\n\n    src.push(\"vColor = vec4(reflectedColor * color.rgb, color.a);\");\n\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    src.push(\"gl_Position = projMatrix * viewPosition;\");\n    src.push(\"}\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(layer) {\n    const scene = layer.model.scene;\n    const clipsState = scene._clipsState;\n    let i;\n    let len;\n    const clipping = clipsState.clips.length > 0;\n    const src = [];\n    src.push(\"// Batched geometry drawing fragment shader\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (i = 0, len = clipsState.clips.length; i < len; i++) {\n            src.push(\"uniform bool clipActive\" + i + \";\");\n            src.push(\"uniform vec3 clipPos\" + i + \";\");\n            src.push(\"uniform vec3 clipDir\" + i + \";\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (i = 0, len = clipsState.clips.length; i < len; i++) {\n            src.push(\"if (clipActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-clipDir\" + i + \".xyz, vWorldPosition.xyz - clipPos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n//    src.push(\"gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\");\n    src.push(\"gl_FragColor = vColor;\");\n    src.push(\"}\");\n    return src;\n}\n\nexport {BatchingEmphasisFillShaderSource};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/batching/emphasis/batchingEmphasisFillShaderSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 383,
    "kind": "function",
    "name": "buildVertex",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisFillShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisFillShaderSource.js~buildVertex",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisFillShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 384,
    "kind": "function",
    "name": "buildFragment",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisFillShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisFillShaderSource.js~buildFragment",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisFillShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 385,
    "kind": "function",
    "name": "BatchingEmphasisFillShaderSource",
    "memberof": "scene/bigModels/batching/emphasis/batchingEmphasisFillShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/emphasis/batchingEmphasisFillShaderSource.js~BatchingEmphasisFillShaderSource",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/batching/emphasis/batchingEmphasisFillShaderSource.js",
    "importStyle": "{BatchingEmphasisFillShaderSource}",
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 386,
    "kind": "file",
    "name": "scene/bigModels/batching/pick/batchingPickRenderer.js",
    "content": "import {Map} from \"../../../utils/Map.js\";\nimport {stats} from \"../../../stats.js\"\nimport {Program} from \"../../../webgl/Program.js\";\nimport {BatchingPickShaderSource} from \"./batchingPickShaderSource.js\";\n\nconst ids = new Map({});\n\n/**\n * @private\n * @constructor\n */\nconst BatchingPickRenderer = function (hash, layer) {\n    this.id = ids.addItem({});\n    this._hash = hash;\n    this._scene = layer.model.scene;\n    this._useCount = 0;\n    this._shaderSource = new BatchingPickShaderSource(layer);\n    this._allocate(layer);\n};\n\nconst renderers = {};\n\nBatchingPickRenderer.get = function (layer) {\n    const scene = layer.model.scene;\n    const hash = getHash(scene);\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new BatchingPickRenderer(hash, layer);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        stats.memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nfunction getHash(scene) {\n    return [scene.canvas.canvas.id, \"\", scene._clipsState.getHash()].join(\";\")\n}\n\nBatchingPickRenderer.prototype.getValid = function () {\n    return this._hash === getHash(this._scene);\n};\n\nBatchingPickRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        stats.memory.programs--;\n    }\n};\n\nBatchingPickRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nBatchingPickRenderer.prototype.drawLayer = function (frameCtx, layer) {\n    const model = layer.model;\n    const scene = model.scene;\n    const gl = scene.canvas.gl;\n    const state = layer._state;\n    if (!this._program) {\n        this._allocate(layer);\n    }\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx, layer);\n    }\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, model.worldMatrix);\n    this._aPosition.bindArrayBuffer(state.positionsBuf, gl.UNSIGNED_SHORT, false); // TODO: Don't need these params, these are now derived from the buffer.\n    frameCtx.bindArray++;\n    if (this._aFlags) {\n        this._aFlags.bindArrayBuffer(state.flagsBuf, gl.UNSIGNED_BYTE, true);\n        frameCtx.bindArray++;\n    }\n    if (this._aPickColor) {\n        this._aPickColor.bindArrayBuffer(state.pickColorsBuf, gl.UNSIGNED_BYTE, true);\n        frameCtx.bindArray++;\n    }\n\n    state.indicesBuf.bind();\n    frameCtx.bindArray++;\n    gl.uniform1i(this._uPickMeshIndexBase, frameCtx.pickMeshIndex);\n    frameCtx.pickMeshIndex += layer.numObjects;\n    gl.drawElements(state.primitive, state.indicesBuf.numItems, state.indicesBuf.itemType, 0);\n    frameCtx.drawElements++;\n};\n\nBatchingPickRenderer.prototype._allocate = function (layer) {\n    var scene = layer.model.scene;\n    const gl = scene.canvas.gl;\n    const clipsState = scene._clipsState;\n    this._program = new Program(gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uClips = [];\n    const clips = clipsState.clips;\n    for (var i = 0, len = clips.length; i < len; i++) {\n        this._uClips.push({\n            active: program.getLocation(\"clipActive\" + i),\n            pos: program.getLocation(\"clipPos\" + i),\n            dir: program.getLocation(\"clipDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._aPickColor = program.getAttribute(\"pickColor\");\n    this._aFlags = program.getAttribute(\"flags\");\n    this._uPickMeshIndexBase = program.getLocation(\"pickMeshIndexBase\");\n};\n\nBatchingPickRenderer.prototype._bindProgram = function (frameCtx, layer) {\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const program = this._program;\n    const clipsState = scene._clipsState;\n    const camera = scene.camera;\n    const cameraState = camera._state;\n    program.bind();\n    frameCtx.useProgram++;\n    gl.uniformMatrix4fv(this._uViewMatrix, false, frameCtx.pickViewMatrix || cameraState.matrix);\n    gl.uniformMatrix4fv(this._uProjMatrix, false, frameCtx.pickProjMatrix || camera.project._state.matrix);\n    gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, layer._state.positionsDecodeMatrix);\n    if (clipsState.clips.length > 0) {\n        const clips = scene._clipsState.clips;\n        let clipUniforms;\n        let uClipActive;\n        let clip;\n        let uClipPos;\n        let uClipDir;\n        for (var i = 0, len = this._uClips.length; i < len; i++) {\n            clipUniforms = this._uClips[i];\n            uClipActive = clipUniforms.active;\n            clip = clips[i];\n            if (uClipActive) {\n                gl.uniform1i(uClipActive, clip.active);\n            }\n            uClipPos = clipUniforms.pos;\n            if (uClipPos) {\n                gl.uniform3fv(clipUniforms.pos, clip.pos);\n            }\n            uClipDir = clipUniforms.dir;\n            if (uClipDir) {\n                gl.uniform3fv(clipUniforms.dir, clip.dir);\n            }\n        }\n    }\n};\n\nexport {BatchingPickRenderer};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/batching/pick/batchingPickRenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 387,
    "kind": "variable",
    "name": "ids",
    "memberof": "scene/bigModels/batching/pick/batchingPickRenderer.js",
    "static": true,
    "longname": "scene/bigModels/batching/pick/batchingPickRenderer.js~ids",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/pick/batchingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "scene/utils/Map.js~Map"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 388,
    "kind": "variable",
    "name": "renderers",
    "memberof": "scene/bigModels/batching/pick/batchingPickRenderer.js",
    "static": true,
    "longname": "scene/bigModels/batching/pick/batchingPickRenderer.js~renderers",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/pick/batchingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 389,
    "kind": "function",
    "name": "get",
    "memberof": "scene/bigModels/batching/pick/batchingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/pick/batchingPickRenderer.js~get",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/pick/batchingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 390,
    "kind": "function",
    "name": "getHash",
    "memberof": "scene/bigModels/batching/pick/batchingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/pick/batchingPickRenderer.js~getHash",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/pick/batchingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "params": [
      {
        "name": "scene",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 391,
    "kind": "function",
    "name": "getValid",
    "memberof": "scene/bigModels/batching/pick/batchingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/pick/batchingPickRenderer.js~getValid",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/pick/batchingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 392,
    "kind": "function",
    "name": "put",
    "memberof": "scene/bigModels/batching/pick/batchingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/pick/batchingPickRenderer.js~put",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/pick/batchingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 393,
    "kind": "function",
    "name": "webglContextRestored",
    "memberof": "scene/bigModels/batching/pick/batchingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/pick/batchingPickRenderer.js~webglContextRestored",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/pick/batchingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 394,
    "kind": "function",
    "name": "drawLayer",
    "memberof": "scene/bigModels/batching/pick/batchingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/pick/batchingPickRenderer.js~drawLayer",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/pick/batchingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 395,
    "kind": "function",
    "name": "_allocate",
    "memberof": "scene/bigModels/batching/pick/batchingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/pick/batchingPickRenderer.js~_allocate",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/pick/batchingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 396,
    "kind": "function",
    "name": "_bindProgram",
    "memberof": "scene/bigModels/batching/pick/batchingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/pick/batchingPickRenderer.js~_bindProgram",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/pick/batchingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 397,
    "kind": "function",
    "name": "BatchingPickRenderer",
    "memberof": "scene/bigModels/batching/pick/batchingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/pick/batchingPickRenderer.js~BatchingPickRenderer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/batching/pick/batchingPickRenderer.js",
    "importStyle": "{BatchingPickRenderer}",
    "description": "",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "ignore": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 398,
    "kind": "file",
    "name": "scene/bigModels/batching/pick/batchingPickShaderSource.js",
    "content": "/**\n * @private\n */\nclass BatchingPickShaderSource {\n    constructor(layer) {\n        this.vertex = buildVertex(layer);\n        this.fragment = buildFragment(layer);\n    }\n}\n\nfunction buildVertex(layer) {\n    const scene = layer.model.scene;\n    const clipping = scene._clipsState.clips.length > 0;\n    const quantizedGeometry = !!layer._state.compressGeometry;\n    const src = [];\n\n    src.push(\"// Batched geometry picking vertex shader\");\n\n    src.push(\"attribute vec3 position;\");\n    src.push(\"attribute vec4 flags;\");\n    src.push(\"attribute vec4 pickColor;\");\n\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform mat4 positionsDecodeMatrix;\");\n\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n\n    src.push(\"varying vec4 vPickColor;\");\n\n    src.push(\"void main(void) {\");\n    src.push(\"  bool visible = (float(flags.x) > 0.0);\");\n    src.push(\"  if (!visible) {\");\n    src.push(\"      gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\"); // Cull vertex\n    src.push(\"  } else {\");\n    src.push(\"      vec4 worldPosition = positionsDecodeMatrix * vec4(position, 1.0); \");\n    src.push(\"      vec4 viewPosition  = viewMatrix * worldPosition; \");\n    src.push(\"      vPickColor = vec4(float(pickColor.r) / 255.0, float(pickColor.g) / 255.0, float(pickColor.b) / 255.0, float(pickColor.a) / 255.0);\");\n    if (clipping) {\n        src.push(\"     vWorldPosition = worldPosition;\");\n    }\n    src.push(\"      gl_Position = projMatrix * viewPosition;\");\n    src.push(\"  }\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(layer) {\n    const scene = layer.model.scene;\n    const clipsState = scene._clipsState;\n    const clipping = clipsState.clips.length > 0;\n    const src = [];\n    src.push(\"// Batched geometry picking fragment shader\");\n    src.push(\"precision mediump float;\");\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"uniform bool clipActive\" + i + \";\");\n            src.push(\"uniform vec3 clipPos\" + i + \";\");\n            src.push(\"uniform vec3 clipDir\" + i + \";\");\n        }\n    }\n    src.push(\"varying vec4 vPickColor;\");\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"if (clipActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-clipDir\" + i + \".xyz, vWorldPosition.xyz - clipPos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    src.push(\"   gl_FragColor = vPickColor; \");\n    src.push(\"}\");\n    return src;\n}\n\nexport {BatchingPickShaderSource};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/batching/pick/batchingPickShaderSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 399,
    "kind": "function",
    "name": "buildVertex",
    "memberof": "scene/bigModels/batching/pick/batchingPickShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/pick/batchingPickShaderSource.js~buildVertex",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/pick/batchingPickShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 400,
    "kind": "function",
    "name": "buildFragment",
    "memberof": "scene/bigModels/batching/pick/batchingPickShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/batching/pick/batchingPickShaderSource.js~buildFragment",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/batching/pick/batchingPickShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 401,
    "kind": "class",
    "name": "BatchingPickShaderSource",
    "memberof": "scene/bigModels/batching/pick/batchingPickShaderSource.js",
    "static": true,
    "longname": "scene/bigModels/batching/pick/batchingPickShaderSource.js~BatchingPickShaderSource",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/batching/pick/batchingPickShaderSource.js",
    "importStyle": "{BatchingPickShaderSource}",
    "description": "",
    "lineNumber": 4,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 402,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/bigModels/batching/pick/batchingPickShaderSource.js~BatchingPickShaderSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/batching/pick/batchingPickShaderSource.js~BatchingPickShaderSource#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 5,
    "undocument": true
  },
  {
    "__docId__": 403,
    "kind": "member",
    "name": "vertex",
    "memberof": "scene/bigModels/batching/pick/batchingPickShaderSource.js~BatchingPickShaderSource",
    "static": false,
    "longname": "scene/bigModels/batching/pick/batchingPickShaderSource.js~BatchingPickShaderSource#vertex",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 404,
    "kind": "member",
    "name": "fragment",
    "memberof": "scene/bigModels/batching/pick/batchingPickShaderSource.js~BatchingPickShaderSource",
    "static": false,
    "longname": "scene/bigModels/batching/pick/batchingPickShaderSource.js~BatchingPickShaderSource#fragment",
    "access": "public",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 405,
    "kind": "file",
    "name": "scene/bigModels/bigModelMesh.js",
    "content": "import {RENDER_FLAGS} from './renderFlags.js';\nimport {math} from \"../math/math.js\";\n\n/**\n A **BigModelMesh** represents an instance of a geometry within a {@link BigModel}.\n\n * A BigModelMesh is created with {@link BigModel/createMesh:method\"}}BigModel#createMesh(){{/crossLink}}.\n * Each BigModelMesh is owned by exactly one {@link BigModelObject}.\n * A BigModelObject can own multiple BigModelMeshes.\n * A BigModelMesh can have its own geometry, or can reused a geometry previously created with {@link BigModel/createGeometry:method\"}}BigModel#createGeometry(){{/crossLink}}.\n\n @class BigModelMesh\n @module xeokit\n @submodule models\n\n */\nclass BigModelMesh {\n\n    constructor(model, id, layer = null, portionId = 0) {\n\n        /**\n         * The BigModel that contains this BigModelMesh.\n         *\n         * A BigModelMesh always belongs to exactly one BigModel.\n         *\n         * @property model\n         * @type {BigModel}\n         * @final\n         */\n        this.model = model;\n\n        /**\n         * The BigModelObject that contains this BigModelMesh.\n         *\n         * A BigModelMesh always belongs to exactly one BigModelObject.\n         *\n         * @property object\n         * @type {BigModelObject}\n         * @final\n         */\n        this.object = null;\n\n        /**\n         * The BigModelObject that contains this BigModelMesh.\n         *\n         * A BigModelMesh always belongs to exactly one BigModelObject.\n         *\n         * @property object\n         * @type {BigModelObject}\n         * @final\n         */\n        this.parent = null;\n\n        /**\n         * ID of this BigModelMesh, unique within the xeokit.Scene.\n         *\n         * @property id\n         * @type {String}\n         * @final\n         */\n        this.id = id;\n\n        /**\n         *\n         * @type {Number}\n         * @private\n         */\n        this.pickId = this.model.scene._renderer.getPickID(this);\n\n        /**\n         * World-space 3D axis-aligned bounding box (AABB).\n         *\n         * Represented by a six-element Float32Array containing the min/max extents of the\n         * axis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.\n         *\n         * @property aabb\n         * @final\n         * @type {Float32Array}\n         */\n        this.aabb = math.AABB3();\n\n        this._layer = layer;\n        this._portionId = portionId;\n    }\n\n    _setFlags(flags) {\n        this._layer.setFlags(this._portionId, flags);\n    }\n\n    _setVisible(flags) {\n        (flags & RENDER_FLAGS.VISIBLE) ? this._layer.numVisibleObjects++ : this._layer.numVisibleObjects--;\n        this._layer.setFlags(this._portionId, flags);\n    }\n\n    _setHighlighted(flags) {\n        (flags & RENDER_FLAGS.HIGHLIGHTED) ? this._layer.numHighlightedObjects++ : this._layer.numHighlightedObjects--;\n        this._layer.setFlags(this._portionId, flags);\n    }\n\n    _setGhosted(flags) {\n        (flags & RENDER_FLAGS.GHOSTED) ? this._layer.numGhostedObjects++ : this._layer.numGhostedObjects--;\n        this._layer.setFlags(this._portionId, flags);\n    }\n\n    _setSelected(flags) {\n        (flags & RENDER_FLAGS.SELECTED) ? this._layer.numSelectedObjects++ : this._layer.numSelectedObjects--;\n        this._layer.setFlags(this._portionId, flags);\n    }\n\n    _setEdges(flags) {\n        (flags & RENDER_FLAGS.EDGES) ? this._layer.numEdgesObjects++ : this._layer.numEdgesObjects--;\n        this._layer.setFlags(this._portionId, flags);\n    }\n\n    _setClippable(flags) {\n        this._layer.setFlags(this._portionId, flags);\n    }\n\n    _setCollidable(flags) {\n        this._layer.setFlags(this._portionId, flags);\n    }\n\n    _setPickable(flags) {\n        this._layer.setFlags(this._portionId, flags);\n    }\n\n    _setColor(rgba) {\n        this._layer.setColor(this._portionId, rgba);\n    }\n\n    drawPickTriangles() { // TODO: refactor, put somewhere else\n\n    }\n\n    getPickResult(pickResult) { // TODO: refactor\n\n    }\n\n    fire() { // TODO: refactor\n\n    }\n\n    /**\n     * Given a pick hit record containing picking parameters, get geometry about the pick intersection\n     * on the surface of this BigModelMesh, adding it to the hit record.\n     *\n     * @param hit\n     * @param [hit.primIndex]\n     * @param [hit.canvasPos]\n     * @param [hit.origin]\n     * @param [hit.direction]\n     * @private\n     */\n    getPickHitInfo(hit) {\n        // BigModelMesh retains no geometry info in memory, so has nothing to add to the pick hit record.\n    }\n\n    _destroy() {\n        this.model.scene._renderer.putPickID(this.pickId);\n    }\n}\n\nexport {BigModelMesh};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/bigModelMesh.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 406,
    "kind": "class",
    "name": "BigModelMesh",
    "memberof": "scene/bigModels/bigModelMesh.js",
    "static": true,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/bigModelMesh.js",
    "importStyle": "{BigModelMesh}",
    "description": "A **BigModelMesh** represents an instance of a geometry within a {@link BigModel}.\n\nA BigModelMesh is created with {@link BigModel/createMesh:method\"}}BigModel#createMesh(){{/crossLink}}.\nEach BigModelMesh is owned by exactly one {@link BigModelObject}.\nA BigModelObject can own multiple BigModelMeshes.\nA BigModelMesh can have its own geometry, or can reused a geometry previously created with {@link BigModel/createGeometry:method\"}}BigModel#createGeometry(){{/crossLink}}.",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "BigModelMesh"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "models"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 407,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true
  },
  {
    "__docId__": 408,
    "kind": "member",
    "name": "model",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#model",
    "access": "public",
    "description": "The BigModel that contains this BigModelMesh.\n\nA BigModelMesh always belongs to exactly one BigModel.",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "BigModel"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 409,
    "kind": "member",
    "name": "object",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#object",
    "access": "public",
    "description": "The BigModelObject that contains this BigModelMesh.\n\nA BigModelMesh always belongs to exactly one BigModelObject.",
    "lineNumber": 41,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "BigModelObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 410,
    "kind": "member",
    "name": "parent",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#parent",
    "access": "public",
    "description": "The BigModelObject that contains this BigModelMesh.\n\nA BigModelMesh always belongs to exactly one BigModelObject.",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "BigModelObject"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 411,
    "kind": "member",
    "name": "id",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#id",
    "access": "public",
    "description": "ID of this BigModelMesh, unique within the xeokit.Scene.",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 412,
    "kind": "member",
    "name": "pickId",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#pickId",
    "access": "private",
    "description": "",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 413,
    "kind": "member",
    "name": "aabb",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#aabb",
    "access": "public",
    "description": "World-space 3D axis-aligned bounding box (AABB).\n\nRepresented by a six-element Float32Array containing the min/max extents of the\naxis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.",
    "lineNumber": 80,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "aabb",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 414,
    "kind": "member",
    "name": "_layer",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#_layer",
    "access": "private",
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 415,
    "kind": "member",
    "name": "_portionId",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#_portionId",
    "access": "private",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 416,
    "kind": "method",
    "name": "_setFlags",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#_setFlags",
    "access": "private",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "flags",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 417,
    "kind": "method",
    "name": "_setVisible",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#_setVisible",
    "access": "private",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "flags",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 418,
    "kind": "method",
    "name": "_setHighlighted",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#_setHighlighted",
    "access": "private",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "flags",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 419,
    "kind": "method",
    "name": "_setGhosted",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#_setGhosted",
    "access": "private",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "flags",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 420,
    "kind": "method",
    "name": "_setSelected",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#_setSelected",
    "access": "private",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "flags",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 421,
    "kind": "method",
    "name": "_setEdges",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#_setEdges",
    "access": "private",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "flags",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 422,
    "kind": "method",
    "name": "_setClippable",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#_setClippable",
    "access": "private",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "flags",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 423,
    "kind": "method",
    "name": "_setCollidable",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#_setCollidable",
    "access": "private",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "flags",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 424,
    "kind": "method",
    "name": "_setPickable",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#_setPickable",
    "access": "private",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "flags",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 425,
    "kind": "method",
    "name": "_setColor",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#_setColor",
    "access": "private",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "rgba",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 426,
    "kind": "method",
    "name": "drawPickTriangles",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#drawPickTriangles",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 427,
    "kind": "method",
    "name": "getPickResult",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#getPickResult",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "params": [
      {
        "name": "pickResult",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 428,
    "kind": "method",
    "name": "fire",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#fire",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 429,
    "kind": "method",
    "name": "getPickHitInfo",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#getPickHitInfo",
    "access": "private",
    "description": "Given a pick hit record containing picking parameters, get geometry about the pick intersection\non the surface of this BigModelMesh, adding it to the hit record.",
    "lineNumber": 154,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hit",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "hit.primIndex",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "hit.canvasPos",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "hit.origin",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "hit.direction",
        "description": ""
      }
    ],
    "ignore": true,
    "return": null
  },
  {
    "__docId__": 430,
    "kind": "method",
    "name": "_destroy",
    "memberof": "scene/bigModels/bigModelMesh.js~BigModelMesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelMesh.js~BigModelMesh#_destroy",
    "access": "private",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 431,
    "kind": "file",
    "name": "scene/bigModels/bigModelObject.js",
    "content": "import {RENDER_FLAGS} from './renderFlags.js';\n\n/**\n A **BigModelObject** represents a 3D object within a {@link BigModel}.\n\n * Created by the BigModel {@link BigModel/createMesh:method\"}}createMesh(){{/crossLink}} method.\n * Owns one or more {@link BigModelMesh\"}}BigModelMesh{{/crossLink}}es.\n\n @class BigModelObject\n @module xeokit\n @submodule models\n\n */\nclass BigModelObject {\n\n    constructor(model, objectId, id, meshes, flags, aabb) {\n\n        /**\n         * The BigModel that contains this BigModelObject.\n         * @property model\n         * @type {BigModel}\n         * @final\n         */\n        this.model = model;\n\n        /**\n         * The BigModelMesh instances contained by this BigModelObject\n         * @property meshes\n         * @type {{Array of BigModelMesh}}\n         * @final\n         */\n        this.meshes = meshes;\n\n        for (var i = 0, len = this.meshes.length; i < len; i++) {  // TODO: tidier way? Refactor?\n            const mesh = this.meshes[i];\n            mesh.object = this;\n            mesh.parent = this;\n        }\n\n\n        /**\n         * ID of this BigModelObject, unique within the xeokit.Scene.\n         * @property id\n         * @type {String|Number\n         * @final}\n         */\n        this.id = id;\n\n        this._flags = flags;\n        this._colorize = new Uint8Array([255,255,255,255]);\n\n        /**\n         * World-space 3D axis-aligned bounding box (AABB) enclosing the objects within this BigModel.\n         *\n         * Represented by a six-element Float32Array containing the min/max extents of the axis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.\n         *\n         * @property aabb\n         * @final\n         * @type {Float32Array}\n         */\n        this.aabb = aabb;\n\n        if (objectId) {\n\n            /**\n             * The entity type of this BigModelObject.\n             *\n             * @property objectId\n             * @type {String}\n             * @final\n             */\n            this.objectId = objectId;\n            model.scene._registerObject(this, objectId);\n        } else {\n            this.objectId = null;\n        }\n    }\n\n    /**\n     * Indicates if visible.\n     *\n     * Only rendered when {@link BigModelObject/visible} is true and\n     * {@link BigModelObject/culled} is false.\n     *\n     * Each visible BigModelObject is registered in its {@link Scene}'s\n     * {@link Scene/visibleObjects} map while its {@link BigModelObject/objectId}\n     * is set to a value.\n     *\n     * @property visible\n     * @default true\n     * @type Boolean\n     */\n    set visible(visible) {\n        if (!!(this._flags & RENDER_FLAGS.VISIBLE) === visible) {\n            return; // Redundant update\n        }\n        if (visible) {\n            this._flags = this._flags | RENDER_FLAGS.VISIBLE;\n            this.model.numVisibleObjects++;\n        } else {\n            this._flags = this._flags & ~RENDER_FLAGS.VISIBLE;\n            this.model.numVisibleObjects--;\n        }\n        for (var i = 0, len = this.meshes.length; i < len; i++) {\n            this.meshes[i]._setVisible(this._flags);\n        }\n        if (this._objectId) {\n            this.model.scene._objectVisibilityUpdated(this, visible);\n        }\n        this.model.glRedraw();\n    }\n\n    get visible() {\n        return this._getFlag(RENDER_FLAGS.VISIBLE);\n    }\n\n    _getFlag(flag) {\n        return !!(this._flags & flag);\n    }\n\n    /**\n     * Indicates if highlighted.\n     *\n     * Each highlighted BigModelObject is registered in its {@link Scene}'s\n     * {@link Scene/highlightedObjects} map while its {@link BigModelObject/objectId}\n     * is set to a value.\n     *\n     * @property highlighted\n     * @default false\n     * @type Boolean\n     */\n    set highlighted(highlighted) {\n        if (!!(this._flags & RENDER_FLAGS.HIGHLIGHTED) === highlighted) {\n            return; // Redundant update\n        }\n        if (highlighted) {\n            this._flags = this._flags | RENDER_FLAGS.HIGHLIGHTED;\n            this.model.numHighlightedObjects++;\n        } else {\n            this._flags = this._flags & ~RENDER_FLAGS.HIGHLIGHTED;\n            this.model.numHighlightedObjects--;\n        }\n        for (var i = 0, len = this.meshes.length; i < len; i++) {\n            this.meshes[i]._setHighlighted(this._flags);\n        }\n        if (this._objectId) {\n            this.model.scene._objectHighlightedUpdated(this, highlighted);\n        }\n        this.model.glRedraw();\n    }\n\n    get highlighted() {\n        return this._getFlag(RENDER_FLAGS.HIGHLIGHTED);\n    }\n\n    /**\n     * Indicates if ghosted.\n     *\n     * Each ghosted BigModelObject is registered in its {@link Scene}'s\n     * {@link Scene/ghostedObjects} map while its {@link BigModelObject/objectId}\n     * is set to a value.\n     *\n     * @property ghosted\n     * @default false\n     * @type Boolean\n     */\n    set ghosted(ghosted) {\n        if (!!(this._flags & RENDER_FLAGS.GHOSTED) === ghosted) {\n            return; // Redundant update\n        }\n        if (ghosted) {\n            this._flags = this._flags | RENDER_FLAGS.GHOSTED;\n            this.model.numGhostedObjects++;\n        } else {\n            this._flags = this._flags & ~RENDER_FLAGS.GHOSTED;\n            this.model.numGhostedObjects--;\n        }\n        for (var i = 0, len = this.meshes.length; i < len; i++) {\n            this.meshes[i]._setGhosted(this._flags);\n        }\n        if (this._objectId) {\n            this.model.scene._objectGhostedUpdated(this, ghosted);\n        }\n        this.model.glRedraw();\n    }\n\n    get ghosted() {\n        return this._getFlag(RENDER_FLAGS.GHOSTED);\n    }\n\n    /**\n     * Indicates if selected.\n     *\n     * Each selected BigModelObject is registered in its {@link Scene}'s\n     * {@link Scene/selectedObjects} map while its {@link BigModelObject/objectId}\n     * is set to a value.\n     *\n     * @property selected\n     * @default false\n     * @type Boolean\n     */\n    set selected(selected) {\n        if (!!(this._flags & RENDER_FLAGS.SELECTED) === selected) {\n            return; // Redundant update\n        }\n        if (selected) {\n            this._flags = this._flags | RENDER_FLAGS.SELECTED;\n            this.model.numSelectedObjects++;\n        } else {\n            this._flags = this._flags & ~RENDER_FLAGS.SELECTED;\n            this.model.numSelectedObjects--;\n        }\n        for (var i = 0, len = this.meshes.length; i < len; i++) {\n            this.meshes[i]._setSelected(this._flags);\n        }\n        if (this._objectId) {\n            this.model.scene._objectSelectedUpdated(this, selected);\n        }\n        this.model.glRedraw();\n    }\n\n    get selected() {\n        return this._getFlag(RENDER_FLAGS.SELECTED);\n    }\n\n    /**\n     * Indicates if edges are emphasized.\n     *\n     * @property edges\n     * @default false\n     * @type Boolean\n     */\n    set edges(edges) {\n        if (!!(this._flags & RENDER_FLAGS.EDGES) === edges) {\n            return; // Redundant update\n        }\n        if (edges) {\n            this._flags = this._flags | RENDER_FLAGS.EDGES;\n            this.model.numEdgesObjects++;\n        } else {\n            this._flags = this._flags & ~RENDER_FLAGS.EDGES;\n            this.model.numEdgesObjects--;\n        }\n        for (var i = 0, len = this.meshes.length; i < len; i++) {\n            this.meshes[i]._setEdges(this._flags);\n        }\n        this.model.glRedraw();\n    }\n\n    get edges() {\n        return this._getFlag(RENDER_FLAGS.EDGES);\n    }\n\n    /**\n     * Indicates if clippable.\n     *\n     * Clipping is done by the {@link Scene}'s {@link Clips} component.\n     *\n     * @property clippable\n     * @default true\n     * @type Boolean\n     */\n    set clippable(clippable) {\n        if ((!!(this._flags & RENDER_FLAGS.CLIPPABLE)) === clippable) {\n            return; // Redundant update\n        }\n        if (clippable) {\n            this._flags = this._flags | RENDER_FLAGS.CLIPPABLE;\n        } else {\n            this._flags = this._flags & ~RENDER_FLAGS.CLIPPABLE;\n        }\n        for (var i = 0, len = this.meshes.length; i < len; i++) {\n            this.meshes[i]._setClippable(this._flags);\n        }\n        this.model.glRedraw();\n    }\n\n    get clippable() {\n        return this._getFlag(RENDER_FLAGS.CLIPPABLE);\n    }\n\n    /**\n     * Indicates if included in boundary calculations.\n     *\n     * @property collidable\n     * @default true\n     * @type Boolean\n     */\n    set collidable(collidable) {\n        if (!!(this._flags & RENDER_FLAGS.COLLIDABLE) === collidable) {\n            return; // Redundant update\n        }\n        if (collidable) {\n            this._flags = this._flags | RENDER_FLAGS.COLLIDABLE;\n        } else {\n            this._flags = this._flags & ~RENDER_FLAGS.COLLIDABLE;\n        }\n        for (var i = 0, len = this.meshes.length; i < len; i++) {\n            this.meshes[i]._setCollidable(this._flags);\n        }\n    }\n\n    get collidable() {\n        return this._getFlag(RENDER_FLAGS.COLLIDABLE);\n    }\n\n    /**\n     * Whether or not to allow picking.\n     *\n     * Picking is done via calls to {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.\n     *\n     * @property pickable\n     * @default true\n     * @type Boolean\n     */\n    set pickable(pickable) {\n        if (!!(this._flags & RENDER_FLAGS.PICKABLE) === pickable) {\n            return; // Redundant update\n        }\n        if (pickable) {\n            this._flags = this._flags | RENDER_FLAGS.PICKABLE;\n        } else {\n            this._flags = this._flags & ~RENDER_FLAGS.PICKABLE;\n        }\n        for (var i = 0, len = this.meshes.length; i < len; i++) {\n            this.meshes[i]._setPickable(this._flags);\n        }\n    }\n\n    get pickable() {\n        return this._getFlag(RENDER_FLAGS.PICKABLE);\n    }\n\n    /**\n     * Sets the RGB color of this BigModelObject.\n     *\n     * Since objects within a BigModel don't have materials for normal rendering, this is effectively how their colors are specified.\n     *\n     * @property colorize\n     * @default [1.0, 1.0, 1.0]\n     * @type Float32Array\n     */\n    set colorize(color) {\n        this._colorize[0] = Math.floor(color[0] * 255.0); // Quantize\n        this._colorize[1] = Math.floor(color[1] * 255.0);\n        this._colorize[2] = Math.floor(color[2] * 255.0);\n        for (var i = 0, len = this.meshes.length; i < len; i++) {\n            this.meshes[i]._setColorize(this._colorize);\n        }\n        this.model.glRedraw();\n    }\n\n    get colorize() {\n        tempColor[0] = this._colorize[0] / 255.0; // Unquantize\n        tempColor[1] = this._colorize[1] / 255.0;\n        tempColor[2] = this._colorize[2] / 255.0;\n        return tempColor;\n    }\n\n    /**\n     * Opacity factor, multiplies by the rendered fragment alpha.\n     *\n     * @property opacity\n     * @default 1.0\n     * @type Number\n     */\n    set opacity(opacity) {\n        if (opacity < 0) {\n            opacity = 0;\n        } else if (opacity > 1) {\n            opacity = 1;\n        }\n        opacity = Math.floor(opacity * 255.0); // Quantize\n        var lastOpacity = this._colorize[3];\n        if (lastOpacity === opacity) {\n            return;\n        }\n        if (opacity < 255) {\n            if (lastOpacity === 255) {\n                this._layer.numTransparentObjects++;\n                this.model.numTransparentObjects++;\n            }\n        } else {\n            if (lastOpacity < 255) {\n                this._layer.numTransparentObjects--;\n                this.model.numTransparentObjects--;\n            }\n        }\n        this._colorize[3] = opacity; // Only set alpha\n        for (var i = 0, len = this.meshes.length; i < len; i++) {\n            this.meshes[i]._setColor(this._colorize);\n        }\n        this.model.glRedraw();\n    }\n\n    get opacity() {\n        return this._colorize[3] / 255.0;\n    }\n\n    _finalize() {\n        const meshes = this.meshes;\n        const flags = this._flags;\n        var mesh;\n        for (var i = 0, len = meshes.length; i < len; i++) {\n            mesh = meshes[i];\n\n            if (this.visible) {\n                mesh._setVisible(flags);\n            }\n            if (this.highlighted) {\n                mesh._setHighlighted(flags);\n            }\n            if (this.selected) {\n                mesh._setSelected(flags);\n            }\n            if (this.edges) {\n                mesh._setEdges(flags);\n            }\n            if (this.clippable) {\n                mesh._setClippable(flags);\n            }\n            if (this.collidable) {\n                mesh._setCollidable(flags);\n            }\n            if (this.pickable) {\n                mesh._setPickable(flags);\n            }\n\n\n        //    meshes[i]._setColor(this._colorize);\n        }\n    }\n\n    _destroy() { // Called by BigModel\n        const scene = this.model.scene;\n        if (this._objectId) {\n            scene._deregisterObject(this);\n            if (this.visible) {\n                scene._objectVisibilityUpdated(this, false);\n            }\n            if (this.ghosted) {\n                scene._objectGhostedUpdated(this, false);\n            }\n            if (this.selected) {\n                scene._objectSelectedUpdated(this, false);\n            }\n            if (this.highlighted) {\n                scene._objectHighlightedUpdated(this, false);\n            }\n        }\n        for (var i = 0, len = this.meshes.length; i < len; i++) {\n            this.meshes[i]._destroy();\n        }\n        scene._aabbDirty = true;\n    }\n}\n\nexport {BigModelObject};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/bigModelObject.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 432,
    "kind": "class",
    "name": "BigModelObject",
    "memberof": "scene/bigModels/bigModelObject.js",
    "static": true,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/bigModelObject.js",
    "importStyle": "{BigModelObject}",
    "description": "A **BigModelObject** represents a 3D object within a {@link BigModel}.\n\nCreated by the BigModel {@link BigModel/createMesh:method\"}}createMesh(){{/crossLink}} method.\nOwns one or more {@link BigModelMesh\"}}BigModelMesh{{/crossLink}}es.",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "BigModelObject"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "models"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 433,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true
  },
  {
    "__docId__": 434,
    "kind": "member",
    "name": "model",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#model",
    "access": "public",
    "description": "The BigModel that contains this BigModelObject.",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "BigModel"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 435,
    "kind": "member",
    "name": "meshes",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#meshes",
    "access": "public",
    "description": "The BigModelMesh instances contained by this BigModelObject",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "meshes",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{Array of BigModelMesh}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 436,
    "kind": "member",
    "name": "id",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#id",
    "access": "public",
    "description": "ID of this BigModelObject, unique within the xeokit.Scene.",
    "lineNumber": 47,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 437,
    "kind": "member",
    "name": "_flags",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#_flags",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 438,
    "kind": "member",
    "name": "_colorize",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#_colorize",
    "access": "private",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 439,
    "kind": "member",
    "name": "aabb",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#aabb",
    "access": "public",
    "description": "World-space 3D axis-aligned bounding box (AABB) enclosing the objects within this BigModel.\n\nRepresented by a six-element Float32Array containing the min/max extents of the axis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "aabb",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 440,
    "kind": "member",
    "name": "objectId",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#objectId",
    "access": "public",
    "description": "The entity type of this BigModelObject.",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 442,
    "kind": "set",
    "name": "visible",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#visible",
    "access": "public",
    "description": "Indicates if visible.\n\nOnly rendered when {@link BigModelObject/visible} is true and\n{@link BigModelObject/culled} is false.\n\nEach visible BigModelObject is registered in its {@link Scene}'s\n{@link Scene/visibleObjects} map while its {@link BigModelObject/objectId}\nis set to a value.",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "visible",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 445,
    "kind": "get",
    "name": "visible",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#visible",
    "access": "public",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 446,
    "kind": "method",
    "name": "_getFlag",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#_getFlag",
    "access": "private",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "flag",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 447,
    "kind": "set",
    "name": "highlighted",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#highlighted",
    "access": "public",
    "description": "Indicates if highlighted.\n\nEach highlighted BigModelObject is registered in its {@link Scene}'s\n{@link Scene/highlightedObjects} map while its {@link BigModelObject/objectId}\nis set to a value.",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlighted",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 450,
    "kind": "get",
    "name": "highlighted",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#highlighted",
    "access": "public",
    "description": null,
    "lineNumber": 152,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 451,
    "kind": "set",
    "name": "ghosted",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#ghosted",
    "access": "public",
    "description": "Indicates if ghosted.\n\nEach ghosted BigModelObject is registered in its {@link Scene}'s\n{@link Scene/ghostedObjects} map while its {@link BigModelObject/objectId}\nis set to a value.",
    "lineNumber": 167,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghosted",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 454,
    "kind": "get",
    "name": "ghosted",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#ghosted",
    "access": "public",
    "description": null,
    "lineNumber": 187,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 455,
    "kind": "set",
    "name": "selected",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#selected",
    "access": "public",
    "description": "Indicates if selected.\n\nEach selected BigModelObject is registered in its {@link Scene}'s\n{@link Scene/selectedObjects} map while its {@link BigModelObject/objectId}\nis set to a value.",
    "lineNumber": 202,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selected",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 458,
    "kind": "get",
    "name": "selected",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#selected",
    "access": "public",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 459,
    "kind": "set",
    "name": "edges",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#edges",
    "access": "public",
    "description": "Indicates if edges are emphasized.",
    "lineNumber": 233,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edges",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 462,
    "kind": "get",
    "name": "edges",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#edges",
    "access": "public",
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 463,
    "kind": "set",
    "name": "clippable",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#clippable",
    "access": "public",
    "description": "Indicates if clippable.\n\nClipping is done by the {@link Scene}'s {@link Clips} component.",
    "lineNumber": 263,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "clippable",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 466,
    "kind": "get",
    "name": "clippable",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#clippable",
    "access": "public",
    "description": null,
    "lineNumber": 278,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 467,
    "kind": "set",
    "name": "collidable",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#collidable",
    "access": "public",
    "description": "Indicates if included in boundary calculations.",
    "lineNumber": 289,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "collidable",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 470,
    "kind": "get",
    "name": "collidable",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#collidable",
    "access": "public",
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 471,
    "kind": "set",
    "name": "pickable",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#pickable",
    "access": "public",
    "description": "Whether or not to allow picking.\n\nPicking is done via calls to {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.",
    "lineNumber": 316,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pickable",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 474,
    "kind": "get",
    "name": "pickable",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#pickable",
    "access": "public",
    "description": null,
    "lineNumber": 330,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 475,
    "kind": "set",
    "name": "colorize",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#colorize",
    "access": "public",
    "description": "Sets the RGB color of this BigModelObject.\n\nSince objects within a BigModel don't have materials for normal rendering, this is effectively how their colors are specified.",
    "lineNumber": 343,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1.0, 1.0, 1.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "colorize",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 476,
    "kind": "get",
    "name": "colorize",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#colorize",
    "access": "public",
    "description": null,
    "lineNumber": 353,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 477,
    "kind": "set",
    "name": "opacity",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#opacity",
    "access": "public",
    "description": "Opacity factor, multiplies by the rendered fragment alpha.",
    "lineNumber": 367,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "opacity",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 478,
    "kind": "get",
    "name": "opacity",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#opacity",
    "access": "public",
    "description": null,
    "lineNumber": 396,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 479,
    "kind": "method",
    "name": "_finalize",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#_finalize",
    "access": "private",
    "description": null,
    "lineNumber": 400,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 480,
    "kind": "method",
    "name": "_destroy",
    "memberof": "scene/bigModels/bigModelObject.js~BigModelObject",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/bigModelObject.js~BigModelObject#_destroy",
    "access": "private",
    "description": null,
    "lineNumber": 434,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 481,
    "kind": "file",
    "name": "scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "content": "import {Map} from \"../../../utils/Map.js\";\nimport {stats} from \"../../../stats.js\"\nimport {Program} from \"../../../webgl/Program.js\";\nimport {InstancingDrawShaderSource} from \"./instancingDrawShaderSource.js\";\nimport {RENDER_PASSES} from '../../renderPasses.js';\n\nconst ids = new Map({});\n\n/**\n * @private\n */\nconst InstancingDrawRenderer = function (hash, layer) {\n    this.id = ids.addItem({});\n    this._hash = hash;\n    this._scene = layer.model.scene;\n    this._useCount = 0;\n    this._shaderSource = new InstancingDrawShaderSource(layer);\n    this._allocate(layer);\n};\n\nconst renderers = {};\nconst defaultColorize = new Float32Array([1.0, 1.0, 1.0, 1.0]);\n\nInstancingDrawRenderer.get = function (layer) {\n    const scene = layer.model.scene;\n    const hash = getHash(scene);\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new InstancingDrawRenderer(hash, layer);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        stats.memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nfunction getHash(scene) {\n    return [scene.canvas.canvas.id, \"\", scene._lightsState.getHash(), scene._clipsState.getHash()].join(\";\")\n}\n\nInstancingDrawRenderer.prototype.getValid = function () {\n    return this._hash === getHash(this._scene);\n};\n\nInstancingDrawRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        stats.memory.programs--;\n    }\n};\n\nInstancingDrawRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nInstancingDrawRenderer.prototype.drawLayer = function (frameCtx, layer, renderPass) {\n\n    const model = layer.model;\n    const scene = model.scene;\n    const gl = scene.canvas.gl;\n    const state = layer._state;\n    const instanceExt = this._instanceExt;\n\n    if (!this._program) {\n        this._allocate(layer);\n        if (this.errors) {\n            return;\n        }\n    }\n\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx, layer);\n    }\n\n    gl.uniform1i(this._uRenderPass, renderPass);\n\n    gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, layer._state.positionsDecodeMatrix);\n\n    this._aModelMatrixCol0.bindArrayBuffer(state.modelMatrixCol0Buf);\n    this._aModelMatrixCol1.bindArrayBuffer(state.modelMatrixCol1Buf);\n    this._aModelMatrixCol2.bindArrayBuffer(state.modelMatrixCol2Buf);\n\n    instanceExt.vertexAttribDivisorANGLE(this._aModelMatrixCol0.location, 1);\n    instanceExt.vertexAttribDivisorANGLE(this._aModelMatrixCol1.location, 1);\n    instanceExt.vertexAttribDivisorANGLE(this._aModelMatrixCol2.location, 1);\n    frameCtx.bindArray += 3;\n\n    this._aModelNormalMatrixCol0.bindArrayBuffer(state.modelNormalMatrixCol0Buf);\n    this._aModelNormalMatrixCol1.bindArrayBuffer(state.modelNormalMatrixCol1Buf);\n    this._aModelNormalMatrixCol2.bindArrayBuffer(state.modelNormalMatrixCol2Buf);\n\n    instanceExt.vertexAttribDivisorANGLE(this._aModelNormalMatrixCol0.location, 1);\n    instanceExt.vertexAttribDivisorANGLE(this._aModelNormalMatrixCol1.location, 1);\n    instanceExt.vertexAttribDivisorANGLE(this._aModelNormalMatrixCol2.location, 1);\n    frameCtx.bindArray += 3;\n\n    this._aPosition.bindArrayBuffer(state.positionsBuf);\n    frameCtx.bindArray++;\n\n    this._aNormal.bindArrayBuffer(state.normalsBuf, gl.BYTE, true);\n    frameCtx.bindArray++;\n\n    this._aColor.bindArrayBuffer(state.colorsBuf, gl.UNSIGNED_BYTE, false);\n    instanceExt.vertexAttribDivisorANGLE(this._aColor.location, 1);\n    frameCtx.bindArray++;\n\n    this._aFlags.bindArrayBuffer(state.flagsBuf, gl.UNSIGNED_BYTE, true);\n    instanceExt.vertexAttribDivisorANGLE(this._aFlags.location, 1);\n    frameCtx.bindArray++;\n\n    state.indicesBuf.bind();\n    frameCtx.bindArray++;\n\n    if (renderPass === RENDER_PASSES.GHOSTED) {\n        const material = scene.ghostMaterial._state;\n        const fillColor = material.fillColor;\n        const fillAlpha = material.fillAlpha;\n        gl.uniform4f(this._uColorize, fillColor[0], fillColor[1], fillColor[2], fillAlpha);\n    } else if (renderPass === RENDER_PASSES.HIGHLIGHTED) {\n        const material = scene.highlightMaterial._state;\n        const fillColor = material.fillColor;\n        const fillAlpha = material.fillAlpha;\n        gl.uniform4f(this._uColorize, fillColor[0], fillColor[1], fillColor[2], fillAlpha);\n    } else {\n        gl.uniform4fv(this._uColorize, defaultColorize);\n    }\n\n    instanceExt.drawElementsInstancedANGLE(state.primitive, state.indicesBuf.numItems, state.indicesBuf.itemType, 0, state.numInstances);\n\n    instanceExt.vertexAttribDivisorANGLE(this._aModelMatrixCol0.location, 0); // TODO: Is this needed\n    instanceExt.vertexAttribDivisorANGLE(this._aModelMatrixCol1.location, 0);\n    instanceExt.vertexAttribDivisorANGLE(this._aModelMatrixCol2.location, 0);\n\n    instanceExt.vertexAttribDivisorANGLE(this._aModelNormalMatrixCol0.location, 0); // TODO: Is this needed\n    instanceExt.vertexAttribDivisorANGLE(this._aModelNormalMatrixCol1.location, 0);\n    instanceExt.vertexAttribDivisorANGLE(this._aModelNormalMatrixCol2.location, 0);\n\n    instanceExt.vertexAttribDivisorANGLE(this._aColor.location, 0);\n    instanceExt.vertexAttribDivisorANGLE(this._aFlags.location, 0);\n\n    frameCtx.drawElements++;\n};\n\nInstancingDrawRenderer.prototype._allocate = function (layer) {\n    var scene = layer.model.scene;\n    const gl = scene.canvas.gl;\n    const lightsState = scene._lightsState;\n    const clipsState = scene._clipsState;\n\n    this._program = new Program(gl, this._shaderSource);\n\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n\n    this._instanceExt = gl.getExtension(\"ANGLE_instanced_arrays\");\n\n    const program = this._program;\n    this._uRenderPass = program.getLocation(\"renderPass\");\n\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelNormalMatrix = program.getLocation(\"modelNormalMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uViewNormalMatrix = program.getLocation(\"viewNormalMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n\n    this._uColorize = program.getLocation(\"colorize\");\n    this._uLightAmbient = [];\n    this._uLightColor = [];\n    this._uLightDir = [];\n    this._uLightPos = [];\n    this._uLightAttenuation = [];\n    const lights = lightsState.lights;\n    let light;\n\n    for (var i = 0, len = lights.length; i < len; i++) {\n        light = lights[i];\n        switch (light.type) {\n            case \"ambient\":\n                this._uLightAmbient[i] = program.getLocation(\"lightAmbient\");\n                break;\n            case \"dir\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = null;\n                this._uLightDir[i] = program.getLocation(\"lightDir\" + i);\n                break;\n            case \"point\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = program.getLocation(\"lightPos\" + i);\n                this._uLightDir[i] = null;\n                this._uLightAttenuation[i] = program.getLocation(\"lightAttenuation\" + i);\n                break;\n            case \"spot\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = program.getLocation(\"lightPos\" + i);\n                this._uLightDir[i] = program.getLocation(\"lightDir\" + i);\n                this._uLightAttenuation[i] = program.getLocation(\"lightAttenuation\" + i);\n                break;\n        }\n    }\n\n    this._uClips = [];\n    const clips = clipsState.clips;\n    for (var i = 0, len = clips.length; i < len; i++) {\n        this._uClips.push({\n            active: program.getLocation(\"clipActive\" + i),\n            pos: program.getLocation(\"clipPos\" + i),\n            dir: program.getLocation(\"clipDir\" + i)\n        });\n    }\n\n    this._aPosition = program.getAttribute(\"position\");\n    this._aNormal = program.getAttribute(\"normal\");\n    this._aColor = program.getAttribute(\"color\");\n    this._aFlags = program.getAttribute(\"flags\");\n\n    this._aModelMatrixCol0 = program.getAttribute(\"modelMatrixCol0\");\n    this._aModelMatrixCol1 = program.getAttribute(\"modelMatrixCol1\");\n    this._aModelMatrixCol2 = program.getAttribute(\"modelMatrixCol2\");\n\n    this._aModelNormalMatrixCol0 = program.getAttribute(\"modelNormalMatrixCol0\");\n    this._aModelNormalMatrixCol1 = program.getAttribute(\"modelNormalMatrixCol1\");\n    this._aModelNormalMatrixCol2 = program.getAttribute(\"modelNormalMatrixCol2\");\n\n};\n\nInstancingDrawRenderer.prototype._bindProgram = function (frameCtx, layer) {\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const program = this._program;\n    const lightsState = scene._lightsState;\n    const clipsState = scene._clipsState;\n    const lights = lightsState.lights;\n    let light;\n    program.bind();\n    frameCtx.useProgram++;\n    const camera = scene.camera;\n    const cameraState = camera._state;\n    gl.uniformMatrix4fv(this._uViewMatrix, false, cameraState.matrix);\n    gl.uniformMatrix4fv(this._uViewNormalMatrix, false, cameraState.normalMatrix);\n    gl.uniformMatrix4fv(this._uProjMatrix, false, camera._project._state.matrix);\n    for (var i = 0, len = lights.length; i < len; i++) {\n        light = lights[i];\n        if (this._uLightAmbient[i]) {\n            gl.uniform4f(this._uLightAmbient[i], light.color[0], light.color[1], light.color[2], light.intensity);\n        } else {\n            if (this._uLightColor[i]) {\n                gl.uniform4f(this._uLightColor[i], light.color[0], light.color[1], light.color[2], light.intensity);\n            }\n            if (this._uLightPos[i]) {\n                gl.uniform3fv(this._uLightPos[i], light.pos);\n                if (this._uLightAttenuation[i]) {\n                    gl.uniform1f(this._uLightAttenuation[i], light.attenuation);\n                }\n            }\n            if (this._uLightDir[i]) {\n                gl.uniform3fv(this._uLightDir[i], light.dir);\n            }\n        }\n    }\n    if (clipsState.clips.length > 0) {\n        const clips = scene._clipsState.clips;\n        let clipUniforms;\n        let uClipActive;\n        let clip;\n        let uClipPos;\n        let uClipDir;\n        for (var i = 0, len = this._uClips.length; i < len; i++) {\n            clipUniforms = this._uClips[i];\n            uClipActive = clipUniforms.active;\n            clip = clips[i];\n            if (uClipActive) {\n                gl.uniform1i(uClipActive, clip.active);\n            }\n            uClipPos = clipUniforms.pos;\n            if (uClipPos) {\n                gl.uniform3fv(clipUniforms.pos, clip.pos);\n            }\n            uClipDir = clipUniforms.dir;\n            if (uClipDir) {\n                gl.uniform3fv(clipUniforms.dir, clip.dir);\n            }\n        }\n    }\n};\n\nexport {InstancingDrawRenderer};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 482,
    "kind": "variable",
    "name": "ids",
    "memberof": "scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "static": true,
    "longname": "scene/bigModels/instancing/draw/instancingDrawRenderer.js~ids",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "scene/utils/Map.js~Map"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 483,
    "kind": "variable",
    "name": "renderers",
    "memberof": "scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "static": true,
    "longname": "scene/bigModels/instancing/draw/instancingDrawRenderer.js~renderers",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 484,
    "kind": "variable",
    "name": "defaultColorize",
    "memberof": "scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "static": true,
    "longname": "scene/bigModels/instancing/draw/instancingDrawRenderer.js~defaultColorize",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 485,
    "kind": "function",
    "name": "get",
    "memberof": "scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/draw/instancingDrawRenderer.js~get",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 486,
    "kind": "function",
    "name": "getHash",
    "memberof": "scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/draw/instancingDrawRenderer.js~getHash",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "params": [
      {
        "name": "scene",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 487,
    "kind": "function",
    "name": "getValid",
    "memberof": "scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/draw/instancingDrawRenderer.js~getValid",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 488,
    "kind": "function",
    "name": "put",
    "memberof": "scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/draw/instancingDrawRenderer.js~put",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 489,
    "kind": "function",
    "name": "webglContextRestored",
    "memberof": "scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/draw/instancingDrawRenderer.js~webglContextRestored",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 490,
    "kind": "function",
    "name": "drawLayer",
    "memberof": "scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/draw/instancingDrawRenderer.js~drawLayer",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      },
      {
        "name": "renderPass",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 491,
    "kind": "function",
    "name": "_allocate",
    "memberof": "scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/draw/instancingDrawRenderer.js~_allocate",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 492,
    "kind": "function",
    "name": "_bindProgram",
    "memberof": "scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/draw/instancingDrawRenderer.js~_bindProgram",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 493,
    "kind": "function",
    "name": "InstancingDrawRenderer",
    "memberof": "scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/draw/instancingDrawRenderer.js~InstancingDrawRenderer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/draw/instancingDrawRenderer.js",
    "importStyle": "{InstancingDrawRenderer}",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 494,
    "kind": "file",
    "name": "scene/bigModels/instancing/draw/instancingDrawShaderSource.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\nimport {RENDER_PASSES} from '../../renderPasses.js';\n\n/**\n * @private\n */\nconst InstancingDrawShaderSource = function (layer) {\n    this.vertex = buildVertex(layer);\n    this.fragment = buildFragment(layer);\n};\n\nfunction buildVertex(layer) {\n    var scene = layer.model.scene;\n    const clipsState = scene._clipsState;\n    const lightsState = scene._lightsState;\n    const clipping = clipsState.clips.length > 0;\n    let i;\n    let len;\n    let light;\n    const src = [];\n\n    src.push(\"// Instancing geometry drawing vertex shader\");\n\n    src.push(\"uniform int renderPass;\");\n\n    src.push(\"attribute vec3 position;\");\n    src.push(\"attribute vec2 normal;\");\n    src.push(\"attribute vec4 color;\");\n    src.push(\"attribute vec4 flags;\");\n\n    src.push(\"attribute vec4 modelMatrixCol0;\"); // Modeling matrix\n    src.push(\"attribute vec4 modelMatrixCol1;\");\n    src.push(\"attribute vec4 modelMatrixCol2;\");\n\n    src.push(\"attribute vec4 modelNormalMatrixCol0;\");\n    src.push(\"attribute vec4 modelNormalMatrixCol1;\");\n    src.push(\"attribute vec4 modelNormalMatrixCol2;\");\n\n    // TODO: How to do per-instance normal modeling matrix?\n\n    src.push(\"uniform mat4 modelNormalMatrix;\");\n\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform mat4 viewNormalMatrix;\");\n    src.push(\"uniform mat4 positionsDecodeMatrix;\");\n\n    src.push(\"uniform vec4 colorize;\");\n\n    src.push(\"uniform vec4 lightAmbient;\");\n\n    for (i = 0, len = lightsState.lights.length; i < len; i++) {\n        light = lightsState.lights[i];\n        if (light.type === \"ambient\") {\n            continue;\n        }\n        src.push(\"uniform vec4 lightColor\" + i + \";\");\n        if (light.type === \"dir\") {\n            src.push(\"uniform vec3 lightDir\" + i + \";\");\n        }\n        if (light.type === \"point\") {\n            src.push(\"uniform vec3 lightPos\" + i + \";\");\n        }\n        if (light.type === \"spot\") {\n            src.push(\"uniform vec3 lightPos\" + i + \";\");\n            src.push(\"uniform vec3 lightDir\" + i + \";\");\n        }\n    }\n\n    src.push(\"vec3 octDecode(vec2 oct) {\");\n    src.push(\"    vec3 v = vec3(oct.xy, 1.0 - abs(oct.x) - abs(oct.y));\");\n    src.push(\"    if (v.z < 0.0) {\");\n    src.push(\"        v.xy = (1.0 - abs(v.yx)) * vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);\");\n    src.push(\"    }\");\n    src.push(\"    return normalize(v);\");\n    src.push(\"}\");\n\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"varying vec4 vColor;\");\n\n    src.push(\"void main(void) {\");\n\n    src.push(\"bool visible      = (float(flags.x) > 0.0);\");\n    src.push(\"bool ghosted      = (float(flags.y) > 0.0);\");\n    src.push(\"bool highlighted  = (float(flags.z) > 0.0);\");\n    src.push(\"bool transparent  = ((float(color.a) / 255.0) < 1.0);\");\n\n    src.push(`if (!visible || (renderPass == ${RENDER_PASSES.OPAQUE} && (transparent || ghosted || highlighted)) || (renderPass == ${RENDER_PASSES.TRANSPARENT} && (!transparent || ghosted || highlighted)) || (renderPass == ${RENDER_PASSES.GHOSTED} && (!ghosted || highlighted)) || (renderPass == ${RENDER_PASSES.HIGHLIGHTED} && !highlighted)) {`);\n    src.push(\"   gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\"); // Cull vertex\n    src.push(\"} else {\");\n\n    src.push(\"vec4 worldPosition = positionsDecodeMatrix * vec4(position, 1.0); \");\n\n    src.push(\"worldPosition = vec4(dot(worldPosition, modelMatrixCol0), dot(worldPosition, modelMatrixCol1), dot(worldPosition, modelMatrixCol2), 1.0);\");\n\n    src.push(\"vec4 viewPosition  = viewMatrix * worldPosition; \");\n\n    src.push(\"vec4 modelNormal = vec4(octDecode(normal.xy), 0.0); \");\n    src.push(\"vec4 worldNormal = vec4(dot(modelNormal, modelNormalMatrixCol0), dot(modelNormal, modelNormalMatrixCol1), dot(modelNormal, modelNormalMatrixCol2), 0.0);\");\n    src.push(\"vec3 viewNormal = normalize(vec4(worldNormal * viewNormalMatrix).xyz);\");\n\n    src.push(\"vec3 reflectedColor = vec3(0.0, 0.0, 0.0);\");\n    src.push(\"vec3 viewLightDir = vec3(0.0, 0.0, -1.0);\");\n\n    src.push(\"float lambertian = 1.0;\");\n    for (i = 0, len = lightsState.lights.length; i < len; i++) {\n        light = lightsState.lights[i];\n        if (light.type === \"ambient\") {\n            continue;\n        }\n        if (light.type === \"dir\") {\n            if (light.space === \"view\") {\n                src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n            } else {\n                src.push(\"viewLightDir = normalize((viewMatrix * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n            }\n        } else if (light.type === \"point\") {\n            if (light.space === \"view\") {\n                src.push(\"viewLightDir = normalize(lightPos\" + i + \" - viewPosition.xyz);\");\n            } else {\n                src.push(\"viewLightDir = normalize((viewMatrix * vec4(lightPos\" + i + \", 0.0)).xyz);\");\n            }\n        } else if (light.type === \"spot\") {\n            if (light.space === \"view\") {\n                src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n            } else {\n                src.push(\"viewLightDir = normalize((viewMatrix * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n            }\n        } else {\n            continue;\n        }\n        src.push(\"lambertian = max(dot(-viewNormal, viewLightDir), 0.0);\");\n        src.push(\"reflectedColor += lambertian * (lightColor\" + i + \".rgb * lightColor\" + i + \".a);\");\n    }\n\n    src.push(\"vColor = colorize * vec4(reflectedColor * vec3(float(color.r) / 255.0, float(color.g) / 255.0, float(color.b) / 255.0), float(color.a) / 255.0);\");\n\n    // src.push(\"vColor.r += 1.0;\");\n    // src.push(\"vColor.g += 1.0;\");\n    // src.push(\"vColor.b += 1.0;\");\n\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    src.push(\"gl_Position = projMatrix * viewPosition;\");\n    src.push(\"}\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(layer) {\n    const scene = layer.model.scene;\n    const clipsState = scene._clipsState;\n    let i;\n    let len;\n    const clipping = clipsState.clips.length > 0;\n    const src = [];\n    src.push(\"// Instancing geometry drawing fragment shader\");\n    src.push(\"precision mediump float;\");\n    src.push(\"precision mediump int;\");\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (i = 0, len = clipsState.clips.length; i < len; i++) {\n            src.push(\"uniform bool clipActive\" + i + \";\");\n            src.push(\"uniform vec3 clipPos\" + i + \";\");\n            src.push(\"uniform vec3 clipDir\" + i + \";\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (i = 0, len = clipsState.clips.length; i < len; i++) {\n            src.push(\"if (clipActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-clipDir\" + i + \".xyz, vWorldPosition.xyz - clipPos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    src.push(\"gl_FragColor = vColor;\");\n    src.push(\"}\");\n    return src;\n}\n\nexport {InstancingDrawShaderSource};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/instancing/draw/instancingDrawShaderSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 495,
    "kind": "function",
    "name": "buildVertex",
    "memberof": "scene/bigModels/instancing/draw/instancingDrawShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/draw/instancingDrawShaderSource.js~buildVertex",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/draw/instancingDrawShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 496,
    "kind": "function",
    "name": "buildFragment",
    "memberof": "scene/bigModels/instancing/draw/instancingDrawShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/draw/instancingDrawShaderSource.js~buildFragment",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/draw/instancingDrawShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 497,
    "kind": "function",
    "name": "InstancingDrawShaderSource",
    "memberof": "scene/bigModels/instancing/draw/instancingDrawShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/draw/instancingDrawShaderSource.js~InstancingDrawShaderSource",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/draw/instancingDrawShaderSource.js",
    "importStyle": "{InstancingDrawShaderSource}",
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 498,
    "kind": "file",
    "name": "scene/bigModels/instancing/instancingLayer.js",
    "content": "import {math} from \"../../math/math.js\";\nimport {WEBGL_INFO} from \"../../webglInfo.js\";\n\nimport {RenderState} from \"../../webgl/RenderState.js\";\nimport {ArrayBuf} from \"../../webgl/ArrayBuf.js\";\n\nimport {InstancingDrawRenderer} from \"./draw/instancingDrawRenderer.js\";\nimport {InstancingPickRenderer} from \"./pick/instancingPickRenderer.js\";\n\nimport {RENDER_FLAGS} from '../renderFlags.js';\nimport {RENDER_PASSES} from '../renderPasses.js';\n\nconst bigIndicesSupported = WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"];\nconst MAX_VERTS = bigIndicesSupported ? 5000000 : 65530;\nconst quantizedPositions = new Uint16Array(MAX_VERTS * 3);\nconst compressedNormals = new Int8Array(MAX_VERTS * 3);\nconst tempUint8Vec4 = new Uint8Array(4);\nconst tempFloat32Vec4 = new Float32Array(4);\nconst tempVec3a = math.vec4([0, 0, 0, 1]);\nconst tempVec3b = math.vec4([0, 0, 0, 1]);\n\n/**\n * @private\n */\nclass InstancingLayer {\n\n    /**\n     * @param model\n     * @param cfg\n     * @param cfg.primitive\n     * @param cfg.positions Flat float Local-space positions array.\n     * @param cfg.normals Flat float normals array.\n     * @param cfg.indices Flat int indices array.\n     * @param cfg.edgeIndices Flat int edges indices array.\n     */\n    constructor(model, cfg) {\n        this.model = model;\n        this._aabb = math.collapseAABB3();\n        var primitiveName = cfg.primitive || \"triangles\";\n        var primitive;\n        const gl = model.scene.canvas.gl;\n        switch (primitiveName) {\n            case \"points\":\n                primitive = gl.POINTS;\n                break;\n            case \"lines\":\n                primitive = gl.LINES;\n                break;\n            case \"line-loop\":\n                primitive = gl.LINE_LOOP;\n                break;\n            case \"line-strip\":\n                primitive = gl.LINE_STRIP;\n                break;\n            case \"triangles\":\n                primitive = gl.TRIANGLES;\n                break;\n            case \"triangle-strip\":\n                primitive = gl.TRIANGLE_STRIP;\n                break;\n            case \"triangle-fan\":\n                primitive = gl.TRIANGLE_FAN;\n                break;\n            default:\n                throw `Unsupported value for 'primitive': '${primitiveName}' - supported values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'. Defaulting to 'triangles'.`;\n                primitive = gl.TRIANGLES;\n                primitiveName = \"triangles\";\n        }\n        var stateCfg = {\n            primitiveName: primitiveName,\n            primitive: primitive,\n            positionsDecodeMatrix: math.mat4(),\n            numInstances: 0,\n            obb: math.OBB3()\n        };\n        if (cfg.positions) {\n            var lenPositions = cfg.positions.length;\n            var localAABB = math.collapseAABB3();\n            math.expandAABB3Points3(localAABB, cfg.positions);\n            math.AABB3ToOBB3(localAABB, stateCfg.obb);\n            quantizePositions(cfg.positions, lenPositions, localAABB, quantizedPositions, stateCfg.positionsDecodeMatrix);\n            let normalized = false;\n            stateCfg.positionsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, quantizedPositions, lenPositions, 3, gl.STATIC_DRAW, normalized);\n        }\n        if (cfg.normals) {\n            var lenCompressedNormals = octEncodeNormals(cfg.normals, cfg.normals.length, compressedNormals, 0);\n            var normalized = true; // For oct-encoded UInt8\n            stateCfg.normalsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, compressedNormals, lenCompressedNormals, 3, gl.STATIC_DRAW, normalized);\n        }\n        if (cfg.indices) {\n            stateCfg.indicesBuf = new ArrayBuf(gl, gl.ELEMENT_ARRAY_BUFFER, bigIndicesSupported ? new Uint32Array(cfg.indices) : new Uint16Array(cfg.indices), cfg.indices.length, 1, gl.STATIC_DRAW);\n        }\n        if (cfg.edgeIndices) {\n            stateCfg.edgeIndicesBuf = new ArrayBuf(gl, gl.ELEMENT_ARRAY_BUFFER, bigIndicesSupported ? new Uint32Array(cfg.edgeIndices) : new Uint16Array(cfg.edgeIndices), cfg.edgeIndices.length, 1, gl.STATIC_DRAW);\n        }\n        this._state = new RenderState(stateCfg);\n\n        // These counts are used to avoid unnecessary render passes\n        this.numObjects = 0;\n        this.numVisibleObjects = 0;\n        this.numTransparentObjects = 0;\n        this.numGhostedObjects = 0;\n        this.numHighlightedObjects = 0;\n        this.numEdgesObjects = 0;\n\n        // Vertex arrays\n        this._flags = [];\n        this._colors = [];\n        this._pickColors = [];\n\n        // Modeling matrix per instance, array for each column\n        this._modelMatrixCol0 = [];\n        this._modelMatrixCol1 = [];\n        this._modelMatrixCol2 = [];\n\n        // Modeling normal matrix per instance, array for each column\n        this._modelNormalMatrixCol0 = [];\n        this._modelNormalMatrixCol1 = [];\n        this._modelNormalMatrixCol2 = [];\n\n        this._portions = [];\n\n        this._finalized = false;\n\n        this.compileShaders();\n    }\n\n    /**\n     * Creates a new portion within this InstancingLayer, returns the new portion ID.\n     *\n     * The portion will instance this InstancingLayer's geometry.\n     *\n     * Gives the portion the specified flags, color and matrix.\n     *\n     * @param flags Unsigned long int\n     * @param color Quantized RGBA color\n     * @param matrix Flat float 4x4 matrix\n     * @param aabb Flat float AABB\n     * @param pickColor Quantized pick color\n     * @returns {number} Portion ID\n     */\n    createPortion(flags, color, matrix, aabb, pickColor) {\n\n        if (this._finalized) {\n            throw \"Already finalized\";\n        }\n\n        // TODO: find AABB for portion by transforming the geometry local AABB by the given matrix?\n\n        var visible = !!(flags & RENDER_FLAGS.VISIBLE) ? 255 : 0;\n        var ghosted = !!(flags & RENDER_FLAGS.GHOSTED) ? 255 : 0;\n        var highlighted = !!(flags & RENDER_FLAGS.HIGHLIGHTED) ? 255 : 0;\n        var clippable = !!(flags & RENDER_FLAGS.CLIPPABLE) ? 255 : 0;\n        var edges = !!(flags & RENDER_FLAGS.EDGES) ? 255 : 0;\n\n        this._flags.push(visible);\n        this._flags.push(ghosted);\n        this._flags.push(highlighted);\n        this._flags.push(clippable);\n\n        if (visible) {\n            this.numVisibleObjects++;\n        }\n        if (ghosted) {\n            this.numGhostedObjects++;\n        }\n        if (highlighted) {\n            this.numHighlightedObjects++;\n        }\n        if (edges) {\n            this.numEdgesObjects++;\n        }\n\n        const r = color[0]; // Color is pre-quantized\n        const g = color[1];\n        const b = color[2];\n        const a = color[3];\n        if (a < 255) {\n            this.numTransparentObjects++;\n        }\n        this._colors.push(r);\n        this._colors.push(g);\n        this._colors.push(b);\n        this._colors.push(a);\n\n        this._modelMatrixCol0.push(matrix[0]);\n        this._modelMatrixCol0.push(matrix[4]);\n        this._modelMatrixCol0.push(matrix[8]);\n        this._modelMatrixCol0.push(matrix[12]);\n\n        this._modelMatrixCol1.push(matrix[1]);\n        this._modelMatrixCol1.push(matrix[5]);\n        this._modelMatrixCol1.push(matrix[9]);\n        this._modelMatrixCol1.push(matrix[13]);\n\n        this._modelMatrixCol2.push(matrix[2]);\n        this._modelMatrixCol2.push(matrix[6]);\n        this._modelMatrixCol2.push(matrix[10]);\n        this._modelMatrixCol2.push(matrix[14]);\n\n        // Note: order of inverse and transpose doesn't matter\n\n        let transposedMat = math.transposeMat4(matrix, math.mat4()); // TODO: Use cached matrix\n        let normalMatrix = math.inverseMat4(transposedMat);\n\n        this._modelNormalMatrixCol0.push(normalMatrix[0]);\n        this._modelNormalMatrixCol0.push(normalMatrix[4]);\n        this._modelNormalMatrixCol0.push(normalMatrix[8]);\n        this._modelNormalMatrixCol0.push(normalMatrix[12]);\n\n        this._modelNormalMatrixCol1.push(normalMatrix[1]);\n        this._modelNormalMatrixCol1.push(normalMatrix[5]);\n        this._modelNormalMatrixCol1.push(normalMatrix[9]);\n        this._modelNormalMatrixCol1.push(normalMatrix[13]);\n\n        this._modelNormalMatrixCol2.push(normalMatrix[2]);\n        this._modelNormalMatrixCol2.push(normalMatrix[6]);\n        this._modelNormalMatrixCol2.push(normalMatrix[10]);\n        this._modelNormalMatrixCol2.push(normalMatrix[14]);\n\n        // Per-vertex pick colors\n\n        this._pickColors.push(pickColor[0]);\n        this._pickColors.push(pickColor[1]);\n        this._pickColors.push(pickColor[2]);\n        this._pickColors.push(pickColor[3]);\n\n        // Expand AABB\n\n        math.collapseAABB3(aabb);\n        var obb = this._state.obb;\n        var lenPositions = obb.length;\n        for (var i = 0; i < lenPositions; i += 4) {\n            tempVec3a[0] = obb[i + 0];\n            tempVec3a[1] = obb[i + 1];\n            tempVec3a[2] = obb[i + 2];\n            math.transformPoint4(matrix, tempVec3a, tempVec3b);\n            math.expandAABB3Point3(aabb, tempVec3b); // Expand portion AABB\n        }\n\n        this._state.numInstances++;\n\n        var portionId = this._portions.length;\n        this._portions.push({});\n        this.numObjects++;\n\n        return portionId;\n    }\n\n    finalize() {\n        if (this._finalized) {\n            throw \"Already finalized\";\n        }\n        const gl = this.model.scene.canvas.gl;\n        if (this._colors.length > 0) {\n            let normalized = false;\n            this._state.colorsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, new Uint8Array(this._colors), this._colors.length, 4, gl.STATIC_DRAW, normalized);\n            this._colors = []; // Release memory\n        }\n        if (this._flags.length > 0) {\n            let normalized = true;\n            this._state.flagsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, new Uint8Array(this._flags), this._flags.length, 4, gl.STATIC_DRAW, normalized);\n            this._flags = [];\n        }\n        if (this._modelMatrixCol0.length > 0) {\n\n            let normalized = false;\n\n            this._state.modelMatrixCol0Buf = new ArrayBuf(gl, gl.ARRAY_BUFFER, new Float32Array(this._modelMatrixCol0), this._modelMatrixCol0.length, 4, gl.STATIC_DRAW, normalized);\n            this._state.modelMatrixCol1Buf = new ArrayBuf(gl, gl.ARRAY_BUFFER, new Float32Array(this._modelMatrixCol1), this._modelMatrixCol1.length, 4, gl.STATIC_DRAW, normalized);\n            this._state.modelMatrixCol2Buf = new ArrayBuf(gl, gl.ARRAY_BUFFER, new Float32Array(this._modelMatrixCol2), this._modelMatrixCol2.length, 4, gl.STATIC_DRAW, normalized);\n            this._modelMatrixCol0 = [];\n            this._modelMatrixCol1 = [];\n            this._modelMatrixCol2 = [];\n\n            this._state.modelNormalMatrixCol0Buf = new ArrayBuf(gl, gl.ARRAY_BUFFER, new Float32Array(this._modelNormalMatrixCol0), this._modelNormalMatrixCol0.length, 4, gl.STATIC_DRAW, normalized);\n            this._state.modelNormalMatrixCol1Buf = new ArrayBuf(gl, gl.ARRAY_BUFFER, new Float32Array(this._modelNormalMatrixCol1), this._modelNormalMatrixCol1.length, 4, gl.STATIC_DRAW, normalized);\n            this._state.modelNormalMatrixCol2Buf = new ArrayBuf(gl, gl.ARRAY_BUFFER, new Float32Array(this._modelNormalMatrixCol2), this._modelNormalMatrixCol2.length, 4, gl.STATIC_DRAW, normalized);\n            this._modelNormalMatrixCol0 = [];\n            this._modelNormalMatrixCol1 = [];\n            this._modelNormalMatrixCol2 = [];\n        }\n        if (this._pickColors.length > 0) {\n            let normalized = false;\n            this._state.pickColorsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, new Uint8Array(this._pickColors), this._colors.length, 4, gl.STATIC_DRAW, normalized);\n            this._pickColors = []; // Release memory\n        }\n        this._finalized = true;\n    }\n\n    setFlags(portionId, flags) {\n        if (!this._finalized) {\n            throw \"Not finalized\";\n        }\n        tempUint8Vec4[0] = !!(flags & RENDER_FLAGS.VISIBLE) ? 255 : 0;\n        tempUint8Vec4[1] = !!(flags & RENDER_FLAGS.GHOSTED) ? 255 : 0;\n        tempUint8Vec4[2] = !!(flags & RENDER_FLAGS.HIGHLIGHTED) ? 255 : 0;\n        tempUint8Vec4[3] = !!(flags & RENDER_FLAGS.CLIPPABLE) ? 255 : 0;\n        this._state.flagsBuf.setData(tempUint8Vec4, portionId * 4, 4);\n    }\n\n    setColor(portionId, color) { // TODO\n        if (!this._finalized) {\n            throw \"Not finalized\";\n        }\n        tempUint8Vec4[0] = color[0];\n        tempUint8Vec4[1] = color[1];\n        tempUint8Vec4[2] = color[2];\n        tempUint8Vec4[3] = color[3];\n        this._state.colorsBuf.setData(tempUint8Vec4, portionId * 4, 4);\n    }\n\n    setMatrix(portionId, matrix) {\n\n        if (!this._finalized) {\n            throw \"Not finalized\";\n        }\n\n        var offset = portionId * 4;\n\n        tempFloat32Vec4[0] = matrix[0];\n        tempFloat32Vec4[1] = matrix[4];\n        tempFloat32Vec4[2] = matrix[8];\n        tempFloat32Vec4[3] = matrix[12];\n\n        this._state.modelMatrixCol0Buf.setData(tempFloat32Vec4, offset, 4);\n\n        tempFloat32Vec4[0] = matrix[1];\n        tempFloat32Vec4[1] = matrix[5];\n        tempFloat32Vec4[2] = matrix[9];\n        tempFloat32Vec4[3] = matrix[13];\n\n        this._state.modelMatrixCol1Buf.setData(tempFloat32Vec4, offset, 4);\n\n        tempFloat32Vec4[0] = matrix[2];\n        tempFloat32Vec4[1] = matrix[6];\n        tempFloat32Vec4[2] = matrix[10];\n        tempFloat32Vec4[3] = matrix[14];\n\n        this._state.modelMatrixCol2Buf.setData(tempFloat32Vec4, offset, 4);\n\n        // tempFloat32Vec4[0] = matrix[3];\n        // tempFloat32Vec4[1] = matrix[7];\n        // tempFloat32Vec4[2] = matrix[11];\n        // tempFloat32Vec4[3] = matrix[15];\n        //\n        // this._state.modelMatrixCol3Buf.setData(tempFloat32Vec4, offset, 4);\n    }\n\n    //-- NORMAL --------------------------------------------------------------------------------------------------------\n\n    drawNormalFillOpaque(frameCtx) {\n\n        if (this.numVisibleObjects === 0 || this.numTransparentObjects === this.numObjects || this.numGhostedObjects === this.numObjects) {\n            return;\n        }\n        if (this._drawRenderer) {\n            this._drawRenderer.drawLayer(frameCtx, this, RENDER_PASSES.OPAQUE);\n        }\n    }\n\n    drawNormalEdgesOpaque(frameCtx) {\n        return;\n        if (this.numEdgesObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.OPAQUE);\n        }\n    }\n\n    drawNormalFillTransparent(frameCtx) {\n\n        if (this.numVisibleObjects === 0 || this.numTransparentObjects === 0 || this.numGhostedObjects === this.numObjects) {\n            return;\n        }\n        if (this._drawRenderer) {\n            this._drawRenderer.drawLayer(frameCtx, this, RENDER_PASSES.TRANSPARENT);\n        }\n    }\n\n    drawNormalTransparentEdges(frameCtx) {\n        return;\n        if (this.numEdgesObjects === 0 || this.numTransparentObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.TRANSPARENT);\n        }\n    }\n\n    //-- GHOSTED--------------------------------------------------------------------------------------------------------\n\n    drawGhostedFillOpaque(frameCtx) {\n        return;\n        if (this.numVisibleObjects === 0 || this.numGhostedObjects === 0) {\n            return;\n        }\n        if (this._fillRenderer) {\n            this._fillRenderer.drawLayer(frameCtx, this, RENDER_PASSES.GHOSTED); // TODO: pass in transparent flag\n        }\n    }\n\n    drawGhostedEdgesOpaque(frameCtx) {\n        return;\n        if (this.numVisibleObjects === 0 || this.numGhostedObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.GHOSTED);\n        }\n    }\n\n    drawGhostedFillTransparent(frameCtx) {\n        return;\n        if (this.numVisibleObjects === 0 || this.numGhostedObjects === 0) {\n            return;\n        }\n        if (this._fillRenderer) {\n            this._fillRenderer.drawLayer(frameCtx, this, RENDER_PASSES.GHOSTED); // TODO: pass in transparent flag\n        }\n    }\n\n    drawGhostedEdgesTransparent(frameCtx) {\n        return;\n        if (this.numVisibleObjects === 0 || this.numGhostedObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.GHOSTED);\n        }\n    }\n\n    //-- HIGHLIGHTED ---------------------------------------------------------------------------------------------------\n\n    drawHighlightedFillOpaque(frameCtx) {\n        return;\n        if (this.numVisibleObjects === 0 || this.numHighlightedObjects === 0) {\n            return;\n        }\n        if (this._fillRenderer) {\n            this._fillRenderer.drawLayer(frameCtx, this, RENDER_PASSES.HIGHLIGHTED);\n        }\n    }\n\n    drawHighlightedEdgesOpaque(frameCtx) {\n        return;\n        if (this.numVisibleObjects === 0 || this.numHighlightedObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.HIGHLIGHTED);\n        }\n    }\n\n    drawHighlightedFillTransparent(frameCtx) {\n        return;\n        if (this.numVisibleObjects === 0 || this.numHighlightedObjects === 0) {\n            return;\n        }\n        if (this._fillRenderer) {\n            this._fillRenderer.drawLayer(frameCtx, this, RENDER_PASSES.HIGHLIGHTED);\n        }\n    }\n\n    drawHighlightedEdgesTransparent(frameCtx) {\n        return;\n        if (this.numVisibleObjects === 0 || this.numHighlightedObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.HIGHLIGHTED);\n        }\n    }\n\n    //-- SELECTED ------------------------------------------------------------------------------------------------------\n\n    drawSelectedFillOpaque(frameCtx) {\n        return;\n        if (this.numVisibleObjects === 0 || this.numSelectedObjects === 0) {\n            return;\n        }\n        if (this._fillRenderer) {\n            this._fillRenderer.drawLayer(frameCtx, this, RENDER_PASSES.SELECTED);\n        }\n    }\n\n    drawSelectedEdgesOpaque(frameCtx) {\n        return;\n        if (this.numVisibleObjects === 0 || this.numSelectedObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.SELECTED);\n        }\n    }\n\n    drawSelectedFillTransparent(frameCtx) {\n        return;\n        if (this.numVisibleObjects === 0 || this.numSelectedObjects === 0) {\n            return;\n        }\n        if (this._fillRenderer) {\n            this._fillRenderer.drawLayer(frameCtx, this, RENDER_PASSES.SELECTED);\n        }\n    }\n\n    drawSelectedEdgesTransparent(frameCtx) {\n        return;\n        if (this.numVisibleObjects === 0 || this.numSelectedObjects === 0) {\n            return;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.drawLayer(frameCtx, this, RENDER_PASSES.SELECTED);\n        }\n    }\n\n    //---- PICKING ----------------------------------------------------------------------------------------------------\n\n    drawPickMesh(frameCtx) {\n        if (this.numVisibleObjects === 0) {\n            return;\n        }\n        if (this._pickRenderer) {\n            this._pickRenderer.drawLayer(frameCtx, this);\n        }\n    }\n\n    compileShaders() {\n        if (this._drawRenderer && this._drawRenderer.getValid() === false) {\n            this._drawRenderer.put();\n            this._drawRenderer = null;\n        }\n        if (this._fillRenderer && this._fillRenderer.getValid() === false) {\n            this._fillRenderer.put();\n            this._fillRenderer = null;\n        }\n        if (this._edgesRenderer && this._edgesRenderer.getValid() === false) {\n            this._edgesRenderer.put();\n            this._edgesRenderer = null;\n        }\n        if (this._pickRenderer && this._pickRenderer.getValid() === false) {\n            this._pickRenderer.put();\n            this._pickRenderer = null;\n        }\n        if (!this._drawRenderer) {\n            this._drawRenderer = InstancingDrawRenderer.get(this);\n        }\n        // if (!this._fillRenderer) {\n        //     this._fillRenderer = InstancingEmphasisFillRenderer.get(this);\n        // }\n        // if (!this._edgesRenderer) {\n        //     this._edgesRenderer = InstancingEmphasisEdgesRenderer.get(this);\n        // }\n        if (!this._pickRenderer) {\n            this._pickRenderer = InstancingPickRenderer.get(this);\n        }\n    }\n\n    destroy() {\n\n        if (this._drawRenderer) {\n            this._drawRenderer.put();\n            this._drawRenderer = null;\n        }\n        if (this._fillRenderer) {\n            this._fillRenderer.put();\n            this._fillRenderer = null;\n        }\n        if (this._edgesRenderer) {\n            this._edgesRenderer.put();\n            this._edgesRenderer = null;\n        }\n        if (this._pickRenderer) {\n            this._pickRenderer.put();\n            this._pickRenderer = null;\n        }\n\n        const state = this._state;\n        if (state.positionsBuf) {\n            state.positionsBuf.destroy();\n            state.positionsBuf = null;\n        }\n        if (state.normalsBuf) {\n            state.normalsBuf.destroy();\n            state.normalsBuf = null;\n        }\n        if (state.colorsBuf) {\n            state.colorsBuf.destroy();\n            state.colorsBuf = null;\n        }\n        if (state.flagsBuf) {\n            state.flagsBuf.destroy();\n            state.flagsBuf = null;\n        }\n        if (state.modelMatrixCol0Buf) {\n            state.modelMatrixCol0Buf.destroy();\n            state.modelMatrixCol0Buf = null;\n        }\n        if (state.modelMatrixCol1Buf) {\n            state.modelMatrixCol1Buf.destroy();\n            state.modelMatrixCol1Buf = null;\n        }\n        if (state.modelMatrixCol2Buf) {\n            state.modelMatrixCol2Buf.destroy();\n            state.modelMatrixCol2Buf = null;\n        }\n        if (state.modelNormalMatrixCol0Buf) {\n            state.modelNormalMatrixCol0Buf.destroy();\n            state.modelNormalMatrixCol0Buf = null;\n        }\n        if (state.modelNormalMatrixCol1Buf) {\n            state.modelNormalMatrixCol1Buf.destroy();\n            state.modelNormalMatrixCol1Buf = null;\n        }\n        if (state.modelNormalMatrixCol2Buf) {\n            state.modelNormalMatrixCol2Buf.destroy();\n            state.modelNormalMatrixCol2Buf = null;\n        }\n        if (state.indicesBuf) {\n            state.indicesBuf.destroy();\n            state.indicessBuf = null;\n        }\n        if (state.edgeIndicesBuf) {\n            state.edgeIndicesBuf.destroy();\n            state.edgeIndicessBuf = null;\n        }\n        if (state.pickColorsBuf) {\n            state.pickColorsBuf.destroy();\n            state.pickColorsBuf = null;\n        }\n        state.destroy();\n    }\n}\n\nvar quantizePositions = (function () { // http://cg.postech.ac.kr/research/mesh_comp_mobile/mesh_comp_mobile_conference.pdf\n    const translate = math.mat4();\n    const scale = math.mat4();\n    const scalar = math.vec3();\n    return function (positions, lenPositions, aabb, quantizedPositions, positionsDecodeMatrix) {\n        const xmin = aabb[0];\n        const ymin = aabb[1];\n        const zmin = aabb[2];\n        const xwid = aabb[3] - xmin;\n        const ywid = aabb[4] - ymin;\n        const zwid = aabb[5] - zmin;\n        // const maxInt = 2000000;\n        const maxInt = 65535;\n        const xMultiplier = maxInt / xwid;\n        const yMultiplier = maxInt / ywid;\n        const zMultiplier = maxInt / zwid;\n        let i;\n        for (i = 0; i < lenPositions; i += 3) {\n            quantizedPositions[i + 0] = Math.floor((positions[i + 0] - xmin) * xMultiplier);\n            quantizedPositions[i + 1] = Math.floor((positions[i + 1] - ymin) * yMultiplier);\n            quantizedPositions[i + 2] = Math.floor((positions[i + 2] - zmin) * zMultiplier);\n        }\n        math.identityMat4(translate);\n        math.translationMat4v(aabb, translate);\n        math.identityMat4(scale);\n        scalar[0] = xwid / maxInt;\n        scalar[1] = ywid / maxInt;\n        scalar[2] = zwid / maxInt;\n        math.scalingMat4v(scalar, scale);\n        math.mulMat4(translate, scale, positionsDecodeMatrix);\n    };\n})();\n\nfunction octEncodeNormals(normals, lenNormals, compressedNormals, lenCompressedNormals) { // http://jcgt.org/published/0003/02/01/\n    let oct, dec, best, currentCos, bestCos;\n    for (let i = 0; i < lenNormals; i += 3) {\n        // Test various combinations of ceil and floor to minimize rounding errors\n        best = oct = octEncodeVec3(normals, i, \"floor\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = bestCos = dot(normals, i, dec);\n        oct = octEncodeVec3(normals, i, \"ceil\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(normals, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(normals, i, \"floor\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(normals, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(normals, i, \"ceil\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(normals, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        compressedNormals[lenCompressedNormals + i + 0] = best[0];\n        compressedNormals[lenCompressedNormals + i + 1] = best[1];\n        compressedNormals[lenCompressedNormals + i + 2] = 0.0; // Unused\n    }\n    lenCompressedNormals += lenNormals;\n    return lenCompressedNormals;\n}\n\nfunction octEncodeVec3(array, i, xfunc, yfunc) { // Oct-encode single normal vector in 2 bytes\n    let x = array[i] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    let y = array[i + 1] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    if (array[i + 2] < 0) {\n        let tempx = x;\n        let tempy = y;\n        tempx = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        tempy = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        x = tempx;\n        y = tempy;\n    }\n    return new Int8Array([\n        Math[xfunc](x * 127.5 + (x < 0 ? -1 : 0)),\n        Math[yfunc](y * 127.5 + (y < 0 ? -1 : 0))\n    ]);\n}\n\nfunction octDecodeVec2(oct) { // Decode an oct-encoded normal\n    let x = oct[0];\n    let y = oct[1];\n    x /= x < 0 ? 127 : 128;\n    y /= y < 0 ? 127 : 128;\n    const z = 1 - Math.abs(x) - Math.abs(y);\n    if (z < 0) {\n        x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n    }\n    const length = Math.sqrt(x * x + y * y + z * z);\n    return [\n        x / length,\n        y / length,\n        z / length\n    ];\n}\n\nfunction dot(array, i, vec3) { // Dot product of a normal in an array against a candidate decoding\n    return array[i] * vec3[0] + array[i + 1] * vec3[1] + array[i + 2] * vec3[2];\n}\n\nexport {InstancingLayer};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/instancing/instancingLayer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 499,
    "kind": "variable",
    "name": "bigIndicesSupported",
    "memberof": "scene/bigModels/instancing/instancingLayer.js",
    "static": true,
    "longname": "scene/bigModels/instancing/instancingLayer.js~bigIndicesSupported",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/instancingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 500,
    "kind": "variable",
    "name": "MAX_VERTS",
    "memberof": "scene/bigModels/instancing/instancingLayer.js",
    "static": true,
    "longname": "scene/bigModels/instancing/instancingLayer.js~MAX_VERTS",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/instancingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 501,
    "kind": "variable",
    "name": "quantizedPositions",
    "memberof": "scene/bigModels/instancing/instancingLayer.js",
    "static": true,
    "longname": "scene/bigModels/instancing/instancingLayer.js~quantizedPositions",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/instancingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 502,
    "kind": "variable",
    "name": "compressedNormals",
    "memberof": "scene/bigModels/instancing/instancingLayer.js",
    "static": true,
    "longname": "scene/bigModels/instancing/instancingLayer.js~compressedNormals",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/instancingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 503,
    "kind": "variable",
    "name": "tempUint8Vec4",
    "memberof": "scene/bigModels/instancing/instancingLayer.js",
    "static": true,
    "longname": "scene/bigModels/instancing/instancingLayer.js~tempUint8Vec4",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/instancingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 504,
    "kind": "variable",
    "name": "tempFloat32Vec4",
    "memberof": "scene/bigModels/instancing/instancingLayer.js",
    "static": true,
    "longname": "scene/bigModels/instancing/instancingLayer.js~tempFloat32Vec4",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/instancingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 505,
    "kind": "variable",
    "name": "tempVec3a",
    "memberof": "scene/bigModels/instancing/instancingLayer.js",
    "static": true,
    "longname": "scene/bigModels/instancing/instancingLayer.js~tempVec3a",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/instancingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 506,
    "kind": "variable",
    "name": "tempVec3b",
    "memberof": "scene/bigModels/instancing/instancingLayer.js",
    "static": true,
    "longname": "scene/bigModels/instancing/instancingLayer.js~tempVec3b",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/instancingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 507,
    "kind": "variable",
    "name": "quantizePositions",
    "memberof": "scene/bigModels/instancing/instancingLayer.js",
    "static": true,
    "longname": "scene/bigModels/instancing/instancingLayer.js~quantizePositions",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/instancingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 636,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 508,
    "kind": "function",
    "name": "octEncodeNormals",
    "memberof": "scene/bigModels/instancing/instancingLayer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/instancingLayer.js~octEncodeNormals",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/instancingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 669,
    "undocument": true,
    "params": [
      {
        "name": "normals",
        "types": [
          "*"
        ]
      },
      {
        "name": "lenNormals",
        "types": [
          "*"
        ]
      },
      {
        "name": "compressedNormals",
        "types": [
          "*"
        ]
      },
      {
        "name": "lenCompressedNormals",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 509,
    "kind": "function",
    "name": "octEncodeVec3",
    "memberof": "scene/bigModels/instancing/instancingLayer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/instancingLayer.js~octEncodeVec3",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/instancingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 705,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "xfunc",
        "types": [
          "*"
        ]
      },
      {
        "name": "yfunc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 510,
    "kind": "function",
    "name": "octDecodeVec2",
    "memberof": "scene/bigModels/instancing/instancingLayer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/instancingLayer.js~octDecodeVec2",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/instancingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 722,
    "undocument": true,
    "params": [
      {
        "name": "oct",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 511,
    "kind": "function",
    "name": "dot",
    "memberof": "scene/bigModels/instancing/instancingLayer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/instancingLayer.js~dot",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/instancingLayer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 740,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "vec3",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 512,
    "kind": "class",
    "name": "InstancingLayer",
    "memberof": "scene/bigModels/instancing/instancingLayer.js",
    "static": true,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/instancingLayer.js",
    "importStyle": "{InstancingLayer}",
    "description": "",
    "lineNumber": 25,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 513,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 36,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.primitive",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.positions",
        "description": "Flat float Local-space positions array."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.normals",
        "description": "Flat float normals array."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.indices",
        "description": "Flat int indices array."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg.edgeIndices",
        "description": "Flat int edges indices array."
      }
    ]
  },
  {
    "__docId__": 514,
    "kind": "member",
    "name": "model",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#model",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 515,
    "kind": "member",
    "name": "_aabb",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_aabb",
    "access": "private",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 516,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_state",
    "access": "private",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 517,
    "kind": "member",
    "name": "numObjects",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#numObjects",
    "access": "public",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 518,
    "kind": "member",
    "name": "numVisibleObjects",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#numVisibleObjects",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 519,
    "kind": "member",
    "name": "numTransparentObjects",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#numTransparentObjects",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 520,
    "kind": "member",
    "name": "numGhostedObjects",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#numGhostedObjects",
    "access": "public",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 521,
    "kind": "member",
    "name": "numHighlightedObjects",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#numHighlightedObjects",
    "access": "public",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 522,
    "kind": "member",
    "name": "numEdgesObjects",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#numEdgesObjects",
    "access": "public",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 523,
    "kind": "member",
    "name": "_flags",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_flags",
    "access": "private",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 524,
    "kind": "member",
    "name": "_colors",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_colors",
    "access": "private",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 525,
    "kind": "member",
    "name": "_pickColors",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_pickColors",
    "access": "private",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 526,
    "kind": "member",
    "name": "_modelMatrixCol0",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_modelMatrixCol0",
    "access": "private",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 527,
    "kind": "member",
    "name": "_modelMatrixCol1",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_modelMatrixCol1",
    "access": "private",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 528,
    "kind": "member",
    "name": "_modelMatrixCol2",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_modelMatrixCol2",
    "access": "private",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 529,
    "kind": "member",
    "name": "_modelNormalMatrixCol0",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_modelNormalMatrixCol0",
    "access": "private",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 530,
    "kind": "member",
    "name": "_modelNormalMatrixCol1",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_modelNormalMatrixCol1",
    "access": "private",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 531,
    "kind": "member",
    "name": "_modelNormalMatrixCol2",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_modelNormalMatrixCol2",
    "access": "private",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 532,
    "kind": "member",
    "name": "_portions",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_portions",
    "access": "private",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 533,
    "kind": "member",
    "name": "_finalized",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_finalized",
    "access": "private",
    "description": null,
    "lineNumber": 123,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 534,
    "kind": "method",
    "name": "createPortion",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#createPortion",
    "access": "public",
    "description": "Creates a new portion within this InstancingLayer, returns the new portion ID.\n\nThe portion will instance this InstancingLayer's geometry.\n\nGives the portion the specified flags, color and matrix.",
    "lineNumber": 142,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{number} Portion ID"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "flags",
        "description": "Unsigned long int"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "Quantized RGBA color"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": "Flat float 4x4 matrix"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "aabb",
        "description": "Flat float AABB"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pickColor",
        "description": "Quantized pick color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": "Portion ID"
    }
  },
  {
    "__docId__": 535,
    "kind": "method",
    "name": "finalize",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#finalize",
    "access": "public",
    "description": null,
    "lineNumber": 250,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 546,
    "kind": "method",
    "name": "setFlags",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#setFlags",
    "access": "public",
    "description": null,
    "lineNumber": 291,
    "undocument": true,
    "params": [
      {
        "name": "portionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "flags",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 547,
    "kind": "method",
    "name": "setColor",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#setColor",
    "access": "public",
    "description": null,
    "lineNumber": 302,
    "undocument": true,
    "params": [
      {
        "name": "portionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "color",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 548,
    "kind": "method",
    "name": "setMatrix",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#setMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 313,
    "undocument": true,
    "params": [
      {
        "name": "portionId",
        "types": [
          "*"
        ]
      },
      {
        "name": "matrix",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 549,
    "kind": "method",
    "name": "drawNormalFillOpaque",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawNormalFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 352,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 550,
    "kind": "method",
    "name": "drawNormalEdgesOpaque",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawNormalEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 362,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 551,
    "kind": "method",
    "name": "drawNormalFillTransparent",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawNormalFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 372,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 552,
    "kind": "method",
    "name": "drawNormalTransparentEdges",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawNormalTransparentEdges",
    "access": "public",
    "description": null,
    "lineNumber": 382,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 553,
    "kind": "method",
    "name": "drawGhostedFillOpaque",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawGhostedFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 394,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 554,
    "kind": "method",
    "name": "drawGhostedEdgesOpaque",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawGhostedEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 404,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 555,
    "kind": "method",
    "name": "drawGhostedFillTransparent",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawGhostedFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 414,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 556,
    "kind": "method",
    "name": "drawGhostedEdgesTransparent",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawGhostedEdgesTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 424,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 557,
    "kind": "method",
    "name": "drawHighlightedFillOpaque",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawHighlightedFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 436,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 558,
    "kind": "method",
    "name": "drawHighlightedEdgesOpaque",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawHighlightedEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 446,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 559,
    "kind": "method",
    "name": "drawHighlightedFillTransparent",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawHighlightedFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 456,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 560,
    "kind": "method",
    "name": "drawHighlightedEdgesTransparent",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawHighlightedEdgesTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 466,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 561,
    "kind": "method",
    "name": "drawSelectedFillOpaque",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawSelectedFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 478,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 562,
    "kind": "method",
    "name": "drawSelectedEdgesOpaque",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawSelectedEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 488,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 563,
    "kind": "method",
    "name": "drawSelectedFillTransparent",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawSelectedFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 498,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 564,
    "kind": "method",
    "name": "drawSelectedEdgesTransparent",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawSelectedEdgesTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 508,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 565,
    "kind": "method",
    "name": "drawPickMesh",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#drawPickMesh",
    "access": "public",
    "description": null,
    "lineNumber": 520,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 566,
    "kind": "method",
    "name": "compileShaders",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#compileShaders",
    "access": "public",
    "description": null,
    "lineNumber": 529,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 567,
    "kind": "member",
    "name": "_drawRenderer",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_drawRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 532,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 568,
    "kind": "member",
    "name": "_fillRenderer",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_fillRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 536,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 569,
    "kind": "member",
    "name": "_edgesRenderer",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_edgesRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 540,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 570,
    "kind": "member",
    "name": "_pickRenderer",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#_pickRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 544,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 573,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/bigModels/instancing/instancingLayer.js~InstancingLayer#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 560,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 578,
    "kind": "file",
    "name": "scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "content": "import {Map} from \"../../../utils/Map.js\";\nimport {stats} from \"../../../stats.js\"\nimport {Program} from \"../../../webgl/Program.js\";\nimport {InstancingPickShaderSource} from \"./instancingPickShaderSource.js\";\n\nconst ids = new Map({});\n\n/**\n * @private\n */\nconst InstancingPickRenderer = function (hash, layer) {\n    this.id = ids.addItem({});\n    this._hash = hash;\n    this._scene = layer.model.scene;\n    this._useCount = 0;\n    this._shaderSource = new InstancingPickShaderSource(layer);\n    this._allocate(layer);\n};\n\nconst renderers = {};\n\nInstancingPickRenderer.get = function (layer) {\n    const scene = layer.model.scene;\n    const hash = getHash(scene);\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new InstancingPickRenderer(hash, layer);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        stats.memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nfunction getHash(scene) {\n    return [scene.canvas.canvas.id, \"\", scene._clipsState.getHash()].join(\";\")\n}\n\nInstancingPickRenderer.prototype.getValid = function () {\n    return this._hash === getHash(this._scene);\n};\n\nInstancingPickRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        stats.memory.programs--;\n    }\n};\n\nInstancingPickRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nInstancingPickRenderer.prototype.drawLayer = function (frameCtx, layer) {\n\n    const model = layer.model;\n    const scene = model.scene;\n    const gl = scene.canvas.gl;\n    const state = layer._state;\n    const instanceExt = this._instanceExt;\n\n    if (!this._program) {\n        this._allocate(layer);\n        if (this.errors) {\n            return;\n        }\n    }\n\n    if (frameCtx.lastProgramId !== this._program.id) {\n        frameCtx.lastProgramId = this._program.id;\n        this._bindProgram(frameCtx, layer);\n    }\n\n    this._aModelMatrixCol0.bindArrayBuffer(state.modelMatrixCol0Buf, gl.FLOAT, false);\n    this._aModelMatrixCol1.bindArrayBuffer(state.modelMatrixCol1Buf, gl.FLOAT, false);\n    this._aModelMatrixCol2.bindArrayBuffer(state.modelMatrixCol2Buf, gl.FLOAT, false);\n    instanceExt.vertexAttribDivisorANGLE(this._aModelMatrixCol0.location, 1);\n    instanceExt.vertexAttribDivisorANGLE(this._aModelMatrixCol1.location, 1);\n    instanceExt.vertexAttribDivisorANGLE(this._aModelMatrixCol2.location, 1);\n    frameCtx.bindArray+=3;\n\n    this._aPickColor.bindArrayBuffer(state.pickColorsBuf, gl.UNSIGNED_BYTE, false);\n    instanceExt.vertexAttribDivisorANGLE(this._aPickColor.location, 1);\n    frameCtx.bindArray++;\n\n    this._aPosition.bindArrayBuffer(state.positionsBuf, gl.UNSIGNED_SHORT, false);\n    frameCtx.bindArray++;\n\n    this._aFlags.bindArrayBuffer(state.flagsBuf, gl.UNSIGNED_BYTE, true);\n    instanceExt.vertexAttribDivisorANGLE(this._aFlags.location, 1);\n    frameCtx.bindArray++;\n\n    state.indicesBuf.bind();\n    frameCtx.bindArray++;\n\n    instanceExt.drawElementsInstancedANGLE(state.primitive, state.indicesBuf.numItems, state.indicesBuf.itemType, 0, state.numInstances);\n\n    // Cleanup\n\n    instanceExt.vertexAttribDivisorANGLE(this._aModelMatrixCol0.location, 0); // TODO: Is this needed\n    instanceExt.vertexAttribDivisorANGLE(this._aModelMatrixCol1.location, 0);\n    instanceExt.vertexAttribDivisorANGLE(this._aModelMatrixCol2.location, 0);\n    instanceExt.vertexAttribDivisorANGLE(this._aPickColor.location, 0);\n    instanceExt.vertexAttribDivisorANGLE(this._aFlags.location, 0);\n\n    frameCtx.drawElements++;\n};\n\nInstancingPickRenderer.prototype._allocate = function (layer) {\n    var scene = layer.model.scene;\n    const gl = scene.canvas.gl;\n    const lightsState = scene._lightsState;\n    const clipsState = scene._clipsState;\n\n    this._program = new Program(gl, this._shaderSource);\n\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n\n    this._instanceExt = gl.getExtension(\"ANGLE_instanced_arrays\");\n\n    const program = this._program;\n\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n\n    this._uClips = [];\n    const clips = clipsState.clips;\n    for (var i = 0, len = clips.length; i < len; i++) {\n        this._uClips.push({\n            active: program.getLocation(\"clipActive\" + i),\n            pos: program.getLocation(\"clipPos\" + i),\n            dir: program.getLocation(\"clipDir\" + i)\n        });\n    }\n\n    this._aPosition = program.getAttribute(\"position\");\n    this._aPickColor = program.getAttribute(\"pickColor\");\n    this._aFlags = program.getAttribute(\"flags\");\n\n    this._aModelMatrixCol0 = program.getAttribute(\"modelMatrixCol0\");\n    this._aModelMatrixCol1 = program.getAttribute(\"modelMatrixCol1\");\n    this._aModelMatrixCol2 = program.getAttribute(\"modelMatrixCol2\");\n};\n\nInstancingPickRenderer.prototype._bindProgram = function (frameCtx, layer) {\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const program = this._program;\n    const lightsState = scene._lightsState;\n    const clipsState = scene._clipsState;\n    const lights = lightsState.lights;\n    let light;\n    program.bind();\n    frameCtx.useProgram++;\n    const camera = scene.camera;\n    const cameraState = camera._state;\n    gl.uniformMatrix4fv(this._uViewMatrix, false, cameraState.matrix);\n    gl.uniformMatrix4fv(this._uProjMatrix, false, camera._project._state.matrix);\n    gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, layer._state.positionsDecodeMatrix);\n    if (clipsState.clips.length > 0) {\n        const clips = scene._clipsState.clips;\n        let clipUniforms;\n        let uClipActive;\n        let clip;\n        let uClipPos;\n        let uClipDir;\n        for (var i = 0, len = this._uClips.length; i < len; i++) {\n            clipUniforms = this._uClips[i];\n            uClipActive = clipUniforms.active;\n            clip = clips[i];\n            if (uClipActive) {\n                gl.uniform1i(uClipActive, clip.active);\n            }\n            uClipPos = clipUniforms.pos;\n            if (uClipPos) {\n                gl.uniform3fv(clipUniforms.pos, clip.pos);\n            }\n            uClipDir = clipUniforms.dir;\n            if (uClipDir) {\n                gl.uniform3fv(clipUniforms.dir, clip.dir);\n            }\n        }\n    }\n};\n\nexport {InstancingPickRenderer};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 579,
    "kind": "variable",
    "name": "ids",
    "memberof": "scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "static": true,
    "longname": "scene/bigModels/instancing/pick/instancingPickRenderer.js~ids",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "scene/utils/Map.js~Map"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 580,
    "kind": "variable",
    "name": "renderers",
    "memberof": "scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "static": true,
    "longname": "scene/bigModels/instancing/pick/instancingPickRenderer.js~renderers",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 581,
    "kind": "function",
    "name": "get",
    "memberof": "scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/pick/instancingPickRenderer.js~get",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 582,
    "kind": "function",
    "name": "getHash",
    "memberof": "scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/pick/instancingPickRenderer.js~getHash",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [
      {
        "name": "scene",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 583,
    "kind": "function",
    "name": "getValid",
    "memberof": "scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/pick/instancingPickRenderer.js~getValid",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 584,
    "kind": "function",
    "name": "put",
    "memberof": "scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/pick/instancingPickRenderer.js~put",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 585,
    "kind": "function",
    "name": "webglContextRestored",
    "memberof": "scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/pick/instancingPickRenderer.js~webglContextRestored",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 586,
    "kind": "function",
    "name": "drawLayer",
    "memberof": "scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/pick/instancingPickRenderer.js~drawLayer",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 587,
    "kind": "function",
    "name": "_allocate",
    "memberof": "scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/pick/instancingPickRenderer.js~_allocate",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 588,
    "kind": "function",
    "name": "_bindProgram",
    "memberof": "scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/pick/instancingPickRenderer.js~_bindProgram",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 589,
    "kind": "function",
    "name": "InstancingPickRenderer",
    "memberof": "scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/pick/instancingPickRenderer.js~InstancingPickRenderer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/pick/instancingPickRenderer.js",
    "importStyle": "{InstancingPickRenderer}",
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 590,
    "kind": "file",
    "name": "scene/bigModels/instancing/pick/instancingPickShaderSource.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n/**\n * @private\n */\nconst InstancingPickShaderSource = function (layer) {\n    this.vertex = buildVertex(layer);\n    this.fragment = buildFragment(layer);\n};\n\nfunction buildVertex(layer) {\n    var scene = layer.model.scene;\n    const clipsState = scene._clipsState;\n    const clipping = clipsState.clips.length > 0;\n    const src = [];\n\n    src.push(\"// Instancing geometry picking vertex shader\");\n\n    src.push(\"attribute vec3 position;\");\n    src.push(\"attribute vec4 flags;\");\n    src.push(\"attribute vec4 pickColor;\");\n\n    src.push(\"attribute vec4 modelMatrixCol0;\"); // Modeling matrix\n    src.push(\"attribute vec4 modelMatrixCol1;\");\n    src.push(\"attribute vec4 modelMatrixCol2;\");\n\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform mat4 positionsDecodeMatrix;\");\n\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"varying vec4 vPickColor;\");\n    src.push(\"void main(void) {\");\n    src.push(\"bool visible      = (float(flags.x) > 0.0);\");\n    src.push(`if (!visible) {`);\n    src.push(\"   gl_Position = vec4(0.0, 0.0, 0.0, 0.0);\"); // Cull vertex\n    src.push(\"} else {\");\n    src.push(\"  vec4 worldPosition = positionsDecodeMatrix * vec4(position, 1.0); \");\n    src.push(\"  worldPosition = vec4(dot(worldPosition, modelMatrixCol0), dot(worldPosition, modelMatrixCol1), dot(worldPosition, modelMatrixCol2), 1.0);\");\n    src.push(\"  vec4 viewPosition  = viewMatrix * worldPosition; \");\n    src.push(\"  vPickColor = vec4(float(pickColor.r) / 255.0, float(pickColor.g) / 255.0, float(pickColor.b) / 255.0, float(pickColor.a) / 255.0);\");\n    if (clipping) {\n        src.push(\"  vWorldPosition = worldPosition;\");\n    }\n    src.push(\"  gl_Position = projMatrix * viewPosition;\");\n    src.push(\"}\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(layer) {\n    const scene = layer.model.scene;\n    const clipsState = scene._clipsState;\n    const clipping = clipsState.clips.length > 0;\n    const src = [];\n    src.push(\"// Batched geometry picking fragment shader\");\n    src.push(\"precision mediump float;\");\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"uniform bool clipActive\" + i + \";\");\n            src.push(\"uniform vec3 clipPos\" + i + \";\");\n            src.push(\"uniform vec3 clipDir\" + i + \";\");\n        }\n    }\n    src.push(\"varying vec4 vPickColor;\");\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"if (clipActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-clipDir\" + i + \".xyz, vWorldPosition.xyz - clipPos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    src.push(\"   gl_FragColor = vPickColor; \");\n    src.push(\"}\");\n    return src;\n}\n\nexport {InstancingPickShaderSource};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/instancing/pick/instancingPickShaderSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 591,
    "kind": "function",
    "name": "buildVertex",
    "memberof": "scene/bigModels/instancing/pick/instancingPickShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/pick/instancingPickShaderSource.js~buildVertex",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/pick/instancingPickShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 592,
    "kind": "function",
    "name": "buildFragment",
    "memberof": "scene/bigModels/instancing/pick/instancingPickShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/pick/instancingPickShaderSource.js~buildFragment",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/pick/instancingPickShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 593,
    "kind": "function",
    "name": "InstancingPickShaderSource",
    "memberof": "scene/bigModels/instancing/pick/instancingPickShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/bigModels/instancing/pick/instancingPickShaderSource.js~InstancingPickShaderSource",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/instancing/pick/instancingPickShaderSource.js",
    "importStyle": "{InstancingPickShaderSource}",
    "description": "",
    "lineNumber": 8,
    "ignore": true,
    "params": [
      {
        "name": "layer",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 594,
    "kind": "file",
    "name": "scene/bigModels/renderFlags.js",
    "content": "/**\n * @private\n * @type {{PICKABLE: number, CLIPPABLE: number, BACKFACES: number, VISIBLE: number, SELECTED: number, OUTLINED: number, CULLED: number, RECEIVE_SHADOW: number, COLLIDABLE: number, GHOSTED: number, CAST_SHADOW: number, EDGES: number, HIGHLIGHTED: number}}\n */\nconst RENDER_FLAGS = {\n    VISIBLE: 1,\n    CULLED: 1 << 2,\n    PICKABLE: 1 << 3,\n    CLIPPABLE: 1 << 4,\n    COLLIDABLE: 1 << 5,\n    CAST_SHADOW: 1 << 6,\n    RECEIVE_SHADOW: 1 << 7,\n    OUTLINED: 1 << 8,\n    GHOSTED: 1 << 9,\n    HIGHLIGHTED: 1 << 10,\n    SELECTED: 1 << 11,\n    EDGES: 1 << 12,\n    BACKFACES: 1 << 13\n};\n\nexport {RENDER_FLAGS};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/renderFlags.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 595,
    "kind": "variable",
    "name": "RENDER_FLAGS",
    "memberof": "scene/bigModels/renderFlags.js",
    "static": true,
    "longname": "scene/bigModels/renderFlags.js~RENDER_FLAGS",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/renderFlags.js",
    "importStyle": "{RENDER_FLAGS}",
    "description": "",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "{PICKABLE: number, CLIPPABLE: number, BACKFACES: number, VISIBLE: number, SELECTED: number, OUTLINED: number, CULLED: number, RECEIVE_SHADOW: number, COLLIDABLE: number, GHOSTED: number, CAST_SHADOW: number, EDGES: number, HIGHLIGHTED: number}"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 596,
    "kind": "file",
    "name": "scene/bigModels/renderPasses.js",
    "content": "/**\n * @private\n */\nconst RENDER_PASSES = {\n    OPAQUE: 0,\n    TRANSPARENT: 1,\n    HIGHLIGHTED: 2,\n    GHOSTED: 3,\n    EDGES: 4,\n    SELECTED: 5\n};\n\nexport {RENDER_PASSES};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/bigModels/renderPasses.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 597,
    "kind": "variable",
    "name": "RENDER_PASSES",
    "memberof": "scene/bigModels/renderPasses.js",
    "static": true,
    "longname": "scene/bigModels/renderPasses.js~RENDER_PASSES",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/bigModels/renderPasses.js",
    "importStyle": "{RENDER_PASSES}",
    "description": "",
    "lineNumber": 4,
    "ignore": true,
    "type": {
      "types": [
        "{\"OPAQUE\": *, \"TRANSPARENT\": number, \"HIGHLIGHTED\": number, \"GHOSTED\": number, \"EDGES\": number, \"SELECTED\": number}"
      ]
    }
  },
  {
    "__docId__": 598,
    "kind": "file",
    "name": "scene/camera/Camera.js",
    "content": "\nimport {math} from '../math/math.js';\nimport {Component} from '../Component.js';\nimport {RenderState} from '../webgl/RenderState.js';\nimport {Perspective} from './Perspective.js';\nimport {Ortho} from './Ortho.js';\nimport {Frustum} from './Frustum.js';\nimport {CustomProjection} from './CustomProjection.js';\n\nconst tempVec3 = math.vec3();\nconst tempVec3b = math.vec3();\nconst tempVec3c = math.vec3();\nconst tempVec3d = math.vec3();\nconst tempVec3e = math.vec3();\nconst tempVec3f = math.vec3();\nconst tempMat = math.mat4();\nconst tempMatb = math.mat4();\nconst eyeLookVec = math.vec3();\nconst eyeLookVecNorm = math.vec3();\nconst eyeLookOffset = math.vec3();\nconst offsetEye = math.vec3();\n\n/**\n * @desc Manages viewing and projection transforms for its {@link Scene}.\n *\n * * One Camera per {@link Scene}\n * * Located at {@link Scene#camera}\n * * Also located for convenience at {@link Viewer#camera}\n * * Controls viewing and projection transforms\n * * Has methods to pan, zoom and orbit (or first-person rotation)\n * * Dynamically configurable World-space \"up\" direction\n * * Switchable between perspective, frustum and orthographic projections\n * * Switchable gimbal lock\n * * Can be \"flown\" to look at targets using a {@link CameraFlightAnimation}\n * * Can be animated along a path using a {@link CameraPathAnimation}\n *\n * ## Getting the Camera\n *\n * There is exactly one Camera per {@link Scene}:\n *\n * ````javascript\n * var camera = myViewer.scene.camera;\n * ````\n * Can also be found on the {@link Viewer} for convenience:\n *\n * ````javascript\n * var camera = myViewer.camera;\n * ````\n *\n * ## Moving around\n *\n * Get and set the Camera's absolute position at any time via its {@link Camera#eye}, {@link Camera#look} and {@link Camera#up} properties:\n *\n * ````javascript\n * camera.eye = [-10,0,0];\n * camera.look = [-10,0,0];\n * camera.up = [0,1,0];\n * ````\n *\n * Get the view matrix:\n *\n * ````javascript\n * var viewMatrix = camera.viewMatrix;\n * var viewNormalMatrix = camera.normalMatrix;\n * ````\n *\n * Listen for view matrix updates:\n *\n * ````javascript\n * camera.on(\"matrix\", function(matrix) { ... });\n * ````\n *\n * Orbiting the {@link Camera#look} position:\n *\n * ````javascript\n * camera.orbitYaw(20.0);\n * camera.orbitPitch(10.0);\n * ````\n *\n * First-person rotation, rotates {@link Camera#look}\n * and {@link Camera#up} about {@link Camera#eye}:\n *\n * ````javascript\n * camera.yaw(5.0);\n * camera.pitch(-10.0);\n * ````\n *\n * Panning along the Camera's local axis (ie. left/right, up/down, forward/backward):\n *\n * ````javascript\n * camera.pan([-20, 0, 10]);\n * ````\n *\n * Zoom to vary distance between {@link Camera#eye} and {@link Camera#look}:\n *\n * ````javascript\n * camera.zoom(-5); // Move five units closer\n * ````\n *\n * Get the current distance between {@link Camera#eye} and {@link Camera#look}:\n *\n * ````javascript\n * var distance = camera.eyeLookDist;\n * ````\n *\n * ## Projection\n *\n * For each projection type, the Camera has a Component to manage that projection's configuration. You can hot-switch the Camera\n * between those projection types, while updating the properties of each projection component at any time.\n *\n * ````javascript\n * camera.perspective.near = 0.4;\n * camera.perspective.fov = 45;\n * //...\n *\n * camera.ortho.near = 0.8;\n * camera.ortho.far = 1000;\n * //...\n *\n * camera.frustum.left = -1.0;\n * camera.frustum.right = 1.0;\n * camera.frustum.far = 1000.0;\n * //...\n *\n * camera.customProjection.matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n *\n * camera.projection = \"perspective\"; // Switch to perspective\n * camera.projection = \"frustum\"; // Switch to frustum\n * camera.projection = \"ortho\"; // Switch to ortho\n * camera.projection = \"customProjection\"; // Switch to custom\n * ````\n *\n * Get the projection matrix:\n *\n * ````javascript\n * var projMatrix = camera.projMatrix;\n * ````\n *\n * Listen for projection matrix updates:\n *\n * ````javascript\n * camera.on(\"projMatrix\", function(matrix) { ... });\n * ````\n *\n * ## Configuring World up direction\n *\n * We can dynamically configure the direction that we consider to be \"up\" in the World-space coordinate system.\n *\n * Set the +Y axis as World \"up\" (convention in some modeling software):\n *\n * ````javascript\n * camera.worldAxis = [\n *  1, 0, 0,    // Right\n *  0, 1, 0,    // Up\n *  0, 0,-1     // Forward\n * ];\n * ````\n *\n * Set the +Z axis as World \"up\" (convention in most CAD and BIM viewers):\n *\n * ````javascript\n * camera.worldAxis = [\n *  1, 0, 0, // Right\n *  0, 0, 1, // Up\n *  0,-1, 0  // Forward\n * ];\n * ````\n *\n * The Camera has read-only convenience properties that provide each axis individually:\n *\n * ````javascript\n * var worldRight = camera.worldRight;\n * var worldForward = camera.worldForward;\n * var worldUp = camera.worldUp;\n * ````\n *\n * ### Gimbal locking\n *\n * By default, the Camera locks yaw rotation to pivot about the World-space \"up\" axis. We can dynamically lock and unlock that at any time:\n *\n * ````javascript\n * camera.gimbalLock = false; // Yaw rotation now happens about Camera's local Y-axis\n * camera.gimbalLock = true; // Yaw rotation now happens about World's \"up\" axis\n * ````\n *\n * See: <a href=\"https://en.wikipedia.org/wiki/Gimbal_lock\">https://en.wikipedia.org/wiki/Gimbal_lock</a>\n */\nclass Camera extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Camera\";\n    }\n\n    /**\n     @constructor\n     @private\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({\n            deviceMatrix: math.mat4(),\n            hasDeviceMatrix: false, // True when deviceMatrix set to other than identity\n            matrix: math.mat4(),\n            normalMatrix: math.mat4()\n        });\n\n        this._perspective = new Perspective(this);\n        this._ortho = new Ortho(this);\n        this._frustum = new Frustum(this);\n        this._customProjection = new CustomProjection(this);\n        this._project = this._perspective;\n\n        this._eye = math.vec3([0, 0, 10.0]);\n        this._look = math.vec3([0, 0, 0]);\n        this._up = math.vec3([0, 1, 0]);\n\n        this._worldUp = math.vec3([0, 1, 0]);\n        this._worldRight = math.vec3([1, 0, 0]);\n        this._worldForward = math.vec3([0, 0, -1]);\n\n        this.deviceMatrix = cfg.deviceMatrix;\n        this.eye = cfg.eye;\n        this.look = cfg.look;\n        this.up = cfg.up;\n        this.worldAxis = cfg.worldAxis;\n        this.gimbalLock = cfg.gimbalLock;\n        this.constrainPitch = cfg.constrainPitch;\n\n        this.projection = cfg.projection;\n\n        this._perspective.on(\"matrix\", () => {\n            if (this._projectionType === \"perspective\") {\n                this.fire(\"projMatrix\", this._perspective.matrix);\n            }\n        });\n        this._ortho.on(\"matrix\", () => {\n            if (this._projectionType === \"ortho\") {\n                this.fire(\"projMatrix\", this._ortho.matrix);\n            }\n        });\n        this._frustum.on(\"matrix\", () => {\n            if (this._projectionType === \"frustum\") {\n                this.fire(\"projMatrix\", this._frustum.matrix);\n            }\n        });\n        this._customProjection.on(\"matrix\", () => {\n            if (this._projectionType === \"customProjection\") {\n                this.fire(\"projMatrix\", this._customProjection.matrix);\n            }\n        });\n    }\n\n    _update() {\n        const state = this._state;\n        // In ortho mode, build the view matrix with an eye position that's translated\n        // well back from look, so that the front clip plane doesn't unexpectedly cut\n        // the front off the view (not a problem with perspective, since objects close enough\n        // to be clipped by the front plane are usually too big to see anything of their cross-sections).\n        let eye;\n        if (this.projection === \"ortho\") {\n            math.subVec3(this._eye, this._look, eyeLookVec);\n            math.normalizeVec3(eyeLookVec, eyeLookVecNorm);\n            math.mulVec3Scalar(eyeLookVecNorm, 1000.0, eyeLookOffset);\n            math.addVec3(this._look, eyeLookOffset, offsetEye);\n            eye = offsetEye;\n        } else {\n            eye = this._eye;\n        }\n        if (state.hasDeviceMatrix) {\n            math.lookAtMat4v(eye, this._look, this._up, tempMatb);\n            math.mulMat4(state.deviceMatrix, tempMatb, state.matrix);\n            //state.matrix.set(state.deviceMatrix);\n        } else {\n            math.lookAtMat4v(eye, this._look, this._up, state.matrix);\n        }\n        math.inverseMat4(this._state.matrix, this._state.normalMatrix);\n        math.transposeMat4(this._state.normalMatrix);\n        this.glRedraw();\n        this.fire(\"matrix\", this._state.matrix);\n        this.fire(\"viewMatrix\", this._state.matrix);\n    }\n\n    /**\n     Rotates {@link Camera#eye} about {@link Camera#look}, around the {@link Camera#up} vector\n\n     @method orbitYaw\n     @param {Number} angle Angle of rotation in degrees\n     */\n    orbitYaw(angle) {\n        let lookEyeVec = math.subVec3(this._eye, this._look, tempVec3);\n        math.rotationMat4v(angle * 0.0174532925, this._gimbalLock ? this._worldUp : this._up, tempMat);\n        lookEyeVec = math.transformPoint3(tempMat, lookEyeVec, tempVec3b);\n        this.eye = math.addVec3(this._look, lookEyeVec, tempVec3c); // Set eye position as 'look' plus 'eye' vector\n        this.up = math.transformPoint3(tempMat, this._up, tempVec3d); // Rotate 'up' vector\n    }\n\n    /**\n     Rotates {@link Camera#eye} about {@link Camera#look} around the right axis (orthogonal to {@link Camera#up} and \"look\").\n\n     @method orbitPitch\n     @param {Number} angle Angle of rotation in degrees\n     */\n    orbitPitch(angle) {\n        let eye2 = math.subVec3(this._eye, this._look, tempVec3);\n        const left = math.cross3Vec3(math.normalizeVec3(eye2, tempVec3b), math.normalizeVec3(this._up, tempVec3c));\n        math.rotationMat4v(angle * 0.0174532925, left, tempMat);\n        eye2 = math.transformPoint3(tempMat, eye2, tempVec3d);\n        const up = math.transformPoint3(tempMat, this._up, tempVec3e);\n        if (this._constrainPitch) {\n            var angle = math.dotVec3(up, this._worldUp) / math.DEGTORAD;\n            if (angle < 1) {\n                return;\n            }\n        }\n        this.up = up;\n        this.eye = math.addVec3(eye2, this._look, tempVec3f);\n    }\n\n    /**\n     Rotates {@link Camera#look} about {@link Camera#eye}, around the {@link Camera#up} vector.\n\n     @method yaw\n     @param {Number} angle Angle of rotation in degrees\n     */\n    yaw(angle) {\n        let look2 = math.subVec3(this._look, this._eye, tempVec3);\n        math.rotationMat4v(angle * 0.0174532925, this._gimbalLock ? this._worldUp : this._up, tempMat);\n        look2 = math.transformPoint3(tempMat, look2, tempVec3b);\n        this.look = math.addVec3(look2, this._eye, tempVec3c);\n        if (this._gimbalLock) {\n            this.up = math.transformPoint3(tempMat, this._up, tempVec3d);\n        }\n    }\n\n    /**\n     Rotates {@link Camera#look} about {@link Camera#eye}, around the right axis (orthogonal to {@link Camera#up} and \"look\").\n\n     @method pitch\n     @param {Number} angle Angle of rotation in degrees\n     */\n    pitch(angle) {\n        let look2 = math.subVec3(this._look, this._eye, tempVec3);\n        const left = math.cross3Vec3(math.normalizeVec3(look2, tempVec3b), math.normalizeVec3(this._up, tempVec3c));\n        math.rotationMat4v(angle * 0.0174532925, left, tempMat);\n        const up = math.transformPoint3(tempMat, this._up, tempVec3f);\n        if (this._constrainPitch) {\n            var angle = math.dotVec3(up, this._worldUp) / math.DEGTORAD;\n            if (angle < 1) {\n                return;\n            }\n        }\n        this.up = up;\n        look2 = math.transformPoint3(tempMat, look2, tempVec3d);\n        this.look = math.addVec3(look2, this._eye, tempVec3e);\n    }\n\n    /**\n     Pans the camera along the camera's local X, Y and Z axis.\n\n     @method pan\n     @param pan The pan vector\n     */\n    pan(pan) {\n        const eye2 = math.subVec3(this._eye, this._look, tempVec3);\n        const vec = [0, 0, 0];\n        let v;\n        if (pan[0] !== 0) {\n            const left = math.cross3Vec3(math.normalizeVec3(eye2, []), math.normalizeVec3(this._up, tempVec3b));\n            v = math.mulVec3Scalar(left, pan[0]);\n            vec[0] += v[0];\n            vec[1] += v[1];\n            vec[2] += v[2];\n        }\n        if (pan[1] !== 0) {\n            v = math.mulVec3Scalar(math.normalizeVec3(this._up, tempVec3c), pan[1]);\n            vec[0] += v[0];\n            vec[1] += v[1];\n            vec[2] += v[2];\n        }\n        if (pan[2] !== 0) {\n            v = math.mulVec3Scalar(math.normalizeVec3(eye2, tempVec3d), pan[2]);\n            vec[0] += v[0];\n            vec[1] += v[1];\n            vec[2] += v[2];\n        }\n        this.eye = math.addVec3(this._eye, vec, tempVec3e);\n        this.look = math.addVec3(this._look, vec, tempVec3f);\n    }\n\n    /**\n     Increments/decrements zoom factor, ie. distance between {@link Camera#eye}\n     and {@link Camera#look}.\n\n     @method zoom\n     @param delta\n     */\n    zoom(delta) {\n        const vec = math.subVec3(this._eye, this._look, tempVec3);\n        const lenLook = Math.abs(math.lenVec3(vec, tempVec3b));\n        const newLenLook = Math.abs(lenLook + delta);\n        if (newLenLook < 0.5) {\n            return;\n        }\n        const dir = math.normalizeVec3(vec, tempVec3c);\n        this.eye = math.addVec3(this._look, math.mulVec3Scalar(dir, newLenLook), tempVec3d);\n    }\n\n\n    /**\n     Position of this Camera's eye.\n\n     Fires an {@link Camera#eye:event} event on change.\n\n     @property eye\n     @default [0,0,10]\n     @type Float32Array\n     */\n    set eye(value) {\n        this._eye.set(value || [0, 0, 10]);\n        this._needUpdate(0); // Ensure matrix built on next \"tick\"\n        /**\n         Fired whenever this Camera's {@link Camera#eye} property changes.\n\n         @event eye\n         @param value The property's new value\n         */\n        this.fire(\"eye\", this._eye);\n    }\n\n    get eye() {\n        return this._eye;\n    }\n\n    /**\n     Position of this Camera's point-of-interest.\n\n     Fires a {@link Camera#look:event} event on change.\n\n     @property look\n     @default [0,0,0]\n     @type Float32Array\n     */\n    set look(value) {\n        this._look.set(value || [0, 0, 0]);\n        this._needUpdate(0); // Ensure matrix built on next \"tick\"\n        /**\n         Fired whenever this Camera's {@link Camera#look} property changes.\n\n         @event look\n         @param value The property's new value\n         */\n        this.fire(\"look\", this._look);\n    }\n\n    get look() {\n        return this._look;\n    }\n\n    /**\n     Direction of this Camera's {@link Camera#up} vector.\n\n     Fires an {@link Camera#up:event} event on change.\n\n     @property up\n     @default [0,1,0]\n     @type Float32Array\n     */\n    set up(value) {\n        this._up.set(value || [0, 1, 0]);\n        this._needUpdate(0);\n        /**\n         Fired whenever this Camera's {@link Camera#up} property changes.\n\n         @event up\n         @param value The property's new value\n         */\n        this.fire(\"up\", this._up);\n    }\n\n    get up() {\n        return this._up;\n    }\n\n    /**\n     Sets an optional matrix to premultiply into {@link Camera#matrix} matrix.\n\n     This is intended to be used for stereo rendering with WebVR etc.\n\n     @property deviceMatrix\n     @type {Float32Array}\n     */\n    set deviceMatrix(matrix) {\n        this._state.deviceMatrix.set(matrix || [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n        this._state.hasDeviceMatrix = !!matrix;\n        this._needUpdate(0);\n        /**\n         Fired whenever this CustomProjection's {@link CustomProjection/matrix} property changes.\n\n         @event deviceMatrix\n         @param value The property's new value\n         */\n        this.fire(\"deviceMatrix\", this._state.deviceMatrix);\n    }\n\n    get deviceMatrix() {\n        return this._state.deviceMatrix;\n    }\n\n    /**\n     Indicates the up, right and forward axis of the World coordinate system.\n\n     Has format: ````[rightX, rightY, rightZ, upX, upY, upZ, forwardX, forwardY, forwardZ]````\n\n     @property worldAxis\n     @default [1, 0, 0, 0, 1, 0, 0, 0, 1]\n     @type Float32Array\n     */\n    set worldAxis(value) {\n        value = value || [1, 0, 0, 0, 1, 0, 0, 0, 1];\n        if (!this._worldAxis) {\n            this._worldAxis = new Float32Array(value);\n        } else {\n            this._worldAxis.set(value);\n        }\n        this._worldRight[0] = this._worldAxis[0];\n        this._worldRight[1] = this._worldAxis[1];\n        this._worldRight[2] = this._worldAxis[2];\n        this._worldUp[0] = this._worldAxis[3];\n        this._worldUp[1] = this._worldAxis[4];\n        this._worldUp[2] = this._worldAxis[5];\n        this._worldForward[0] = this._worldAxis[6];\n        this._worldForward[1] = this._worldAxis[7];\n        this._worldForward[2] = this._worldAxis[8];\n        /**\n         * Fired whenever this Camera's {@link Camera#worldAxis} property changes.\n         *\n         * @event worldAxis\n         * @param value The property's new value\n         */\n        this.fire(\"worldAxis\", this._worldAxis);\n    }\n\n    get worldAxis() {\n        return this._worldAxis;\n    }\n\n    /**\n     Direction of World-space \"up\".\n\n     @property worldUp\n     @default [0,1,0]\n     @type Float32Array\n     @final\n     */\n    get worldUp() {\n        return this._worldUp;\n    }\n\n    /**\n     Direction of World-space \"right\".\n\n     @property worldRight\n     @default [1,0,0]\n     @type Float32Array\n     @final\n     */\n    get worldRight() {\n        return this._worldRight;\n    }\n\n    /**\n     Direction of World-space \"forwards\".\n\n     @property worldForward\n     @default [0,0,-1]\n     @type Float32Array\n     @final\n     */\n    get worldForward() {\n        return this._worldForward;\n    }\n\n    /**\n     Whether to lock yaw rotation to pivot about the World-space \"up\" axis.\n\n     Fires a {@link Camera#gimbalLock:event} event on change.\n\n     @property gimbalLock\n     @default true\n     @type Boolean\n     */\n    set gimbalLock(value) {\n        this._gimbalLock = value !== false;\n        /**\n         Fired whenever this Camera's  {@link Camera#gimbalLock} property changes.\n\n         @event gimbalLock\n         @param value The property's new value\n         */\n        this.fire(\"gimbalLock\", this._gimbalLock);\n    }\n\n    get gimbalLock() {\n        return this._gimbalLock;\n    }\n\n    /**\n     Whether to prevent camera from being pitched upside down.\n\n     The camera is upside down when the angle\n     between {@link Camera#up} and {@link Camera#worldUp} is less than one degree.\n\n     Fires a {@link Camera#constrainPitch:event} event on change.\n\n     @property constrainPitch\n     @default false\n     @type Boolean\n     */\n    set constrainPitch(value) {\n        this._constrainPitch = !!value;\n        /**\n         Fired whenever this Camera's  {@link Camera#constrainPitch} property changes.\n\n         @event constrainPitch\n         @param value The property's new value\n         */\n        this.fire(\"constrainPitch\", this._constrainPitch);\n    }\n\n    get constrainPitch() {\n        return this._constrainPitch;\n    }\n\n    /**\n     Distance from \"look\" to \"eye\".\n     @property eyeLookDist\n     @type Number\n     @final\n     */\n    get eyeLookDist() {\n        return math.lenVec3(math.subVec3(this._look, this._eye, tempVec3));\n    }\n\n    /**\n     The Camera's viewing transformation matrix.\n\n     Fires a {@link Camera#matrix:event} event on change.\n\n     @property matrix\n     @type {Float32Array}\n     @final\n     @deprecated\n     */\n    get matrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        return this._state.matrix;\n    }\n\n    /**\n     The Camera's viewing transformation matrix.\n\n     Fires a {@link Camera#matrix:event} event on change.\n\n     @property viewMatrix\n     @final\n     @type {Float32Array}\n     */\n    get viewMatrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        return this._state.matrix;\n    }\n\n\n    /**\n     The Camera's viewing normal transformation matrix.\n\n     Fires a {@link Camera#matrix:event} event on change.\n\n     @property normalMatrix\n     @type {Float32Array}\n     @final\n     @deprecated\n     */\n    get normalMatrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        return this._state.normalMatrix;\n    }\n\n    /**\n     The Camera's viewing normal transformation matrix.\n\n     Fires a {@link Camera#matrix:event} event on change.\n\n     @property viewNormalMatrix\n     @final\n     @type {Float32Array}\n     */\n    get viewNormalMatrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        return this._state.normalMatrix;\n    }\n\n    /**\n     Camera's projection transformation projMatrix.\n\n     Fires a {@link Camera#projMatrix:event} event on change.\n\n     @property projMatrix\n     @final\n     @type {Float32Array}\n     */\n    get projMatrix() {\n        return this[this.projection].matrix;\n    }\n\n\n    /**\n     The perspective projection transform for this Camera.\n\n     This is used while {@link Camera#projection} equals \"perspective\".\n\n     @property perspective\n     @type Perspective\n     @final\n     */\n    get perspective() {\n        return this._perspective;\n    }\n\n    /**\n     The orthographic projection transform for this Camera.\n\n     This is used while {@link Camera#projection} equals \"ortho\".\n\n     @property ortho\n     @type Ortho\n     @final\n     */\n    get ortho() {\n        return this._ortho;\n    }\n\n\n    /**\n     The frustum projection transform for this Camera.\n\n     This is used while {@link Camera#projection} equals \"frustum\".\n\n     @property frustum\n     @type Frustum\n     @final\n     */\n    get frustum() {\n        return this._frustum;\n    }\n\n    /**\n     A custom projection transform, given as a 4x4 matrix.\n\n     This is used while {@link Camera#projection} equals \"customProjection\".\n\n     @property customProjection\n     @type CustomProjection\n     @final\n     */\n    get customProjection() {\n        return this._customProjection;\n    }\n\n    /**\n     The active projection type.\n\n     Accepted values are \"perspective\", \"ortho\", \"frustum\" and \"customProjection\".\n\n     @property projection\n     @default \"perspective\"\n     @type {String}\n     */\n    set projection(value) {\n        value = value || \"perspective\";\n        if (this._projectionType === value) {\n            return;\n        }\n        if (value === \"perspective\") {\n            this._project = this._perspective;\n        } else if (value === \"ortho\") {\n            this._project = this._ortho;\n        } else if (value === \"frustum\") {\n            this._project = this._frustum;\n        } else if (value === \"customProjection\") {\n            this._project = this._customProjection;\n        } else {\n            this.error(\"Unsupported value for 'projection': \" + value + \" defaulting to 'perspective'\");\n            this._project = this._perspective;\n            value = \"perspective\";\n        }\n        this._projectionType = value;\n        this.glRedraw();\n        this._update(); // Need to rebuild lookat matrix with full eye, look & up\n        this.fire(\"dirty\");\n    }\n\n    get projection() {\n        return this._projectionType;\n    }\n\n    /**\n     The active projection transform for this Camera.\n\n     @property project\n     @type Transform\n     @final\n     */\n    get project() {\n        return this._project;\n    }\n\n    get view() {\n        return this;\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\nexport {Camera};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/camera/Camera.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 599,
    "kind": "variable",
    "name": "tempVec3",
    "memberof": "scene/camera/Camera.js",
    "static": true,
    "longname": "scene/camera/Camera.js~tempVec3",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/Camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 600,
    "kind": "variable",
    "name": "tempVec3b",
    "memberof": "scene/camera/Camera.js",
    "static": true,
    "longname": "scene/camera/Camera.js~tempVec3b",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/Camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 601,
    "kind": "variable",
    "name": "tempVec3c",
    "memberof": "scene/camera/Camera.js",
    "static": true,
    "longname": "scene/camera/Camera.js~tempVec3c",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/Camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 602,
    "kind": "variable",
    "name": "tempVec3d",
    "memberof": "scene/camera/Camera.js",
    "static": true,
    "longname": "scene/camera/Camera.js~tempVec3d",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/Camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 603,
    "kind": "variable",
    "name": "tempVec3e",
    "memberof": "scene/camera/Camera.js",
    "static": true,
    "longname": "scene/camera/Camera.js~tempVec3e",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/Camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 604,
    "kind": "variable",
    "name": "tempVec3f",
    "memberof": "scene/camera/Camera.js",
    "static": true,
    "longname": "scene/camera/Camera.js~tempVec3f",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/Camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 605,
    "kind": "variable",
    "name": "tempMat",
    "memberof": "scene/camera/Camera.js",
    "static": true,
    "longname": "scene/camera/Camera.js~tempMat",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/Camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 606,
    "kind": "variable",
    "name": "tempMatb",
    "memberof": "scene/camera/Camera.js",
    "static": true,
    "longname": "scene/camera/Camera.js~tempMatb",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/Camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 607,
    "kind": "variable",
    "name": "eyeLookVec",
    "memberof": "scene/camera/Camera.js",
    "static": true,
    "longname": "scene/camera/Camera.js~eyeLookVec",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/Camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 608,
    "kind": "variable",
    "name": "eyeLookVecNorm",
    "memberof": "scene/camera/Camera.js",
    "static": true,
    "longname": "scene/camera/Camera.js~eyeLookVecNorm",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/Camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 609,
    "kind": "variable",
    "name": "eyeLookOffset",
    "memberof": "scene/camera/Camera.js",
    "static": true,
    "longname": "scene/camera/Camera.js~eyeLookOffset",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/Camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 610,
    "kind": "variable",
    "name": "offsetEye",
    "memberof": "scene/camera/Camera.js",
    "static": true,
    "longname": "scene/camera/Camera.js~offsetEye",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/Camera.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 611,
    "kind": "class",
    "name": "Camera",
    "memberof": "scene/camera/Camera.js",
    "static": true,
    "longname": "scene/camera/Camera.js~Camera",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/camera/Camera.js",
    "importStyle": "{Camera}",
    "description": "Manages viewing and projection transforms for its {@link Scene}.\n\n* One Camera per {@link Scene}\n* Located at {@link Scene#camera}\n* Also located for convenience at {@link Viewer#camera}\n* Controls viewing and projection transforms\n* Has methods to pan, zoom and orbit (or first-person rotation)\n* Dynamically configurable World-space \"up\" direction\n* Switchable between perspective, frustum and orthographic projections\n* Switchable gimbal lock\n* Can be \"flown\" to look at targets using a {@link CameraFlightAnimation}\n* Can be animated along a path using a {@link CameraPathAnimation}\n\n## Getting the Camera\n\nThere is exactly one Camera per {@link Scene}:\n\n````javascript\nvar camera = myViewer.scene.camera;\n````\nCan also be found on the {@link Viewer} for convenience:\n\n````javascript\nvar camera = myViewer.camera;\n````\n\n## Moving around\n\nGet and set the Camera's absolute position at any time via its {@link Camera#eye}, {@link Camera#look} and {@link Camera#up} properties:\n\n````javascript\ncamera.eye = [-10,0,0];\ncamera.look = [-10,0,0];\ncamera.up = [0,1,0];\n````\n\nGet the view matrix:\n\n````javascript\nvar viewMatrix = camera.viewMatrix;\nvar viewNormalMatrix = camera.normalMatrix;\n````\n\nListen for view matrix updates:\n\n````javascript\ncamera.on(\"matrix\", function(matrix) { ... });\n````\n\nOrbiting the {@link Camera#look} position:\n\n````javascript\ncamera.orbitYaw(20.0);\ncamera.orbitPitch(10.0);\n````\n\nFirst-person rotation, rotates {@link Camera#look}\nand {@link Camera#up} about {@link Camera#eye}:\n\n````javascript\ncamera.yaw(5.0);\ncamera.pitch(-10.0);\n````\n\nPanning along the Camera's local axis (ie. left/right, up/down, forward/backward):\n\n````javascript\ncamera.pan([-20, 0, 10]);\n````\n\nZoom to vary distance between {@link Camera#eye} and {@link Camera#look}:\n\n````javascript\ncamera.zoom(-5); // Move five units closer\n````\n\nGet the current distance between {@link Camera#eye} and {@link Camera#look}:\n\n````javascript\nvar distance = camera.eyeLookDist;\n````\n\n## Projection\n\nFor each projection type, the Camera has a Component to manage that projection's configuration. You can hot-switch the Camera\nbetween those projection types, while updating the properties of each projection component at any time.\n\n````javascript\ncamera.perspective.near = 0.4;\ncamera.perspective.fov = 45;\n//...\n\ncamera.ortho.near = 0.8;\ncamera.ortho.far = 1000;\n//...\n\ncamera.frustum.left = -1.0;\ncamera.frustum.right = 1.0;\ncamera.frustum.far = 1000.0;\n//...\n\ncamera.customProjection.matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\n\ncamera.projection = \"perspective\"; // Switch to perspective\ncamera.projection = \"frustum\"; // Switch to frustum\ncamera.projection = \"ortho\"; // Switch to ortho\ncamera.projection = \"customProjection\"; // Switch to custom\n````\n\nGet the projection matrix:\n\n````javascript\nvar projMatrix = camera.projMatrix;\n````\n\nListen for projection matrix updates:\n\n````javascript\ncamera.on(\"projMatrix\", function(matrix) { ... });\n````\n\n## Configuring World up direction\n\nWe can dynamically configure the direction that we consider to be \"up\" in the World-space coordinate system.\n\nSet the +Y axis as World \"up\" (convention in some modeling software):\n\n````javascript\ncamera.worldAxis = [\n 1, 0, 0,    // Right\n 0, 1, 0,    // Up\n 0, 0,-1     // Forward\n];\n````\n\nSet the +Z axis as World \"up\" (convention in most CAD and BIM viewers):\n\n````javascript\ncamera.worldAxis = [\n 1, 0, 0, // Right\n 0, 0, 1, // Up\n 0,-1, 0  // Forward\n];\n````\n\nThe Camera has read-only convenience properties that provide each axis individually:\n\n````javascript\nvar worldRight = camera.worldRight;\nvar worldForward = camera.worldForward;\nvar worldUp = camera.worldUp;\n````\n\n### Gimbal locking\n\nBy default, the Camera locks yaw rotation to pivot about the World-space \"up\" axis. We can dynamically lock and unlock that at any time:\n\n````javascript\ncamera.gimbalLock = false; // Yaw rotation now happens about Camera's local Y-axis\ncamera.gimbalLock = true; // Yaw rotation now happens about World's \"up\" axis\n````\n\nSee: <a href=\"https://en.wikipedia.org/wiki/Gimbal_lock\">https://en.wikipedia.org/wiki/Gimbal_lock</a>",
    "lineNumber": 188,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 612,
    "kind": "get",
    "name": "type",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 199,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 613,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 207,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 614,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_state",
    "access": "private",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 615,
    "kind": "member",
    "name": "_perspective",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_perspective",
    "access": "private",
    "description": null,
    "lineNumber": 218,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 616,
    "kind": "member",
    "name": "_ortho",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_ortho",
    "access": "private",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 617,
    "kind": "member",
    "name": "_frustum",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_frustum",
    "access": "private",
    "description": null,
    "lineNumber": 220,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 618,
    "kind": "member",
    "name": "_customProjection",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_customProjection",
    "access": "private",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 619,
    "kind": "member",
    "name": "_project",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_project",
    "access": "private",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 620,
    "kind": "member",
    "name": "_eye",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_eye",
    "access": "private",
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 621,
    "kind": "member",
    "name": "_look",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_look",
    "access": "private",
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 622,
    "kind": "member",
    "name": "_up",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_up",
    "access": "private",
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 623,
    "kind": "member",
    "name": "_worldUp",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_worldUp",
    "access": "private",
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 624,
    "kind": "member",
    "name": "_worldRight",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_worldRight",
    "access": "private",
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 625,
    "kind": "member",
    "name": "_worldForward",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_worldForward",
    "access": "private",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 634,
    "kind": "method",
    "name": "_update",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_update",
    "access": "private",
    "description": null,
    "lineNumber": 264,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 635,
    "kind": "method",
    "name": "orbitYaw",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#orbitYaw",
    "access": "public",
    "description": "Rotates {@link Camera#eye} about {@link Camera#look}, around the {@link Camera#up} vector",
    "lineNumber": 300,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "orbitYaw"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle of rotation in degrees"
      }
    ],
    "return": null
  },
  {
    "__docId__": 638,
    "kind": "method",
    "name": "orbitPitch",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#orbitPitch",
    "access": "public",
    "description": "Rotates {@link Camera#eye} about {@link Camera#look} around the right axis (orthogonal to {@link Camera#up} and \"look\").",
    "lineNumber": 314,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "orbitPitch"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle of rotation in degrees"
      }
    ],
    "return": null
  },
  {
    "__docId__": 641,
    "kind": "method",
    "name": "yaw",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#yaw",
    "access": "public",
    "description": "Rotates {@link Camera#look} about {@link Camera#eye}, around the {@link Camera#up} vector.",
    "lineNumber": 336,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "yaw"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle of rotation in degrees"
      }
    ],
    "return": null
  },
  {
    "__docId__": 644,
    "kind": "method",
    "name": "pitch",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#pitch",
    "access": "public",
    "description": "Rotates {@link Camera#look} about {@link Camera#eye}, around the right axis (orthogonal to {@link Camera#up} and \"look\").",
    "lineNumber": 352,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "pitch"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle of rotation in degrees"
      }
    ],
    "return": null
  },
  {
    "__docId__": 647,
    "kind": "method",
    "name": "pan",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#pan",
    "access": "public",
    "description": "Pans the camera along the camera's local X, Y and Z axis.",
    "lineNumber": 374,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "pan"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pan",
        "description": "The pan vector"
      }
    ],
    "return": null
  },
  {
    "__docId__": 650,
    "kind": "method",
    "name": "zoom",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#zoom",
    "access": "public",
    "description": "Increments/decrements zoom factor, ie. distance between {@link Camera#eye}\nand {@link Camera#look}.",
    "lineNumber": 408,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "zoom"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "delta",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 652,
    "kind": "set",
    "name": "eye",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#eye",
    "access": "public",
    "description": "Position of this Camera's eye.\n\nFires an {@link Camera#eye:event} event on change.",
    "lineNumber": 429,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0,0,10]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "eye",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 653,
    "kind": "get",
    "name": "eye",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#eye",
    "access": "public",
    "description": null,
    "lineNumber": 441,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 654,
    "kind": "set",
    "name": "look",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#look",
    "access": "public",
    "description": "Position of this Camera's point-of-interest.\n\nFires a {@link Camera#look:event} event on change.",
    "lineNumber": 454,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0,0,0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "look",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 655,
    "kind": "get",
    "name": "look",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#look",
    "access": "public",
    "description": null,
    "lineNumber": 466,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 656,
    "kind": "set",
    "name": "up",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#up",
    "access": "public",
    "description": "Direction of this Camera's {@link Camera#up} vector.\n\nFires an {@link Camera#up:event} event on change.",
    "lineNumber": 479,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0,1,0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "up",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 657,
    "kind": "get",
    "name": "up",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#up",
    "access": "public",
    "description": null,
    "lineNumber": 491,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 658,
    "kind": "set",
    "name": "deviceMatrix",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#deviceMatrix",
    "access": "public",
    "description": "Sets an optional matrix to premultiply into {@link Camera#matrix} matrix.\n\nThis is intended to be used for stereo rendering with WebVR etc.",
    "lineNumber": 503,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "deviceMatrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 659,
    "kind": "get",
    "name": "deviceMatrix",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#deviceMatrix",
    "access": "public",
    "description": null,
    "lineNumber": 516,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 660,
    "kind": "set",
    "name": "worldAxis",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#worldAxis",
    "access": "public",
    "description": "Indicates the up, right and forward axis of the World coordinate system.\n\nHas format: ````[rightX, rightY, rightZ, upX, upY, upZ, forwardX, forwardY, forwardZ]````",
    "lineNumber": 529,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1, 0, 0, 0, 1, 0, 0, 0, 1]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "worldAxis",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 661,
    "kind": "member",
    "name": "_worldAxis",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_worldAxis",
    "access": "private",
    "description": null,
    "lineNumber": 532,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 662,
    "kind": "get",
    "name": "worldAxis",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#worldAxis",
    "access": "public",
    "description": null,
    "lineNumber": 554,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 663,
    "kind": "get",
    "name": "worldUp",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#worldUp",
    "access": "public",
    "description": "Direction of World-space \"up\".",
    "lineNumber": 566,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0,1,0]"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "worldUp",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 664,
    "kind": "get",
    "name": "worldRight",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#worldRight",
    "access": "public",
    "description": "Direction of World-space \"right\".",
    "lineNumber": 578,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1,0,0]"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "worldRight",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 665,
    "kind": "get",
    "name": "worldForward",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#worldForward",
    "access": "public",
    "description": "Direction of World-space \"forwards\".",
    "lineNumber": 590,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0,0,-1]"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "worldForward",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 666,
    "kind": "set",
    "name": "gimbalLock",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#gimbalLock",
    "access": "public",
    "description": "Whether to lock yaw rotation to pivot about the World-space \"up\" axis.\n\nFires a {@link Camera#gimbalLock:event} event on change.",
    "lineNumber": 603,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "gimbalLock",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 667,
    "kind": "member",
    "name": "_gimbalLock",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_gimbalLock",
    "access": "private",
    "description": null,
    "lineNumber": 604,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 668,
    "kind": "get",
    "name": "gimbalLock",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#gimbalLock",
    "access": "public",
    "description": null,
    "lineNumber": 614,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 669,
    "kind": "set",
    "name": "constrainPitch",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#constrainPitch",
    "access": "public",
    "description": "Whether to prevent camera from being pitched upside down.\n\nThe camera is upside down when the angle\nbetween {@link Camera#up} and {@link Camera#worldUp} is less than one degree.\n\nFires a {@link Camera#constrainPitch:event} event on change.",
    "lineNumber": 630,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "constrainPitch",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 670,
    "kind": "member",
    "name": "_constrainPitch",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_constrainPitch",
    "access": "private",
    "description": null,
    "lineNumber": 631,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 671,
    "kind": "get",
    "name": "constrainPitch",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#constrainPitch",
    "access": "public",
    "description": null,
    "lineNumber": 641,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 672,
    "kind": "get",
    "name": "eyeLookDist",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#eyeLookDist",
    "access": "public",
    "description": "Distance from \"look\" to \"eye\".",
    "lineNumber": 651,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "eyeLookDist",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 673,
    "kind": "get",
    "name": "matrix",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#matrix",
    "access": "public",
    "description": "The Camera's viewing transformation matrix.\n\nFires a {@link Camera#matrix:event} event on change.",
    "lineNumber": 665,
    "deprecated": true,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 674,
    "kind": "get",
    "name": "viewMatrix",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#viewMatrix",
    "access": "public",
    "description": "The Camera's viewing transformation matrix.\n\nFires a {@link Camera#matrix:event} event on change.",
    "lineNumber": 681,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "viewMatrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 675,
    "kind": "get",
    "name": "normalMatrix",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#normalMatrix",
    "access": "public",
    "description": "The Camera's viewing normal transformation matrix.\n\nFires a {@link Camera#matrix:event} event on change.",
    "lineNumber": 699,
    "deprecated": true,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "normalMatrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 676,
    "kind": "get",
    "name": "viewNormalMatrix",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#viewNormalMatrix",
    "access": "public",
    "description": "The Camera's viewing normal transformation matrix.\n\nFires a {@link Camera#matrix:event} event on change.",
    "lineNumber": 715,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "viewNormalMatrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 677,
    "kind": "get",
    "name": "projMatrix",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#projMatrix",
    "access": "public",
    "description": "Camera's projection transformation projMatrix.\n\nFires a {@link Camera#projMatrix:event} event on change.",
    "lineNumber": 731,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "projMatrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 678,
    "kind": "get",
    "name": "perspective",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#perspective",
    "access": "public",
    "description": "The perspective projection transform for this Camera.\n\nThis is used while {@link Camera#projection} equals \"perspective\".",
    "lineNumber": 745,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "perspective",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 679,
    "kind": "get",
    "name": "ortho",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#ortho",
    "access": "public",
    "description": "The orthographic projection transform for this Camera.\n\nThis is used while {@link Camera#projection} equals \"ortho\".",
    "lineNumber": 758,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ortho",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 680,
    "kind": "get",
    "name": "frustum",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#frustum",
    "access": "public",
    "description": "The frustum projection transform for this Camera.\n\nThis is used while {@link Camera#projection} equals \"frustum\".",
    "lineNumber": 772,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "frustum",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 681,
    "kind": "get",
    "name": "customProjection",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#customProjection",
    "access": "public",
    "description": "A custom projection transform, given as a 4x4 matrix.\n\nThis is used while {@link Camera#projection} equals \"customProjection\".",
    "lineNumber": 785,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "customProjection",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 682,
    "kind": "set",
    "name": "projection",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#projection",
    "access": "public",
    "description": "The active projection type.\n\nAccepted values are \"perspective\", \"ortho\", \"frustum\" and \"customProjection\".",
    "lineNumber": 798,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"perspective\""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "projection",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 688,
    "kind": "member",
    "name": "_projectionType",
    "memberof": "scene/camera/Camera.js~Camera",
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#_projectionType",
    "access": "private",
    "description": null,
    "lineNumber": 816,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 689,
    "kind": "get",
    "name": "projection",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#projection",
    "access": "public",
    "description": null,
    "lineNumber": 822,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 690,
    "kind": "get",
    "name": "project",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#project",
    "access": "public",
    "description": "The active projection transform for this Camera.",
    "lineNumber": 833,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "project",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 691,
    "kind": "get",
    "name": "view",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#view",
    "access": "public",
    "description": null,
    "lineNumber": 837,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 692,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/camera/Camera.js~Camera",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Camera.js~Camera#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 841,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 693,
    "kind": "file",
    "name": "scene/camera/CameraControl.js",
    "content": "import {math} from '../math/math.js';\nimport {Component} from '../Component.js';\nimport {Mesh} from '../mesh/Mesh.js';\nimport {AABBGeometry} from '../geometry/AABBGeometry.js';\nimport {PhongMaterial} from '../materials/PhongMaterial.js';\nimport {CameraFlightAnimation} from './CameraFlightAnimation.js';\n\n/**\n * @desc Controls a {@link Camera} with keyboard, mouse and touch input.\n *\n * Located for convenience at {@link Viewer#cameraControl}.\n *\n * Fires these events:\n *\n * * \"hover\" - Hover enters a new object\n * * \"hoverSurface\" - Hover continues over an object surface - fired continuously as mouse moves over an object\n * * \"hoverLeave\"  - Hover has left the last object we were hovering over\n * * \"hoverOff\" - Hover continues over empty space - fired continuously as mouse moves over nothing\n * * \"picked\" - Clicked or tapped object\n * * \"pickedSurface\" -  Clicked or tapped object, with event containing surface intersection details\n * * \"doublePicked\" - Double-clicked or double-tapped object\n * * \"doublePickedSurface\" - Double-clicked or double-tapped object, with event containing surface intersection details\n * * \"pickedNothing\" - Clicked or tapped, but not on any objects\n * * \"doublePickedNothing\" - Double-clicked or double-tapped, but not on any objects\n */\nclass CameraControl extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"CameraControl\";\n    }\n\n    /**\n     * @private\n     * @constructor\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        const self = this;\n\n        this._boundaryHelper = new Mesh(this, {\n            geometry: new AABBGeometry(this),\n            material: new PhongMaterial(this, {\n                diffuse: [0, 0, 0],\n                ambient: [0, 0, 0],\n                specular: [0, 0, 0],\n                emissive: [1.0, 1.0, 0.6],\n                lineWidth: 4\n            }),\n            visible: false,\n            collidable: false\n        });\n\n        this._pivoter = new (function () { // Pivots the Camera around an arbitrary World-space position\n\n            // Pivot math by: http://www.derschmale.com/\n\n            const scene = self.scene;\n            const camera = scene.camera;\n            const canvas = scene.canvas;\n            const pivotPoint = new Float32Array(3);\n            let cameraOffset;\n            let azimuth = 0;\n            let polar = 0;\n            let radius = 0;\n            let pivoting = false; // True while pivoting\n\n            const spot = document.createElement(\"div\");\n            spot.innerText = \" \";\n            spot.style.color = \"#ffffff\";\n            spot.style.position = \"absolute\";\n            spot.style.width = \"25px\";\n            spot.style.height = \"25px\";\n            spot.style.left = \"0px\";\n            spot.style.top = \"0px\";\n            spot.style[\"border-radius\"] = \"15px\";\n            spot.style[\"border\"] = \"2px solid #ffffff\";\n            spot.style[\"background\"] = \"black\";\n            spot.style.visibility = \"hidden\";\n            spot.style[\"box-shadow\"] = \"5px 5px 15px 1px #000000\";\n            spot.style[\"z-index\"] = 0;\n            spot.style[\"pointer-events\"] = \"none\";\n            document.body.appendChild(spot);\n\n            (function () {\n                const viewPos = math.vec4();\n                const projPos = math.vec4();\n                const canvasPos = math.vec2();\n                let distDirty = true;\n                camera.on(\"viewMatrix\", function () {\n                    distDirty = true;\n                });\n                camera.on(\"projMatrix\", function () {\n                    distDirty = true;\n                });\n                scene.on(\"tick\", function () {\n                    if (pivoting && distDirty) {\n                        math.transformPoint3(camera.viewMatrix, pivotPoint, viewPos);\n                        viewPos[3] = 1;\n                        math.transformPoint4(camera.projMatrix, viewPos, projPos);\n                        const aabb = canvas.boundary;\n                        canvasPos[0] = Math.floor((1 + projPos[0] / projPos[3]) * aabb[2] / 2);\n                        canvasPos[1] = Math.floor((1 - projPos[1] / projPos[3]) * aabb[3] / 2);\n                        const canvasElem = canvas.canvas;\n                        const rect = canvasElem.getBoundingClientRect();\n                        spot.style.left = (Math.floor(rect.left + canvasPos[0]) - 12) + \"px\";\n                        spot.style.top = (Math.floor(rect.top + canvasPos[1]) - 12) + \"px\";\n                        spot.style.visibility = \"visible\";\n                        distDirty = false;\n                    }\n                });\n            })();\n\n            this.startPivot = function (worldPos) {\n                if (worldPos) { // Use last pivotPoint by default\n                    pivotPoint.set(worldPos);\n                }\n                let lookat = math.lookAtMat4v(camera.eye, camera.look, camera.worldUp);\n                cameraOffset = math.transformPoint3(lookat, pivotPoint);\n                cameraOffset[2] += math.distVec3(camera.eye, pivotPoint);\n                lookat = math.inverseMat4(lookat);\n                const offset = math.transformVec3(lookat, cameraOffset);\n                const diff = math.vec3();\n                math.subVec3(camera.eye, pivotPoint, diff);\n                math.addVec3(diff, offset);\n                if (camera.worldUp[2] === 1) {\n                    const t = diff[1];\n                    diff[1] = diff[2];\n                    diff[2] = t;\n                }\n                radius = math.lenVec3(diff);\n                polar = Math.acos(diff[1] / radius);\n                azimuth = Math.atan2(diff[0], diff[2]);\n                pivoting = true;\n            };\n\n            this.getPivoting = function () {\n                return pivoting;\n            };\n\n            this.getPivotPos = function () {\n                return pivotPoint;\n            };\n\n            this.continuePivot = function (yawInc, pitchInc) {\n                if (!pivoting) {\n                    return;\n                }\n                if (yawInc === 0 && pitchInc === 0) {\n                    return;\n                }\n                if (camera.worldUp[2] === 1) {\n                    dx = -dx;\n                }\n                var dx = -yawInc;\n                const dy = -pitchInc;\n                azimuth += -dx * .01;\n                polar += dy * .01;\n                polar = math.clamp(polar, .001, Math.PI - .001);\n                const pos = [\n                    radius * Math.sin(polar) * Math.sin(azimuth),\n                    radius * Math.cos(polar),\n                    radius * Math.sin(polar) * Math.cos(azimuth)\n                ];\n                if (camera.worldUp[2] === 1) {\n                    const t = pos[1];\n                    pos[1] = pos[2];\n                    pos[2] = t;\n                }\n                // Preserve the eye->look distance, since in xeokit \"look\" is the point-of-interest, not the direction vector.\n                const eyeLookLen = math.lenVec3(math.subVec3(camera.look, camera.eye, math.vec3()));\n                math.addVec3(pos, pivotPoint);\n                let lookat = math.lookAtMat4v(pos, pivotPoint, camera.worldUp);\n                lookat = math.inverseMat4(lookat);\n                const offset = math.transformVec3(lookat, cameraOffset);\n                lookat[12] -= offset[0];\n                lookat[13] -= offset[1];\n                lookat[14] -= offset[2];\n                const zAxis = [lookat[8], lookat[9], lookat[10]];\n                camera.eye = [lookat[12], lookat[13], lookat[14]];\n                math.subVec3(camera.eye, math.mulVec3Scalar(zAxis, eyeLookLen), camera.look);\n                camera.up = [lookat[4], lookat[5], lookat[6]];\n                spot.style.visibility = \"visible\";\n            };\n\n            this.endPivot = function () {\n                spot.style.visibility = \"hidden\";\n                pivoting = false;\n            };\n\n        })();\n\n        this._cameraFlight = new CameraFlightAnimation(this, {\n            duration: 0.5\n        });\n\n        this.firstPerson = cfg.firstPerson;\n        this.walking = cfg.walking;\n        this.keyboardLayout = cfg.keyboardLayout;\n        this.doublePickFlyTo = cfg.doublePickFlyTo;\n        this.active = cfg.active;\n        this.pivoting = cfg.pivoting;\n        this.panToPointer = cfg.panToPointer;\n        this.panToPivot = cfg.panToPivot;\n        this.inertia = cfg.inertia;\n\n        this._initEvents(); // Set up all the mouse/touch/kb handlers\n    }\n\n    /**\n     Indicates whether this CameraControl is active or not.\n\n     @property active\n     @default true\n     @type Boolean\n     */\n    set active(value) {\n        this._active = value !== false;\n    }\n\n    get active() {\n        return this._active;\n    }\n\n    /**\n     When true, clicking on a {@link Mesh} and dragging will pivot\n     the {@link Camera} about the picked point on the Mesh's surface.\n\n     @property pivoting\n     @default false\n     @type Boolean\n     */\n    set pivoting(value) {\n        this._pivoting = !!value;\n    }\n\n    get pivoting() {\n        return this._pivoting;\n    }\n\n    /**\n     When true, mouse wheel when mouse is over a {@link Mesh} will zoom\n     the {@link Camera} towards the hovered point on the Mesh's surface.\n\n     @property panToPointer\n     @default false\n     @type Boolean\n     */\n    set panToPointer(value) {\n        this._panToPointer = !!value;\n        if (this._panToPointer) {\n            this._panToPivot = false;\n        }\n    }\n\n    get panToPointer() {\n        return this._panToPointer;\n    }\n\n    /**\n     When true, mouse wheel when mouse is over a {@link Mesh} will zoom\n     the {@link Camera} towards the pivot point.\n\n     @property panToPivot\n     @default false\n     @type Boolean\n     */\n    set panToPivot(value) {\n        this._panToPivot = !!value;\n        if (this._panToPivot) {\n            this._panToPointer = false;\n        }\n    }\n\n    get panToPivot() {\n        return this._panToPivot;\n    }\n\n    /**\n     Indicates whether this CameraControl is in \"first person\" mode.\n\n     In \"first person\" mode (disabled by default) the look position rotates about the eye position. Otherwise,\n     the eye rotates about the look.\n\n     @property firstPerson\n     @default false\n     @type Boolean\n     */\n    set firstPerson(value) {\n        this._firstPerson = !!value;\n    }\n\n    get firstPerson() {\n        return this._firstPerson;\n    }\n\n    /**\n     Indicates whether this CameraControl is in \"walking\" mode.\n\n     When set true, this constrains eye movement to the horizontal X-Z plane. When doing a walkthrough,\n     this is useful to allow us to look upwards or downwards as we move, while keeping us moving in the\n     horizontal plane.\n\n     This only has an effect when also in \"first person\" mode.\n\n     @property walking\n     @default false\n     @type Boolean\n     */\n    set walking(value) {\n        this._walking = !!value;\n    }\n\n    get walking() {\n        return this._walking;\n    }\n\n    /**\n     * TODO\n     *\n     *\n     * @property doublePickFlyTo\n     * @default true\n     * @type Boolean\n     */\n    set doublePickFlyTo(value) {\n        this._doublePickFlyTo = value !== false;\n    }\n\n    get doublePickFlyTo() {\n        return this._doublePickFlyTo;\n    }\n\n    /**\n     Factor in range [0..1] indicating how much the camera keeps moving after you finish\n     panning or rotating it.\n\n     A value of 0.0 causes it to immediately stop, 0.5 causes its movement to decay 50% on each tick,\n     while 1.0 causes no decay, allowing it continue moving, by the current rate of pan or rotation.\n\n     You may choose an inertia of zero when you want be able to precisely position or rotate the camera,\n     without interference from inertia. ero inertia can also mean that less frames are rendered while\n     you are positioning the camera.\n\n     @property inertia\n     @default 0.5\n     @type Number\n     */\n    set inertia(value) {\n        this._inertia = value === undefined ? 0.5 : value;\n    }\n\n    get inertia() {\n        return this._inertia;\n    }\n\n    /**\n     * TODO\n     *\n     * @property keyboardLayout\n     * @default \"qwerty\"\n     * @type String\n     */\n    set keyboardLayout(value) {\n        this._keyboardLayout = value || \"qwerty\";\n    }\n\n    get keyboardLayout() {\n        return this._keyboardLayout;\n    }\n\n    _initEvents() {\n\n        const self = this;\n        const scene = this.scene;\n        const input = scene.input;\n        const camera = scene.camera;\n        const canvas = this.scene.canvas.canvas;\n        let over = false;\n        const mouseHoverDelay = 500;\n        const mouseOrbitRate = 0.4;\n        const mousePanRate = 0.4;\n        const mouseZoomRate = 0.8;\n        const mouseWheelPanRate = 0.4;\n        const keyboardOrbitRate = .02;\n        const keyboardPanRate = .02;\n        const keyboardZoomRate = .02;\n        const touchRotateRate = 0.3;\n        const touchPanRate = 0.2;\n        const touchZoomRate = 0.05;\n\n        canvas.oncontextmenu = function (e) {\n            e.preventDefault();\n        };\n\n        const getCanvasPosFromEvent = function (event, canvasPos) {\n            if (!event) {\n                event = window.event;\n                canvasPos[0] = event.x;\n                canvasPos[1] = event.y;\n            } else {\n                let element = event.target;\n                let totalOffsetLeft = 0;\n                let totalOffsetTop = 0;\n                while (element.offsetParent) {\n                    totalOffsetLeft += element.offsetLeft;\n                    totalOffsetTop += element.offsetTop;\n                    element = element.offsetParent;\n                }\n                canvasPos[0] = event.pageX - totalOffsetLeft;\n                canvasPos[1] = event.pageY - totalOffsetTop;\n            }\n            return canvasPos;\n        };\n\n        const pickCursorPos = [0, 0];\n        let needPickMesh = false;\n        let needPickSurface = false;\n        let lastPickedMeshId;\n        let hit;\n        let picked = false;\n        let pickedSurface = false;\n\n        function updatePick() {\n            if (!needPickMesh && !needPickSurface) {\n                return;\n            }\n            picked = false;\n            pickedSurface = false;\n            if (needPickSurface || self.hasSubs(\"hoverSurface\")) {\n                hit = scene.pick({\n                    pickSurface: true,\n                    canvasPos: pickCursorPos\n                });\n            } else { // needPickMesh == true\n                hit = scene.pick({\n                    canvasPos: pickCursorPos\n                });\n            }\n            if (hit) {\n                picked = true;\n                const pickedMeshId = hit.mesh.id;\n                if (lastPickedMeshId !== pickedMeshId) {\n                    if (lastPickedMeshId !== undefined) {\n\n                        /**\n                         * Fired whenever the pointer no longer hovers over an {@link Mesh}.\n                         * @event hoverOut\n                         * @param mesh The Mesh\n                         */\n                        self.fire(\"hoverOut\", {\n                            mesh: scene.components[lastPickedMeshId]\n                        });\n                    }\n\n                    /**\n                     * Fired when the pointer is over a new {@link Mesh}.\n                     * @event hoverEnter\n                     * @param hit A pick hit result containing the ID of the Mesh - see {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.\n                     */\n                    self.fire(\"hoverEnter\", hit);\n                    lastPickedMeshId = pickedMeshId;\n                }\n                /**\n                 * Fired continuously while the pointer is moving while hovering over an {@link Mesh}.\n                 * @event hover\n                 * @param hit A pick hit result containing the ID of the Mesh - see {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.\n                 */\n                self.fire(\"hover\", hit);\n                if (hit.worldPos) {\n                    pickedSurface = true;\n\n                    /**\n                     * Fired while the pointer hovers over the surface of an {@link Mesh}.\n                     *\n                     * This event provides 3D information about the point on the surface that the pointer is\n                     * hovering over.\n                     *\n                     * @event hoverSurface\n                     * @param hit A surface pick hit result, containing the ID of the Mesh and 3D info on the\n                     * surface position - see {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.\n                     */\n                    self.fire(\"hoverSurface\", hit);\n                }\n            } else {\n                if (lastPickedMeshId !== undefined) {\n                    /**\n                     * Fired whenever the pointer no longer hovers over an {@link Mesh}.\n                     * @event hoverOut\n                     * @param mesh The Mesh\n                     */\n                    self.fire(\"hoverOut\", {\n                        mesh: scene.components[lastPickedMeshId]\n                    });\n                    lastPickedMeshId = undefined;\n                }\n                /**\n                 * Fired continuously while the pointer is moving but not hovering over anything.\n                 *\n                 * @event hoverOff\n                 */\n                self.fire(\"hoverOff\", {\n                    canvasPos: pickCursorPos\n                });\n            }\n            needPickMesh = false;\n            needPickSurface = false;\n        }\n\n        scene.on(\"tick\", updatePick);\n\n        //------------------------------------------------------------------------------------\n        // Mouse, touch and keyboard camera control\n        //------------------------------------------------------------------------------------\n\n        (function () {\n\n            let rotateVx = 0;\n            let rotateVy = 0;\n            let panVx = 0;\n            let panVy = 0;\n            let panVz = 0;\n            let vZoom = 0;\n            const mousePos = math.vec2();\n            let panToMouse = false;\n\n            let ctrlDown = false;\n            let altDown = false;\n            let shiftDown = false;\n            const keyDown = {};\n\n            const EPSILON = 0.001;\n\n            const getEyeLookDist = (function () {\n                const vec = new Float32Array(3);\n                return function () {\n                    return math.lenVec3(math.subVec3(camera.look, camera.eye, vec));\n                };\n            })();\n\n            const getInverseProjectMat = (function () {\n                let projMatDirty = true;\n                camera.on(\"projMatrix\", function () {\n                    projMatDirty = true;\n                });\n                const inverseProjectMat = math.mat4();\n                return function () {\n                    if (projMatDirty) {\n                        math.inverseMat4(camera.projMatrix, inverseProjectMat);\n                    }\n                    return inverseProjectMat;\n                }\n            })();\n\n            const getTransposedProjectMat = (function () {\n                let projMatDirty = true;\n                camera.on(\"projMatrix\", function () {\n                    projMatDirty = true;\n                });\n                const transposedProjectMat = math.mat4();\n                return function () {\n                    if (projMatDirty) {\n                        math.transposeMat4(camera.projMatrix, transposedProjectMat);\n                    }\n                    return transposedProjectMat;\n                }\n            })();\n\n            const getInverseViewMat = (function () {\n                let viewMatDirty = true;\n                camera.on(\"viewMatrix\", function () {\n                    viewMatDirty = true;\n                });\n                const inverseViewMat = math.mat4();\n                return function () {\n                    if (viewMatDirty) {\n                        math.inverseMat4(camera.viewMatrix, inverseViewMat);\n                    }\n                    return inverseViewMat;\n                }\n            })();\n\n            const getSceneDiagSize = (function () {\n                let sceneSizeDirty = true;\n                let diag = 1; // Just in case\n                scene.on(\"boundary\", function () {\n                    sceneSizeDirty = true;\n                });\n                return function () {\n                    if (sceneSizeDirty) {\n                        diag = math.getAABB3Diag(scene.aabb);\n                    }\n                    return diag;\n                };\n            })();\n\n            const panToMousePos = (function () {\n\n                const cp = math.vec4();\n                const viewPos = math.vec4();\n                const worldPos = math.vec4();\n                const eyeCursorVec = math.vec3();\n\n                const unproject = function (inverseProjMat, inverseViewMat, mousePos, z, viewPos, worldPos) {\n                    const canvas = scene.canvas.canvas;\n                    const halfCanvasWidth = canvas.offsetWidth / 2.0;\n                    const halfCanvasHeight = canvas.offsetHeight / 2.0;\n                    cp[0] = (mousePos[0] - halfCanvasWidth) / halfCanvasWidth;\n                    cp[1] = (mousePos[1] - halfCanvasHeight) / halfCanvasHeight;\n                    cp[2] = z;\n                    cp[3] = 1.0;\n                    math.mulMat4v4(inverseProjMat, cp, viewPos);\n                    math.mulVec3Scalar(viewPos, 1.0 / viewPos[3]); // Normalize homogeneous coord\n                    viewPos[3] = 1.0;\n                    viewPos[1] *= -1; // TODO: Why is this reversed?\n                    math.mulMat4v4(inverseViewMat, viewPos, worldPos);\n                };\n\n                return function (mousePos, factor) {\n\n                    const lastHoverDistance = 0;\n                    const inverseProjMat = getInverseProjectMat();\n                    const inverseViewMat = getInverseViewMat();\n\n                    // Get last two columns of projection matrix\n                    const transposedProjectMat = getTransposedProjectMat();\n                    const Pt3 = transposedProjectMat.subarray(8, 12);\n                    const Pt4 = transposedProjectMat.subarray(12);\n                    const D = [0, 0, -(lastHoverDistance || getSceneDiagSize()), 1];\n                    const Z = math.dotVec4(D, Pt3) / math.dotVec4(D, Pt4);\n\n                    unproject(inverseProjMat, inverseViewMat, mousePos, Z, viewPos, worldPos);\n\n                    math.subVec3(worldPos, camera.eye, eyeCursorVec);\n                    math.normalizeVec3(eyeCursorVec);\n\n                    const px = eyeCursorVec[0] * factor;\n                    const py = eyeCursorVec[1] * factor;\n                    const pz = eyeCursorVec[2] * factor;\n\n                    const eye = camera.eye;\n                    const look = camera.look;\n\n                    camera.eye = [eye[0] + px, eye[1] + py, eye[2] + pz];\n                    camera.look = [look[0] + px, look[1] + py, look[2] + pz];\n                };\n            })();\n\n            const panToWorldPos = (function () {\n                const eyeCursorVec = math.vec3();\n                return function (worldPos, factor) {\n                    math.subVec3(worldPos, camera.eye, eyeCursorVec);\n                    math.normalizeVec3(eyeCursorVec);\n                    const px = eyeCursorVec[0] * factor;\n                    const py = eyeCursorVec[1] * factor;\n                    const pz = eyeCursorVec[2] * factor;\n                    const eye = camera.eye;\n                    const look = camera.look;\n                    camera.eye = [eye[0] + px, eye[1] + py, eye[2] + pz];\n                    camera.look = [look[0] + px, look[1] + py, look[2] + pz];\n                };\n            })();\n\n            scene.on(\"tick\", function () {\n\n                const cameraInertia = self._inertia;\n\n                if (Math.abs(rotateVx) < EPSILON) {\n                    rotateVx = 0;\n                }\n\n                if (Math.abs(rotateVy) < EPSILON) {\n                    rotateVy = 0;\n                }\n\n                if (rotateVy !== 0 || rotateVx !== 0) {\n\n                    if (self._pivoter.getPivoting()) {\n                        self._pivoter.continuePivot(rotateVy, rotateVx);\n\n                    } else {\n\n                        if (rotateVx !== 0) {\n\n                            if (self._firstPerson) {\n                                camera.pitch(-rotateVx);\n\n                            } else {\n                                camera.orbitPitch(rotateVx);\n                            }\n                        }\n\n                        if (rotateVy !== 0) {\n\n                            if (self._firstPerson) {\n                                camera.yaw(rotateVy);\n\n                            } else {\n                                camera.orbitYaw(rotateVy);\n                            }\n                        }\n                    }\n\n                    rotateVx *= cameraInertia;\n                    rotateVy *= cameraInertia;\n                }\n\n                if (Math.abs(panVx) < EPSILON) {\n                    panVx = 0;\n                }\n\n                if (Math.abs(panVy) < EPSILON) {\n                    panVy = 0;\n                }\n\n                if (Math.abs(panVz) < EPSILON) {\n                    panVz = 0;\n                }\n\n                if (panVx !== 0 || panVy !== 0 || panVz !== 0) {\n                    const f = getEyeLookDist() / 80;\n                    if (self._walking) {\n                        var y = camera.eye[1];\n                        camera.pan([panVx * f, panVy * f, panVz * f]);\n                        var eye = camera.eye;\n                        eye[1] = y;\n                        camera.eye = eye;\n                    } else {\n                        camera.pan([panVx * f, panVy * f, panVz * f]);\n                    }\n                }\n\n                panVx *= cameraInertia;\n                panVy *= cameraInertia;\n                panVz *= cameraInertia;\n\n                if (Math.abs(vZoom) < EPSILON) {\n                    vZoom = 0;\n                }\n\n                if (vZoom !== 0) {\n                    if (self._firstPerson) {\n                        var y;\n                        if (self._walking) {\n                            y = camera.eye[1];\n                        }\n                        if (panToMouse) { // Using mouse input\n                            panToMousePos(mousePos, -vZoom * 2);\n                        } else {\n                            camera.pan([0, 0, vZoom]); // Touchscreen input with no cursor\n                        }\n                        if (self._walking) {\n                            var eye = camera.eye;\n                            eye[1] = y;\n                            camera.eye = eye;\n                        }\n                    } else {\n                        // Do both zoom and ortho scale so that we can switch projections without weird scale jumps\n                        if (self._panToPointer) {\n                            updatePick();\n                            if (pickedSurface) {\n                                panToWorldPos(hit.worldPos, -vZoom);\n                            } else {\n                                camera.zoom(vZoom);\n                            }\n                        } else if (self._panToPivot) {\n                            panToWorldPos(self._pivoter.getPivotPos(), -vZoom); // FIXME: What about when pivotPos undefined?\n                        } else {\n                            camera.zoom(vZoom);\n                        }\n                        camera.ortho.scale = camera.ortho.scale + vZoom;\n                    }\n                    vZoom *= cameraInertia;\n                }\n            });\n\n            function getZoomRate() {\n                const aabb = scene.aabb;\n                const xsize = aabb[3] - aabb[0];\n                const ysize = aabb[4] - aabb[1];\n                const zsize = aabb[5] - aabb[2];\n                let max = (xsize > ysize ? xsize : ysize);\n                max = (zsize > max ? zsize : max);\n                return max / 30;\n            }\n\n            document.addEventListener(\"keyDown\", function (e) {\n                if (!self._active) {\n                    return;\n                }\n                if (e.target.tagName !== \"INPUT\" && e.target.tagName !== \"TEXTAREA\") {\n                    ctrlDown = e.ctrlKey || e.keyCode === 17 || e.metaKey; // !important, treat Windows or Mac Command Key as ctrl\n                    altDown = e.altKey || e.keyCode === 18;\n                    shiftDown = e.keyCode === 16;\n                    keyDown[e.keyCode] = true;\n                }\n            }, true);\n\n            document.addEventListener(\"keyup\", function (e) {\n                if (!self._active) {\n                    return;\n                }\n                if (e.target.tagName !== \"INPUT\" && e.target.tagName !== \"TEXTAREA\") {\n                    if (e.ctrlKey || e.keyCode === 17) {\n                        ctrlDown = false;\n                    }\n                    if (e.altKey || e.keyCode === 18) {\n                        altDown = false;\n                    }\n                    if (e.keyCode === 16) {\n                        shiftDown = false;\n                    }\n                    keyDown[e.keyCode] = false;\n                }\n            });\n\n            // Mouse camera rotate, pan and zoom\n\n            (function () {\n\n                let lastX;\n                let lastY;\n                let xDelta = 0;\n                let yDelta = 0;\n                let down = false;\n\n                let mouseDownLeft;\n                let mouseDownMiddle;\n                let mouseDownRight;\n\n                canvas.addEventListener(\"mousedown\", function (e) {\n                    if (!self._active) {\n                        return;\n                    }\n                    over = true;\n                    switch (e.which) {\n                        case 1: // Left button\n                            mouseDownLeft = true;\n                            down = true;\n                            xDelta = 0;\n                            yDelta = 0;\n                            getCanvasPosFromEvent(e, mousePos);\n                            lastX = mousePos[0];\n                            lastY = mousePos[1];\n                            break;\n                        case 2: // Middle/both buttons\n                            mouseDownMiddle = true;\n                            break;\n                        case 3: // Right button\n                            mouseDownRight = true;\n                            down = true;\n                            xDelta = 0;\n                            yDelta = 0;\n                            getCanvasPosFromEvent(e, mousePos);\n                            lastX = mousePos[0];\n                            lastY = mousePos[1];\n                            break;\n                            break;\n                        default:\n                            break;\n                    }\n                });\n\n                canvas.addEventListener(\"mouseup\", function (e) {\n                    if (!self._active) {\n                        return;\n                    }\n                    switch (e.which) {\n                        case 1: // Left button\n                            mouseDownLeft = false;\n                            break;\n                        case 2: // Middle/both buttons\n                            mouseDownMiddle = false;\n                            break;\n                        case 3: // Right button\n                            mouseDownRight = false;\n                            break;\n                        default:\n                            break;\n                    }\n                    down = false;\n                    xDelta = 0;\n                    yDelta = 0;\n                });\n\n                document.addEventListener(\"mouseup\", function (e) {\n                    if (!self._active) {\n                        return;\n                    }\n                    switch (e.which) {\n                        case 1: // Left button\n                            mouseDownLeft = false;\n                            break;\n                        case 2: // Middle/both buttons\n                            mouseDownMiddle = false;\n                            break;\n                        case 3: // Right button\n                            mouseDownRight = false;\n                            break;\n                        default:\n                            break;\n                    }\n                    down = false;\n                    xDelta = 0;\n                    yDelta = 0;\n                });\n\n                canvas.addEventListener(\"mouseenter\", function () {\n                    if (!self._active) {\n                        return;\n                    }\n                    over = true;\n                    xDelta = 0;\n                    yDelta = 0;\n                });\n\n                canvas.addEventListener(\"mouseleave\", function () {\n                    if (!self._active) {\n                        return;\n                    }\n                    over = false;\n                    xDelta = 0;\n                    yDelta = 0;\n                });\n\n                canvas.addEventListener(\"mousemove\", function (e) {\n                    if (!self._active) {\n                        return;\n                    }\n                    if (!over) {\n                        return;\n                    }\n                    getCanvasPosFromEvent(e, mousePos);\n                    panToMouse = true;\n                    if (!down) {\n                        return;\n                    }\n                    const x = mousePos[0];\n                    const y = mousePos[1];\n                    xDelta += (x - lastX) * mouseOrbitRate;\n                    yDelta += (y - lastY) * mouseOrbitRate;\n                    lastX = x;\n                    lastY = y;\n                });\n\n                scene.on(\"tick\", function () {\n                    if (!self._active) {\n                        return;\n                    }\n                    if (Math.abs(xDelta) === 0 && Math.abs(yDelta) === 0) {\n                        return;\n                    }\n\n                    const panning = shiftDown || mouseDownRight;\n\n                    if (panning) {\n\n                        // Panning\n\n                        panVx = xDelta * mousePanRate;\n                        panVy = yDelta * mousePanRate;\n\n                    } else {\n\n                        // Orbiting\n\n                        rotateVy = -xDelta * mouseOrbitRate;\n                        rotateVx = yDelta * mouseOrbitRate;\n                    }\n\n                    xDelta = 0;\n                    yDelta = 0;\n                });\n\n                // Mouse wheel zoom\n\n                canvas.addEventListener(\"wheel\", function (e) {\n                    if (!self._active) {\n                        return;\n                    }\n                    if (self._panToPointer) {\n                        needPickSurface = true;\n                    }\n                    const delta = Math.max(-1, Math.min(1, -e.deltaY * 40));\n                    if (delta === 0) {\n                        return;\n                    }\n                    const d = delta / Math.abs(delta);\n                    vZoom = -d * getZoomRate() * mouseZoomRate;\n                    e.preventDefault();\n                });\n\n                // Keyboard zoom\n\n                scene.on(\"tick\", function (e) {\n                    if (!self._active) {\n                        return;\n                    }\n                    if (!over) {\n                        return;\n                    }\n                    const elapsed = e.deltaTime;\n                    if (!self.ctrlDown && !self.altDown) {\n                        const wkey = input.keyDown[input.KEY_ADD];\n                        const skey = input.keyDown[input.KEY_SUBTRACT];\n                        if (wkey || skey) {\n                            if (skey) {\n                                vZoom = elapsed * getZoomRate() * keyboardZoomRate;\n                            } else if (wkey) {\n                                vZoom = -elapsed * getZoomRate() * keyboardZoomRate;\n                            }\n                        }\n                    }\n                });\n\n                // Keyboard panning\n\n                (function () {\n\n                    scene.on(\"tick\", function (e) {\n                        if (!self._active) {\n                            return;\n                        }\n                        if (!over) {\n                            return;\n                        }\n\n                        const elapsed = e.deltaTime;\n\n                        // if (!self.ctrlDown && !self.altDown) {\n                        let front, back, left, right, up, down;\n                        if (self._keyboardLayout == 'azerty') {\n                            front = input.keyDown[input.KEY_Z];\n                            back = input.keyDown[input.KEY_S];\n                            left = input.keyDown[input.KEY_Q];\n                            right = input.keyDown[input.KEY_D];\n                            up = input.keyDown[input.KEY_W];\n                            down = input.keyDown[input.KEY_X];\n                        } else {\n                            front = input.keyDown[input.KEY_W];\n                            back = input.keyDown[input.KEY_S];\n                            left = input.keyDown[input.KEY_A];\n                            right = input.keyDown[input.KEY_D];\n                            up = input.keyDown[input.KEY_Z];\n                            down = input.keyDown[input.KEY_X];\n                        }\n                        if (front || back || left || right || up || down) {\n                            if (down) {\n                                panVy += elapsed * keyboardPanRate;\n                            } else if (up) {\n                                panVy -= -elapsed * keyboardPanRate;\n                            }\n                            if (right) {\n                                panVx += -elapsed * keyboardPanRate;\n                            } else if (left) {\n                                panVx = elapsed * keyboardPanRate;\n                            }\n                            if (back) {\n                                panVz = elapsed * keyboardPanRate;\n                            } else if (front) {\n                                panVz = -elapsed * keyboardPanRate;\n                            }\n                        }\n                        //          }\n                    });\n                })();\n            })();\n\n            // Touch camera rotate, pan and zoom\n\n            (function () {\n\n                let touchStartTime;\n                const tapStartPos = new Float32Array(2);\n                let tapStartTime = -1;\n\n                const lastTouches = [];\n                let numTouches = 0;\n\n                const touch0Vec = new Float32Array(2);\n                const touch1Vec = new Float32Array(2);\n\n                const MODE_CHANGE_TIMEOUT = 50;\n                const MODE_NONE = 0;\n                const MODE_ROTATE = 1;\n                const MODE_PAN = 1 << 1;\n                const MODE_ZOOM = 1 << 2;\n                let currentMode = MODE_NONE;\n                let transitionTime = Date.now();\n\n                function checkMode(mode) {\n                    const currentTime = Date.now();\n                    if (currentMode === MODE_NONE) {\n                        currentMode = mode;\n                        return true;\n                    }\n                    if (currentMode === mode) {\n                        return currentTime - transitionTime > MODE_CHANGE_TIMEOUT;\n                    }\n                    currentMode = mode;\n                    transitionTime = currentTime;\n                    return false;\n                }\n\n                canvas.addEventListener(\"touchstart\", function (event) {\n                    if (!self._active) {\n                        return;\n                    }\n                    const touches = event.touches;\n                    const changedTouches = event.changedTouches;\n\n                    touchStartTime = Date.now();\n\n                    if (touches.length === 1 && changedTouches.length === 1) {\n                        tapStartTime = touchStartTime;\n                        tapStartPos[0] = touches[0].pageX;\n                        tapStartPos[1] = touches[0].pageY;\n                    } else {\n                        tapStartTime = -1;\n                    }\n\n                    while (lastTouches.length < touches.length) {\n                        lastTouches.push(new Float32Array(2));\n                    }\n\n                    for (let i = 0, len = touches.length; i < len; ++i) {\n                        lastTouches[i][0] = touches[i].pageX;\n                        lastTouches[i][1] = touches[i].pageY;\n                    }\n\n                    currentMode = MODE_NONE;\n                    numTouches = touches.length;\n\n                    event.stopPropagation();\n                }, {passive: true});\n\n                canvas.addEventListener(\"touchmove\", function (event) {\n                    if (!self._active) {\n                        return;\n                    }\n                    const touches = event.touches;\n\n                    if (numTouches === 1) {\n\n                        var touch0 = touches[0];\n\n                        if (checkMode(MODE_ROTATE)) {\n                            const deltaX = touch0.pageX - lastTouches[0][0];\n                            const deltaY = touch0.pageY - lastTouches[0][1];\n                            const rotateX = deltaX * touchRotateRate;\n                            const rotateY = deltaY * touchRotateRate;\n                            rotateVx = rotateY;\n                            rotateVy = -rotateX;\n                        }\n\n                    } else if (numTouches === 2) {\n\n                        var touch0 = touches[0];\n                        const touch1 = touches[1];\n\n                        math.subVec2([touch0.pageX, touch0.pageY], lastTouches[0], touch0Vec);\n                        math.subVec2([touch1.pageX, touch1.pageY], lastTouches[1], touch1Vec);\n\n                        const panning = math.dotVec2(touch0Vec, touch1Vec) > 0;\n\n                        if (panning && checkMode(MODE_PAN)) {\n                            math.subVec2([touch0.pageX, touch0.pageY], lastTouches[0], touch0Vec);\n                            panVx = touch0Vec[0] * touchPanRate;\n                            panVy = touch0Vec[1] * touchPanRate;\n                        }\n\n                        if (!panning && checkMode(MODE_ZOOM)) {\n                            const d1 = math.distVec2([touch0.pageX, touch0.pageY], [touch1.pageX, touch1.pageY]);\n                            const d2 = math.distVec2(lastTouches[0], lastTouches[1]);\n                            vZoom = (d2 - d1) * getZoomRate() * touchZoomRate;\n                        }\n                    }\n\n                    for (let i = 0; i < numTouches; ++i) {\n                        lastTouches[i][0] = touches[i].pageX;\n                        lastTouches[i][1] = touches[i].pageY;\n                    }\n\n                    event.stopPropagation();\n                }, {passive: true});\n\n            })();\n\n            // Keyboard rotation\n\n            (function () {\n\n                scene.on(\"tick\", function (e) {\n                    if (!self._active) {\n                        return;\n                    }\n                    if (!over) {\n                        return;\n                    }\n                    const elapsed = e.deltaTime;\n                    const left = input.keyDown[input.KEY_LEFT_ARROW];\n                    const right = input.keyDown[input.KEY_RIGHT_ARROW];\n                    const up = input.keyDown[input.KEY_UP_ARROW];\n                    const down = input.keyDown[input.KEY_DOWN_ARROW];\n                    if (left || right || up || down) {\n                        if (right) {\n                            rotateVy += -elapsed * keyboardOrbitRate;\n\n                        } else if (left) {\n                            rotateVy += elapsed * keyboardOrbitRate;\n                        }\n                        if (down) {\n                            rotateVx += elapsed * keyboardOrbitRate;\n\n                        } else if (up) {\n                            rotateVx += -elapsed * keyboardOrbitRate;\n                        }\n                    }\n                });\n            })();\n\n            // First-person rotation about vertical axis with A and E keys for AZERTY layout\n\n            (function () {\n\n                scene.on(\"tick\", function (e) {\n                    if (!self._active) {\n                        return;\n                    }\n                    if (!over) {\n                        return;\n                    }\n                    const elapsed = e.deltaTime;\n                    let rotateLeft;\n                    let rotateRight;\n                    if (self._keyboardLayout == 'azerty') {\n                        rotateLeft = input.keyDown[input.KEY_A];\n                        rotateRight = input.keyDown[input.KEY_E];\n                    } else {\n                        rotateLeft = input.keyDown[input.KEY_Q];\n                        rotateRight = input.keyDown[input.KEY_E];\n                    }\n                    if (rotateRight || rotateLeft) {\n                        if (rotateLeft) {\n                            rotateVy += elapsed * keyboardOrbitRate;\n                        } else if (rotateRight) {\n                            rotateVy += -elapsed * keyboardOrbitRate;\n                        }\n                    }\n                });\n\n            })();\n        })();\n\n        //------------------------------------------------------------------------------------\n        // Mouse and touch picking\n        //------------------------------------------------------------------------------------\n\n        (function () {\n\n            // Mouse picking\n\n            (function () {\n\n                canvas.addEventListener(\"mousemove\", function (e) {\n\n                    if (!self._active) {\n                        return;\n                    }\n\n                    getCanvasPosFromEvent(e, pickCursorPos);\n\n                    if (self.hasSubs(\"hover\") || self.hasSubs(\"hoverOut\") || self.hasSubs(\"hoverOff\") || self.hasSubs(\"hoverSurface\")) {\n                        needPickMesh = true;\n                    }\n                });\n\n                let downX;\n                let downY;\n                let downCursorX;\n                let downCursorY;\n\n                canvas.addEventListener('mousedown', function (e) {\n                    if (!self._active) {\n                        return;\n                    }\n                    downX = e.clientX;\n                    downY = e.clientY;\n                    downCursorX = pickCursorPos[0];\n                    downCursorY = pickCursorPos[1];\n\n                    needPickSurface = self._pivoting;\n                    updatePick();\n                    if (self._pivoting) {\n                        if (hit) {\n                            self._pivoter.startPivot(hit.worldPos);\n                        } else {\n                            self._pivoter.startPivot(); // Continue to use last pivot point\n                        }\n                    }\n                });\n\n                canvas.addEventListener('mouseup', (function (e) {\n\n                    let clicks = 0;\n                    let timeout;\n\n                    return function (e) {\n\n                        if (!self._active) {\n                            return;\n                        }\n\n                        self._pivoter.endPivot();\n\n                        if (Math.abs(e.clientX - downX) > 3 || Math.abs(e.clientY - downY) > 3) {\n                            return;\n                        }\n\n                        if (!self._doublePickFlyTo && !self.hasSubs(\"doublePicked\") && !self.hasSubs(\"doublePickedSurface\") && !self.hasSubs(\"doublePickedNothing\")) {\n\n                            //  Avoid the single/double click differentiation timeout\n\n                            needPickSurface = !!self.hasSubs(\"pickedSurface\");\n\n                            updatePick();\n\n                            if (hit) {\n\n                                /**\n                                 * Fired whenever the pointer has picked (ie. clicked or tapped) an {@link Mesh}.\n                                 *\n                                 * @event picked\n                                 * @param hit A surface pick hit result containing the ID of the Mesh - see {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.\n                                 */\n                                self.fire(\"picked\", hit);\n                                if (pickedSurface) {\n\n                                    /**\n                                     * Fired when the pointer has picked (ie. clicked or tapped) the surface of an {@link Mesh}.\n                                     *\n                                     * This event provides 3D information about the point on the surface that the pointer has picked.\n                                     *\n                                     * @event pickedSurface\n                                     * @param hit A surface pick hit result, containing the ID of the Mesh and 3D info on the\n                                     * surface possition - see {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.\n                                     */\n                                    self.fire(\"pickedSurface\", hit);\n                                }\n                            } else {\n\n                                /**\n                                 * Fired when the pointer attempted a pick (ie. clicked or tapped), but has hit nothing.\n                                 *\n                                 * @event pickedNothing\n                                 */\n                                self.fire(\"pickedNothing\");\n                            }\n\n                            return;\n                        }\n\n                        clicks++;\n\n                        if (clicks == 1) {\n                            timeout = setTimeout(function () {\n\n                                needPickMesh = self._doublePickFlyTo;\n                                needPickSurface = needPickMesh || !!self.hasSubs(\"pickedSurface\");\n                                pickCursorPos[0] = downCursorX;\n                                pickCursorPos[1] = downCursorY;\n\n                                updatePick();\n\n                                if (hit) {\n                                    self.fire(\"picked\", hit);\n                                    if (pickedSurface) {\n                                        self.fire(\"pickedSurface\", hit);\n                                    }\n                                } else {\n                                    self.fire(\"pickedNothing\");\n                                }\n\n                                clicks = 0;\n                            }, 250);  // FIXME: Too short for track pads\n\n                        } else {\n\n                            clearTimeout(timeout);\n\n                            needPickMesh = self._doublePickFlyTo;\n                            needPickSurface = needPickMesh && !!self.hasSubs(\"doublePickedSurface\");\n\n                            updatePick();\n\n                            if (hit) {\n                                /**\n                                 * Fired whenever the pointer has double-picked (ie. double-clicked or double-tapped) an {@link Mesh}.\n                                 *\n                                 * @event picked\n                                 * @param hit A surface pick hit result containing the ID of the Mesh - see {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.\n                                 */\n                                self.fire(\"doublePicked\", hit);\n                                if (pickedSurface) {\n                                    /**\n                                     * Fired when the pointer has double-picked (ie. double-clicked or double-tapped) the surface of an {@link Mesh}.\n                                     *\n                                     * This event provides 3D information about the point on the surface that the pointer has picked.\n                                     *\n                                     * @event doublePickedSurface\n                                     * @param hit A surface pick hit result, containing the ID of the Mesh and 3D info on the\n                                     * surface possition - see {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.\n                                     */\n                                    self.fire(\"doublePickedSurface\", hit);\n                                }\n                                if (self._doublePickFlyTo) {\n                                    self._flyTo(hit);\n                                }\n                            } else {\n\n                                /**\n                                 * Fired when the pointer attempted a double-pick (ie. double-clicked or double-tapped), but has hit nothing.\n                                 *\n                                 * @event doublePickedNothing\n                                 */\n                                self.fire(\"doublePickedNothing\");\n                                if (self._doublePickFlyTo) {\n                                    self._flyTo();\n                                }\n                            }\n                            clicks = 0;\n                        }\n                    };\n                })(), false);\n\n            })();\n\n            // Touch picking\n\n            (function () {\n\n                const TAP_INTERVAL = 150;\n                const DBL_TAP_INTERVAL = 325;\n                const TAP_DISTANCE_THRESHOLD = 4;\n\n                let touchStartTime;\n                const activeTouches = [];\n                const tapStartPos = new Float32Array(2);\n                let tapStartTime = -1;\n                let lastTapTime = -1;\n\n                canvas.addEventListener(\"touchstart\", function (event) {\n\n                    if (!self._active) {\n                        return;\n                    }\n\n                    const touches = event.touches;\n                    const changedTouches = event.changedTouches;\n\n                    touchStartTime = Date.now();\n\n                    if (touches.length === 1 && changedTouches.length === 1) {\n                        tapStartTime = touchStartTime;\n                        tapStartPos[0] = touches[0].pageX;\n                        tapStartPos[1] = touches[0].pageY;\n                    } else {\n                        tapStartTime = -1;\n                    }\n\n                    while (activeTouches.length < touches.length) {\n                        activeTouches.push(new Float32Array(2))\n                    }\n\n                    for (let i = 0, len = touches.length; i < len; ++i) {\n                        activeTouches[i][0] = touches[i].pageX;\n                        activeTouches[i][1] = touches[i].pageY;\n                    }\n\n                    activeTouches.length = touches.length;\n\n                    event.stopPropagation();\n                }, {passive: true});\n\n                //canvas.addEventListener(\"touchmove\", function (event) {\n                //    event.preventDefault();\n                //    event.stopPropagation();\n                //});\n\n                canvas.addEventListener(\"touchend\", function (event) {\n\n                    if (!self._active) {\n                        return;\n                    }\n\n                    const currentTime = Date.now();\n                    const touches = event.touches;\n                    const changedTouches = event.changedTouches;\n\n                    // process tap\n\n                    if (touches.length === 0 && changedTouches.length === 1) {\n\n                        if (tapStartTime > -1 && currentTime - tapStartTime < TAP_INTERVAL) {\n\n                            if (lastTapTime > -1 && tapStartTime - lastTapTime < DBL_TAP_INTERVAL) {\n\n                                // Double-tap\n\n                                pickCursorPos[0] = Math.round(changedTouches[0].clientX);\n                                pickCursorPos[1] = Math.round(changedTouches[0].clientY);\n                                needPickMesh = true;\n                                needPickSurface = !!self.hasSubs(\"pickedSurface\");\n\n                                updatePick();\n\n                                if (hit) {\n                                    self.fire(\"doublePicked\", hit);\n                                    if (pickedSurface) {\n                                        self.fire(\"doublePickedSurface\", hit);\n                                    }\n                                    if (self._doublePickFlyTo) {\n                                        self._flyTo(hit);\n                                    }\n                                } else {\n                                    self.fire(\"doublePickedNothing\");\n                                    if (self._doublePickFlyTo) {\n                                        self._flyTo();\n                                    }\n                                }\n\n                                lastTapTime = -1;\n\n                            } else if (math.distVec2(activeTouches[0], tapStartPos) < TAP_DISTANCE_THRESHOLD) {\n\n                                // Single-tap\n\n                                pickCursorPos[0] = Math.round(changedTouches[0].clientX);\n                                pickCursorPos[1] = Math.round(changedTouches[0].clientY);\n                                needPickMesh = true;\n                                needPickSurface = !!self.hasSubs(\"pickedSurface\");\n\n                                updatePick();\n\n                                if (hit) {\n                                    self.fire(\"picked\", hit);\n                                    if (pickedSurface) {\n                                        self.fire(\"pickedSurface\", hit);\n                                    }\n                                } else {\n                                    self.fire(\"pickedNothing\");\n                                }\n\n                                lastTapTime = currentTime;\n                            }\n\n                            tapStartTime = -1\n                        }\n                    }\n\n                    activeTouches.length = touches.length;\n\n                    for (let i = 0, len = touches.length; i < len; ++i) {\n                        activeTouches[i][0] = touches[i].pageX;\n                        activeTouches[i][1] = touches[i].pageY;\n                    }\n\n                    event.stopPropagation();\n                }, {passive: true});\n            })();\n        })();\n\n        //------------------------------------------------------------------------------------\n        // Keyboard camera axis views\n        //------------------------------------------------------------------------------------\n\n        (function () {\n\n            const KEY_NUM_1 = 49;\n            const KEY_NUM_2 = 50;\n            const KEY_NUM_3 = 51;\n            const KEY_NUM_4 = 52;\n            const KEY_NUM_5 = 53;\n            const KEY_NUM_6 = 54;\n\n            const center = math.vec3();\n            const tempVec3a = math.vec3();\n            const tempVec3b = math.vec3();\n            const tempVec3c = math.vec3();\n\n            const cameraTarget = {\n                eye: new Float32Array(3),\n                look: new Float32Array(3),\n                up: new Float32Array(3)\n            };\n\n            document.addEventListener(\"keydown\", function (e) {\n\n                if (!self._active) {\n                    return;\n                }\n\n                if (!over) {\n                    return;\n                }\n\n                const keyCode = e.keyCode;\n\n                if (keyCode !== KEY_NUM_1 &&\n                    keyCode !== KEY_NUM_2 &&\n                    keyCode !== KEY_NUM_3 &&\n                    keyCode !== KEY_NUM_4 &&\n                    keyCode !== KEY_NUM_5 &&\n                    keyCode !== KEY_NUM_6) {\n                    return;\n                }\n\n                const aabb = scene.aabb;\n                const diag = math.getAABB3Diag(aabb);\n                center[0] = aabb[0] + aabb[3] / 2.0;\n                center[1] = aabb[1] + aabb[4] / 2.0;\n                center[2] = aabb[2] + aabb[5] / 2.0;\n                const dist = Math.abs((diag) / Math.tan(self._cameraFlight.fitFOV / 2));\n\n                switch (keyCode) {\n\n                    case KEY_NUM_1: // Right\n\n                        cameraTarget.eye.set(math.mulVec3Scalar(camera.worldRight, dist, tempVec3a));\n                        cameraTarget.look.set(center);\n                        cameraTarget.up.set(camera.worldUp);\n\n                        break;\n\n                    case KEY_NUM_2: // Back\n\n                        cameraTarget.eye.set(math.mulVec3Scalar(camera.worldForward, dist, tempVec3a));\n                        cameraTarget.look.set(center);\n                        cameraTarget.up.set(camera.worldUp);\n\n                        break;\n\n                    case KEY_NUM_3: // Left\n\n                        cameraTarget.eye.set(math.mulVec3Scalar(camera.worldRight, -dist, tempVec3a));\n                        cameraTarget.look.set(center);\n                        cameraTarget.up.set(camera.worldUp);\n\n                        break;\n\n                    case KEY_NUM_4: // Front\n\n                        cameraTarget.eye.set(math.mulVec3Scalar(camera.worldForward, -dist, tempVec3a));\n                        cameraTarget.look.set(center);\n                        cameraTarget.up.set(camera.worldUp);\n\n                        break;\n\n                    case KEY_NUM_5: // Top\n\n                        cameraTarget.eye.set(math.mulVec3Scalar(camera.worldUp, dist, tempVec3a));\n                        cameraTarget.look.set(center);\n                        cameraTarget.up.set(math.normalizeVec3(math.mulVec3Scalar(camera.worldForward, 1, tempVec3b), tempVec3c));\n\n                        break;\n\n                    case KEY_NUM_6: // Bottom\n\n                        cameraTarget.eye.set(math.mulVec3Scalar(camera.worldUp, -dist, tempVec3a));\n                        cameraTarget.look.set(center);\n                        cameraTarget.up.set(math.normalizeVec3(math.mulVec3Scalar(camera.worldForward, -1, tempVec3b)));\n\n                        break;\n\n                    default:\n                        return;\n                }\n\n                if (self._cameraFlight.duration > 0) {\n                    self._cameraFlight.flyTo(cameraTarget);\n                } else {\n                    self._cameraFlight.jumpTo(cameraTarget);\n                }\n            });\n\n        })();\n    }\n\n    _flyTo(hit) {\n\n        let pos;\n\n        if (hit && hit.worldPos) {\n            pos = hit.worldPos\n        }\n\n        const aabb = hit ? hit.mesh.aabb : this.scene.aabb;\n\n        this._boundaryHelper.geometry.targetAABB = aabb;\n        //    this._boundaryHelper.visible = true;\n\n        if (pos) {\n\n            // Fly to look at point, don't change eye->look dist\n\n            const camera = this.scene.camera;\n            const diff = math.subVec3(camera.eye, camera.look, []);\n\n            this._cameraFlight.flyTo({\n                    // look: pos,\n                    // eye: xeokit.math.addVec3(pos, diff, []),\n                    // up: camera.up,\n                    aabb: aabb\n                },\n                this._hideBoundary, this);\n\n            // TODO: Option to back off to fit AABB in view\n\n        } else {\n\n            // Fly to fit target boundary in view\n\n            this._cameraFlight.flyTo({\n                    aabb: aabb\n                },\n                this._hideBoundary, this);\n        }\n    }\n\n    _hideBoundary() {\n        //    this._boundaryHelper.visible = false;\n    }\n\n    destroy() {\n        this.active = false;\n        super.destroy();\n    }\n}\n\nexport {CameraControl};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/camera/CameraControl.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 694,
    "kind": "class",
    "name": "CameraControl",
    "memberof": "scene/camera/CameraControl.js",
    "static": true,
    "longname": "scene/camera/CameraControl.js~CameraControl",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/camera/CameraControl.js",
    "importStyle": "{CameraControl}",
    "description": "Controls a {@link Camera} with keyboard, mouse and touch input.\n\nLocated for convenience at {@link Viewer#cameraControl}.\n\nFires these events:\n\n* \"hover\" - Hover enters a new object\n* \"hoverSurface\" - Hover continues over an object surface - fired continuously as mouse moves over an object\n* \"hoverLeave\"  - Hover has left the last object we were hovering over\n* \"hoverOff\" - Hover continues over empty space - fired continuously as mouse moves over nothing\n* \"picked\" - Clicked or tapped object\n* \"pickedSurface\" -  Clicked or tapped object, with event containing surface intersection details\n* \"doublePicked\" - Double-clicked or double-tapped object\n* \"doublePickedSurface\" - Double-clicked or double-tapped object, with event containing surface intersection details\n* \"pickedNothing\" - Clicked or tapped, but not on any objects\n* \"doublePickedNothing\" - Double-clicked or double-tapped, but not on any objects",
    "lineNumber": 26,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 695,
    "kind": "get",
    "name": "type",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 37,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 696,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 697,
    "kind": "member",
    "name": "_boundaryHelper",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#_boundaryHelper",
    "access": "private",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 698,
    "kind": "member",
    "name": "_pivoter",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#_pivoter",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 699,
    "kind": "member",
    "name": "_cameraFlight",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#_cameraFlight",
    "access": "private",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 709,
    "kind": "set",
    "name": "active",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#active",
    "access": "public",
    "description": "Indicates whether this CameraControl is active or not.",
    "lineNumber": 227,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "active",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 710,
    "kind": "member",
    "name": "_active",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#_active",
    "access": "private",
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 711,
    "kind": "get",
    "name": "active",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#active",
    "access": "public",
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 712,
    "kind": "set",
    "name": "pivoting",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#pivoting",
    "access": "public",
    "description": "When true, clicking on a {@link Mesh} and dragging will pivot\nthe {@link Camera} about the picked point on the Mesh's surface.",
    "lineNumber": 243,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pivoting",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 713,
    "kind": "member",
    "name": "_pivoting",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#_pivoting",
    "access": "private",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 714,
    "kind": "get",
    "name": "pivoting",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#pivoting",
    "access": "public",
    "description": null,
    "lineNumber": 247,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 715,
    "kind": "set",
    "name": "panToPointer",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#panToPointer",
    "access": "public",
    "description": "When true, mouse wheel when mouse is over a {@link Mesh} will zoom\nthe {@link Camera} towards the hovered point on the Mesh's surface.",
    "lineNumber": 259,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "panToPointer",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 716,
    "kind": "member",
    "name": "_panToPointer",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#_panToPointer",
    "access": "private",
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 717,
    "kind": "member",
    "name": "_panToPivot",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#_panToPivot",
    "access": "private",
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 718,
    "kind": "get",
    "name": "panToPointer",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#panToPointer",
    "access": "public",
    "description": null,
    "lineNumber": 266,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 719,
    "kind": "set",
    "name": "panToPivot",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#panToPivot",
    "access": "public",
    "description": "When true, mouse wheel when mouse is over a {@link Mesh} will zoom\nthe {@link Camera} towards the pivot point.",
    "lineNumber": 278,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "panToPivot",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 722,
    "kind": "get",
    "name": "panToPivot",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#panToPivot",
    "access": "public",
    "description": null,
    "lineNumber": 285,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 723,
    "kind": "set",
    "name": "firstPerson",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#firstPerson",
    "access": "public",
    "description": "Indicates whether this CameraControl is in \"first person\" mode.\n\nIn \"first person\" mode (disabled by default) the look position rotates about the eye position. Otherwise,\nthe eye rotates about the look.",
    "lineNumber": 299,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "firstPerson",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 724,
    "kind": "member",
    "name": "_firstPerson",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#_firstPerson",
    "access": "private",
    "description": null,
    "lineNumber": 300,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 725,
    "kind": "get",
    "name": "firstPerson",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#firstPerson",
    "access": "public",
    "description": null,
    "lineNumber": 303,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 726,
    "kind": "set",
    "name": "walking",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#walking",
    "access": "public",
    "description": "Indicates whether this CameraControl is in \"walking\" mode.\n\nWhen set true, this constrains eye movement to the horizontal X-Z plane. When doing a walkthrough,\nthis is useful to allow us to look upwards or downwards as we move, while keeping us moving in the\nhorizontal plane.\n\nThis only has an effect when also in \"first person\" mode.",
    "lineNumber": 320,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "walking",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 727,
    "kind": "member",
    "name": "_walking",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#_walking",
    "access": "private",
    "description": null,
    "lineNumber": 321,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 728,
    "kind": "get",
    "name": "walking",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#walking",
    "access": "public",
    "description": null,
    "lineNumber": 324,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 729,
    "kind": "set",
    "name": "doublePickFlyTo",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#doublePickFlyTo",
    "access": "public",
    "description": "TODO",
    "lineNumber": 336,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "doublePickFlyTo",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 730,
    "kind": "member",
    "name": "_doublePickFlyTo",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#_doublePickFlyTo",
    "access": "private",
    "description": null,
    "lineNumber": 337,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 731,
    "kind": "get",
    "name": "doublePickFlyTo",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#doublePickFlyTo",
    "access": "public",
    "description": null,
    "lineNumber": 340,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 732,
    "kind": "set",
    "name": "inertia",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#inertia",
    "access": "public",
    "description": "Factor in range [0..1] indicating how much the camera keeps moving after you finish\npanning or rotating it.\n\nA value of 0.0 causes it to immediately stop, 0.5 causes its movement to decay 50% on each tick,\nwhile 1.0 causes no decay, allowing it continue moving, by the current rate of pan or rotation.\n\nYou may choose an inertia of zero when you want be able to precisely position or rotate the camera,\nwithout interference from inertia. ero inertia can also mean that less frames are rendered while\nyou are positioning the camera.",
    "lineNumber": 359,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0.5"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "inertia",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 733,
    "kind": "member",
    "name": "_inertia",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#_inertia",
    "access": "private",
    "description": null,
    "lineNumber": 360,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 734,
    "kind": "get",
    "name": "inertia",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#inertia",
    "access": "public",
    "description": null,
    "lineNumber": 363,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 735,
    "kind": "set",
    "name": "keyboardLayout",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#keyboardLayout",
    "access": "public",
    "description": "TODO",
    "lineNumber": 374,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"qwerty\""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "keyboardLayout",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 736,
    "kind": "member",
    "name": "_keyboardLayout",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#_keyboardLayout",
    "access": "private",
    "description": null,
    "lineNumber": 375,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 737,
    "kind": "get",
    "name": "keyboardLayout",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#keyboardLayout",
    "access": "public",
    "description": null,
    "lineNumber": 378,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 738,
    "kind": "method",
    "name": "_initEvents",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#_initEvents",
    "access": "private",
    "description": null,
    "lineNumber": 382,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 739,
    "kind": "method",
    "name": "_flyTo",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#_flyTo",
    "access": "private",
    "description": null,
    "lineNumber": 1699,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "hit",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 740,
    "kind": "method",
    "name": "_hideBoundary",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#_hideBoundary",
    "access": "private",
    "description": null,
    "lineNumber": 1740,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 741,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/camera/CameraControl.js~CameraControl",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraControl.js~CameraControl#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 1744,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 743,
    "kind": "file",
    "name": "scene/camera/CameraFlightAnimation.js",
    "content": "import {math} from '../math/math.js';\nimport {utils} from '../utils.js';\nimport {core} from '../core.js';\nimport {Component} from '../Component.js';\nimport {Mesh} from '../mesh/Mesh.js';\nimport {AABBGeometry} from '../geometry/AABBGeometry.js';\nimport {PhongMaterial} from '../materials/PhongMaterial.js';\n\nconst tempVec3 = math.vec3();\nconst newLook = math.vec3();\nconst newEye = math.vec3();\nconst newUp = math.vec3();\nconst newLookEyeVec = math.vec3();\nconst lookEyeVec = math.vec3();\n\n/**\n * @desc Jumps or flies the {@link Scene}'s {@link Camera} to look at a given target.\n *\n * * Located at {@link Viewer#cameraFlight}\n * * Can fly or jump to its target.\n * * While flying, can be stopped, or redirected to a different target.\n *\n * A CameraFlightAnimation's target can be:\n *\n * * specific ````eye````, ````look```` and ````up```` positions,\n * * an axis-aligned World-space bounding box (AABB), or\n * * an instance or ID of any {@link Component} subtype that provides a World-space AABB.\n *\n * Configure {@link CameraFlightAnimation#fit} and {@link CameraFlightAnimation#fitFOV} to make it stop at the point\n * where the target occupies a certain amount of the field-of-view.\n *\n * ## Flying to a Mesh\n *\n * Flying to a {@link Mesh}:\n *\n * ````Javascript\n * var mesh = new Mesh(myViewer.scene);\n *\n * // Fly to the Mesh's World-space AABB\n * myViewer.cameraFlight.flyTo(mesh);\n * ````\n * ## Flying to a position\n *\n * Flying the CameraFlightAnimation from the previous example to specified eye, look and up positions:\n *\n * ````Javascript\n * myViewer.cameraFlight.flyTo({\n *    eye: [-5,-5,-5],\n *    look: [0,0,0]\n *    up: [0,1,0],\n *    duration: 1 // Default, seconds\n * }, function() {\n *          // Arrived\n *      });\n * ````\n *\n * ## Flying to an AABB\n *\n * Flying the CameraFlightAnimation from the previous two examples explicitly to the {@link Boundary3D\"}}Boundary3D's{{/crossLink}}\n * axis-aligned bounding box:\n *\n * ````Javascript\n * myViewer.cameraFlight.flyTo(mesh.aabb);\n * ````\n */\nclass CameraFlightAnimation extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"CameraFlightAnimation\";\n    }\n\n    /**\n     @constructor\n     @private\n     */\n    constructor(owner, cfg={}) {\n\n        super(owner, cfg);\n\n        this._aabbHelper = new Mesh(this, { // Shows a wireframe box for target AABBs\n            geometry: new AABBGeometry(this),\n            material: new PhongMaterial(this, {\n                diffuse: [0, 0, 0],\n                ambient: [0, 0, 0],\n                specular: [0, 0, 0],\n                emissive: [0.5, 1.0, 0.5],\n                lineWidth: 2\n            }),\n            visible: false,\n            collidable: false\n        });\n\n        this._look1 = math.vec3();\n        this._eye1 = math.vec3();\n        this._up1 = math.vec3();\n        this._look2 = math.vec3();\n        this._eye2 = math.vec3();\n        this._up2 = math.vec3();\n        this._orthoScale1 = 1;\n        this._orthoScale2 = 1;\n        this._flying = false;\n        this._flyEyeLookUp = false;\n        this._flyingEye = false;\n        this._flyingLook = false;\n        this._callback = null;\n        this._callbackScope = null;\n        this._time1 = null;\n        this._time2 = null;\n        this.easing = cfg.easing !== false;\n\n        this.duration = cfg.duration;\n        this.fit = cfg.fit;\n        this.fitFOV = cfg.fitFOV;\n        this.trail = cfg.trail;\n    }\n\n    /**\n     * Begins flying the {@link Camera} to the given target.\n     *\n     *  * When the target is a boundary, the {@link Camera} will fly towards the target\n     *    and stop when the target fills most of the canvas.\n     *  * When the target is an explicit {@link Camera} position, given as ````eye````, ````look```` and ````up````\n     *    vectors, then this CameraFlightAnimation will interpolate the {@link Camera} to that target and stop there.\n     * @method flyTo\n     * @param [params=scene]  {*|Component} Either a parameters object or a {@link Component} subtype that has an AABB.\n     * @param[params.arc=0]  {Number} Factor in range [0..1] indicating how much the\n     * {@link Lookat/eye:property\"}}Camera's eye{{/crossLink}} position will\n     * swing away from its {@link Lookat/eye:property\"}}look{{/crossLink}} position as it flies to the target.\n     * @param [params.component] {Number|String|Component} ID or instance of a component to fly to. Defaults to the entire {@link Scene}.\n     * @param [params.aabb] {*}  World-space axis-aligned bounding box (AABB) target to fly to.\n     * @param [params.eye] {Float32Array} Position to fly the eye position to.\n     * @param [params.look] {Float32Array} Position to fly the look position to.\n     * @param [params.up] {Float32Array} Position to fly the up vector to.\n     * @param [params.fit=true] {Boolean} Whether to fit the target to the view volume. Overrides {@link CameraFlightAnimation#fit}.\n     * @param [params.fitFOV] {Number} How much of field-of-view, in degrees, that a target {@link Node} or its AABB should\n     * fill the canvas on arrival. Overrides {@link CameraFlightAnimation#fitFOV}.\n     * @param [params.duration] {Number} Flight duration in seconds.  Overrides {@link CameraFlightAnimation#duration}.\n     * @param [params.orthoScale] {Number} TODO: document this\n     * @param [callback] {Function} Callback fired on arrival\n     * @param [scope] {Object} Optional scope for callback\n     */\n    flyTo(params, callback, scope) {\n\n        params = params || this.scene;\n\n        if (this._flying) {\n            this.stop();\n        }\n\n        this._flying = false;\n\n        this._callback = callback;\n        this._callbackScope = scope;\n\n        const camera = this.scene.camera;\n\n        this._eye1[0] = camera.eye[0];\n        this._eye1[1] = camera.eye[1];\n        this._eye1[2] = camera.eye[2];\n\n        this._look1[0] = camera.look[0];\n        this._look1[1] = camera.look[1];\n        this._look1[2] = camera.look[2];\n\n        this._up1[0] = camera.up[0];\n        this._up1[1] = camera.up[1];\n        this._up1[2] = camera.up[2];\n\n        this._orthoScale1 = camera.ortho.scale;\n        this._orthoScale2 = params.orthoScale || this._orthoScale1;\n\n        let aabb;\n        let eye;\n        let look;\n        let up;\n        let componentId;\n\n        if (params.aabb) {\n            aabb = params.aabb;\n\n        } else if (params.length === 6) {\n            aabb = params;\n\n        } else if ((params.eye && params.look) || params.up) {\n            eye = params.eye;\n            look = params.look;\n            up = params.up;\n\n        } else if (params.eye) {\n            eye = params.eye;\n\n        } else if (params.look) {\n            look = params.look;\n\n        } else { // Argument must be an instance or ID of a Component (subtype)\n\n            let component = params;\n            if (utils.isNumeric(component) || utils.isString(component)) {\n                componentId = component;\n                component = this.scene.components[componentId];\n                if (!component) {\n                    this.error(\"Component not found: \" + utils.inQuotes(componentId));\n                    if (callback) {\n                        if (scope) {\n                            callback.call(scope);\n                        } else {\n                            callback();\n                        }\n                    }\n                    return;\n                }\n            }\n            aabb = component.aabb || this.scene.aabb;\n        }\n\n        const poi = params.poi;\n\n        if (aabb) {\n            if (aabb[3] < aabb[0] || aabb[4] < aabb[1] || aabb[5] < aabb[2]) { // Don't fly to an inverted boundary\n                return;\n            }\n            if (aabb[3] === aabb[0] && aabb[4] === aabb[1] && aabb[5] === aabb[2]) { // Don't fly to an empty boundary\n                return;\n            }\n            if (params.showAABB !== false) { // Show boundary\n                this._aabbHelper.geometry.targetAABB = aabb;\n                //this._aabbHelper.visible = true;\n            }\n\n            aabb = aabb.slice();\n            const aabbCenter = math.getAABB3Center(aabb);\n\n            this._look2 = poi || aabbCenter;\n\n            const eyeLookVec = math.subVec3(this._eye1, this._look1, tempVec3);\n            const eyeLookVecNorm = math.normalizeVec3(eyeLookVec);\n            const diag = poi ? math.getAABB3DiagPoint(aabb, poi) : math.getAABB3Diag(aabb);\n            const fitFOV = params.fitFOV || this._fitFOV;\n            const sca = Math.abs(diag / Math.tan(fitFOV * math.DEGTORAD));\n\n            this._orthoScale2 = diag * 1.1;\n\n            this._eye2[0] = this._look2[0] + (eyeLookVecNorm[0] * sca);\n            this._eye2[1] = this._look2[1] + (eyeLookVecNorm[1] * sca);\n            this._eye2[2] = this._look2[2] + (eyeLookVecNorm[2] * sca);\n\n            this._up2[0] = this._up1[0];\n            this._up2[1] = this._up1[1];\n            this._up2[2] = this._up1[2];\n\n            this._flyEyeLookUp = false;\n\n        } else if (eye || look || up) {\n\n            this._flyEyeLookUp = !!eye && !!look && !!up;\n            this._flyingEye = !!eye && !look;\n            this._flyingLook = !!look && !eye;\n\n            if (look) {\n                this._look2[0] = look[0];\n                this._look2[1] = look[1];\n                this._look2[2] = look[2];\n            }\n\n            if (eye) {\n                this._eye2[0] = eye[0];\n                this._eye2[1] = eye[1];\n                this._eye2[2] = eye[2];\n            }\n\n            if (up) {\n                this._up2[0] = up[0];\n                this._up2[1] = up[1];\n                this._up2[2] = up[2];\n            }\n        }\n\n        this.fire(\"started\", params, true);\n\n        this._time1 = Date.now();\n        this._time2 = this._time1 + (params.duration ? params.duration * 1000 : this._duration);\n\n        this._flying = true; // False as soon as we stop\n\n        core.scheduleTask(this._update, this);\n    }\n\n    /**\n     * Jumps the {@link Scene}'s {@link Camera} to the given target.\n     *\n     *  * When the target is a boundary, this CameraFlightAnimation will position the {@link Camera}\n     *  at where the target fills most of the canvas.\n     *  * When the target is an explicit {@link Camera} position, given as ````eye````, ````look```` and ````up````\n     *  vectors, then this CameraFlightAnimation will jump the {@link Camera} to that target.\n     *\n     * @method flyTo\n     * @param params  {*|Component} Either a parameters object or a {@link Component} subtype that has a World-space AABB.\n     * @param[params.arc=0]  {Number} Factor in range [0..1] indicating how much the {@link Camera#eye} will swing away from its {@link Camera#look} as it flies to the target.\n     * @param [params.component] {Number|String|Component} ID or instance of a component to fly to.\n     * @param [params.aabb] {*}  World-space axis-aligned bounding box (AABB) target to fly to.\n     * @param [params.eye] {Float32Array} Position to fly the eye position to.\n     * @param [params.look] {Float32Array} Position to fly the look position to.\n     * @param [params.up] {Float32Array} Position to fly the up vector to.\n     * @param [params.fitFOV] {Number} How much of field-of-view, in degrees, that a target {@link Node} or its AABB should\n     * fill the canvas on arrival. Overrides {@link CameraFlightAnimation#fitFOV}.\n     * @param [params.fit] {Boolean} Whether to fit the target to the view volume. Overrides {@link CameraFlightAnimation#fit}.\n     */\n    jumpTo(params) {\n        this._jumpTo(params);\n    }\n\n    _jumpTo(params) {\n\n        if (this._flying) {\n            this.stop();\n        }\n\n        const camera = this.scene.camera;\n\n        var aabb;\n        var componentId;\n        var newEye;\n        var newLook;\n        var newUp;\n\n        if (params.aabb) { // Boundary3D\n            aabb = params.aabb;\n\n        } else if (params.length === 6) { // AABB\n            aabb = params;\n\n        } else if (params.eye || params.look || params.up) { // Camera pose\n            newEye = params.eye;\n            newLook = params.look;\n            newUp = params.up;\n\n        } else { // Argument must be an instance or ID of a Component (subtype)\n\n            let component = params;\n\n            if (utils.isNumeric(component) || utils.isString(component)) {\n                componentId = component;\n                component = this.scene.components[componentId];\n                if (!component) {\n                    this.error(\"Component not found: \" + utils.inQuotes(componentId));\n                    return;\n                }\n            }\n            aabb = component.aabb || this.scene.aabb;\n        }\n\n        const poi = params.poi;\n\n        if (aabb) {\n\n            if (aabb[3] <= aabb[0] || aabb[4] <= aabb[1] || aabb[5] <= aabb[2]) { // Don't fly to an empty boundary\n                return;\n            }\n\n            var diag = poi ? math.getAABB3DiagPoint(aabb, poi) : math.getAABB3Diag(aabb);\n\n            newLook = poi || math.getAABB3Center(aabb, newLook);\n\n            if (this._trail) {\n                math.subVec3(camera.look, newLook, newLookEyeVec);\n            } else {\n                math.subVec3(camera.eye, camera.look, newLookEyeVec);\n            }\n\n            math.normalizeVec3(newLookEyeVec);\n            let dist;\n            const fit = (params.fit !== undefined) ? params.fit : this._fit;\n\n            if (fit) {\n                dist = Math.abs((diag) / Math.tan((params.fitFOV || this._fitFOV) * math.DEGTORAD));\n\n            } else {\n                dist = math.lenVec3(math.subVec3(camera.eye, camera.look, tempVec3));\n            }\n\n            math.mulVec3Scalar(newLookEyeVec, dist);\n\n            camera.eye = math.addVec3(newLook, newLookEyeVec, tempVec3);\n            camera.look = newLook;\n\n        } else if (newEye || newLook || newUp) {\n\n            if (newEye) {\n                camera.eye = newEye;\n            }\n            if (newLook) {\n                camera.look = newLook;\n            }\n            if (newUp) {\n                camera.up = newUp;\n            }\n        }\n    }\n\n    _update() {\n        if (!this._flying) {\n            return;\n        }\n        const time = Date.now();\n        let t = (time - this._time1) / (this._time2 - this._time1);\n        const stopping = (t >= 1);\n        if (t > 1) {\n            t = 1;\n        }\n        t = this.easing ? this._ease(t, 0, 1, 1) : t;\n        const camera = this.scene.camera;\n        if (this._flyingEye || this._flyingLook) {\n            if (this._flyingEye) {\n                math.subVec3(camera.eye, camera.look, newLookEyeVec);\n                camera.eye = math.lerpVec3(t, 0, 1, this._eye1, this._eye2, newEye);\n                camera.look = math.subVec3(newEye, newLookEyeVec, newLook);\n            } else if (this._flyingLook) {\n                camera.look = math.lerpVec3(t, 0, 1, this._look1, this._look2, newLook);\n                //    camera.eye = math.addVec3(newLook, newLookEyeVec, newEye);\n                camera.up = math.lerpVec3(t, 0, 1, this._up1, this._up2, newUp);\n            }\n        } else if (this._flyEyeLookUp) {\n            camera.eye = math.lerpVec3(t, 0, 1, this._eye1, this._eye2, newEye);\n            camera.look = math.lerpVec3(t, 0, 1, this._look1, this._look2, newLook);\n            camera.up = math.lerpVec3(t, 0, 1, this._up1, this._up2, newUp);\n        } else {\n            math.lerpVec3(t, 0, 1, this._look1, this._look2, newLook);\n            let dist;\n            if (this._trail) {\n                math.subVec3(newLook, camera.look, newLookEyeVec);\n            } else {\n                math.subVec3(camera.eye, camera.look, newLookEyeVec);\n            }\n            math.normalizeVec3(newLookEyeVec);\n            math.lerpVec3(t, 0, 1, this._eye1, this._eye2, newEye);\n            math.subVec3(newEye, newLook, lookEyeVec);\n            dist = math.lenVec3(lookEyeVec);\n            math.mulVec3Scalar(newLookEyeVec, dist);\n            camera.eye = math.addVec3(newLook, newLookEyeVec, newEye);\n            camera.look = newLook;\n        }\n        this.scene.camera.ortho.scale = this._orthoScale1 + (t * (this._orthoScale2 - this._orthoScale1));\n        if (stopping) {\n            this.stop();\n            return;\n        }\n        core.scheduleTask(this._update, this); // Keep flying\n    }\n\n    _ease(t, b, c, d) { // Quadratic easing out - decelerating to zero velocity http://gizma.com/easing\n        t /= d;\n        return -c * t * (t - 2) + b;\n    }\n\n    /**\n     * Stops an earlier flyTo, fires arrival callback.\n     * @method stop\n     */\n    stop() {\n        if (!this._flying) {\n            return;\n        }\n        this._aabbHelper.visible = false;\n        this._flying = false;\n        this._time1 = null;\n        this._time2 = null;\n        const callback = this._callback;\n        if (callback) {\n            this._callback = null;\n            if (this._callbackScope) {\n                callback.call(this._callbackScope);\n            } else {\n                callback();\n            }\n        }\n        this.fire(\"stopped\", true, true);\n    }\n\n    /**\n     * Cancels an earlier flyTo without calling the arrival callback.\n     * @method cancel\n     */\n    cancel() {\n        if (!this._flying) {\n            return;\n        }\n        this._aabbHelper.visible = false;\n        this._flying = false;\n        this._time1 = null;\n        this._time2 = null;\n        if (this._callback) {\n            this._callback = null;\n        }\n        this.fire(\"canceled\", true, true);\n    }\n\n    /**\n     * Flight duration, in seconds, when calling {@link CameraFlightAnimation#flyTo}.\n     *\n     * Stops any flight currently in progress.\n     *\n     * @property duration\n     * @default 0.5\n     * @type Number\n     */\n    set duration(value) {\n        this._duration = value ? (value * 1000.0) : 500;\n        this.stop();\n    }\n\n    get duration() {\n        return this._duration / 1000.0;\n    }\n\n    /**\n     * When true, will ensure that this CameraFlightAnimation is flying to a boundary it will always adjust the distance between the\n     * {@link Camera#eye} and {@link Camera#look} so as to ensure that the target boundary is always filling the view volume.\n     *\n     * When false, the eye will remain at its current distance from the look position.\n     *\n     * @property fit\n     * @type Boolean\n     * @default true\n     */\n    set fit(value) {\n        this._fit = value !== false;\n    }\n\n    get fit() {\n        return this._fit;\n    }\n\n\n    /**\n     * How much of the perspective field-of-view, in degrees, that a target {@link Node} or its AABB should\n     * fill the canvas when calling {@link CameraFlightAnimation#flyTo} or {@link CameraFlightAnimation#jumpTo}.\n     *\n     * @property fitFOV\n     * @default 45\n     * @type Number\n     */\n    set fitFOV(value) {\n        this._fitFOV = value || 45;\n    }\n\n    get fitFOV() {\n        return this._fitFOV;\n    }\n\n    /**\n     * When true, will cause this CameraFlightAnimation to point the {@link Camera}\n     * in the direction that it is travelling.\n     *\n     * @property trail\n     * @type Boolean\n     * @default false\n     */\n    set trail(value) {\n        this._trail = !!value;\n    }\n\n    get trail() {\n        return this._trail;\n    }\n}\n\nexport {CameraFlightAnimation};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/camera/CameraFlightAnimation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 744,
    "kind": "variable",
    "name": "tempVec3",
    "memberof": "scene/camera/CameraFlightAnimation.js",
    "static": true,
    "longname": "scene/camera/CameraFlightAnimation.js~tempVec3",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/CameraFlightAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 745,
    "kind": "variable",
    "name": "newLook",
    "memberof": "scene/camera/CameraFlightAnimation.js",
    "static": true,
    "longname": "scene/camera/CameraFlightAnimation.js~newLook",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/CameraFlightAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 746,
    "kind": "variable",
    "name": "newEye",
    "memberof": "scene/camera/CameraFlightAnimation.js",
    "static": true,
    "longname": "scene/camera/CameraFlightAnimation.js~newEye",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/CameraFlightAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 747,
    "kind": "variable",
    "name": "newUp",
    "memberof": "scene/camera/CameraFlightAnimation.js",
    "static": true,
    "longname": "scene/camera/CameraFlightAnimation.js~newUp",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/CameraFlightAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 748,
    "kind": "variable",
    "name": "newLookEyeVec",
    "memberof": "scene/camera/CameraFlightAnimation.js",
    "static": true,
    "longname": "scene/camera/CameraFlightAnimation.js~newLookEyeVec",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/CameraFlightAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 749,
    "kind": "variable",
    "name": "lookEyeVec",
    "memberof": "scene/camera/CameraFlightAnimation.js",
    "static": true,
    "longname": "scene/camera/CameraFlightAnimation.js~lookEyeVec",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/CameraFlightAnimation.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 750,
    "kind": "class",
    "name": "CameraFlightAnimation",
    "memberof": "scene/camera/CameraFlightAnimation.js",
    "static": true,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/camera/CameraFlightAnimation.js",
    "importStyle": "{CameraFlightAnimation}",
    "description": "Jumps or flies the {@link Scene}'s {@link Camera} to look at a given target.\n\n* Located at {@link Viewer#cameraFlight}\n* Can fly or jump to its target.\n* While flying, can be stopped, or redirected to a different target.\n\nA CameraFlightAnimation's target can be:\n\n* specific ````eye````, ````look```` and ````up```` positions,\n* an axis-aligned World-space bounding box (AABB), or\n* an instance or ID of any {@link Component} subtype that provides a World-space AABB.\n\nConfigure {@link CameraFlightAnimation#fit} and {@link CameraFlightAnimation#fitFOV} to make it stop at the point\nwhere the target occupies a certain amount of the field-of-view.\n\n## Flying to a Mesh\n\nFlying to a {@link Mesh}:\n\n````Javascript\nvar mesh = new Mesh(myViewer.scene);\n\n// Fly to the Mesh's World-space AABB\nmyViewer.cameraFlight.flyTo(mesh);\n````\n## Flying to a position\n\nFlying the CameraFlightAnimation from the previous example to specified eye, look and up positions:\n\n````Javascript\nmyViewer.cameraFlight.flyTo({\n   eye: [-5,-5,-5],\n   look: [0,0,0]\n   up: [0,1,0],\n   duration: 1 // Default, seconds\n}, function() {\n         // Arrived\n     });\n````\n\n## Flying to an AABB\n\nFlying the CameraFlightAnimation from the previous two examples explicitly to the {@link Boundary3D\"}}Boundary3D's{{/crossLink}}\naxis-aligned bounding box:\n\n````Javascript\nmyViewer.cameraFlight.flyTo(mesh.aabb);\n````",
    "lineNumber": 66,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 751,
    "kind": "get",
    "name": "type",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 752,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 753,
    "kind": "member",
    "name": "_aabbHelper",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_aabbHelper",
    "access": "private",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 754,
    "kind": "member",
    "name": "_look1",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_look1",
    "access": "private",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 755,
    "kind": "member",
    "name": "_eye1",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_eye1",
    "access": "private",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 756,
    "kind": "member",
    "name": "_up1",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_up1",
    "access": "private",
    "description": null,
    "lineNumber": 104,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 757,
    "kind": "member",
    "name": "_look2",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_look2",
    "access": "private",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 758,
    "kind": "member",
    "name": "_eye2",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_eye2",
    "access": "private",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 759,
    "kind": "member",
    "name": "_up2",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_up2",
    "access": "private",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 760,
    "kind": "member",
    "name": "_orthoScale1",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_orthoScale1",
    "access": "private",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 761,
    "kind": "member",
    "name": "_orthoScale2",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_orthoScale2",
    "access": "private",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 762,
    "kind": "member",
    "name": "_flying",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_flying",
    "access": "private",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 763,
    "kind": "member",
    "name": "_flyEyeLookUp",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_flyEyeLookUp",
    "access": "private",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 764,
    "kind": "member",
    "name": "_flyingEye",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_flyingEye",
    "access": "private",
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 765,
    "kind": "member",
    "name": "_flyingLook",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_flyingLook",
    "access": "private",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 766,
    "kind": "member",
    "name": "_callback",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_callback",
    "access": "private",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 767,
    "kind": "member",
    "name": "_callbackScope",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_callbackScope",
    "access": "private",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 768,
    "kind": "member",
    "name": "_time1",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_time1",
    "access": "private",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 769,
    "kind": "member",
    "name": "_time2",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_time2",
    "access": "private",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 770,
    "kind": "member",
    "name": "easing",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#easing",
    "access": "public",
    "description": null,
    "lineNumber": 118,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 775,
    "kind": "method",
    "name": "flyTo",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#flyTo",
    "access": "public",
    "description": "Begins flying the {@link Camera} to the given target.\n\n * When the target is a boundary, the {@link Camera} will fly towards the target\n   and stop when the target fills most of the canvas.\n * When the target is an explicit {@link Camera} position, given as ````eye````, ````look```` and ````up````\n   vectors, then this CameraFlightAnimation will interpolate the {@link Camera} to that target and stop there.",
    "lineNumber": 151,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "flyTo"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "scene",
        "defaultRaw": "scene",
        "name": "params",
        "description": "{*|Component} Either a parameters object or a {@link Component} subtype that has an AABB.\n@param[params.arc=0]  {Number} Factor in range [0..1] indicating how much the\n{@link Lookat/eye:property\"}}Camera's eye{{/crossLink}} position will\nswing away from its {@link Lookat/eye:property\"}}look{{/crossLink}} position as it flies to the target."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.component",
        "description": "{Number|String|Component} ID or instance of a component to fly to. Defaults to the entire {@link Scene}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.aabb",
        "description": "{*}  World-space axis-aligned bounding box (AABB) target to fly to."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.eye",
        "description": "{Float32Array} Position to fly the eye position to."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.look",
        "description": "{Float32Array} Position to fly the look position to."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.up",
        "description": "{Float32Array} Position to fly the up vector to."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "params.fit",
        "description": "{Boolean} Whether to fit the target to the view volume. Overrides {@link CameraFlightAnimation#fit}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.fitFOV",
        "description": "{Number} How much of field-of-view, in degrees, that a target {@link Node} or its AABB should\nfill the canvas on arrival. Overrides {@link CameraFlightAnimation#fitFOV}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.duration",
        "description": "{Number} Flight duration in seconds.  Overrides {@link CameraFlightAnimation#duration}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.orthoScale",
        "description": "{Number} TODO: document this"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "callback",
        "description": "{Function} Callback fired on arrival"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "scope",
        "description": "{Object} Optional scope for callback"
      }
    ],
    "return": null
  },
  {
    "__docId__": 790,
    "kind": "method",
    "name": "jumpTo",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#jumpTo",
    "access": "public",
    "description": "Jumps the {@link Scene}'s {@link Camera} to the given target.\n\n * When the target is a boundary, this CameraFlightAnimation will position the {@link Camera}\n at where the target fills most of the canvas.\n * When the target is an explicit {@link Camera} position, given as ````eye````, ````look```` and ````up````\n vectors, then this CameraFlightAnimation will jump the {@link Camera} to that target.",
    "lineNumber": 317,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "flyTo"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "{*|Component} Either a parameters object or a {@link Component} subtype that has a World-space AABB.\n@param[params.arc=0]  {Number} Factor in range [0..1] indicating how much the {@link Camera#eye} will swing away from its {@link Camera#look} as it flies to the target."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.component",
        "description": "{Number|String|Component} ID or instance of a component to fly to."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.aabb",
        "description": "{*}  World-space axis-aligned bounding box (AABB) target to fly to."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.eye",
        "description": "{Float32Array} Position to fly the eye position to."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.look",
        "description": "{Float32Array} Position to fly the look position to."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.up",
        "description": "{Float32Array} Position to fly the up vector to."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.fitFOV",
        "description": "{Number} How much of field-of-view, in degrees, that a target {@link Node} or its AABB should\nfill the canvas on arrival. Overrides {@link CameraFlightAnimation#fitFOV}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params.fit",
        "description": "{Boolean} Whether to fit the target to the view volume. Overrides {@link CameraFlightAnimation#fit}."
      }
    ],
    "return": null
  },
  {
    "__docId__": 791,
    "kind": "method",
    "name": "_jumpTo",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_jumpTo",
    "access": "private",
    "description": null,
    "lineNumber": 321,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 792,
    "kind": "method",
    "name": "_update",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_update",
    "access": "private",
    "description": null,
    "lineNumber": 409,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 793,
    "kind": "method",
    "name": "_ease",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_ease",
    "access": "private",
    "description": null,
    "lineNumber": 459,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "c",
        "types": [
          "*"
        ]
      },
      {
        "name": "d",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 794,
    "kind": "method",
    "name": "stop",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#stop",
    "access": "public",
    "description": "Stops an earlier flyTo, fires arrival callback.",
    "lineNumber": 468,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "stop"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 799,
    "kind": "method",
    "name": "cancel",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#cancel",
    "access": "public",
    "description": "Cancels an earlier flyTo without calling the arrival callback.",
    "lineNumber": 492,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "cancel"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 804,
    "kind": "set",
    "name": "duration",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#duration",
    "access": "public",
    "description": "Flight duration, in seconds, when calling {@link CameraFlightAnimation#flyTo}.\n\nStops any flight currently in progress.",
    "lineNumber": 515,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0.5"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "duration",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 805,
    "kind": "member",
    "name": "_duration",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_duration",
    "access": "private",
    "description": null,
    "lineNumber": 516,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 806,
    "kind": "get",
    "name": "duration",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#duration",
    "access": "public",
    "description": null,
    "lineNumber": 520,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 807,
    "kind": "set",
    "name": "fit",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#fit",
    "access": "public",
    "description": "When true, will ensure that this CameraFlightAnimation is flying to a boundary it will always adjust the distance between the\n{@link Camera#eye} and {@link Camera#look} so as to ensure that the target boundary is always filling the view volume.\n\nWhen false, the eye will remain at its current distance from the look position.",
    "lineNumber": 534,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fit",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 808,
    "kind": "member",
    "name": "_fit",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_fit",
    "access": "private",
    "description": null,
    "lineNumber": 535,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 809,
    "kind": "get",
    "name": "fit",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#fit",
    "access": "public",
    "description": null,
    "lineNumber": 538,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 810,
    "kind": "set",
    "name": "fitFOV",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#fitFOV",
    "access": "public",
    "description": "How much of the perspective field-of-view, in degrees, that a target {@link Node} or its AABB should\nfill the canvas when calling {@link CameraFlightAnimation#flyTo} or {@link CameraFlightAnimation#jumpTo}.",
    "lineNumber": 551,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "45"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fitFOV",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 811,
    "kind": "member",
    "name": "_fitFOV",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_fitFOV",
    "access": "private",
    "description": null,
    "lineNumber": 552,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 812,
    "kind": "get",
    "name": "fitFOV",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#fitFOV",
    "access": "public",
    "description": null,
    "lineNumber": 555,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 813,
    "kind": "set",
    "name": "trail",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#trail",
    "access": "public",
    "description": "When true, will cause this CameraFlightAnimation to point the {@link Camera}\nin the direction that it is travelling.",
    "lineNumber": 567,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "trail",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 814,
    "kind": "member",
    "name": "_trail",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#_trail",
    "access": "private",
    "description": null,
    "lineNumber": 568,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 815,
    "kind": "get",
    "name": "trail",
    "memberof": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraFlightAnimation.js~CameraFlightAnimation#trail",
    "access": "public",
    "description": null,
    "lineNumber": 571,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 816,
    "kind": "file",
    "name": "scene/camera/CameraPath.js",
    "content": "import {Component} from \"../Component.js\"\nimport {SplineCurve} from \"../paths/SplineCurve.js\"\nimport {math} from \"../math/math.js\";\n\nconst tempVec3a = math.vec3();\n\nclass CameraPath extends Component {\n\n    constructor(owner, cfg={}) {\n\n        super(owner, cfg);\n\n        this._frames = [];\n\n        this._eyeCurve = new SplineCurve(this);\n        this._lookCurve = new SplineCurve(this);\n        this._upCurve = new SplineCurve(this);\n\n        if (cfg.frames) {\n            this.addFrames(cfg.frames);\n        }\n    }\n\n    /**\n     The frames set on the constructor and added with {@link CameraPath#addFrame}.\n\n     @property frames\n     @type {[]}\n     @final\n     */\n    get frames() {\n        return this._frames;\n    }\n\n    /**\n     The {@link SplineCurve} which defines the path along which the {@link Camera#eye} travels.\n\n     This property is read-only and is internally created and destroyed by this CameraPath.\n\n     @property eyeCurve\n     @type {SplineCurve}\n     @final\n     */\n    get eyeCurve() {\n        return this._eyeCurve;\n    }\n\n    /**\n     The {@link SplineCurve} which defines the path along which the {@link Camera#look} travels.\n\n     This property is read-only and is internally created and destroyed by this CameraPath.\n\n     @property lookCurve\n     @type {SplineCurve}\n     @final\n     */\n    get lookCurve() {\n        return this._lookCurve;\n    }\n\n    /**\n     The {@link SplineCurve} which defines the path along which the {@link Camera#up\"} travels.\n\n     This property is read-only and is internally created and destroyed by this CameraPath.\n\n     @property upCurve\n     @type {SplineCurve}\n     @final\n     */\n    get upCurve() {\n        return this._upCurve;\n    }\n\n    /**\n     Adds a frame to this CameraPath, given as the current position of the {@link Camera}.\n\n     @param {Number} t Time instant for the new frame.\n     */\n    saveFrame(t) {\n        const camera = this.scene.camera;\n        this.addFrame(t, camera.eye, camera.look, camera.up);\n    }\n\n    /**\n     Adds a frame to this CameraPath, specified as values for eye, look and up vectors at a given time instant.\n\n     @param {Number} t Time instant for the new frame;\n     @param {Float32Array} eye A three-element vector specifying the eye position for the new frame.\n     @param {Float32Array} look A three-element vector specifying the look position for the new frame.\n     @param {Float32Array} up A three-element vector specifying the up vector for the new frame.\n     */\n    addFrame(t, eye, look, up) {\n        const frame = {\n            t: t,\n            eye: eye.slice(0),\n            look: look.slice(0),\n            up: up.slice(0)\n        };\n        this._frames.push(frame);\n        this._eyeCurve.points.push(frame.eye);\n        this._lookCurve.points.push(frame.look);\n        this._upCurve.points.push(frame.up);\n    }\n\n    /**\n     Adds multiple frames to this CameraPath, each frame specified as a set of values for eye, look and up\n     vectors at a given time instant.\n\n     @param {Array} frames An array of frames.\n     */\n    addFrames(frames) {\n        let frame;\n        for (let i = 0, len = frames.length; i < len; i++) {\n            frame = frames[i];\n            this.addFrame(frame.t || 0, frame.eye, frame.look, frame.up);\n        }\n    }\n\n    /**\n     Sets the position of the {@link Camera} to a position interpolated within this CameraPath\n     at the given time instant.\n\n     @param {Number} t Time instant.\n     */\n    loadFrame(t) {\n\n        const camera = this.scene.camera;\n\n        t = t < 0.0 ? 0.0 : (t > 1.0 ? 1.0 : t);\n\n        camera.eye = this._eyeCurve.getPoint(t, tempVec3a);\n        camera.look = this._lookCurve.getPoint(t, tempVec3a);\n        camera.up = this._upCurve.getPoint(t, tempVec3a);\n    }\n\n    /**\n     Gets eye, look and up vectors on this CameraPath at a given instant.\n\n     @param {Number} t Time instant.\n     @param {Float32Array} eye The eye position to update.\n     @param {Float32Array} look The look position to update.\n     @param {Float32Array} up The up vector to update.\n     */\n    sampleFrame(t, eye, look, up) {\n        t = t < 0.0 ? 0.0 : (t > 1.0 ? 1.0 : t);\n        this._eyeCurve.getPoint(t, eye);\n        this._lookCurve.getPoint(t, look);\n        this._upCurve.getPoint(t, up);\n    }\n\n    /**\n     Removes all frames from this CameraPath.\n     */\n    clearFrames() {\n        this._frames = [];\n        this._eyeCurve.points = [];\n        this._lookCurve.points = [];\n        this._upCurve.points = [];\n    }\n}\n\nexport {CameraPath}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/camera/CameraPath.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 817,
    "kind": "variable",
    "name": "tempVec3a",
    "memberof": "scene/camera/CameraPath.js",
    "static": true,
    "longname": "scene/camera/CameraPath.js~tempVec3a",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/camera/CameraPath.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 818,
    "kind": "class",
    "name": "CameraPath",
    "memberof": "scene/camera/CameraPath.js",
    "static": true,
    "longname": "scene/camera/CameraPath.js~CameraPath",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/camera/CameraPath.js",
    "importStyle": "{CameraPath}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 819,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/camera/CameraPath.js~CameraPath",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPath.js~CameraPath#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 820,
    "kind": "member",
    "name": "_frames",
    "memberof": "scene/camera/CameraPath.js~CameraPath",
    "static": false,
    "longname": "scene/camera/CameraPath.js~CameraPath#_frames",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 821,
    "kind": "member",
    "name": "_eyeCurve",
    "memberof": "scene/camera/CameraPath.js~CameraPath",
    "static": false,
    "longname": "scene/camera/CameraPath.js~CameraPath#_eyeCurve",
    "access": "private",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 822,
    "kind": "member",
    "name": "_lookCurve",
    "memberof": "scene/camera/CameraPath.js~CameraPath",
    "static": false,
    "longname": "scene/camera/CameraPath.js~CameraPath#_lookCurve",
    "access": "private",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 823,
    "kind": "member",
    "name": "_upCurve",
    "memberof": "scene/camera/CameraPath.js~CameraPath",
    "static": false,
    "longname": "scene/camera/CameraPath.js~CameraPath#_upCurve",
    "access": "private",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 824,
    "kind": "get",
    "name": "frames",
    "memberof": "scene/camera/CameraPath.js~CameraPath",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPath.js~CameraPath#frames",
    "access": "public",
    "description": "The frames set on the constructor and added with {@link CameraPath#addFrame}.",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "frames",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 825,
    "kind": "get",
    "name": "eyeCurve",
    "memberof": "scene/camera/CameraPath.js~CameraPath",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPath.js~CameraPath#eyeCurve",
    "access": "public",
    "description": "The {@link SplineCurve} which defines the path along which the {@link Camera#eye} travels.\n\nThis property is read-only and is internally created and destroyed by this CameraPath.",
    "lineNumber": 44,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "eyeCurve",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "SplineCurve"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 826,
    "kind": "get",
    "name": "lookCurve",
    "memberof": "scene/camera/CameraPath.js~CameraPath",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPath.js~CameraPath#lookCurve",
    "access": "public",
    "description": "The {@link SplineCurve} which defines the path along which the {@link Camera#look} travels.\n\nThis property is read-only and is internally created and destroyed by this CameraPath.",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "lookCurve",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "SplineCurve"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 827,
    "kind": "get",
    "name": "upCurve",
    "memberof": "scene/camera/CameraPath.js~CameraPath",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPath.js~CameraPath#upCurve",
    "access": "public",
    "description": "The {@link SplineCurve} which defines the path along which the {@link Camera#up\"} travels.\n\nThis property is read-only and is internally created and destroyed by this CameraPath.",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "upCurve",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "SplineCurve"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 828,
    "kind": "method",
    "name": "saveFrame",
    "memberof": "scene/camera/CameraPath.js~CameraPath",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPath.js~CameraPath#saveFrame",
    "access": "public",
    "description": "Adds a frame to this CameraPath, given as the current position of the {@link Camera}.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "Time instant for the new frame."
      }
    ],
    "return": null
  },
  {
    "__docId__": 829,
    "kind": "method",
    "name": "addFrame",
    "memberof": "scene/camera/CameraPath.js~CameraPath",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPath.js~CameraPath#addFrame",
    "access": "public",
    "description": "Adds a frame to this CameraPath, specified as values for eye, look and up vectors at a given time instant.",
    "lineNumber": 92,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "Time instant for the new frame;"
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "eye",
        "description": "A three-element vector specifying the eye position for the new frame."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "look",
        "description": "A three-element vector specifying the look position for the new frame."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "up",
        "description": "A three-element vector specifying the up vector for the new frame."
      }
    ],
    "return": null
  },
  {
    "__docId__": 830,
    "kind": "method",
    "name": "addFrames",
    "memberof": "scene/camera/CameraPath.js~CameraPath",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPath.js~CameraPath#addFrames",
    "access": "public",
    "description": "Adds multiple frames to this CameraPath, each frame specified as a set of values for eye, look and up\nvectors at a given time instant.",
    "lineNumber": 111,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "frames",
        "description": "An array of frames."
      }
    ],
    "return": null
  },
  {
    "__docId__": 831,
    "kind": "method",
    "name": "loadFrame",
    "memberof": "scene/camera/CameraPath.js~CameraPath",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPath.js~CameraPath#loadFrame",
    "access": "public",
    "description": "Sets the position of the {@link Camera} to a position interpolated within this CameraPath\nat the given time instant.",
    "lineNumber": 125,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "Time instant."
      }
    ],
    "return": null
  },
  {
    "__docId__": 832,
    "kind": "method",
    "name": "sampleFrame",
    "memberof": "scene/camera/CameraPath.js~CameraPath",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPath.js~CameraPath#sampleFrame",
    "access": "public",
    "description": "Gets eye, look and up vectors on this CameraPath at a given instant.",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "Time instant."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "eye",
        "description": "The eye position to update."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "look",
        "description": "The look position to update."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "up",
        "description": "The up vector to update."
      }
    ],
    "return": null
  },
  {
    "__docId__": 833,
    "kind": "method",
    "name": "clearFrames",
    "memberof": "scene/camera/CameraPath.js~CameraPath",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPath.js~CameraPath#clearFrames",
    "access": "public",
    "description": "Removes all frames from this CameraPath.",
    "lineNumber": 154,
    "params": [],
    "return": null
  },
  {
    "__docId__": 835,
    "kind": "file",
    "name": "scene/camera/CameraPathAnimation.js",
    "content": "import {Component} from \"../Component.js\"\nimport {CameraPath} from \"./CameraPath.js\"\n\nclass CameraPathAnimation extends Component {\n\n    constructor(owner, cfg={}) {\n\n        super(owner, cfg);\n\n        this._cameraFlightAnimation = this.create({\n            type: \"CameraFlightAnimation\"\n        });\n\n        this._t = 0;\n\n        this.state = CameraPathAnimation.SCRUBBING;\n\n        this._playingFromT = 0;\n        this._playingToT = 0;\n        this._playingRate = cfg.playingRate || 1.0;\n        this._playingDir = 1.0;\n\n        this.cameraPath = cfg.cameraPath;\n\n        this._tick = this.scene.on(\"tick\", this._updateT, this);\n    }\n\n    _updateT() {\n\n        const cameraPath = this._attached.cameraPath;\n\n        if (!cameraPath) {\n            return;\n        }\n\n        const f = 0.002;\n        //var f = 1.0;\n\n        switch (this.state) {\n\n            case CameraPathAnimation.SCRUBBING:\n                return;\n\n            case CameraPathAnimation.PLAYING:\n\n                this._t += this._playingRate * f;\n\n                const numFrames = this.cameraPath.frames.length;\n                if (numFrames === 0 || (this._playingDir < 0 && this._t <= 0) || (this._playingDir > 0 && this._t >= this.cameraPath.frames[numFrames - 1].t)) {\n                    this.state = CameraPathAnimation.SCRUBBING;\n                    this._t = this.cameraPath.frames[numFrames - 1].t;\n                    return;\n                }\n\n                cameraPath.loadFrame(this._t);\n\n                break;\n\n            case CameraPathAnimation.PLAYING_TO:\n\n                let t = this._t + (this._playingRate * f * this._playingDir);\n\n                //t = this._ease(t, this._playingFromT, this._playingToT, this._playingToT - this._playingFromT);\n\n                if ((this._playingDir < 0 && t <= this._playingToT) || (this._playingDir > 0 && t >= this._playingToT)) {\n                    t = this._playingToT;\n                    this.state = CameraPathAnimation.SCRUBBING;\n                }\n\n                this._t = t;\n\n                cameraPath.loadFrame(this._t);\n\n                break;\n        }\n    }\n\n    // Quadratic easing out - decelerating to zero velocity\n    // http://gizma.com/easing\n\n    _ease(t, b, c, d) {\n        t /= d;\n        return -c * t * (t - 2) + b;\n    }\n\n    /**\n     The {@link CameraPath} for this CameraPathAnimation.\n\n     @property cameraPath\n     @type CameraPath\n     */\n    set cameraPath(value) {\n        this._attach({name: \"cameraPath\", type: \"CameraPath\", component: value, sceneDefault: false});\n    }\n\n    get cameraPath() {\n        return this._attached.cameraPath;\n    }\n\n    /**\n     The rate at which this CameraPathAnimation plays.\n\n     @property rate\n     @type Number\n     */\n    set rate(value) {\n        this._playingRate = value;\n    }\n\n    get rate() {\n        return this._playingRate;\n    }\n\n    /**\n     * Begins playing this CameraPathAnimation from the current time.\n     * @method play\n     */\n    play() {\n        if (!this._attached.cameraPath) {\n            return;\n        }\n        this.state = CameraPathAnimation.PLAYING;\n    }\n\n    /**\n     * Begins playing this CameraPathAnimation from the current time to the given time.\n     *\n     * @method playToT\n     * @param {Number} t Time instant.\n     */\n    playToT(t) {\n        const cameraPath = this._attached.cameraPath;\n        if (!cameraPath) {\n            return;\n        }\n        this._playingFromT = this._t;\n        this._playingToT = t;\n        this._playingDir = (this._playingToT - this._playingFromT) < 0 ? -1 : 1;\n        this.state = CameraPathAnimation.PLAYING_TO;\n    }\n\n    /**\n     * Begins playing this CameraPathAnimation from the current time to the time at the given frame.\n     *\n     * @method playToFrame\n     * @param {Number} frameIdx Index of the frame to play to.\n     */\n    playToFrame(frameIdx) {\n        const cameraPath = this._attached.cameraPath;\n        if (!cameraPath) {\n            return;\n        }\n        const frame = cameraPath.frames[frameIdx];\n        if (!frame) {\n            this.error(\"playToFrame - frame index out of range: \" + frameIdx);\n            return;\n        }\n        const t = (1.0 / cameraPath.frames.length) * frameIdx;\n        this.playToT(t);\n    }\n\n    /**\n     * Flies this CameraPathAnimation's {@link Camera} to the time at the given frame.\n     *\n     * @method flyToFrame\n     * @param {Number} frameIdx Index of the frame to play to.\n     * @param {Function} [ok] Callback to fire when playing is complete.\n     */\n    flyToFrame(frameIdx, ok) {\n        const cameraPath = this._attached.cameraPath;\n        if (!cameraPath) {\n            return;\n        }\n        const frame = cameraPath.frames[frameIdx];\n        if (!frame) {\n            this.error(\"flyToFrame - frame index out of range: \" + frameIdx);\n            return;\n        }\n        this.state = CameraPathAnimation.SCRUBBING;\n        this._cameraFlightAnimation.flyTo(frame, ok);\n    }\n\n    /**\n     * Scrubs (sets) this CameraPathAnimation to the the given time.\n     *\n     * @method scrubToT\n     * @param {Number} t Time instant.\n     */\n    scrubToT(t) {\n        const cameraPath = this._attached.cameraPath;\n        if (!cameraPath) {\n            return;\n        }\n        const camera = this.scene.camera;\n        if (!camera) {\n            return;\n        }\n        this._t = t;\n        cameraPath.loadFrame(this._t, camera);\n        this.state = CameraPathAnimation.SCRUBBING;\n    }\n\n    /**\n     * Scrubs this CameraPathAnimation to the given frame.\n     *\n     * @method scrubToFrame\n     * @param {Number} frameIdx Index of the frame to scrub to.\n     */\n    scrubToFrame(frameIdx) {\n        const cameraPath = this._attached.cameraPath;\n        if (!cameraPath) {\n            return;\n        }\n        const camera = this.scene.camera;\n        if (!camera) {\n            return;\n        }\n        const frame = cameraPath.frames[frameIdx];\n        if (!frame) {\n            this.error(\"playToFrame - frame index out of range: \" + frameIdx);\n            return;\n        }\n        this._t = (1.0 / cameraPath.frames.length) * frameIdx;\n        cameraPath.loadFrame(this._t, camera);\n        this.state = CameraPathAnimation.SCRUBBING;\n    }\n\n    /**\n     * Stops playing this CameraPathAnimation.\n     *\n     * @method stop\n     */\n    stop() {\n        this.state = CameraPathAnimation.SCRUBBING;\n    }\n\n    destroy() {\n        super.destroy();\n        this.scene.off(this._tick);\n    }\n}\n\nCameraPathAnimation.STOPPED = 0;\nCameraPathAnimation.SCRUBBING = 1;\nCameraPathAnimation.PLAYING = 2;\nCameraPathAnimation.PLAYING_TO = 3;\n\nexport {CameraPathAnimation}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/camera/CameraPathAnimation.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 836,
    "kind": "class",
    "name": "CameraPathAnimation",
    "memberof": "scene/camera/CameraPathAnimation.js",
    "static": true,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/camera/CameraPathAnimation.js",
    "importStyle": "{CameraPathAnimation}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 837,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 838,
    "kind": "member",
    "name": "_cameraFlightAnimation",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#_cameraFlightAnimation",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 839,
    "kind": "member",
    "name": "_t",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#_t",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 840,
    "kind": "member",
    "name": "state",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#state",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 841,
    "kind": "member",
    "name": "_playingFromT",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#_playingFromT",
    "access": "private",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 842,
    "kind": "member",
    "name": "_playingToT",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#_playingToT",
    "access": "private",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 843,
    "kind": "member",
    "name": "_playingRate",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#_playingRate",
    "access": "private",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 844,
    "kind": "member",
    "name": "_playingDir",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#_playingDir",
    "access": "private",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 846,
    "kind": "member",
    "name": "_tick",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#_tick",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 847,
    "kind": "method",
    "name": "_updateT",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#_updateT",
    "access": "private",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 853,
    "kind": "method",
    "name": "_ease",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#_ease",
    "access": "private",
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "t",
        "types": [
          "*"
        ]
      },
      {
        "name": "b",
        "types": [
          "*"
        ]
      },
      {
        "name": "c",
        "types": [
          "*"
        ]
      },
      {
        "name": "d",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 854,
    "kind": "set",
    "name": "cameraPath",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#cameraPath",
    "access": "public",
    "description": "The {@link CameraPath} for this CameraPathAnimation.",
    "lineNumber": 92,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cameraPath",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 855,
    "kind": "get",
    "name": "cameraPath",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#cameraPath",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 856,
    "kind": "set",
    "name": "rate",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#rate",
    "access": "public",
    "description": "The rate at which this CameraPathAnimation plays.",
    "lineNumber": 106,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rate",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 858,
    "kind": "get",
    "name": "rate",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#rate",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 859,
    "kind": "method",
    "name": "play",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#play",
    "access": "public",
    "description": "Begins playing this CameraPathAnimation from the current time.",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "play"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 861,
    "kind": "method",
    "name": "playToT",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#playToT",
    "access": "public",
    "description": "Begins playing this CameraPathAnimation from the current time to the given time.",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "playToT"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "Time instant."
      }
    ],
    "return": null
  },
  {
    "__docId__": 866,
    "kind": "method",
    "name": "playToFrame",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#playToFrame",
    "access": "public",
    "description": "Begins playing this CameraPathAnimation from the current time to the time at the given frame.",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "playToFrame"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "frameIdx",
        "description": "Index of the frame to play to."
      }
    ],
    "return": null
  },
  {
    "__docId__": 867,
    "kind": "method",
    "name": "flyToFrame",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#flyToFrame",
    "access": "public",
    "description": "Flies this CameraPathAnimation's {@link Camera} to the time at the given frame.",
    "lineNumber": 169,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "flyToFrame"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "frameIdx",
        "description": "Index of the frame to play to."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "ok",
        "description": "Callback to fire when playing is complete."
      }
    ],
    "return": null
  },
  {
    "__docId__": 869,
    "kind": "method",
    "name": "scrubToT",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#scrubToT",
    "access": "public",
    "description": "Scrubs (sets) this CameraPathAnimation to the the given time.",
    "lineNumber": 189,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "scrubToT"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "Time instant."
      }
    ],
    "return": null
  },
  {
    "__docId__": 872,
    "kind": "method",
    "name": "scrubToFrame",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#scrubToFrame",
    "access": "public",
    "description": "Scrubs this CameraPathAnimation to the given frame.",
    "lineNumber": 209,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "scrubToFrame"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "frameIdx",
        "description": "Index of the frame to scrub to."
      }
    ],
    "return": null
  },
  {
    "__docId__": 875,
    "kind": "method",
    "name": "stop",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#stop",
    "access": "public",
    "description": "Stops playing this CameraPathAnimation.",
    "lineNumber": 233,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "stop"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 877,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/camera/CameraPathAnimation.js~CameraPathAnimation",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CameraPathAnimation.js~CameraPathAnimation#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 878,
    "kind": "file",
    "name": "scene/camera/CustomProjection.js",
    "content": "import {math} from '../math/math.js';\nimport {Component} from '../Component.js';\nimport {RenderState} from '../webgl/RenderState.js';\n\n/**\n * @desc Defines a projection for a {@link Camera} as a custom 4x4 matrix..\n *\n * Located at {@link Camera#customProjection}.\n */\nclass CustomProjection extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"CustomProjection\";\n    }\n\n    /**\n     * @constructor\n     * @private\n     */\n    constructor(owner, cfg = {}) {\n        super(owner, cfg);\n        this._state = new RenderState({\n            matrix: math.mat4()\n        });\n        this.matrix = cfg.matrix;\n    }\n\n    /**\n     The CustomProjection's projection transform matrix.\n\n     Fires a {@link CustomProjection/matrix:event} event on change.\n\n     @property matrix\n     @default [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n     @type {Float32Array}\n     */\n    set matrix(matrix) {\n\n        this._state.matrix.set(matrix || [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]);\n\n        /**\n         Fired whenever this CustomProjection's {@link CustomProjection/matrix} property changes.\n\n         @event matrix\n         @param value The property's new value\n         */\n        this.fire(\"far\", this._state.matrix);\n    }\n\n    get matrix() {\n        return this._state.matrix;\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\nexport {CustomProjection};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/camera/CustomProjection.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 879,
    "kind": "class",
    "name": "CustomProjection",
    "memberof": "scene/camera/CustomProjection.js",
    "static": true,
    "longname": "scene/camera/CustomProjection.js~CustomProjection",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/camera/CustomProjection.js",
    "importStyle": "{CustomProjection}",
    "description": "Defines a projection for a {@link Camera} as a custom 4x4 matrix..\n\nLocated at {@link Camera#customProjection}.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 880,
    "kind": "get",
    "name": "type",
    "memberof": "scene/camera/CustomProjection.js~CustomProjection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CustomProjection.js~CustomProjection#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 881,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/camera/CustomProjection.js~CustomProjection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CustomProjection.js~CustomProjection#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 882,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/camera/CustomProjection.js~CustomProjection",
    "static": false,
    "longname": "scene/camera/CustomProjection.js~CustomProjection#_state",
    "access": "private",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 884,
    "kind": "set",
    "name": "matrix",
    "memberof": "scene/camera/CustomProjection.js~CustomProjection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CustomProjection.js~CustomProjection#matrix",
    "access": "public",
    "description": "The CustomProjection's projection transform matrix.\n\nFires a {@link CustomProjection/matrix:event} event on change.",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 885,
    "kind": "get",
    "name": "matrix",
    "memberof": "scene/camera/CustomProjection.js~CustomProjection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CustomProjection.js~CustomProjection#matrix",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 886,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/camera/CustomProjection.js~CustomProjection",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/CustomProjection.js~CustomProjection#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 887,
    "kind": "file",
    "name": "scene/camera/Frustum.js",
    "content": "import {Component} from '../Component.js';\nimport {RenderState} from '../webgl/RenderState.js';\nimport {math} from '../math/math.js';\n\n/**\n * @desc Defines its {@link Camera}'s perspective projection as a frustum-shaped view volume.\n *\n * * Located at {@link Camera#frustum}.\n * * Allows to explicitly set the positions of the left, right, top, bottom, near and far planes, which is useful for asymmetrical view volumes, such as for stereo viewing.\n * * {@link Frustum#near} and {@link Frustum#far} specify the distances to the WebGL clipping planes.\n */\nclass Frustum extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Frustum\";\n    }\n\n    /**\n     * @constructor\n     * @private\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({\n            matrix: math.mat4()\n        });\n\n        this._left = -1.0;\n        this._right = 1.0;\n        this._bottom = -1.0;\n        this._top = 1.0;\n        this._near = 0.1;\n        this._far = 5000.0;\n\n        // Set component properties\n\n        this.left = cfg.left;\n        this.right = cfg.right;\n        this.bottom = cfg.bottom;\n        this.top = cfg.top;\n        this.near = cfg.near;\n        this.far = cfg.far;\n    }\n\n    _update() {\n        math.frustumMat4(this._left, this._right, this._bottom, this._top, this._near, this._far, this._state.matrix);\n        this.glRedraw();\n        this.fire(\"matrix\", this._state.matrix);\n    }\n\n    /**\n     Position of this Frustum's left plane on the View-space X-axis.\n\n     Fires a {@link Frustum/left:event} event on change.\n\n     @property left\n     @default -1.0\n     @type Number\n     */\n\n    set left(value) {\n        this._left = (value !== undefined && value !== null) ? value : -1.0;\n        this._needUpdate();\n        /**\n         Fired whenever this Frustum's {@link Frustum/left} property changes.\n\n         @event left\n         @param value The property's new value\n         */\n        this.fire(\"left\", this._left);\n    }\n\n    get left() {\n        return this._left;\n    }\n\n    /**\n     Position of this Frustum's right plane on the View-space X-axis.\n\n     Fires a {@link Frustum/right:event} event on change.\n\n     @property right\n     @default 1.0\n     @type Number\n     */\n    set right(value) {\n        this._right = (value !== undefined && value !== null) ? value : 1.0;\n        this._needUpdate();\n        /**\n         Fired whenever this Frustum's {@link Frustum/right} property changes.\n\n         @event right\n         @param value The property's new value\n         */\n        this.fire(\"right\", this._right);\n    }\n\n    get right() {\n        return this._right;\n    }\n\n    /**\n     Position of this Frustum's top plane on the View-space Y-axis.\n\n     Fires a {@link Frustum/top:event} event on change.\n\n     @property top\n     @default 1.0\n     @type Number\n     */\n    set top(value) {\n        this._top = (value !== undefined && value !== null) ? value : 1.0;\n        this._needUpdate();\n        /**\n         Fired whenever this Frustum's   {@link Frustum/top} property changes.\n\n         @event top\n         @param value The property's new value\n         */\n        this.fire(\"top\", this._top);\n    }\n\n    get top() {\n        return this._top;\n    }\n\n    /**\n     Position of this Frustum's bottom plane on the View-space Y-axis.\n\n     Fires a {@link Frustum/bottom:event} event on change.\n\n     @property bottom\n     @default -1.0\n     @type Number\n     */\n    set bottom(value) {\n        this._bottom = (value !== undefined && value !== null) ? value : -1.0;\n        this._needUpdate();\n        /**\n         Fired whenever this Frustum's   {@link Frustum/bottom} property changes.\n\n         @event bottom\n         @param value The property's new value\n         */\n        this.fire(\"bottom\", this._bottom);\n    }\n\n    get bottom() {\n        return this._bottom;\n    }\n\n    /**\n     Position of this Frustum's near plane on the positive View-space Z-axis.\n\n     Fires a {@link Frustum/near:event} event on change.\n\n     @property near\n     @default 0.1\n     @type Number\n     */\n    set near(value) {\n        this._near = (value !== undefined && value !== null) ? value : 0.1;\n        this._needUpdate();\n        /**\n         Fired whenever this Frustum's {@link Frustum#near} property changes.\n\n         @event near\n         @param value The property's new value\n         */\n        this.fire(\"near\", this._near);\n    }\n\n    get near() {\n        return this._near;\n    }\n\n    /**\n     Position of this Frustum's far plane on the positive View-space Z-axis.\n\n     Fires a {@link Frustum/far:event} event on change.\n\n     @property far\n     @default 10000.0\n     @type Number\n     */\n    set far(value) {\n        this._far = (value !== undefined && value !== null) ? value : 10000.0;\n        this._needUpdate();\n        /**\n         Fired whenever this Frustum's  {@link Frustum#far} property changes.\n\n         @event far\n         @param value The property's new value\n         */\n        this.fire(\"far\", this._far);\n    }\n\n    get far() {\n        return this._far;\n    }\n\n    /**\n     The Frustum's projection transform matrix.\n\n     Fires a {@link Frustum/matrix:event} event on change.\n\n     @property matrix\n     @default [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n     @type {Float32Array}\n     */\n    get matrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        return this._state.matrix;\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n        super.destroy();\n    }\n}\n\nexport {Frustum};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/camera/Frustum.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 888,
    "kind": "class",
    "name": "Frustum",
    "memberof": "scene/camera/Frustum.js",
    "static": true,
    "longname": "scene/camera/Frustum.js~Frustum",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/camera/Frustum.js",
    "importStyle": "{Frustum}",
    "description": "Defines its {@link Camera}'s perspective projection as a frustum-shaped view volume.\n\n* Located at {@link Camera#frustum}.\n* Allows to explicitly set the positions of the left, right, top, bottom, near and far planes, which is useful for asymmetrical view volumes, such as for stereo viewing.\n* {@link Frustum#near} and {@link Frustum#far} specify the distances to the WebGL clipping planes.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 889,
    "kind": "get",
    "name": "type",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 890,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 891,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#_state",
    "access": "private",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 892,
    "kind": "member",
    "name": "_left",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#_left",
    "access": "private",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 893,
    "kind": "member",
    "name": "_right",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#_right",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 894,
    "kind": "member",
    "name": "_bottom",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#_bottom",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 895,
    "kind": "member",
    "name": "_top",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#_top",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 896,
    "kind": "member",
    "name": "_near",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#_near",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 897,
    "kind": "member",
    "name": "_far",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#_far",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 904,
    "kind": "method",
    "name": "_update",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#_update",
    "access": "private",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 905,
    "kind": "set",
    "name": "left",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#left",
    "access": "public",
    "description": "Position of this Frustum's left plane on the View-space X-axis.\n\nFires a {@link Frustum/left:event} event on change.",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "-1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "left",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 907,
    "kind": "get",
    "name": "left",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#left",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 908,
    "kind": "set",
    "name": "right",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#right",
    "access": "public",
    "description": "Position of this Frustum's right plane on the View-space X-axis.\n\nFires a {@link Frustum/right:event} event on change.",
    "lineNumber": 97,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "right",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 910,
    "kind": "get",
    "name": "right",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#right",
    "access": "public",
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 911,
    "kind": "set",
    "name": "top",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#top",
    "access": "public",
    "description": "Position of this Frustum's top plane on the View-space Y-axis.\n\nFires a {@link Frustum/top:event} event on change.",
    "lineNumber": 122,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "top",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 913,
    "kind": "get",
    "name": "top",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#top",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 914,
    "kind": "set",
    "name": "bottom",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#bottom",
    "access": "public",
    "description": "Position of this Frustum's bottom plane on the View-space Y-axis.\n\nFires a {@link Frustum/bottom:event} event on change.",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "-1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bottom",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 916,
    "kind": "get",
    "name": "bottom",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#bottom",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 917,
    "kind": "set",
    "name": "near",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#near",
    "access": "public",
    "description": "Position of this Frustum's near plane on the positive View-space Z-axis.\n\nFires a {@link Frustum/near:event} event on change.",
    "lineNumber": 172,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0.1"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "near",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 919,
    "kind": "get",
    "name": "near",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#near",
    "access": "public",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 920,
    "kind": "set",
    "name": "far",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#far",
    "access": "public",
    "description": "Position of this Frustum's far plane on the positive View-space Z-axis.\n\nFires a {@link Frustum/far:event} event on change.",
    "lineNumber": 197,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "10000.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "far",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 922,
    "kind": "get",
    "name": "far",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#far",
    "access": "public",
    "description": null,
    "lineNumber": 209,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 923,
    "kind": "get",
    "name": "matrix",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#matrix",
    "access": "public",
    "description": "The Frustum's projection transform matrix.\n\nFires a {@link Frustum/matrix:event} event on change.",
    "lineNumber": 222,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 924,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/camera/Frustum.js~Frustum",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Frustum.js~Frustum#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 229,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 925,
    "kind": "file",
    "name": "scene/camera/Ortho.js",
    "content": "\nimport {Component} from '../Component.js';\nimport {RenderState} from '../webgl/RenderState.js';\nimport {math} from '../math/math.js';\n\n/**\n * @desc Defines its {@link Camera}'s orthographic projection as a box-shaped view volume.\n *\n * * Located at {@link Camera#frustum}.\n * * Works like Blender's orthographic projection, where the positions of the left, right, top and bottom planes are implicitly\n * indicated with a single {@link Ortho#scale} property, which causes the frustum to be symmetrical on X and Y axis, large enough to\n * contain the number of units given by {@link Ortho#scale}.\n * * {@link Ortho#near} and {@link Ortho#far} indicated the distances to the WebGL clipping planes.\n */\nclass Ortho extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Ortho\";\n    }\n\n    /**\n     * @constructor\n     * @private\n     */\n    constructor(owner, cfg={}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({\n            matrix: math.mat4()\n        });\n\n        this.scale = cfg.scale;\n        this.near = cfg.near;\n        this.far = cfg.far;\n\n        this._onCanvasBoundary = this.scene.canvas.on(\"boundary\", this._needUpdate, this);\n    }\n\n    _update() {\n\n        const WIDTH_INDEX = 2;\n        const HEIGHT_INDEX = 3;\n\n        const scene = this.scene;\n        const scale = this._scale;\n        const halfSize = 0.5 * scale;\n\n        const boundary = scene.viewport.boundary;\n        const boundaryWidth = boundary[WIDTH_INDEX];\n        const boundaryHeight = boundary[HEIGHT_INDEX];\n        const aspect = boundaryWidth / boundaryHeight;\n\n        let left;\n        let right;\n        let top;\n        let bottom;\n\n        if (boundaryWidth > boundaryHeight) {\n            left = -halfSize;\n            right = halfSize;\n            top = halfSize / aspect;\n            bottom = -halfSize / aspect;\n\n        } else {\n            left = -halfSize * aspect;\n            right = halfSize * aspect;\n            top = halfSize;\n            bottom = -halfSize;\n        }\n\n        math.orthoMat4c(left, right, bottom, top, this._near, this._far, this._state.matrix);\n\n        this.glRedraw();\n\n        this.fire(\"matrix\", this._state.matrix);\n    }\n\n\n    /**\n     Scale factor for this Ortho's extents on X and Y axis.\n\n     Clamps to minimum value of ````0.01```.\n\n     Fires a {@link Ortho#scale:event} event on change.\n\n     @property scale\n     @default 1.0\n     @type Number\n     */\n\n    set scale(value) {\n        if (value === undefined || value === null) {\n            value = 1.0;\n        }\n        if (value <= 0) {\n            value = 0.01;\n        }\n        this._scale = value;\n        this._needUpdate();\n        /**\n         Fired whenever this Ortho's {@link Ortho#scale} property changes.\n\n         @event scale\n         @param value The property's new value\n         */\n        this.fire(\"scale\", this._scale);\n    }\n\n    get scale() {\n        return this._scale;\n    }\n\n    /**\n     Position of this Ortho's near plane on the positive View-space Z-axis.\n\n     Fires a {@link Ortho#near:event} event on change.\n\n     @property near\n     @default 0.1\n     @type Number\n     */\n    set near(value) {\n        this._near = (value !== undefined && value !== null) ? value : 0.1;\n        this._needUpdate();\n        /**\n         Fired whenever this Ortho's  {@link Ortho#near} property changes.\n\n         @event near\n         @param value The property's new value\n         */\n        this.fire(\"near\", this._near);\n    }\n\n    get near() {\n        return this._near;\n    }\n\n    /**\n     Position of this Ortho's far plane on the positive View-space Z-axis.\n\n     Fires a {@link Ortho#far:event} event on change.\n\n     @property far\n     @default 10000.0\n     @type Number\n     */\n    set far(value) {\n        this._far = (value !== undefined && value !== null) ? value : 10000.0;\n        this._needUpdate();\n        /**\n         Fired whenever this Ortho's {@link Ortho#far} property changes.\n\n         @event far\n         @param value The property's new value\n         */\n        this.fire(\"far\", this._far);\n    }\n\n    get far() {\n        return this._far;\n    }\n\n    /**\n     The Ortho's projection transform matrix.\n\n     Fires a {@link Ortho#matrix:event} event on change.\n\n     @property matrix\n     @default [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n     @type {Float32Array}\n     */\n    get matrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        return this._state.matrix;\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n        this.scene.canvas.off(this._onCanvasBoundary);\n    }\n}\n\nexport {Ortho};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/camera/Ortho.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 926,
    "kind": "class",
    "name": "Ortho",
    "memberof": "scene/camera/Ortho.js",
    "static": true,
    "longname": "scene/camera/Ortho.js~Ortho",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/camera/Ortho.js",
    "importStyle": "{Ortho}",
    "description": "Defines its {@link Camera}'s orthographic projection as a box-shaped view volume.\n\n* Located at {@link Camera#frustum}.\n* Works like Blender's orthographic projection, where the positions of the left, right, top and bottom planes are implicitly\nindicated with a single {@link Ortho#scale} property, which causes the frustum to be symmetrical on X and Y axis, large enough to\ncontain the number of units given by {@link Ortho#scale}.\n* {@link Ortho#near} and {@link Ortho#far} indicated the distances to the WebGL clipping planes.",
    "lineNumber": 15,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 927,
    "kind": "get",
    "name": "type",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 928,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 929,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#_state",
    "access": "private",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 933,
    "kind": "member",
    "name": "_onCanvasBoundary",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#_onCanvasBoundary",
    "access": "private",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 934,
    "kind": "method",
    "name": "_update",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#_update",
    "access": "private",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 935,
    "kind": "set",
    "name": "scale",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#scale",
    "access": "public",
    "description": "Scale factor for this Ortho's extents on X and Y axis.\n\nClamps to minimum value of ````0.01```.\n\nFires a {@link Ortho#scale:event} event on change.",
    "lineNumber": 101,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "scale",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 936,
    "kind": "member",
    "name": "_scale",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#_scale",
    "access": "private",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 937,
    "kind": "get",
    "name": "scale",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#scale",
    "access": "public",
    "description": null,
    "lineNumber": 119,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 938,
    "kind": "set",
    "name": "near",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#near",
    "access": "public",
    "description": "Position of this Ortho's near plane on the positive View-space Z-axis.\n\nFires a {@link Ortho#near:event} event on change.",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0.1"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "near",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 939,
    "kind": "member",
    "name": "_near",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#_near",
    "access": "private",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 940,
    "kind": "get",
    "name": "near",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#near",
    "access": "public",
    "description": null,
    "lineNumber": 144,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 941,
    "kind": "set",
    "name": "far",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#far",
    "access": "public",
    "description": "Position of this Ortho's far plane on the positive View-space Z-axis.\n\nFires a {@link Ortho#far:event} event on change.",
    "lineNumber": 157,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "10000.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "far",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 942,
    "kind": "member",
    "name": "_far",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#_far",
    "access": "private",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 943,
    "kind": "get",
    "name": "far",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#far",
    "access": "public",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 944,
    "kind": "get",
    "name": "matrix",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#matrix",
    "access": "public",
    "description": "The Ortho's projection transform matrix.\n\nFires a {@link Ortho#matrix:event} event on change.",
    "lineNumber": 182,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 945,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/camera/Ortho.js~Ortho",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Ortho.js~Ortho#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 946,
    "kind": "file",
    "name": "scene/camera/Perspective.js",
    "content": "import {math} from '../math/math.js';\nimport {Component} from '../Component.js';\nimport {RenderState} from '../webgl/RenderState.js';\n\n/**\n * @desc Defines its {@link Camera}'s perspective projection using a field-of-view angle.\n *\n * * Located at {@link Camera#perspective}.\n * * Implicitly sets the left, right, top, bottom frustum planes using {@link Perspective#fov}.\n * * {@link Perspective#near} and {@link Perspective#far} specify the distances to the WebGL clipping planes.\n */\nclass Perspective extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Perspective\";\n    }\n\n    /**\n     * @constructor\n     * @private\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({\n            matrix: math.mat4()\n        });\n\n        this._dirty = false;\n        this._fov = 60.0;\n        this._near = 0.1;\n        this._far = 10000.0;\n\n        // Recompute aspect from change in canvas size\n        this._canvasResized = this.scene.canvas.on(\"boundary\", this._needUpdate, this);\n\n        this.fov = cfg.fov;\n        this.fovAxis = cfg.fovAxis;\n        this.near = cfg.near;\n        this.far = cfg.far;\n    }\n\n    _update() {\n        const WIDTH_INDEX = 2;\n        const HEIGHT_INDEX = 3;\n        const boundary = this.scene.viewport.boundary;\n        const aspect = boundary[WIDTH_INDEX] / boundary[HEIGHT_INDEX];\n        let fov = this._fov;\n        const fovAxis = this._fovAxis;\n        if (fovAxis === \"x\" || (fovAxis === \"min\" && aspect < 1) || (fovAxis === \"max\" && aspect > 1)) {\n            fov = fov / aspect;\n        }\n        fov = Math.min(fov, 120);\n        math.perspectiveMat4(fov * (Math.PI / 180.0), aspect, this._near, this._far, this._state.matrix);\n        this.glRedraw();\n        this.fire(\"matrix\", this._state.matrix);\n    }\n\n    /**\n     The field-of-view angle (FOV).\n\n     Fires a {@link Perspective/fov:event} event on change.\n\n     @property fov\n     @default 60.0\n     @type Number\n     */\n    set fov(value) {\n        this._fov = (value !== undefined && value !== null) ? value : 60.0;\n        this._needUpdate(0); // Ensure matrix built on next \"tick\"\n        /**\n         Fired whenever this Perspective's {@link Perspective/fov} property changes.\n\n         @event fov\n         @param value The property's new value\n         */\n        this.fire(\"fov\", this._fov);\n    }\n\n    get fov() {\n        return this._fov;\n    }\n\n    /**\n     The FOV axis.\n\n     Options are \"x\", \"y\" or \"min\", to use the minimum axis.\n\n     Fires a {@link Perspective/fov:event} event on change.\n\n     @property fovAxis\n     @default \"min\"\n     @type String\n     */\n    set fovAxis(value) {\n        value = value || \"min\";\n        if (this._fovAxis === value) {\n            return;\n        }\n        if (value !== \"x\" && value !== \"y\" && value !== \"min\") {\n            this.error(\"Unsupported value for 'fovAxis': \" + value + \" - defaulting to 'min'\");\n            value = \"min\";\n        }\n        this._fovAxis = value;\n        this._needUpdate(0); // Ensure matrix built on next \"tick\"\n        /**\n         Fired whenever this Perspective's {@link Perspective/fovAxis} property changes.\n\n         @event fovAxis\n         @param value The property's new value\n         */\n        this.fire(\"fovAxis\", this._fovAxis);\n    }\n\n    get fovAxis() {\n        return this._fovAxis;\n    }\n\n    /**\n     Position of this Perspective's near plane on the positive View-space Z-axis.\n\n     Fires a {@link Perspective/near:event} event on change.\n\n     @property near\n     @default 0.1\n     @type Number\n     */\n    set near(value) {\n        this._near = (value !== undefined && value !== null) ? value : 0.1;\n        this._needUpdate(0); // Ensure matrix built on next \"tick\"\n        /**\n         Fired whenever this Perspective's   {@link Perspective/near} property changes.\n         @event near\n         @param value The property's new value\n         */\n        this.fire(\"near\", this._near);\n    }\n\n    get near() {\n        return this._near;\n    }\n\n    /**\n     Position of this Perspective's far plane on the positive View-space Z-axis.\n\n     Fires a {@link Perspective/far:event} event on change.\n\n     @property far\n     @default 10000.0\n     @type Number\n     */\n    set far(value) {\n        this._far = (value !== undefined && value !== null) ? value : 10000;\n        this._needUpdate(0); // Ensure matrix built on next \"tick\"\n        /**\n         Fired whenever this Perspective's  {@link Perspective/far} property changes.\n\n         @event far\n         @param value The property's new value\n         */\n        this.fire(\"far\", this._far);\n    }\n\n    get far() {\n        return this._far;\n    }\n\n    /**\n     The Perspective's projection transform matrix.\n\n     Fires a {@link Perspective/matrix:event} event on change.\n\n     @property matrix\n     @default [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n     @type {Float32Array}\n     */\n    get matrix() {\n        if (this._updateScheduled) {\n            this._doUpdate();\n        }\n        return this._state.matrix;\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n        super.destroy();\n        this.scene.canvas.off(this._canvasResized);\n    }\n}\n\nexport {Perspective};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/camera/Perspective.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 947,
    "kind": "class",
    "name": "Perspective",
    "memberof": "scene/camera/Perspective.js",
    "static": true,
    "longname": "scene/camera/Perspective.js~Perspective",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/camera/Perspective.js",
    "importStyle": "{Perspective}",
    "description": "Defines its {@link Camera}'s perspective projection using a field-of-view angle.\n\n* Located at {@link Camera#perspective}.\n* Implicitly sets the left, right, top, bottom frustum planes using {@link Perspective#fov}.\n* {@link Perspective#near} and {@link Perspective#far} specify the distances to the WebGL clipping planes.",
    "lineNumber": 12,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 948,
    "kind": "get",
    "name": "type",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 949,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 31,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 950,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#_state",
    "access": "private",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 951,
    "kind": "member",
    "name": "_dirty",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#_dirty",
    "access": "private",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 952,
    "kind": "member",
    "name": "_fov",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#_fov",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 953,
    "kind": "member",
    "name": "_near",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#_near",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 954,
    "kind": "member",
    "name": "_far",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#_far",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 955,
    "kind": "member",
    "name": "_canvasResized",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#_canvasResized",
    "access": "private",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 960,
    "kind": "method",
    "name": "_update",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#_update",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 961,
    "kind": "set",
    "name": "fov",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#fov",
    "access": "public",
    "description": "The field-of-view angle (FOV).\n\nFires a {@link Perspective/fov:event} event on change.",
    "lineNumber": 78,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "60.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fov",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 963,
    "kind": "get",
    "name": "fov",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#fov",
    "access": "public",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 964,
    "kind": "set",
    "name": "fovAxis",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#fovAxis",
    "access": "public",
    "description": "The FOV axis.\n\nOptions are \"x\", \"y\" or \"min\", to use the minimum axis.\n\nFires a {@link Perspective/fov:event} event on change.",
    "lineNumber": 105,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"min\""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fovAxis",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 965,
    "kind": "member",
    "name": "_fovAxis",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#_fovAxis",
    "access": "private",
    "description": null,
    "lineNumber": 114,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 966,
    "kind": "get",
    "name": "fovAxis",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#fovAxis",
    "access": "public",
    "description": null,
    "lineNumber": 125,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 967,
    "kind": "set",
    "name": "near",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#near",
    "access": "public",
    "description": "Position of this Perspective's near plane on the positive View-space Z-axis.\n\nFires a {@link Perspective/near:event} event on change.",
    "lineNumber": 138,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0.1"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "near",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 969,
    "kind": "get",
    "name": "near",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#near",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 970,
    "kind": "set",
    "name": "far",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#far",
    "access": "public",
    "description": "Position of this Perspective's far plane on the positive View-space Z-axis.\n\nFires a {@link Perspective/far:event} event on change.",
    "lineNumber": 162,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "10000.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "far",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 972,
    "kind": "get",
    "name": "far",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#far",
    "access": "public",
    "description": null,
    "lineNumber": 174,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 973,
    "kind": "get",
    "name": "matrix",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#matrix",
    "access": "public",
    "description": "The Perspective's projection transform matrix.\n\nFires a {@link Perspective/matrix:event} event on change.",
    "lineNumber": 187,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 974,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/camera/Perspective.js~Perspective",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/camera/Perspective.js~Perspective#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 194,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 975,
    "kind": "file",
    "name": "scene/canvas/Canvas.js",
    "content": "import {Canvas2Image} from \"../libs/canvas2image.js\";\nimport {core} from \"../core.js\";\nimport {utils} from '../utils.js';\nimport {math} from '../math/math.js';\nimport {stats} from '../stats.js';\nimport {Component} from '../Component.js';\nimport {Spinner} from './Spinner.js';\nimport {WEBGL_INFO} from '../webglInfo.js';\n\nconst WEBGL_CONTEXT_NAMES = [\n    \"webgl\",\n    \"experimental-webgl\",\n    \"webkit-3d\",\n    \"moz-webgl\",\n    \"moz-glweb20\"\n];\n\n/**\n * @desc Manages its {@link Scene}'s HTML canvas.\n *\n * * Provides the HTML canvas element in {@link Canvas#canvas}.\n * * Has a {@link Spinner}, provided at {@link Canvas#spinner}, which manages the loading progress indicator.\n */\nclass Canvas extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Canvas\";\n    }\n\n    /**\n     * @constructor\n     * @private\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        /**\n         * The HTML canvas.\n         *\n         * @property canvas\n         * @type {HTMLCanvasElement}\n         * @final\n         */\n        this.canvas = cfg.canvas;\n\n        /**\n         * The WebGL rendering context.\n         *\n         * @property gl\n         * @type {WebGLRenderingContext}\n         * @final\n         */\n        this.gl = null;\n\n        /**\n         * True when WebGL 2 support is enabled.\n         *\n         * @property webgl2\n         * @type {Boolean}\n         * @final\n         */\n        this.webgl2 = false; // Will set true in _initWebGL if WebGL is requested and we succeed in getting it.\n\n        /**\n         * Indicates whether this Canvas is transparent.\n         *\n         * @property transparent\n         * @type {Boolean}\n         * @default {false}\n         * @final\n         */\n        this.transparent = !!cfg.transparent;\n\n        /**\n         * Attributes for the WebGL context\n         *\n         * @type {{}|*}\n         */\n        this.contextAttr = cfg.contextAttr || {};\n        this.contextAttr.alpha = this.transparent;\n\n        if (this.contextAttr.preserveDrawingBuffer === undefined || this.contextAttr.preserveDrawingBuffer === null) {\n            this.contextAttr.preserveDrawingBuffer = true;\n        }\n\n        this.contextAttr.stencil = false;\n        this.contextAttr.antialias = true;\n        this.contextAttr.premultipliedAlpha = this.contextAttr.premultipliedAlpha !== false;\n        this.contextAttr.antialias = this.contextAttr.antialias !== false;\n\n        // If the canvas uses css styles to specify the sizes make sure the basic\n        // width and height attributes match or the WebGL context will use 300 x 150\n\n        this.canvas.width = this.canvas.clientWidth;\n        this.canvas.height = this.canvas.clientHeight;\n\n        /**\n         * Boundary of the Canvas in absolute browser window coordinates.\n         *\n         * ### Usage:\n         *\n         * ````javascript\n         * var boundary = myScene.canvas.boundary;\n         *\n         * var xmin = boundary[0];\n         * var ymin = boundary[1];\n         * var width = boundary[2];\n         * var height = boundary[3];\n         * ````\n         *\n         * @property boundary\n         * @type {{Array of Number}}\n         * @final\n         */\n        this.boundary = [\n            this.canvas.offsetLeft, this.canvas.offsetTop,\n            this.canvas.clientWidth, this.canvas.clientHeight\n        ];\n\n        this._createBackground();\n\n        // Get WebGL context\n\n        if (cfg.simulateWebGLContextLost) {\n            if (window.WebGLDebugUtils) {\n                this.canvas = WebGLDebugUtils.makeLostContextSimulatingCanvas(this.canvas);\n            } else {\n                this.error(\"To simulate context loss, please include WebGLDebugUtils\");\n            }\n        }\n\n        this._initWebGL(cfg);\n\n        // Bind context loss and recovery handlers\n\n        const self = this;\n\n        this.canvas.addEventListener(\"webglcontextlost\", this._webglcontextlostListener = function (event) {\n                console.time(\"webglcontextrestored\");\n                self.scene._webglContextLost();\n                /**\n                 * Fired whenever the WebGL context has been lost\n                 * @event webglcontextlost\n                 */\n                self.fire(\"webglcontextlost\");\n                event.preventDefault();\n            },\n            false);\n\n        this.canvas.addEventListener(\"webglcontextrestored\", this._webglcontextrestoredListener = function (event) {\n                self._initWebGL();\n                if (self.gl) {\n                    self.scene._webglContextRestored(self.gl);\n                    /**\n                     * Fired whenever the WebGL context has been restored again after having previously being lost\n                     * @event webglContextRestored\n                     * @param value The WebGL context object\n                     */\n                    self.fire(\"webglcontextrestored\", self.gl);\n                    event.preventDefault();\n                }\n                console.timeEnd(\"webglcontextrestored\");\n            },\n            false);\n\n        // Publish canvas size and position changes on each scene tick\n\n        let lastWindowWidth = null;\n        let lastWindowHeight = null;\n\n        let lastCanvasWidth = null;\n        let lastCanvasHeight = null;\n\n        let lastCanvasOffsetLeft = null;\n        let lastCanvasOffsetTop = null;\n\n        let lastParent = null;\n\n        this._tick = this.scene.on(\"tick\", function () {\n\n            const canvas = self.canvas;\n\n            const newWindowSize = (window.innerWidth !== lastWindowWidth || window.innerHeight !== lastWindowHeight);\n            const newCanvasSize = (canvas.clientWidth !== lastCanvasWidth || canvas.clientHeight !== lastCanvasHeight);\n            const newCanvasPos = (canvas.offsetLeft !== lastCanvasOffsetLeft || canvas.offsetTop !== lastCanvasOffsetTop);\n\n            const parent = canvas.parentElement;\n            const newParent = (parent !== lastParent);\n\n            if (newWindowSize || newCanvasSize || newCanvasPos || newParent) {\n\n                self._spinner._adjustPosition();\n\n                if (newCanvasSize || newCanvasPos) {\n\n                    const newWidth = canvas.clientWidth;\n                    const newHeight = canvas.clientHeight;\n\n                    // TODO: Wasteful to re-count pixel size of each canvas on each canvas' resize\n                    if (newCanvasSize) {\n                        let countPixels = 0;\n                        let scene;\n                        for (const sceneId in core.scenes) {\n                            if (core.scenes.hasOwnProperty(sceneId)) {\n                                scene = core.scenes[sceneId];\n                                countPixels += scene.canvas.canvas.clientWidth * scene.canvas.canvas.clientHeight;\n                            }\n                        }\n                        stats.memory.pixels = countPixels;\n\n                        canvas.width = canvas.clientWidth;\n                        canvas.height = canvas.clientHeight;\n                    }\n\n                    const boundary = self.boundary;\n\n                    boundary[0] = canvas.offsetLeft;\n                    boundary[1] = canvas.offsetTop;\n                    boundary[2] = newWidth;\n                    boundary[3] = newHeight;\n\n                    /**\n                     * Fired whenever this Canvas's {@link Canvas/boundary} property changes.\n                     *\n                     * @event boundary\n                     * @param value The property's new value\n                     */\n                    self.fire(\"boundary\", boundary);\n\n                    lastCanvasWidth = newWidth;\n                    lastCanvasHeight = newHeight;\n                }\n\n                if (newWindowSize) {\n                    lastWindowWidth = window.innerWidth;\n                    lastWindowHeight = window.innerHeight;\n                }\n\n                if (newCanvasPos) {\n                    lastCanvasOffsetLeft = canvas.offsetLeft;\n                    lastCanvasOffsetTop = canvas.offsetTop;\n                }\n\n                lastParent = parent;\n            }\n        });\n\n        this.canvas.oncontextmenu = function (e) {\n            e.preventDefault();\n        };\n\n        this._spinner = new Spinner(this.scene, {\n            canvas: this.canvas\n        });\n\n        // Set property, see definition further down\n        this.backgroundColor = cfg.backgroundColor;\n        this.backgroundImage = cfg.backgroundImage;\n    }\n\n    /**\n     * Creates a default canvas in the DOM.\n     * @private\n     */\n    _createCanvas() {\n\n        const canvasId = \"xeokit-canvas-\" + math.createUUID();\n        const body = document.getElementsByTagName(\"body\")[0];\n        const div = document.createElement('div');\n\n        const style = div.style;\n        style.height = \"100%\";\n        style.width = \"100%\";\n        style.padding = \"0\";\n        style.margin = \"0\";\n        style.background = \"rgba(0,0,0,0);\";\n        style.float = \"left\";\n        style.left = \"0\";\n        style.top = \"0\";\n        style.position = \"absolute\";\n        style.opacity = \"1.0\";\n        style[\"z-index\"] = \"-10000\";\n\n        div.innerHTML += '<canvas id=\"' + canvasId + '\" style=\"width: 100%; height: 100%; float: left; margin: 0; padding: 0;\"></canvas>';\n\n        body.appendChild(div);\n\n        this.canvas = document.getElementById(canvasId);\n    }\n\n    /**\n     * Creates a image element behind the canvas, for purpose of showing a custom background.\n     * @private\n     */\n    _createBackground() {\n\n        const div = document.createElement('div');\n        const style = div.style;\n        style.padding = \"0\";\n        style.margin = \"0\";\n        style.background = null;\n        style.backgroundImage = null;\n        style.float = \"left\";\n        style.left = \"0\";\n        style.top = \"0\";\n        style.width = \"100%\";\n        style.height = \"100%\";\n        style.position = \"absolute\";\n        style.opacity = 1;\n        style[\"z-index\"] = \"-20000\";\n\n        this.canvas.parentElement.appendChild(div);\n\n        this._backgroundElement = div;\n    }\n\n    _getElementXY(e) {\n        let x = 0, y = 0;\n        while (e) {\n            x += (e.offsetLeft - e.scrollLeft);\n            y += (e.offsetTop - e.scrollTop);\n            e = e.offsetParent;\n        }\n        return {x: x, y: y};\n    }\n\n    /**\n     * Initialises the WebGL context\n     * @private\n     */\n    _initWebGL(cfg) {\n\n        // Default context attribute values\n\n        if (false && cfg.webgl2) {\n            try {\n                this.gl = this.canvas.getContext(\"webgl2\", this.contextAttr);\n            } catch (e) { // Try with next context name\n            }\n            if (!this.gl) {\n                this.warn('Failed to get a WebGL 2 context - defaulting to WebGL 1.');\n            } else {\n                this.webgl2 = true;\n            }\n        }\n\n        if (!this.gl) {\n            for (let i = 0; !this.gl && i < WEBGL_CONTEXT_NAMES.length; i++) {\n                try {\n                    this.gl = this.canvas.getContext(WEBGL_CONTEXT_NAMES[i], this.contextAttr);\n                } catch (e) { // Try with next context name\n                }\n            }\n        }\n\n        if (!this.gl) {\n\n            this.error('Failed to get a WebGL context');\n\n            /**\n             * Fired whenever the canvas failed to get a WebGL context, which probably means that WebGL\n             * is either unsupported or has been disabled.\n             * @event webglContextFailed\n             */\n            this.fire(\"webglContextFailed\", true, true);\n        }\n\n        if (this.gl) {\n            // Setup extension (if necessary) and hints for fragment shader derivative functions\n            if (this.webgl2) {\n                this.gl.hint(this.gl.FRAGMENT_SHADER_DERIVATIVE_HINT, this.gl.FASTEST);\n            } else if (WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_standard_derivatives\"]) {\n                const ext = this.gl.getExtension(\"OES_standard_derivatives\");\n                this.gl.hint(ext.FRAGMENT_SHADER_DERIVATIVE_HINT_OES, this.gl.FASTEST);\n            }\n        }\n    }\n\n    /**\n     Returns a snapshot of this Canvas as a Base64-encoded image.\n\n     When a callback is given, this method will capture the snapshot asynchronously, on the next animation frame,\n     and return it via the callback.\n\n     When no callback is given, this method captures and returns the snapshot immediately. Note that is only\n     possible when you have configured the Canvas's {@link Scene} to preserve the\n     WebGL drawing buffer, which has a performance overhead.\n\n     #### Usage:\n\n     ````javascript\n     // Get snapshot asynchronously\n     myScene.canvas.getSnapshot({\n             width: 500, // Defaults to size of canvas\n             height: 500,\n             format: \"png\" // Options are \"jpeg\" (default), \"png\" and \"bmp\"\n         }, function(imageDataURL) {\n             imageElement.src = imageDataURL;\n         });\n\n     // Get snapshot synchronously, requires that Scene be\n     // configured with preserveDrawingBuffer; true\n     imageElement.src = myScene.canvas.getSnapshot({\n             width: 500,\n             height: 500,\n             format: \"png\"\n         });\n     ````\n     @method getSnapshot\n     @param {*} [params] Capture options.\n     @param {Number} [params.width] Desired width of result in pixels - defaults to width of canvas.\n     @param {Number} [params.height] Desired height of result in pixels - defaults to height of canvas.\n     @param {String} [params.format=\"jpeg\"] Desired format; \"jpeg\", \"png\" or \"bmp\".\n     @param {Function} [ok] Callback to return the image data when taking a snapshot asynchronously.\n     @returns {String} String-encoded image data when taking the snapshot synchronously. Returns null when the ````ok```` callback is given.\n     */\n    getSnapshot(params, ok) {\n\n        if (!this.canvas) {\n            this.error(\"Can't get snapshot - no canvas.\");\n            ok(null);\n            return;\n        }\n\n        if (ok) { // Asynchronous\n            const self = this;\n            requestAnimationFrame(function () {\n                self.scene.render(true); // Force-render a frame\n                ok(self._getSnapshot(params));\n            });\n        } else {\n            return this._getSnapshot(params);\n        }\n    }\n\n    _getSnapshot(params) {\n        params = params || {};\n        const width = params.width || this.canvas.width;\n        const height = params.height || this.canvas.height;\n        const format = params.format || \"jpeg\";\n        let image;\n        switch (format) {\n            case \"jpeg\":\n                image = Canvas2Image.saveAsJPEG(this.canvas, false, width, height);\n                break;\n            case \"png\":\n                image = Canvas2Image.saveAsPNG(this.canvas, true, width, height);\n                break;\n            case \"bmp\":\n                image = Canvas2Image.saveAsBMP(this.canvas, true, width, height);\n                break;\n            default:\n                this.error(\"Unsupported snapshot format: '\" + format\n                    + \"' - supported types are 'jpeg', 'bmp' and 'png' - defaulting to 'jpeg'\");\n                image = Canvas2Image.saveAsJPEG(this.canvas, true, width, height);\n        }\n        return image.src;\n    }\n\n    /**\n     Reads colors of pixels from the last rendered frame.\n\n     <p>Call this method like this:</p>\n\n     ````JavaScript\n\n     // Ignore transparent pixels (default is false)\n     var opaqueOnly = true;\n\n     var colors = new Float32Array(8);\n\n     myCanvas.readPixels([ 100, 22, 12, 33 ], colors, 2, opaqueOnly);\n     ````\n\n     Then the r,g,b components of the colors will be set to the colors at those pixels.\n\n     @param {Float32Array} pixels\n     @param {Float32Array} colors\n     @param {Number} size\n     @param {Boolean} opaqueOnly\n     */\n    readPixels(pixels, colors, size, opaqueOnly) {\n        return this.scene._renderer.readPixels(pixels, colors, size, opaqueOnly);\n    }\n\n    /**\n     * Simulates lost WebGL context.\n     */\n    loseWebGLContext() {\n        if (this.canvas.loseContext) {\n            this.canvas.loseContext();\n        }\n    }\n\n    /**\n     A background color for the canvas. This is overridden by {@link Canvas/backgroundImage}.\n\n     You can set this to a new color at any time.\n\n     @property backgroundColor\n     @type Float32Array\n     @default null\n     */\n    set backgroundColor(value) {\n        if (!value) {\n            this._backgroundColor = null;\n        } else {\n            (this._backgroundColor = this._backgroundColor || math.vec4()).set(value || [0, 0, 0, 1]);\n            if (!this._backgroundImageSrc) {\n                const rgb = \"rgb(\" + Math.round(this._backgroundColor[0] * 255) + \", \" + Math.round(this._backgroundColor[1] * 255) + \",\" + Math.round(this._backgroundColor[2] * 255) + \")\";\n                this._backgroundElement.style.background = rgb;\n            }\n        }\n    }\n\n    get backgroundColor() {\n        return this._backgroundColor;\n    }\n\n    /**\n     URL of a background image for the canvas. This is overrided by {@link Canvas/backgroundColor/property}.\n\n     You can set this to a new file path at any time.\n\n     @property backgroundImage\n     @type String\n     */\n    set backgroundImage(value) {\n        if (!value) {\n            return;\n        }\n        if (!utils.isString(value)) {\n            this.error(\"Value for 'backgroundImage' should be a string\");\n            return;\n        }\n        if (value === this._backgroundImageSrc) { // Already loaded this image\n            return;\n        }\n        this._backgroundElement.style.backgroundImage = \"url('\" + value + \"')\";\n        this._backgroundImageSrc = value;\n        if (!this._backgroundImageSrc) {\n            const rgb = \"rgb(\" + Math.round(this._backgroundColor[0] * 255) + \", \" + Math.round(this._backgroundColor[1] * 255) + \",\" + Math.round(this._backgroundColor[2] * 255) + \")\";\n            this._backgroundElement.style.background = rgb;\n        }\n    }\n\n    get backgroundImage() {\n        return this._backgroundImageSrc;\n    }\n\n    /**\n     The busy {@link Spinner} for this Canvas.\n\n     @property spinner\n     @type Spinner\n     @final\n     */\n    get spinner() {\n        return this._spinner;\n    }\n\n    destroy() {\n        this.scene.off(this._tick);\n        // Memory leak avoidance\n        this.canvas.removeEventListener(\"webglcontextlost\", this._webglcontextlostListener);\n        this.canvas.removeEventListener(\"webglcontextrestored\", this._webglcontextrestoredListener);\n        this.canvas = null;\n        this.gl = null;\n        super.destroy();\n    }\n}\n\nexport {Canvas};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/canvas/Canvas.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 976,
    "kind": "variable",
    "name": "WEBGL_CONTEXT_NAMES",
    "memberof": "scene/canvas/Canvas.js",
    "static": true,
    "longname": "scene/canvas/Canvas.js~WEBGL_CONTEXT_NAMES",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/canvas/Canvas.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 977,
    "kind": "class",
    "name": "Canvas",
    "memberof": "scene/canvas/Canvas.js",
    "static": true,
    "longname": "scene/canvas/Canvas.js~Canvas",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/canvas/Canvas.js",
    "importStyle": "{Canvas}",
    "description": "Manages its {@link Scene}'s HTML canvas.\n\n* Provides the HTML canvas element in {@link Canvas#canvas}.\n* Has a {@link Spinner}, provided at {@link Canvas#spinner}, which manages the loading progress indicator.",
    "lineNumber": 24,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 978,
    "kind": "get",
    "name": "type",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 979,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#constructor",
    "access": "private",
    "description": "",
    "lineNumber": 43,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "ignore": true
  },
  {
    "__docId__": 980,
    "kind": "member",
    "name": "canvas",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#canvas",
    "access": "public",
    "description": "The HTML canvas.",
    "lineNumber": 54,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "HTMLCanvasElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 981,
    "kind": "member",
    "name": "gl",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#gl",
    "access": "public",
    "description": "The WebGL rendering context.",
    "lineNumber": 63,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "gl",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "WebGLRenderingContext"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 982,
    "kind": "member",
    "name": "webgl2",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#webgl2",
    "access": "public",
    "description": "True when WebGL 2 support is enabled.",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "webgl2",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 983,
    "kind": "member",
    "name": "transparent",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#transparent",
    "access": "public",
    "description": "Indicates whether this Canvas is transparent.",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "{false}"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "transparent",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 984,
    "kind": "member",
    "name": "contextAttr",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#contextAttr",
    "access": "public",
    "description": "Attributes for the WebGL context",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "{}|*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 985,
    "kind": "member",
    "name": "boundary",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#boundary",
    "access": "public",
    "description": "Boundary of the Canvas in absolute browser window coordinates.\n\n### Usage:\n\n````javascript\nvar boundary = myScene.canvas.boundary;\n\nvar xmin = boundary[0];\nvar ymin = boundary[1];\nvar width = boundary[2];\nvar height = boundary[3];\n````",
    "lineNumber": 125,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "boundary",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{Array of Number}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 987,
    "kind": "member",
    "name": "_tick",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#_tick",
    "access": "private",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 988,
    "kind": "member",
    "name": "_spinner",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#_spinner",
    "access": "private",
    "description": null,
    "lineNumber": 262,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 991,
    "kind": "method",
    "name": "_createCanvas",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#_createCanvas",
    "access": "private",
    "description": "Creates a default canvas in the DOM.",
    "lineNumber": 275,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 993,
    "kind": "method",
    "name": "_createBackground",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#_createBackground",
    "access": "private",
    "description": "Creates a image element behind the canvas, for purpose of showing a custom background.",
    "lineNumber": 305,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 994,
    "kind": "member",
    "name": "_backgroundElement",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#_backgroundElement",
    "access": "private",
    "description": null,
    "lineNumber": 324,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 995,
    "kind": "method",
    "name": "_getElementXY",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#_getElementXY",
    "access": "private",
    "description": null,
    "lineNumber": 327,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "e",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"x\": *, \"y\": *}"
      ]
    }
  },
  {
    "__docId__": 996,
    "kind": "method",
    "name": "_initWebGL",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#_initWebGL",
    "access": "private",
    "description": "Initialises the WebGL context",
    "lineNumber": 341,
    "ignore": true,
    "params": [
      {
        "name": "cfg",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1000,
    "kind": "method",
    "name": "getSnapshot",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#getSnapshot",
    "access": "public",
    "description": "Returns a snapshot of this Canvas as a Base64-encoded image.\n\nWhen a callback is given, this method will capture the snapshot asynchronously, on the next animation frame,\nand return it via the callback.\n\nWhen no callback is given, this method captures and returns the snapshot immediately. Note that is only\npossible when you have configured the Canvas's {@link Scene} to preserve the\nWebGL drawing buffer, which has a performance overhead.\n\n#### Usage:\n\n````javascript\n// Get snapshot asynchronously\nmyScene.canvas.getSnapshot({\nwidth: 500, // Defaults to size of canvas\nheight: 500,\nformat: \"png\" // Options are \"jpeg\" (default), \"png\" and \"bmp\"\n}, function(imageDataURL) {\nimageElement.src = imageDataURL;\n});\n\n// Get snapshot synchronously, requires that Scene be\n// configured with preserveDrawingBuffer; true\nimageElement.src = myScene.canvas.getSnapshot({\nwidth: 500,\nheight: 500,\nformat: \"png\"\n});\n````",
    "lineNumber": 427,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getSnapshot"
      },
      {
        "tagName": "@returns",
        "tagValue": "{String} String-encoded image data when taking the snapshot synchronously. Returns null when the ````ok```` callback is given."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "params",
        "description": "Capture options."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "params.width",
        "description": "Desired width of result in pixels - defaults to width of canvas."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "params.height",
        "description": "Desired height of result in pixels - defaults to height of canvas."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"jpeg\"",
        "defaultRaw": "jpeg",
        "name": "params.format",
        "description": "Desired format; \"jpeg\", \"png\" or \"bmp\"."
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": true,
        "name": "ok",
        "description": "Callback to return the image data when taking a snapshot asynchronously."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "String-encoded image data when taking the snapshot synchronously. Returns null when the ````ok```` callback is given."
    }
  },
  {
    "__docId__": 1001,
    "kind": "method",
    "name": "_getSnapshot",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#_getSnapshot",
    "access": "private",
    "description": null,
    "lineNumber": 446,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "params",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1002,
    "kind": "method",
    "name": "readPixels",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#readPixels",
    "access": "public",
    "description": "Reads colors of pixels from the last rendered frame.\n\n<p>Call this method like this:</p>\n\n````JavaScript\n\n// Ignore transparent pixels (default is false)\nvar opaqueOnly = true;\n\nvar colors = new Float32Array(8);\n\nmyCanvas.readPixels([ 100, 22, 12, 33 ], colors, 2, opaqueOnly);\n````\n\nThen the r,g,b components of the colors will be set to the colors at those pixels.",
    "lineNumber": 492,
    "params": [
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "pixels",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "colors",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "opaqueOnly",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1003,
    "kind": "method",
    "name": "loseWebGLContext",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#loseWebGLContext",
    "access": "public",
    "description": "Simulates lost WebGL context.",
    "lineNumber": 499,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1004,
    "kind": "set",
    "name": "backgroundColor",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#backgroundColor",
    "access": "public",
    "description": "A background color for the canvas. This is overridden by {@link Canvas/backgroundImage}.\n\nYou can set this to a new color at any time.",
    "lineNumber": 514,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "null"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "backgroundColor",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1005,
    "kind": "member",
    "name": "_backgroundColor",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#_backgroundColor",
    "access": "private",
    "description": null,
    "lineNumber": 516,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1006,
    "kind": "get",
    "name": "backgroundColor",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#backgroundColor",
    "access": "public",
    "description": null,
    "lineNumber": 526,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1007,
    "kind": "set",
    "name": "backgroundImage",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#backgroundImage",
    "access": "public",
    "description": "URL of a background image for the canvas. This is overrided by {@link Canvas/backgroundColor/property}.\n\nYou can set this to a new file path at any time.",
    "lineNumber": 538,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "backgroundImage",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1008,
    "kind": "member",
    "name": "_backgroundImageSrc",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#_backgroundImageSrc",
    "access": "private",
    "description": null,
    "lineNumber": 550,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1009,
    "kind": "get",
    "name": "backgroundImage",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#backgroundImage",
    "access": "public",
    "description": null,
    "lineNumber": 557,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1010,
    "kind": "get",
    "name": "spinner",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#spinner",
    "access": "public",
    "description": "The busy {@link Spinner} for this Canvas.",
    "lineNumber": 568,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "spinner",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1011,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/canvas/Canvas.js~Canvas",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Canvas.js~Canvas#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 572,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1014,
    "kind": "file",
    "name": "scene/canvas/Spinner.js",
    "content": "import {Component} from '../Component.js';\n\nlet spinnerCSSInjected = false; // Ensures lazy-injected CSS only injected once\n\nconst spinnerCSS = \".sk-fading-circle {\\\n        background: transparent;\\\n        margin: 20px auto;\\\n        width: 50px;\\\n        height:50px;\\\n        position: relative;\\\n        }\\\n        .sk-fading-circle .sk-circle {\\\n        width: 120%;\\\n        height: 120%;\\\n        position: absolute;\\\n        left: 0;\\\n        top: 0;\\\n        }\\\n        .sk-fading-circle .sk-circle:before {\\\n        content: '';\\\n        display: block;\\\n        margin: 0 auto;\\\n        width: 15%;\\\n        height: 15%;\\\n        background-color: #ff8800;\\\n        border-radius: 100%;\\\n        -webkit-animation: sk-circleFadeDelay 1.2s infinite ease-in-out both;\\\n        animation: sk-circleFadeDelay 1.2s infinite ease-in-out both;\\\n        }\\\n        .sk-fading-circle .sk-circle2 {\\\n        -webkit-transform: rotate(30deg);\\\n        -ms-transform: rotate(30deg);\\\n        transform: rotate(30deg);\\\n    }\\\n    .sk-fading-circle .sk-circle3 {\\\n        -webkit-transform: rotate(60deg);\\\n        -ms-transform: rotate(60deg);\\\n        transform: rotate(60deg);\\\n    }\\\n    .sk-fading-circle .sk-circle4 {\\\n        -webkit-transform: rotate(90deg);\\\n        -ms-transform: rotate(90deg);\\\n        transform: rotate(90deg);\\\n    }\\\n    .sk-fading-circle .sk-circle5 {\\\n        -webkit-transform: rotate(120deg);\\\n        -ms-transform: rotate(120deg);\\\n        transform: rotate(120deg);\\\n    }\\\n    .sk-fading-circle .sk-circle6 {\\\n        -webkit-transform: rotate(150deg);\\\n        -ms-transform: rotate(150deg);\\\n        transform: rotate(150deg);\\\n    }\\\n    .sk-fading-circle .sk-circle7 {\\\n        -webkit-transform: rotate(180deg);\\\n        -ms-transform: rotate(180deg);\\\n        transform: rotate(180deg);\\\n    }\\\n    .sk-fading-circle .sk-circle8 {\\\n        -webkit-transform: rotate(210deg);\\\n        -ms-transform: rotate(210deg);\\\n        transform: rotate(210deg);\\\n    }\\\n    .sk-fading-circle .sk-circle9 {\\\n        -webkit-transform: rotate(240deg);\\\n        -ms-transform: rotate(240deg);\\\n        transform: rotate(240deg);\\\n    }\\\n    .sk-fading-circle .sk-circle10 {\\\n        -webkit-transform: rotate(270deg);\\\n        -ms-transform: rotate(270deg);\\\n        transform: rotate(270deg);\\\n    }\\\n    .sk-fading-circle .sk-circle11 {\\\n        -webkit-transform: rotate(300deg);\\\n        -ms-transform: rotate(300deg);\\\n        transform: rotate(300deg);\\\n    }\\\n    .sk-fading-circle .sk-circle12 {\\\n        -webkit-transform: rotate(330deg);\\\n        -ms-transform: rotate(330deg);\\\n        transform: rotate(330deg);\\\n    }\\\n    .sk-fading-circle .sk-circle2:before {\\\n        -webkit-animation-delay: -1.1s;\\\n        animation-delay: -1.1s;\\\n    }\\\n    .sk-fading-circle .sk-circle3:before {\\\n        -webkit-animation-delay: -1s;\\\n        animation-delay: -1s;\\\n    }\\\n    .sk-fading-circle .sk-circle4:before {\\\n        -webkit-animation-delay: -0.9s;\\\n        animation-delay: -0.9s;\\\n    }\\\n    .sk-fading-circle .sk-circle5:before {\\\n        -webkit-animation-delay: -0.8s;\\\n        animation-delay: -0.8s;\\\n    }\\\n    .sk-fading-circle .sk-circle6:before {\\\n        -webkit-animation-delay: -0.7s;\\\n        animation-delay: -0.7s;\\\n    }\\\n    .sk-fading-circle .sk-circle7:before {\\\n        -webkit-animation-delay: -0.6s;\\\n        animation-delay: -0.6s;\\\n    }\\\n    .sk-fading-circle .sk-circle8:before {\\\n        -webkit-animation-delay: -0.5s;\\\n        animation-delay: -0.5s;\\\n    }\\\n    .sk-fading-circle .sk-circle9:before {\\\n        -webkit-animation-delay: -0.4s;\\\n        animation-delay: -0.4s;\\\n    }\\\n    .sk-fading-circle .sk-circle10:before {\\\n        -webkit-animation-delay: -0.3s;\\\n        animation-delay: -0.3s;\\\n    }\\\n    .sk-fading-circle .sk-circle11:before {\\\n        -webkit-animation-delay: -0.2s;\\\n        animation-delay: -0.2s;\\\n    }\\\n    .sk-fading-circle .sk-circle12:before {\\\n        -webkit-animation-delay: -0.1s;\\\n        animation-delay: -0.1s;\\\n    }\\\n    @-webkit-keyframes sk-circleFadeDelay {\\\n        0%, 39%, 100% { opacity: 0; }\\\n        40% { opacity: 1; }\\\n    }\\\n    @keyframes sk-circleFadeDelay {\\\n        0%, 39%, 100% { opacity: 0; }\\\n        40% { opacity: 1; }\\\n    }\";\n\n/**\n * @desc Displays a progress animation at the center of its {@link Canvas} while things are loading or otherwise busy.\n *\n *\n * * Located at {@link Canvas#spinner}.\n * * Automatically shown while things are loading, however may also be shown by application code wanting to indicate busyness.\n * * {@link Spinner#processes} holds the count of active processes. As a process starts, it increments {@link Spinner#processes}, then decrements it on completion or failure.\n * * A Spinner is only visible while {@link Spinner#processes} is greater than zero.\n *\n * ````javascript\n * var spinner = myViewer.scene.canvas.spinner;\n *\n * // Increment count of busy processes represented by the spinner;\n * // assuming the count was zero, this now shows the spinner\n * spinner.processes++;\n *\n * // Increment the count again, by some other process; spinner already visible, now requires two decrements\n * // before it becomes invisible again\n * spinner.processes++;\n *\n * // Decrement the count; count still greater than zero, so spinner remains visible\n * spinner.process--;\n *\n * // Decrement the count; count now zero, so spinner becomes invisible\n * spinner.process--;\n * ````\n */\nclass Spinner extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Spinner\";\n    }\n\n    constructor(owner, cfg = {}) {\n        super(owner, cfg);\n        this._canvas = cfg.canvas;\n        this._injectSpinnerCSS();\n        const div = document.createElement('div');\n        const style = div.style;\n        style[\"z-index\"] = \"9000\";\n        style.position = \"absolute\";\n        div.innerHTML = '<div class=\"sk-fading-circle\">\\\n                <div class=\"sk-circle1 sk-circle\"></div>\\\n                <div class=\"sk-circle2 sk-circle\"></div>\\\n                <div class=\"sk-circle3 sk-circle\"></div>\\\n                <div class=\"sk-circle4 sk-circle\"></div>\\\n                <div class=\"sk-circle5 sk-circle\"></div>\\\n                <div class=\"sk-circle6 sk-circle\"></div>\\\n                <div class=\"sk-circle7 sk-circle\"></div>\\\n                <div class=\"sk-circle8 sk-circle\"></div>\\\n                <div class=\"sk-circle9 sk-circle\"></div>\\\n                <div class=\"sk-circle10 sk-circle\"></div>\\\n                <div class=\"sk-circle11 sk-circle\"></div>\\\n                <div class=\"sk-circle12 sk-circle\"></div>\\\n                </div>';\n        this._canvas.parentElement.appendChild(div);\n        this._element = div;\n        this._adjustPosition();\n        this.processes = 0;\n    }\n\n    /**\n     The number of processes this Spinner represents.\n\n     The Spinner is visible while this property is greater than zero.\n\n     Increment this property whenever you commence some process during which you want\n     the Spinner to be visible, then decrement it again when the process is complete.\n\n     Clamps to zero if you attempt to set to to a negative value.\n\n     Fires a {@link Spinner#processes:event} event on change.\n\n     @property processes\n     @default 0\n     @type Number\n     */\n    set processes(value) {\n        value = value || 0;\n        if (this._processes === value) {\n            return;\n        }\n        if (value < 0) {\n            return;\n        }\n        const prevValue = this._processes;\n        this._processes = value;\n        this._element.style[\"visibility\"] = (this._processes > 0) ? \"visible\" : \"hidden\";\n        /**\n         Fired whenever this Spinner's {@link Spinner#visible} property changes.\n\n         @event processes\n         @param value The property's new value\n         */\n        this.fire(\"processes\", this._processes);\n        if (this._processes === 0 && this._processes !== prevValue) {\n            /**\n             Fired whenever this Spinner's {@link Spinner#visible} property becomes zero.\n\n             @event zeroProcesses\n             */\n            this.fire(\"zeroProcesses\", this._processes);\n        }\n    }\n\n    get processes() {\n        return this._processes;\n    }\n\n    _adjustPosition() { // (Re)positions spinner DIV over the center of the canvas\n        if (!this._canvas || !this._element) {\n            return;\n        }\n        const canvas = this._canvas;\n        const spinner = this._element;\n        const spinnerStyle = spinner.style;\n        spinnerStyle[\"left\"] = (canvas.offsetLeft + (canvas.clientWidth * 0.5) - (spinner.clientWidth * 0.5)) + \"px\";\n        spinnerStyle[\"top\"] = (canvas.offsetTop + (canvas.clientHeight * 0.5) - (spinner.clientHeight * 0.5)) + \"px\";\n    }\n\n    _injectSpinnerCSS() {\n        if (spinnerCSSInjected) {\n            return;\n        }\n        const node = document.createElement('style');\n        node.innerHTML = spinnerCSS;\n        document.body.appendChild(node);\n        spinnerCSSInjected = true;\n    }\n}\n\nexport {Spinner};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/canvas/Spinner.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1015,
    "kind": "variable",
    "name": "spinnerCSSInjected",
    "memberof": "scene/canvas/Spinner.js",
    "static": true,
    "longname": "scene/canvas/Spinner.js~spinnerCSSInjected",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/canvas/Spinner.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1016,
    "kind": "variable",
    "name": "spinnerCSS",
    "memberof": "scene/canvas/Spinner.js",
    "static": true,
    "longname": "scene/canvas/Spinner.js~spinnerCSS",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/canvas/Spinner.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1017,
    "kind": "class",
    "name": "Spinner",
    "memberof": "scene/canvas/Spinner.js",
    "static": true,
    "longname": "scene/canvas/Spinner.js~Spinner",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/canvas/Spinner.js",
    "importStyle": "{Spinner}",
    "description": "Displays a progress animation at the center of its {@link Canvas} while things are loading or otherwise busy.\n\n\n* Located at {@link Canvas#spinner}.\n* Automatically shown while things are loading, however may also be shown by application code wanting to indicate busyness.\n* {@link Spinner#processes} holds the count of active processes. As a process starts, it increments {@link Spinner#processes}, then decrements it on completion or failure.\n* A Spinner is only visible while {@link Spinner#processes} is greater than zero.\n\n````javascript\nvar spinner = myViewer.scene.canvas.spinner;\n\n// Increment count of busy processes represented by the spinner;\n// assuming the count was zero, this now shows the spinner\nspinner.processes++;\n\n// Increment the count again, by some other process; spinner already visible, now requires two decrements\n// before it becomes invisible again\nspinner.processes++;\n\n// Decrement the count; count still greater than zero, so spinner remains visible\nspinner.process--;\n\n// Decrement the count; count now zero, so spinner becomes invisible\nspinner.process--;\n````",
    "lineNumber": 165,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 1018,
    "kind": "get",
    "name": "type",
    "memberof": "scene/canvas/Spinner.js~Spinner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Spinner.js~Spinner#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 176,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1019,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/canvas/Spinner.js~Spinner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Spinner.js~Spinner#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 180,
    "undocument": true
  },
  {
    "__docId__": 1020,
    "kind": "member",
    "name": "_canvas",
    "memberof": "scene/canvas/Spinner.js~Spinner",
    "static": false,
    "longname": "scene/canvas/Spinner.js~Spinner#_canvas",
    "access": "private",
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1021,
    "kind": "member",
    "name": "_element",
    "memberof": "scene/canvas/Spinner.js~Spinner",
    "static": false,
    "longname": "scene/canvas/Spinner.js~Spinner#_element",
    "access": "private",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1023,
    "kind": "set",
    "name": "processes",
    "memberof": "scene/canvas/Spinner.js~Spinner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Spinner.js~Spinner#processes",
    "access": "public",
    "description": "The number of processes this Spinner represents.\n\nThe Spinner is visible while this property is greater than zero.\n\nIncrement this property whenever you commence some process during which you want\nthe Spinner to be visible, then decrement it again when the process is complete.\n\nClamps to zero if you attempt to set to to a negative value.\n\nFires a {@link Spinner#processes:event} event on change.",
    "lineNumber": 224,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "processes",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1024,
    "kind": "member",
    "name": "_processes",
    "memberof": "scene/canvas/Spinner.js~Spinner",
    "static": false,
    "longname": "scene/canvas/Spinner.js~Spinner#_processes",
    "access": "private",
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1025,
    "kind": "get",
    "name": "processes",
    "memberof": "scene/canvas/Spinner.js~Spinner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Spinner.js~Spinner#processes",
    "access": "public",
    "description": null,
    "lineNumber": 252,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1026,
    "kind": "method",
    "name": "_adjustPosition",
    "memberof": "scene/canvas/Spinner.js~Spinner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Spinner.js~Spinner#_adjustPosition",
    "access": "private",
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1027,
    "kind": "method",
    "name": "_injectSpinnerCSS",
    "memberof": "scene/canvas/Spinner.js~Spinner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/canvas/Spinner.js~Spinner#_injectSpinnerCSS",
    "access": "private",
    "description": null,
    "lineNumber": 267,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1028,
    "kind": "file",
    "name": "scene/clipping/Clip.js",
    "content": "import {Component} from '../Component.js';\nimport {RenderState} from '../webgl/RenderState.js';\n\n/**\n *  @desc An arbitrarily-aligned World-space clipping plane.\n *\n * * Slices portions off objects to create cross-section views or reveal interiors.\n * * Registered by {@link Clip#id} in {@link Scene#clips}.\n * * Indicates World-space position in {@link Clip#pos} and orientation in {@link Clip#dir}.\n * * Discards elements from the half-space in the direction of {@link Clip#dir}.\n * * Can be be enabled or disabled via {@link Clip#active}.\n *\n * ## Usage\n *\n * ````javascript\n * // Create a clip plane on negative diagonal\n * new Clip(myViewer.scene, {\n *     pos: [1.0, 1.0, 1.0],\n *     dir: [-1.0, -1.0, -1.0],\n *     active: true\n * }),\n *\n * // Create a clip plane on positive diagonal\n * new Clip(myViewer.scene, {\n *     pos: [-1.0, -1.0, -1.0],\n *     dir: [1.0, 1.0, 1.0],\n *     active: true\n * });\n *\n * // Create a Mesh that clipped by our Clips\n * var mesh = new Mesh(myViewer.scene, {\n *      geometry: new SphereGeometry(),\n *      clippable: true // Enable clipping (default)\n * });\n * ````\n *\n * ## Selectively enabling or disabling clipping\n *\n * {@link Node#clippable} and {@link Mesh#clippable} indicate whether or not the Node or Mesh is affected by Clip components.\n *\n * You can switch it at any time, like this:\n *\n * ```` javascript\n * // Disable clipping for the Mesh\n * mesh.clippable = false;\n *\n * // Enable clipping for the Mesh\n * mesh.clippable = true;\n * ````\n */\nclass Clip extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Clip\";\n    }\n\n    /**\n     * @constructor\n     *\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({\n            active: true,\n            pos: new Float32Array(3),\n            dir: new Float32Array(3)\n        });\n\n        this.active = cfg.active;\n        this.pos = cfg.pos;\n        this.dir = cfg.dir;\n\n        this.scene._clipCreated(this);\n    }\n\n    /**\n     Indicates whether this Clip is active or not.\n\n     @property active\n     @default true\n     @type Boolean\n     */\n    set active(value) {\n        this._state.active = value !== false;\n        this.glRedraw();\n        /**\n         Fired whenever this Clip's {@link Clip#active} property changes.\n\n         @event active\n         @param value {Boolean} The property's new value\n         */\n        this.fire(\"active\", this._state.active);\n    }\n\n    get active() {\n        return this._state.active;\n    }\n\n    /**\n     The World-space position of this Clip's plane.\n\n     @property pos\n     @default [0, 0, 0]\n     @type Float32Array\n     */\n    set pos(value) {\n        this._state.pos.set(value || [0, 0, 0]);\n        this.glRedraw();\n        /**\n         Fired whenever this Clip's {@link Clip#pos} property changes.\n\n         @event pos\n         @param value Float32Array The property's new value\n         */\n        this.fire(\"pos\", this._state.pos);\n    }\n\n    get pos() {\n        return this._state.pos;\n    }\n\n    /**\n     Vector indicating the orientation of this Clip plane.\n\n     The vector originates at {@link Clip#pos}. Elements on the\n     same side of the vector are clipped.\n\n     @property dir\n     @default [0, 0, -1]\n     @type Float32Array\n     */\n    set dir(value) {\n        this._state.dir.set(value || [0, 0, -1]);\n        this.glRedraw();\n        /**\n         Fired whenever this Clip's {@link Clip#dir} property changes.\n\n         @event dir\n         @param value {Float32Array} The property's new value\n         */\n        this.fire(\"dir\", this._state.dir);\n    }\n\n    get dir() {\n        return this._state.dir;\n    }\n\n    destroy() {\n        this._state.destroy();\n        this.scene._clipDestroyed(this);\n        super.destroy();\n    }\n}\n\nexport {Clip};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/clipping/Clip.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1029,
    "kind": "class",
    "name": "Clip",
    "memberof": "scene/clipping/Clip.js",
    "static": true,
    "longname": "scene/clipping/Clip.js~Clip",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/clipping/Clip.js",
    "importStyle": "{Clip}",
    "description": "An arbitrarily-aligned World-space clipping plane.\n\n* Slices portions off objects to create cross-section views or reveal interiors.\n* Registered by {@link Clip#id} in {@link Scene#clips}.\n* Indicates World-space position in {@link Clip#pos} and orientation in {@link Clip#dir}.\n* Discards elements from the half-space in the direction of {@link Clip#dir}.\n* Can be be enabled or disabled via {@link Clip#active}.\n\n## Usage\n\n````javascript\n// Create a clip plane on negative diagonal\nnew Clip(myViewer.scene, {\n    pos: [1.0, 1.0, 1.0],\n    dir: [-1.0, -1.0, -1.0],\n    active: true\n}),\n\n// Create a clip plane on positive diagonal\nnew Clip(myViewer.scene, {\n    pos: [-1.0, -1.0, -1.0],\n    dir: [1.0, 1.0, 1.0],\n    active: true\n});\n\n// Create a Mesh that clipped by our Clips\nvar mesh = new Mesh(myViewer.scene, {\n     geometry: new SphereGeometry(),\n     clippable: true // Enable clipping (default)\n});\n````\n\n## Selectively enabling or disabling clipping\n\n{@link Node#clippable} and {@link Mesh#clippable} indicate whether or not the Node or Mesh is affected by Clip components.\n\nYou can switch it at any time, like this:\n\n```` javascript\n// Disable clipping for the Mesh\nmesh.clippable = false;\n\n// Enable clipping for the Mesh\nmesh.clippable = true;\n````",
    "lineNumber": 51,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 1030,
    "kind": "get",
    "name": "type",
    "memberof": "scene/clipping/Clip.js~Clip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/clipping/Clip.js~Clip#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1031,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/clipping/Clip.js~Clip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/clipping/Clip.js~Clip#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1032,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/clipping/Clip.js~Clip",
    "static": false,
    "longname": "scene/clipping/Clip.js~Clip#_state",
    "access": "private",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1036,
    "kind": "set",
    "name": "active",
    "memberof": "scene/clipping/Clip.js~Clip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/clipping/Clip.js~Clip#active",
    "access": "public",
    "description": "Indicates whether this Clip is active or not.",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "active",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1037,
    "kind": "get",
    "name": "active",
    "memberof": "scene/clipping/Clip.js~Clip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/clipping/Clip.js~Clip#active",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1038,
    "kind": "set",
    "name": "pos",
    "memberof": "scene/clipping/Clip.js~Clip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/clipping/Clip.js~Clip#pos",
    "access": "public",
    "description": "The World-space position of this Clip's plane.",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0, 0, 0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1039,
    "kind": "get",
    "name": "pos",
    "memberof": "scene/clipping/Clip.js~Clip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/clipping/Clip.js~Clip#pos",
    "access": "public",
    "description": null,
    "lineNumber": 131,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1040,
    "kind": "set",
    "name": "dir",
    "memberof": "scene/clipping/Clip.js~Clip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/clipping/Clip.js~Clip#dir",
    "access": "public",
    "description": "Vector indicating the orientation of this Clip plane.\n\nThe vector originates at {@link Clip#pos}. Elements on the\nsame side of the vector are clipped.",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0, 0, -1]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1041,
    "kind": "get",
    "name": "dir",
    "memberof": "scene/clipping/Clip.js~Clip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/clipping/Clip.js~Clip#dir",
    "access": "public",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1042,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/clipping/Clip.js~Clip",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/clipping/Clip.js~Clip#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1043,
    "kind": "file",
    "name": "scene/core.js",
    "content": "import {Queue} from './utils/Queue.js';\nimport {Map} from './utils/Map.js';\nimport {stats} from './stats.js';\nimport {utils} from './utils.js';\nimport {Scene} from \"./scene/Scene.js\";\n\nconst scenesRenderInfo = {}; // Used for throttling FPS for each Scene\nconst sceneIDMap = new Map(); // Ensures unique scene IDs\nconst taskQueue = new Queue(); // Task queue, which is pumped on each frame; tasks are pushed to it with calls to xeokit.schedule\nconst tickEvent = {sceneId: null, time: null, startTime: null, prevTime: null, deltaTime: null};\nconst taskBudget = 10; // Millisecs we're allowed to spend on tasks in each frame\nconst fpsSamples = [];\nconst numFPSSamples = 30;\n\nlet defaultScene = null;// Default singleton Scene, lazy-initialized in getter\nlet lastTime = 0;\nlet elapsedTime;\nlet totalFPS = 0;\n\n/**\n * @private\n */\nfunction Core() {\n\n    /**\n     Semantic version number. The value for this is set by an expression that's concatenated to\n     the end of the built binary by the xeokit build script.\n     @property version\n     @namespace xeokit\n     @type {String}\n     */\n    this.version = \"1.0.0\";\n\n    /**\n     Existing {@link Scene}s , mapped to their IDs\n     @property scenes\n     @namespace xeokit\n     @type {{Scene}}\n     */\n    this.scenes = {};\n\n    this._superTypes = {}; // For each component type, a list of its supertypes, ordered upwards in the hierarchy.\n\n    /**\n     Returns the current default {@link Scene}.\n\n     If no Scenes exist yet, or no Scene has been made default yet with a previous call to\n     {@link xeokit/setDefaultScene:function}, then this method will create the default\n     Scene on-the-fly.\n\n     Components created without specifying their Scene will be created within this Scene.\n\n     @method getDefaultScene\n     @returns {Scene} The current default scene\n     */\n    this.getDefaultScene = function () {\n        if (!defaultScene) {\n            defaultScene = new Scene({id: \"default.scene\"});\n        }\n        return defaultScene;\n    };\n\n    /**\n     Sets the current default {@link Scene}.\n\n     A subsequent call to {@link xeokit/getDefaultScene:function} will return this Scene.\n\n     Components created without specifying their Scene will be created within this Scene.\n\n     @method setDefaultScene\n     @param {Scene} scene The new current default scene\n     @returns {Scene} The new current default scene\n     */\n    this.setDefaultScene = function (scene) {\n        defaultScene = scene;\n        return defaultScene;\n    };\n\n    /**\n     Registers a scene on xeokit.\n     This is called within the xeokit.Scene constructor.\n\n     @method _addScene\n     @param {Scene} scene The scene\n     @private\n     */\n    this._addScene = function (scene) {\n        if (scene.id) { // User-supplied ID\n            if (core.scenes[scene.id]) {\n                console.error(`[ERROR] Scene ${utils.inQuotes(scene.id)} already exists`);\n                return;\n            }\n        } else { // Auto-generated ID\n            scene.id = sceneIDMap.addItem({});\n        }\n        core.scenes[scene.id] = scene;\n        const ticksPerRender = scene.ticksPerRender;\n        scenesRenderInfo[scene.id] = {\n            ticksPerRender,\n            renderCountdown: ticksPerRender\n        };\n        stats.components.scenes++;\n        scene.once(\"destroyed\", () => { // Unregister destroyed scenes\n            sceneIDMap.removeItem(scene.id);\n            delete core.scenes[scene.id];\n            delete scenesRenderInfo[scene.id];\n            stats.components.scenes--;\n        });\n    };\n\n    /**\n     Destroys all user-created {@link Scene}}Scenes{{/crossLink}} and\n     clears the default {@link Scene}.\n\n     @method clear\n     @demo foo\n     */\n    this.clear = function () {\n        let scene;\n        for (const id in core.scenes) {\n            if (core.scenes.hasOwnProperty(id)) {\n                scene = core.scenes[id];\n                // Only clear the default Scene\n                // but destroy all the others\n                if (id === \"default.scene\") {\n                    scene.clear();\n                } else {\n                    scene.destroy();\n                    delete core.scenes[scene.id];\n                }\n            }\n        }\n    };\n\n    //////////////////////////////////////////////////////////////////////////\n    /////////// Fix me\n    //////////////////////////////////////////////////////////////////////////\n\n    /**\n     Schedule a task to run at the next frame.\n\n     Internally, this pushes the task to a FIFO queue. Within each frame interval, xeokit processes the queue\n     for a certain period of time, popping tasks and running them. After each frame interval, tasks that did not\n     get a chance to run during the task are left in the queue to be run next time.\n\n     @method scheduleTask\n     @param {Function} callback Callback that runs the task.\n     @param {Object} [scope] Scope for the callback.\n     */\n    this.scheduleTask = function (callback, scope) {\n        taskQueue.push(callback);\n        taskQueue.push(scope);\n    };\n\n    this.runTasks = function (until) { // Pops and processes tasks in the queue, until the given number of milliseconds has elapsed.\n        let time = (new Date()).getTime();\n        let callback;\n        let scope;\n        let tasksRun = 0;\n        while (taskQueue.length > 0 && time < until) {\n            callback = taskQueue.shift();\n            scope = taskQueue.shift();\n            if (scope) {\n                callback.call(scope);\n            } else {\n                callback();\n            }\n            time = (new Date()).getTime();\n            tasksRun++;\n        }\n        return tasksRun;\n    };\n\n    this.getNumTasks = function () {\n        return taskQueue.length;\n    };\n}\n\nfunction subclasses(ChildClass, ParentClass) {\n    var c = ChildClass.prototype;\n    while (c !== null) {\n        if (c === ParentClass.prototype) {\n            return true;\n        }\n        c = c.__proto__;\n    }\n    return false;\n}\n\n/**\n * @private\n * @type {Core}\n */\nconst core = new Core();\n\n\nconst frame = function () {\n    let time = Date.now();\n    if (lastTime > 0) { // Log FPS stats\n        elapsedTime = time - lastTime;\n        var newFPS = 1000 / elapsedTime; // Moving average of FPS\n        totalFPS += newFPS;\n        fpsSamples.push(newFPS);\n        if (fpsSamples.length >= numFPSSamples) {\n            totalFPS -= fpsSamples.shift();\n        }\n        stats.frame.fps = Math.round(totalFPS / fpsSamples.length);\n    }\n    runTasks(time);\n    fireTickEvents(time);\n    renderScenes();\n    lastTime = time;\n    window.requestAnimationFrame(frame);\n};\n\nfunction runTasks(time) { // Process as many enqueued tasks as we can within the per-frame task budget\n    const tasksRun = core.runTasks(time + taskBudget);\n    const tasksScheduled = core.getNumTasks();\n    stats.frame.tasksRun = tasksRun;\n    stats.frame.tasksScheduled = tasksScheduled;\n    stats.frame.tasksBudget = taskBudget;\n}\n\nfunction fireTickEvents(time) { // Fire tick event on each Scene\n    tickEvent.time = time;\n    for (var id in core.scenes) {\n        if (core.scenes.hasOwnProperty(id)) {\n            var scene = core.scenes[id];\n            tickEvent.sceneId = id;\n            tickEvent.startTime = scene.startTime;\n            tickEvent.deltaTime = tickEvent.prevTime != null ? tickEvent.time - tickEvent.prevTime : 0;\n            /**\n             * Fired on each game loop iteration.\n             *\n             * @event tick\n             * @param {String} sceneID The ID of this Scene.\n             * @param {Number} startTime The time in seconds since 1970 that this Scene was instantiated.\n             * @param {Number} time The time in seconds since 1970 of this \"tick\" event.\n             * @param {Number} prevTime The time of the previous \"tick\" event from this Scene.\n             * @param {Number} deltaTime The time in seconds since the previous \"tick\" event from this Scene.\n             */\n            scene.fire(\"tick\", tickEvent, true);\n        }\n    }\n    tickEvent.prevTime = time;\n}\n\nfunction renderScenes() {\n    const scenes = core.scenes;\n    const forceRender = false;\n    let scene;\n    let renderInfo;\n    let ticksPerRender;\n    let id;\n    for (id in scenes) {\n        if (scenes.hasOwnProperty(id)) {\n            scene = scenes[id];\n            renderInfo = scenesRenderInfo[id];\n            if (!renderInfo) {\n                renderInfo = scenesRenderInfo[id] = {}; // FIXME\n            }\n            ticksPerRender = scene.ticksPerRender;\n            if (renderInfo.ticksPerRender !== ticksPerRender) {\n                renderInfo.ticksPerRender = ticksPerRender;\n                renderInfo.renderCountdown = ticksPerRender;\n            }\n            if (--renderInfo.renderCountdown === 0) {\n                scene.render(forceRender);\n                renderInfo.renderCountdown = ticksPerRender;\n            }\n        }\n    }\n}\n\nwindow.requestAnimationFrame(frame);\n\nexport {core};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/core.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1044,
    "kind": "variable",
    "name": "scenesRenderInfo",
    "memberof": "scene/core.js",
    "static": true,
    "longname": "scene/core.js~scenesRenderInfo",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1045,
    "kind": "variable",
    "name": "sceneIDMap",
    "memberof": "scene/core.js",
    "static": true,
    "longname": "scene/core.js~sceneIDMap",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "scene/utils/Map.js~Map"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1046,
    "kind": "variable",
    "name": "taskQueue",
    "memberof": "scene/core.js",
    "static": true,
    "longname": "scene/core.js~taskQueue",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "scene/utils/Queue.js~Queue"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1047,
    "kind": "variable",
    "name": "tickEvent",
    "memberof": "scene/core.js",
    "static": true,
    "longname": "scene/core.js~tickEvent",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "{\"sceneId\": *, \"time\": *, \"startTime\": *, \"prevTime\": *, \"deltaTime\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1048,
    "kind": "variable",
    "name": "taskBudget",
    "memberof": "scene/core.js",
    "static": true,
    "longname": "scene/core.js~taskBudget",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1049,
    "kind": "variable",
    "name": "fpsSamples",
    "memberof": "scene/core.js",
    "static": true,
    "longname": "scene/core.js~fpsSamples",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1050,
    "kind": "variable",
    "name": "numFPSSamples",
    "memberof": "scene/core.js",
    "static": true,
    "longname": "scene/core.js~numFPSSamples",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1051,
    "kind": "variable",
    "name": "defaultScene",
    "memberof": "scene/core.js",
    "static": true,
    "longname": "scene/core.js~defaultScene",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1052,
    "kind": "variable",
    "name": "lastTime",
    "memberof": "scene/core.js",
    "static": true,
    "longname": "scene/core.js~lastTime",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1053,
    "kind": "variable",
    "name": "totalFPS",
    "memberof": "scene/core.js",
    "static": true,
    "longname": "scene/core.js~totalFPS",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1054,
    "kind": "function",
    "name": "Core",
    "memberof": "scene/core.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/core.js~Core",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 23,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1055,
    "kind": "function",
    "name": "subclasses",
    "memberof": "scene/core.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/core.js~subclasses",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 179,
    "undocument": true,
    "params": [
      {
        "name": "ChildClass",
        "types": [
          "*"
        ]
      },
      {
        "name": "ParentClass",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1056,
    "kind": "function",
    "name": "frame",
    "memberof": "scene/core.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/core.js~frame",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 197,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1057,
    "kind": "function",
    "name": "runTasks",
    "memberof": "scene/core.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/core.js~runTasks",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "params": [
      {
        "name": "time",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1058,
    "kind": "function",
    "name": "fireTickEvents",
    "memberof": "scene/core.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/core.js~fireTickEvents",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 224,
    "undocument": true,
    "params": [
      {
        "name": "time",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1059,
    "kind": "function",
    "name": "renderScenes",
    "memberof": "scene/core.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/core.js~renderScenes",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 248,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 1060,
    "kind": "variable",
    "name": "core",
    "memberof": "scene/core.js",
    "static": true,
    "longname": "scene/core.js~core",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/core.js",
    "importStyle": "{core}",
    "description": "",
    "lineNumber": 194,
    "type": {
      "nullable": null,
      "types": [
        "Core"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 1061,
    "kind": "file",
    "name": "scene/geometry/AABBGeometry.js",
    "content": "import {utils} from '../utils.js';\nimport {core} from '../core.js';\nimport {Geometry} from './Geometry.js';\n\n/**\n * @desc Defines the shape of one or more {@link Mesh}es to visualize the extents of a World-space axis-aligned bounding box (AABB).\n *\n * * A xeokit AABB indicates the min/max extents of an axis-aligned World-space volume as an array: ````[xmin,ymin,zmin,xmax,ymax,zmax]````.\n * * Set {@link AABBGeometry#targetAABB} to an AABB to fix it to those extents\n * * Set {@link AABBGeometry#target} to a {@link Node} or {@link Mesh} to dynamically fit it to the AABB of that component.\n *\n * ## Usage\n *\n * ````javascript\n * // First Mesh with a TorusGeometry\n * var mesh = new Mesh(myViewer.scene,{\n *      geometry: new xeokit.TorusGeometry(myViewer.scene)\n * });\n *\n * // Second Mesh with an AABBGeometry that shows a wireframe box\n * // for the World-space axis-aligned boundary of the first Mesh\n * var boundaryHelper = new Mesh(myViewer.scene, {\n *      geometry: new AABBGeometry(myViewer.scene, {\n *          targetAABB: mesh.aabb\n *      }),\n *      material: new PhongMaterial(myViewer.scene, {\n *          diffuse: [0.5, 1.0, 0.5],\n *          emissive: [0.5, 1.0, 0.5],\n *          lineWidth:2\n *      })\n * });\n * ````\n *\n * Now whenever our mesh {@link Mesh} changes shape or position, our AABBGeometry will automatically\n * update to stay fitted to it.\n *\n * We could also directly configure the AABBGeometry with the {@link Mesh#aabb}:\n *\n * ````javascript\n * var boundaryHelper2 = new Mesh(myViewer.scene, {\n *      geometry: new AABBGeometry(myViewer.scene, {\n *          targetAABB: mesh.aabb\n *      }),\n *      material: new PhongMaterial(myViewer.scene, {\n *          diffuse: [0.5, 1.0, 0.5],\n *          emissive: [0.5, 1.0, 0.5],\n *          lineWidth:2\n *      })\n * });\n * ````\n */\nclass AABBGeometry extends Geometry {\n\n    /**\n     *\n     @class AABBGeometry\n     @module xeokit\n     @submodule geometry\n     @constructor\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] Configs\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene},\n     generated automatically when omitted.\n     @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this AABBGeometry.\n     @param [cfg.target] {Component} ID or instance of a {@link Component} subtype whose AABB we'll show.\n     @param [cfg.targetAABB] {Float32Array} An axis-aligned box (AABB) in a six-element Float32Array\n     containing the min/max extents of the axis-aligned volume, ie. ````(xmin,ymin,zmin,xmax,ymax,zmax)````.\n     @extends Component\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, utils.apply(cfg, {\n            combineGeometry: true,\n            compressGeometry: true, // Quantized geometry is immutable\n            primitive: cfg.primitive || \"lines\",\n            indices: [\n                0, 1, 1, 2, 2, 3, 3, 0, 4,\n                5, 5, 6, 6, 7, 7, 4, 0, 4,\n                1, 5, 2, 6, 3, 7\n            ],\n            positions: cfg.positions || [\n                1.0, 1.0, 1.0,\n                1.0, -1.0, 1.0,\n                -1.0, -1.0, 1.0,\n                -1.0, 1.0, 1.0,\n                1.0, 1.0, -1.0,\n                1.0, -1.0, -1.0,\n                -1.0, -1.0, -1.0,\n                -1.0, 1.0, -1.0\n            ]\n        }));\n\n        if (cfg.target) {\n            this.target = cfg.target;\n\n        } else if (cfg.targetAABB) {\n            this.targetAABB = cfg.targetAABB;\n        }\n    }\n\n\n    /**\n     A component whose AABB we'll dynamically fit this AABBGeometry to.\n\n     This property effectively replaces the {@link AABBGeometry#targetAABB} property.\n\n     @property target\n     @type Component\n     */\n    set target(target) {\n        let geometryDirty = false;\n        const self = this;\n        this._attach({\n            name: \"target\",\n            type: \"Component\",\n            component: target,\n            sceneDefault: false,\n            on: {\n                boundary: function () {\n                    if (geometryDirty) {\n                        return;\n                    }\n                    geometryDirty = true;\n                    core.scheduleTask(function () {\n                        self._setPositionsFromAABB(self._attached.target.aabb);\n                        geometryDirty = false;\n                    });\n                }\n            },\n            onAttached: function () {\n                self._setPositionsFromAABB(self._attached.target.aabb);\n            }\n        });\n    }\n\n    get target() {\n        return this._attached.target;\n    }\n\n    /**\n     Sets this AABBGeometry to an axis-aligned box (AABB), given as a six-element Float32Array\n     containing the min/max extents of the\n     axis-aligned volume, ie. ````[xmin,ymin,zmin,xmax,ymax,zmax]````.\n\n     This property overrides the {@link AABBGeometry#target} property, causing it to become null.\n\n     @property targetAABB\n     @type Float32Array\n     */\n    set targetAABB(aabb) {\n        if (!aabb) {\n            return;\n        }\n        if (this._attached.target) {\n            this.target = null;\n        }\n        this._setPositionsFromAABB(aabb);\n    }\n\n    _setPositionsFromAABB(aabb) {\n        this.positions = [\n            aabb[3], aabb[4], aabb[5],\n            aabb[3], aabb[1], aabb[5],\n            aabb[0], aabb[1], aabb[5],\n            aabb[0], aabb[4], aabb[5],\n            aabb[3], aabb[4], aabb[2],\n            aabb[3], aabb[1], aabb[2],\n            aabb[0], aabb[1], aabb[2],\n            aabb[0], aabb[4], aabb[2]\n        ];\n    }\n}\n\nexport {AABBGeometry};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/geometry/AABBGeometry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1062,
    "kind": "class",
    "name": "AABBGeometry",
    "memberof": "scene/geometry/AABBGeometry.js",
    "static": true,
    "longname": "scene/geometry/AABBGeometry.js~AABBGeometry",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/geometry/AABBGeometry.js",
    "importStyle": "{AABBGeometry}",
    "description": "Defines the shape of one or more {@link Mesh}es to visualize the extents of a World-space axis-aligned bounding box (AABB).\n\n* A xeokit AABB indicates the min/max extents of an axis-aligned World-space volume as an array: ````[xmin,ymin,zmin,xmax,ymax,zmax]````.\n* Set {@link AABBGeometry#targetAABB} to an AABB to fix it to those extents\n* Set {@link AABBGeometry#target} to a {@link Node} or {@link Mesh} to dynamically fit it to the AABB of that component.\n\n## Usage\n\n````javascript\n// First Mesh with a TorusGeometry\nvar mesh = new Mesh(myViewer.scene,{\n     geometry: new xeokit.TorusGeometry(myViewer.scene)\n});\n\n// Second Mesh with an AABBGeometry that shows a wireframe box\n// for the World-space axis-aligned boundary of the first Mesh\nvar boundaryHelper = new Mesh(myViewer.scene, {\n     geometry: new AABBGeometry(myViewer.scene, {\n         targetAABB: mesh.aabb\n     }),\n     material: new PhongMaterial(myViewer.scene, {\n         diffuse: [0.5, 1.0, 0.5],\n         emissive: [0.5, 1.0, 0.5],\n         lineWidth:2\n     })\n});\n````\n\nNow whenever our mesh {@link Mesh} changes shape or position, our AABBGeometry will automatically\nupdate to stay fitted to it.\n\nWe could also directly configure the AABBGeometry with the {@link Mesh#aabb}:\n\n````javascript\nvar boundaryHelper2 = new Mesh(myViewer.scene, {\n     geometry: new AABBGeometry(myViewer.scene, {\n         targetAABB: mesh.aabb\n     }),\n     material: new PhongMaterial(myViewer.scene, {\n         diffuse: [0.5, 1.0, 0.5],\n         emissive: [0.5, 1.0, 0.5],\n         lineWidth:2\n     })\n});\n````",
    "lineNumber": 52,
    "interface": false,
    "extends": [
      "scene/geometry/Geometry.js~Geometry"
    ]
  },
  {
    "__docId__": 1063,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/geometry/AABBGeometry.js~AABBGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/AABBGeometry.js~AABBGeometry#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "AABBGeometry"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "geometry"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@extends",
        "tagValue": "Component"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "Configs"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent {@link Scene},\ngenerated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "String:Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.meta",
        "description": "Optional map of user-defined metadata to attach to this AABBGeometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.target",
        "description": "{Component} ID or instance of a {@link Component} subtype whose AABB we'll show."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.targetAABB",
        "description": "{Float32Array} An axis-aligned box (AABB) in a six-element Float32Array\ncontaining the min/max extents of the axis-aligned volume, ie. ````(xmin,ymin,zmin,xmax,ymax,zmax)````."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1066,
    "kind": "set",
    "name": "target",
    "memberof": "scene/geometry/AABBGeometry.js~AABBGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/AABBGeometry.js~AABBGeometry#target",
    "access": "public",
    "description": "A component whose AABB we'll dynamically fit this AABBGeometry to.\n\nThis property effectively replaces the {@link AABBGeometry#targetAABB} property.",
    "lineNumber": 112,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1067,
    "kind": "get",
    "name": "target",
    "memberof": "scene/geometry/AABBGeometry.js~AABBGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/AABBGeometry.js~AABBGeometry#target",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1068,
    "kind": "set",
    "name": "targetAABB",
    "memberof": "scene/geometry/AABBGeometry.js~AABBGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/AABBGeometry.js~AABBGeometry#targetAABB",
    "access": "public",
    "description": "Sets this AABBGeometry to an axis-aligned box (AABB), given as a six-element Float32Array\ncontaining the min/max extents of the\naxis-aligned volume, ie. ````[xmin,ymin,zmin,xmax,ymax,zmax]````.\n\nThis property overrides the {@link AABBGeometry#target} property, causing it to become null.",
    "lineNumber": 152,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "targetAABB",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1070,
    "kind": "method",
    "name": "_setPositionsFromAABB",
    "memberof": "scene/geometry/AABBGeometry.js~AABBGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/AABBGeometry.js~AABBGeometry#_setPositionsFromAABB",
    "access": "private",
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "aabb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1071,
    "kind": "member",
    "name": "positions",
    "memberof": "scene/geometry/AABBGeometry.js~AABBGeometry",
    "static": false,
    "longname": "scene/geometry/AABBGeometry.js~AABBGeometry#positions",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1072,
    "kind": "file",
    "name": "scene/geometry/BoxGeometry.js",
    "content": "import {utils} from '../utils.js';\nimport {Geometry} from './Geometry.js';\n\n/**\n * @desc Defines a box shape for one or more {@link Mesh}es.\n *\n * ## Usage\n * Creating a {@link Mesh} with a BoxGeometry and a {@link PhongMaterial} with diffuse {@link Texture}:\n *\n * ````javascript\n * new Mesh(myViewer.scene, {\n *      geometry: new BoxGeometry(myViewer.scene,{\n *         center: [0,0,0],\n *         xSize: 1,  // Half-size on each axis; BoxGeometry is actually two units big on each side.\n *         ySize: 1,\n *         zSize: 1\n *      }),\n *      material: new PhongMaterial(myViewer.scene, {\n *         diffuseMap: new Texture(myViewer.scene, {\n *             src: \"textures/diffuse/uvGrid2.jpg\"\n *         })\n *      })\n * });\n ````\n */\nclass BoxGeometry extends Geometry {\n\n    /**\n     *\n     @class BoxGeometry\n     @module xeokit\n     @submodule geometry\n     @constructor\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] Configs\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene},\n     generated automatically when omitted.\n     @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this BoxGeometry.\n     @param [cfg.primitive=\"triangles\"] {String} The primitive type. Accepted values for a BoxGeometry are 'points', 'lines' and 'triangles'.\n     @param [cfg.center] {Float32Array} 3D point indicating the center position.\n     @param [cfg.xSize=1.0] {Number} Half-size on the X-axis.\n     @param [cfg.ySize=1.0] {Number} Half-size on the Y-axis.\n     @param [cfg.zSize=1.0] {Number} Half-size on the Z-axis.\n     @extends Geometry\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg={}) {\n\n        let xSize = cfg.xSize || 1;\n        if (xSize < 0) {\n            console.error(\"negative xSize not allowed - will invert\");\n            xSize *= -1;\n        }\n\n        let ySize = cfg.ySize || 1;\n        if (ySize < 0) {\n            console.error(\"negative ySize not allowed - will invert\");\n            ySize *= -1;\n        }\n\n        let zSize = cfg.zSize || 1;\n        if (zSize < 0) {\n            console.error(\"negative zSize not allowed - will invert\");\n            zSize *= -1;\n        }\n\n        const center = cfg.center;\n        const centerX = center ? center[0] : 0;\n        const centerY = center ? center[1] : 0;\n        const centerZ = center ? center[2] : 0;\n\n        const xmin = -xSize + centerX;\n        const ymin = -ySize + centerY;\n        const zmin = -zSize + centerZ;\n        const xmax = xSize + centerX;\n        const ymax = ySize + centerY;\n        const zmax = zSize + centerZ;\n\n        super(owner, utils.apply(cfg, {\n\n            // The vertices - eight for our cube, each\n            // one spanning three array elements for X,Y and Z\n            positions: [\n\n                // v0-v1-v2-v3 front\n                xmax, ymax, zmax,\n                xmin, ymax, zmax,\n                xmin, ymin, zmax,\n                xmax, ymin, zmax,\n\n                // v0-v3-v4-v1 right\n                xmax, ymax, zmax,\n                xmax, ymin, zmax,\n                xmax, ymin, zmin,\n                xmax, ymax, zmin,\n\n                // v0-v1-v6-v1 top\n                xmax, ymax, zmax,\n                xmax, ymax, zmin,\n                xmin, ymax, zmin,\n                xmin, ymax, zmax,\n\n                // v1-v6-v7-v2 left\n                xmin, ymax, zmax,\n                xmin, ymax, zmin,\n                xmin, ymin, zmin,\n                xmin, ymin, zmax,\n\n                // v7-v4-v3-v2 bottom\n                xmin, ymin, zmin,\n                xmax, ymin, zmin,\n                xmax, ymin, zmax,\n                xmin, ymin, zmax,\n\n                // v4-v7-v6-v1 back\n                xmax, ymin, zmin,\n                xmin, ymin, zmin,\n                xmin, ymax, zmin,\n                xmax, ymax, zmin\n            ],\n\n            // Normal vectors, one for each vertex\n            normals: [\n\n                // v0-v1-v2-v3 front\n                0, 0, 1,\n                0, 0, 1,\n                0, 0, 1,\n                0, 0, 1,\n\n                // v0-v3-v4-v5 right\n                1, 0, 0,\n                1, 0, 0,\n                1, 0, 0,\n                1, 0, 0,\n\n                // v0-v5-v6-v1 top\n                0, 1, 0,\n                0, 1, 0,\n                0, 1, 0,\n                0, 1, 0,\n\n                // v1-v6-v7-v2 left\n                -1, 0, 0,\n                -1, 0, 0,\n                -1, 0, 0,\n                -1, 0, 0,\n\n                // v7-v4-v3-v2 bottom\n                0, -1, 0,\n                0, -1, 0,\n                0, -1, 0,\n                0, -1, 0,\n\n                // v4-v7-v6-v5 back\n                0, 0, -1,\n                0, 0, -1,\n                0, 0, -1,\n                0, 0, -1\n            ],\n\n            // UV coords\n            uv: [\n\n                // v0-v1-v2-v3 front\n                1, 0,\n                0, 0,\n                0, 1,\n                1, 1,\n\n                // v0-v3-v4-v1 right\n                0, 0,\n                0, 1,\n                1, 1,\n                1, 0,\n\n                // v0-v1-v6-v1 top\n                1, 1,\n                1, 0,\n                0, 0,\n                0, 1,\n\n                // v1-v6-v7-v2 left\n                1, 0,\n                0, 0,\n                0, 1,\n                1, 1,\n\n                // v7-v4-v3-v2 bottom\n                0, 1,\n                1, 1,\n                1, 0,\n                0, 0,\n\n                // v4-v7-v6-v1 back\n                0, 1,\n                1, 1,\n                1, 0,\n                0, 0\n            ],\n\n            // Indices - these organise the\n            // positions and uv texture coordinates\n            // into geometric primitives in accordance\n            // with the \"primitive\" parameter,\n            // in this case a set of three indices\n            // for each triangle.\n            //\n            // Note that each triangle is specified\n            // in counter-clockwise winding order.\n            //\n            // You can specify them in clockwise\n            // order if you configure the Modes\n            // node's frontFace flag as \"cw\", instead of\n            // the default \"ccw\".\n            indices: [\n                0, 1, 2,\n                0, 2, 3,\n                // front\n                4, 5, 6,\n                4, 6, 7,\n                // right\n                8, 9, 10,\n                8, 10, 11,\n                // top\n                12, 13, 14,\n                12, 14, 15,\n                // left\n                16, 17, 18,\n                16, 18, 19,\n                // bottom\n                20, 21, 22,\n                20, 22, 23\n            ],\n\n            // Tangents are lazy-computed from normals and UVs\n            // for Normal mapping once we know we have texture\n\n            tangents: null\n        }));\n\n        this.box = true;\n    }\n}\n\nexport {BoxGeometry};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/geometry/BoxGeometry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1073,
    "kind": "class",
    "name": "BoxGeometry",
    "memberof": "scene/geometry/BoxGeometry.js",
    "static": true,
    "longname": "scene/geometry/BoxGeometry.js~BoxGeometry",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/geometry/BoxGeometry.js",
    "importStyle": "{BoxGeometry}",
    "description": "Defines a box shape for one or more {@link Mesh}es.\n\n## Usage\nCreating a {@link Mesh} with a BoxGeometry and a {@link PhongMaterial} with diffuse {@link Texture}:\n\n````javascript\nnew Mesh(myViewer.scene, {\n     geometry: new BoxGeometry(myViewer.scene,{\n        center: [0,0,0],\n        xSize: 1,  // Half-size on each axis; BoxGeometry is actually two units big on each side.\n        ySize: 1,\n        zSize: 1\n     }),\n     material: new PhongMaterial(myViewer.scene, {\n        diffuseMap: new Texture(myViewer.scene, {\n            src: \"textures/diffuse/uvGrid2.jpg\"\n        })\n     })\n});\n````",
    "lineNumber": 26,
    "interface": false,
    "extends": [
      "scene/geometry/Geometry.js~Geometry"
    ]
  },
  {
    "__docId__": 1074,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/geometry/BoxGeometry.js~BoxGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/BoxGeometry.js~BoxGeometry#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "BoxGeometry"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "geometry"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@extends",
        "tagValue": "Geometry"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "Configs"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent {@link Scene},\ngenerated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "String:Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.meta",
        "description": "Optional map of user-defined metadata to attach to this BoxGeometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"triangles\"",
        "defaultRaw": "triangles",
        "name": "cfg.primitive",
        "description": "{String} The primitive type. Accepted values for a BoxGeometry are 'points', 'lines' and 'triangles'."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.center",
        "description": "{Float32Array} 3D point indicating the center position."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "cfg.xSize",
        "description": "{Number} Half-size on the X-axis."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "cfg.ySize",
        "description": "{Number} Half-size on the Y-axis."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "cfg.zSize",
        "description": "{Number} Half-size on the Z-axis."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1075,
    "kind": "member",
    "name": "box",
    "memberof": "scene/geometry/BoxGeometry.js~BoxGeometry",
    "static": false,
    "longname": "scene/geometry/BoxGeometry.js~BoxGeometry#box",
    "access": "public",
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1076,
    "kind": "file",
    "name": "scene/geometry/CylinderGeometry.js",
    "content": "import {utils} from '../utils.js';\nimport {Geometry} from './Geometry.js';\n\n/**\n * @desc Defines a cylindrical shape for one or more {@link Mesh}es.\n *\n * ## Usage\n * Creating a {@link Mesh} with a CylinderGeometry and a {@link PhongMaterial} with diffuse {@link Texture}:\n *\n * ````javascript\n * new Mesh(myViewer.scene, {\n *     geometry: new CylinderGeometry(myViewer.scene, {\n *          center: [0,0,0],\n *          radiusTop: 2.0,\n *          radiusBottom: 2.0,\n *          height: 5.0,\n *          radialSegments: 20,\n *          heightSegments: 1,\n *          openEnded: false\n *      }),\n *      material: new PhongMaterial(myViewer.scene, {\n *          diffuseMap: new Texture(myViewer.scene, {\n *              src: \"textures/diffuse/uvGrid2.jpg\"\n *          })\n *      })\n *  });\n ````\n */\nclass CylinderGeometry extends Geometry {\n\n    /**\n     * @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] Configs\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene},\n     generated automatically when omitted.\n     @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this CylinderGeometry.\n     @param [cfg.primitive=\"triangles\"] {String} The primitive type. Accepted values for a CylinderGeometry are 'points', 'lines' and 'triangles'.\n     @param [cfg.center] {Float32Array} 3D point indicating the center position of the CylinderGeometry.\n     @param [cfg.radiusTop=1] {Number} Radius of top.\n     @param [cfg.radiusBottom=1] {Number} Radius of bottom.\n     @param [cfg.height=1] {Number} Height.\n     @param [cfg.radialSegments=60] {Number} Number of segments around the CylinderGeometry.\n     @param [cfg.heightSegments=1] {Number} Number of vertical segments.\n     @param [cfg.openEnded=false] {Boolean} Whether or not the CylinderGeometry has solid caps on the ends.\n     @param [cfg.lod=1] {Number} Level-of-detail, in range [0..1].\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        let radiusTop = cfg.radiusTop || 1;\n        if (radiusTop < 0) {\n            console.error(\"negative radiusTop not allowed - will invert\");\n            radiusTop *= -1;\n        }\n\n        let radiusBottom = cfg.radiusBottom || 1;\n        if (radiusBottom < 0) {\n            console.error(\"negative radiusBottom not allowed - will invert\");\n            radiusBottom *= -1;\n        }\n\n        let height = cfg.height || 1;\n        if (height < 0) {\n            console.error(\"negative height not allowed - will invert\");\n            height *= -1;\n        }\n\n        let radialSegments = cfg.radialSegments || 32;\n        if (radialSegments < 0) {\n            console.error(\"negative radialSegments not allowed - will invert\");\n            radialSegments *= -1;\n        }\n        if (radialSegments < 3) {\n            radialSegments = 3;\n        }\n\n        let heightSegments = cfg.heightSegments || 1;\n        if (heightSegments < 0) {\n            console.error(\"negative heightSegments not allowed - will invert\");\n            heightSegments *= -1;\n        }\n        if (heightSegments < 1) {\n            heightSegments = 1;\n        }\n\n        const openEnded = !!cfg.openEnded;\n\n        let center = cfg.center;\n        const centerX = center ? center[0] : 0;\n        const centerY = center ? center[1] : 0;\n        const centerZ = center ? center[2] : 0;\n\n        const heightHalf = height / 2;\n        const heightLength = height / heightSegments;\n        const radialAngle = (2.0 * Math.PI / radialSegments);\n        const radialLength = 1.0 / radialSegments;\n        //var nextRadius = this._radiusBottom;\n        const radiusChange = (radiusTop - radiusBottom) / heightSegments;\n\n        const positions = [];\n        const normals = [];\n        const uvs = [];\n        const indices = [];\n\n        let h;\n        let i;\n\n        let x;\n        let z;\n\n        let currentRadius;\n        let currentHeight;\n\n        let first;\n        let second;\n\n        let startIndex;\n        let tu;\n        let tv;\n\n        // create vertices\n        const normalY = (90.0 - (Math.atan(height / (radiusBottom - radiusTop))) * 180 / Math.PI) / 90.0;\n\n        for (h = 0; h <= heightSegments; h++) {\n            currentRadius = radiusTop - h * radiusChange;\n            currentHeight = heightHalf - h * heightLength;\n\n            for (i = 0; i <= radialSegments; i++) {\n                x = Math.sin(i * radialAngle);\n                z = Math.cos(i * radialAngle);\n\n                normals.push(currentRadius * x);\n                normals.push(normalY); //todo\n                normals.push(currentRadius * z);\n\n                uvs.push((i * radialLength));\n                uvs.push(h * 1 / heightSegments);\n\n                positions.push((currentRadius * x) + centerX);\n                positions.push((currentHeight) + centerY);\n                positions.push((currentRadius * z) + centerZ);\n            }\n        }\n\n        // create faces\n        for (h = 0; h < heightSegments; h++) {\n            for (i = 0; i <= radialSegments; i++) {\n\n                first = h * (radialSegments + 1) + i;\n                second = first + radialSegments;\n\n                indices.push(first);\n                indices.push(second);\n                indices.push(second + 1);\n\n                indices.push(first);\n                indices.push(second + 1);\n                indices.push(first + 1);\n            }\n        }\n\n        // create top cap\n        if (!openEnded && radiusTop > 0) {\n            startIndex = (positions.length / 3);\n\n            // top center\n            normals.push(0.0);\n            normals.push(1.0);\n            normals.push(0.0);\n\n            uvs.push(0.5);\n            uvs.push(0.5);\n\n            positions.push(0 + centerX);\n            positions.push(heightHalf + centerY);\n            positions.push(0 + centerZ);\n\n            // top triangle fan\n            for (i = 0; i <= radialSegments; i++) {\n                x = Math.sin(i * radialAngle);\n                z = Math.cos(i * radialAngle);\n                tu = (0.5 * Math.sin(i * radialAngle)) + 0.5;\n                tv = (0.5 * Math.cos(i * radialAngle)) + 0.5;\n\n                normals.push(radiusTop * x);\n                normals.push(1.0);\n                normals.push(radiusTop * z);\n\n                uvs.push(tu);\n                uvs.push(tv);\n\n                positions.push((radiusTop * x) + centerX);\n                positions.push((heightHalf) + centerY);\n                positions.push((radiusTop * z) + centerZ);\n            }\n\n            for (i = 0; i < radialSegments; i++) {\n                center = startIndex;\n                first = startIndex + 1 + i;\n\n                indices.push(first);\n                indices.push(first + 1);\n                indices.push(center);\n            }\n        }\n\n        // create bottom cap\n        if (!openEnded && radiusBottom > 0) {\n\n            startIndex = (positions.length / 3);\n\n            // top center\n            normals.push(0.0);\n            normals.push(-1.0);\n            normals.push(0.0);\n\n            uvs.push(0.5);\n            uvs.push(0.5);\n\n            positions.push(0 + centerX);\n            positions.push(0 - heightHalf + centerY);\n            positions.push(0 + centerZ);\n\n            // top triangle fan\n            for (i = 0; i <= radialSegments; i++) {\n\n                x = Math.sin(i * radialAngle);\n                z = Math.cos(i * radialAngle);\n\n                tu = (0.5 * Math.sin(i * radialAngle)) + 0.5;\n                tv = (0.5 * Math.cos(i * radialAngle)) + 0.5;\n\n                normals.push(radiusBottom * x);\n                normals.push(-1.0);\n                normals.push(radiusBottom * z);\n\n                uvs.push(tu);\n                uvs.push(tv);\n\n                positions.push((radiusBottom * x) + centerX);\n                positions.push((0 - heightHalf) + centerY);\n                positions.push((radiusBottom * z) + centerZ);\n            }\n\n            for (i = 0; i < radialSegments; i++) {\n\n                center = startIndex;\n                first = startIndex + 1 + i;\n\n                indices.push(center);\n                indices.push(first + 1);\n                indices.push(first);\n            }\n        }\n\n        super(owner, utils.apply(cfg, {\n            positions: positions,\n            normals: normals,\n            uv: uvs,\n            indices: indices\n        }));\n    }\n}\n\nexport {CylinderGeometry};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/geometry/CylinderGeometry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1077,
    "kind": "class",
    "name": "CylinderGeometry",
    "memberof": "scene/geometry/CylinderGeometry.js",
    "static": true,
    "longname": "scene/geometry/CylinderGeometry.js~CylinderGeometry",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/geometry/CylinderGeometry.js",
    "importStyle": "{CylinderGeometry}",
    "description": "Defines a cylindrical shape for one or more {@link Mesh}es.\n\n## Usage\nCreating a {@link Mesh} with a CylinderGeometry and a {@link PhongMaterial} with diffuse {@link Texture}:\n\n````javascript\nnew Mesh(myViewer.scene, {\n    geometry: new CylinderGeometry(myViewer.scene, {\n         center: [0,0,0],\n         radiusTop: 2.0,\n         radiusBottom: 2.0,\n         height: 5.0,\n         radialSegments: 20,\n         heightSegments: 1,\n         openEnded: false\n     }),\n     material: new PhongMaterial(myViewer.scene, {\n         diffuseMap: new Texture(myViewer.scene, {\n             src: \"textures/diffuse/uvGrid2.jpg\"\n         })\n     })\n });\n````",
    "lineNumber": 29,
    "interface": false,
    "extends": [
      "scene/geometry/Geometry.js~Geometry"
    ]
  },
  {
    "__docId__": 1078,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/geometry/CylinderGeometry.js~CylinderGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/CylinderGeometry.js~CylinderGeometry#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "Configs"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent {@link Scene},\ngenerated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "String:Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.meta",
        "description": "Optional map of user-defined metadata to attach to this CylinderGeometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"triangles\"",
        "defaultRaw": "triangles",
        "name": "cfg.primitive",
        "description": "{String} The primitive type. Accepted values for a CylinderGeometry are 'points', 'lines' and 'triangles'."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.center",
        "description": "{Float32Array} 3D point indicating the center position of the CylinderGeometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.radiusTop",
        "description": "{Number} Radius of top."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.radiusBottom",
        "description": "{Number} Radius of bottom."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.height",
        "description": "{Number} Height."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "60",
        "defaultRaw": 60,
        "name": "cfg.radialSegments",
        "description": "{Number} Number of segments around the CylinderGeometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.heightSegments",
        "description": "{Number} Number of vertical segments."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.openEnded",
        "description": "{Boolean} Whether or not the CylinderGeometry has solid caps on the ends."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.lod",
        "description": "{Number} Level-of-detail, in range [0..1]."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1079,
    "kind": "file",
    "name": "scene/geometry/Geometry.js",
    "content": "import {Component} from '../Component.js';\nimport {RenderState} from '../webgl/RenderState.js';\nimport {ArrayBuf} from '../webgl/ArrayBuf.js';\nimport {getSceneVertexBufs} from './SceneVertexBufs.js';\nimport {math} from '../math/math.js';\nimport {stats} from './../stats.js';\nimport {WEBGL_INFO} from './../webglInfo.js';\nimport {buildEdgeIndices} from '../math/buildEdges.js';\n\nconst memoryStats = stats.memory;\nvar bigIndicesSupported = WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"];\nconst IndexArrayType = bigIndicesSupported ? Uint32Array : Uint16Array;\nconst nullVertexBufs = new RenderState({});\nconst tempAABB = math.AABB3();\n\n/**\n * @desc Defines a shape for one or more {@link Mesh}es.\n *\n * ## Basic Usage\n *\n * Creating a {@link Mesh} with a Geometry defining a single triangle and a {@link PhongMaterial} with diffuse {@link Texture}:\n *\n * ````javascript\n * new Mesh(myViewer.scene, {\n *      geometry: new Geometry(myViewer.scene, {\n *          primitive: \"triangles\",\n *          positions:  [0.0, 0.9, 0.0, -0.9,-0.9, 0.0, 0.9, -0.9, 0.0],\n *          normals:    [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0],\n *          uv:         [0.0, 0.0, 0.5, 0.0, 1.0, 0.0],\n *          indices:    [0, 1, 2]\n *      }),\n *      material: new PhongMaterial(myViewer.scene, {\n *          diffuseMap: new Texture(myViewer.scene, {\n *              src: \"textures/diffuse/uvGrid2.jpg\"\n *          })\n *      })\n * });\n * ````\n *\n * ## Default Geometry\n *\n * A {@link Mesh} created without a Geometry will automatically inherit the\n * default {@link Scene#geometry}, which is a {@link BoxGeometry} of unit size.\n *\n * ````javascript\n * new Mesh(myViewer.scene, {\n *      material: new PhongMaterial(myViewer.scene, {\n *          diffuseMap: new Texture(myViewer.scene, {\n *              src: \"textures/diffuse/uvGrid2.jpg\"\n *          })\n *      })\n * });\n * ````\n *\n * ## Geometry Compression\n *\n * By default, a Geometry automatically quantizes its vertex data to reduce memory and GPU bus usage. Usually the data arrays,\n * such as positions and normals, are stored as 32-bit floating-point values. Quantization compresses those arrays\n * to 16-bit integers represented on a scale between their minimum and maximum values. The arrays are then decompressed\n * on the GPU, via a simple matrix multiplication in the vertex shader.\n *\n * Geometry quantizes each normal vector by oct-encoded it into two 8-bit unsigned integers. This can cause them to lose\n * precision, which may affect the accuracy of any operations that rely on them being perfectly perpendicular to their\n * surfaces. In such cases, you may need to disable compression, as shown below.\n *\n * ````javascript\n * new Mesh(myViewer.scene, {\n *      geometry: new Geometry(myViewer.scene, {\n *          primitive: \"triangles\",\n *          positions:  [0.0, 0.9, 0.0, -0.9,-0.9, 0.0, 0.9, -0.9, 0.0],\n *          normals:    [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0],\n *          uv:         [0.0, 0.0, 0.5, 0.0, 1.0, 0.0],\n *          indices:    [0, 1, 2],\n *          compressGeometry: false // <<------------ Disable automatic geometry compression\n *      }),\n *      material: new PhongMaterial(myViewer.scene, {\n *          diffuseMap: new Texture(myViewer.scene, {\n *              src: \"textures/diffuse/uvGrid2.jpg\"\n *          })\n *      })\n * });\n * ````\n *\n * ## Geometry Batching\n *\n * Geometries may be optionally combined into the same vertex buffer objects (VBOs) to reduce the number of VBO\n * binds performed by WebGL when rendering each frame. VBO binds are expensive, so this really makes a difference when\n * we have large numbers of Meshes that share similar Materials.\n *\n * ````javascript\n * new Mesh(myViewer.scene, {\n *      geometry: new Geometry(myViewer.scene, {\n *          primitive: \"triangles\",\n *          positions:  [0.0, 0.9, 0.0, -0.9,-0.9, 0.0, 0.9, -0.9, 0.0],\n *          normals:    [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0],\n *          uv:         [0.0, 0.0, 0.5, 0.0, 1.0, 0.0],\n *          indices:    [0, 1, 2],\n *          combineGeometry:   true // <<------------- Enable geometry batching\n *      }),\n *      material: new PhongMaterial(myViewer.scene, {\n *          diffuseMap: new Texture(myViewer.scene, {\n *              src: \"textures/diffuse/uvGrid2.jpg\"\n *          })\n *      })\n * });\n * ````\n */\nclass Geometry extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Geometry\";\n    }\n\n    /**\n     *\n     @class Geometry\n     @module xeokit\n     @submodule geometry\n     @constructor\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] Configs\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene},\n     generated automatically when omitted.\n     @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this Geometry.\n     @param [cfg.primitive=\"triangles\"] {String} The primitive type. Accepted values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'.\n     @param [cfg.positions] {Array of Number} Positions array.\n     @param [cfg.normals] {Array of Number} Vertex normal vectors array.\n     @param [cfg.uv] {Array of Number} UVs array.\n     @param [cfg.colors] {Array of Number} Vertex colors.\n     @param [cfg.indices] {Array of Number} Indices array.\n     @param [cfg.autoVertexNormals=false] {Boolean} Set true to automatically generate normal vectors from the positions and\n     indices, if those are supplied.\n     @param [cfg.compressGeometry=false] {Boolean} Stores positions, colors, normals and UVs in compressGeometry and oct-encoded formats\n     for reduced memory footprint and GPU bus usage.\n     @param [cfg.combineGeometry=false] {Boolean} Combines positions, colors, normals and UVs into the same WebGL vertex buffers\n     with other Geometries, in order to reduce the number of buffer binds performed per frame.\n     @param [cfg.edgeThreshold=2] {Number} When a {@link Mesh} renders this Geometry as wireframe,\n     this indicates the threshold angle (in degrees) between the face normals of adjacent triangles below which the edge is discarded.\n     @extends Component\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        const self = this;\n\n        this._state = new RenderState({ // Arrays for emphasis effects are got from xeokit.Geometry friend methods\n            combineGeometry: !!cfg.combineGeometry,\n            compressGeometry: !!cfg.compressGeometry,\n            autoVertexNormals: !!cfg.autoVertexNormals,\n            primitive: null, // WebGL enum\n            primitiveName: null, // String\n            positions: null,    // Uint16Array when compressGeometry == true, else Float32Array\n            normals: null,      // Uint8Array when compressGeometry == true, else Float32Array\n            colors: null,\n            uv: null,           // Uint8Array when compressGeometry == true, else Float32Array\n            indices: null,\n            positionsDecodeMatrix: null, // Set when compressGeometry == true\n            uvDecodeMatrix: null, // Set when compressGeometry == true\n            positionsBuf: null,\n            normalsBuf: null,\n            colorsbuf: null,\n            uvBuf: null,\n            indicesBuf: null,\n            indicesBufCombined: null, // Indices into a shared VertexBufs, set when combineGeometry == true\n            hash: \"\"\n        });\n\n        this._edgeThreshold = cfg.edgeThreshold || 2.0;\n\n        // Lazy-generated VBOs\n\n        this._edgeIndicesBuf = null;\n        this._pickTrianglePositionsBuf = null;\n        this._pickTriangleColorsBuf = null;\n\n        // Local-space Boundary3D\n\n        this._boundaryDirty = true;\n\n        this._aabb = null;\n        this._aabbDirty = true;\n\n        this._obb = null;\n        this._obbDirty = true;\n\n        const state = this._state;\n        const gl = this.scene.canvas.gl;\n\n        // Primitive type\n\n        cfg.primitive = cfg.primitive || \"triangles\";\n        switch (cfg.primitive) {\n            case \"points\":\n                state.primitive = gl.POINTS;\n                state.primitiveName = cfg.primitive;\n                break;\n            case \"lines\":\n                state.primitive = gl.LINES;\n                state.primitiveName = cfg.primitive;\n                break;\n            case \"line-loop\":\n                state.primitive = gl.LINE_LOOP;\n                state.primitiveName = cfg.primitive;\n                break;\n            case \"line-strip\":\n                state.primitive = gl.LINE_STRIP;\n                state.primitiveName = cfg.primitive;\n                break;\n            case \"triangles\":\n                state.primitive = gl.TRIANGLES;\n                state.primitiveName = cfg.primitive;\n                break;\n            case \"triangle-strip\":\n                state.primitive = gl.TRIANGLE_STRIP;\n                state.primitiveName = cfg.primitive;\n                break;\n            case \"triangle-fan\":\n                state.primitive = gl.TRIANGLE_FAN;\n                state.primitiveName = cfg.primitive;\n                break;\n            default:\n                this.error(\"Unsupported value for 'primitive': '\" + cfg.primitive +\n                    \"' - supported values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', \" +\n                    \"'triangle-strip' and 'triangle-fan'. Defaulting to 'triangles'.\");\n                state.primitive = gl.TRIANGLES;\n                state.primitiveName = cfg.primitive;\n        }\n\n        if (cfg.positions) {\n            if (this._state.compressGeometry) {\n                var bounds = getBounds(cfg.positions, 3);\n                var compressed = quantizeVec3(cfg.positions, bounds.min, bounds.max);\n                state.positions = compressed.compressed;\n                state.positionsDecodeMatrix = compressed.decode;\n            } else {\n                state.positions = cfg.positions.constructor === Float32Array ? cfg.positions : new Float32Array(cfg.positions);\n            }\n        }\n        if (cfg.colors) {\n            state.colors = cfg.colors.constructor === Float32Array ? cfg.colors : new Float32Array(cfg.colors);\n        }\n        if (cfg.uv) {\n            if (this._state.compressGeometry) {\n                var bounds = getBounds(cfg.uv, 2);\n                var compressed = quantizeVec2(cfg.uv, bounds.min, bounds.max);\n                state.uv = compressed.compressed;\n                state.uvDecodeMatrix = compressed.decode;\n            } else {\n                state.uv = cfg.uv.constructor === Float32Array ? cfg.uv : new Float32Array(cfg.uv);\n            }\n        }\n        if (cfg.normals) {\n            if (this._state.compressGeometry) {\n                state.normals = octEncode(cfg.normals);\n            } else {\n                state.normals = cfg.normals.constructor === Float32Array ? cfg.normals : new Float32Array(cfg.normals);\n            }\n        }\n        if (cfg.indices) {\n            if (!bigIndicesSupported && cfg.indices.constructor === Uint32Array) {\n                this.error(\"This WebGL implementation does not support Uint32Array\");\n                return;\n            }\n            state.indices = (cfg.indices.constructor === Uint32Array || cfg.indices.constructor === Uint16Array) ? cfg.indices : new IndexArrayType(cfg.indices);\n        }\n\n        if (state.indices) {\n            state.indicesBuf = new ArrayBuf(gl, gl.ELEMENT_ARRAY_BUFFER, state.indices, state.indices.length, 1, gl.STATIC_DRAW);\n            memoryStats.indices += state.indicesBuf.numItems;\n        }\n\n        this._buildHash();\n\n        memoryStats.meshes++;\n\n        if (this._state.combineGeometry) {\n            this._sceneVertexBufs = getSceneVertexBufs(this.scene, this._state);\n            this._sceneVertexBufs.addGeometry(this._state);\n        }\n\n        this._buildVBOs();\n\n        self.fire(\"created\", this.created = true);\n    }\n\n    _buildVBOs() {\n        const state = this._state;\n        const gl = this.scene.canvas.gl;\n        if (state.indices) {\n            state.indicesBuf = new ArrayBuf(gl, gl.ELEMENT_ARRAY_BUFFER, state.indices, state.indices.length, 1, gl.STATIC_DRAW);\n            memoryStats.indices += state.indicesBuf.numItems;\n        }\n        if (state.combineGeometry) {\n            if (state.indices) {\n                // indicesBufCombined is created when VertexBufs are built for this Geometry\n            }\n        } else {\n            if (state.positions) {\n                state.positionsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, state.positions, state.positions.length, 3, gl.STATIC_DRAW);\n                memoryStats.positions += state.positionsBuf.numItems;\n            }\n            if (state.normals) {\n                let normalized = state.compressGeometry;\n                state.normalsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, state.normals, state.normals.length, 3, gl.STATIC_DRAW, normalized);\n                memoryStats.normals += state.normalsBuf.numItems;\n            }\n            if (state.colors) {\n                state.colorsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, state.colors, state.colors.length, 4, gl.STATIC_DRAW);\n                memoryStats.colors += state.colorsBuf.numItems;\n            }\n            if (state.uv) {\n                state.uvBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, state.uv, state.uv.length, 2, gl.STATIC_DRAW);\n                memoryStats.uvs += state.uvBuf.numItems;\n            }\n        }\n    }\n\n    _buildHash() {\n        const state = this._state;\n        const hash = [\"/g\"];\n        hash.push(\"/\" + state.primitive + \";\");\n        if (state.positions) {\n            hash.push(\"p\");\n        }\n        if (state.colors) {\n            hash.push(\"c\");\n        }\n        if (state.normals || state.autoVertexNormals) {\n            hash.push(\"n\");\n        }\n        if (state.uv) {\n            hash.push(\"u\");\n        }\n        if (state.compressGeometry) {\n            hash.push(\"cp\");\n        }\n        hash.push(\";\");\n        state.hash = hash.join(\"\");\n    }\n\n    _getEdgeIndices() {\n        if (!this._edgeIndicesBuf) {\n            this._buildEdgeIndices();\n        }\n        return this._edgeIndicesBuf;\n    }\n\n    _getPickTrianglePositions() {\n        if (!this._pickTrianglePositionsBuf) {\n            this._buildPickTriangleVBOs();\n        }\n        return this._pickTrianglePositionsBuf;\n    }\n\n    _getPickTriangleColors() {\n        if (!this._pickTriangleColorsBuf) {\n            this._buildPickTriangleVBOs();\n        }\n        return this._pickTriangleColorsBuf;\n    }\n\n    _buildEdgeIndices() { // FIXME: Does not adjust indices after other objects are deleted from vertex buffer!!\n        const state = this._state;\n        if (!state.positions || !state.indices) {\n            return;\n        }\n        const gl = this.scene.canvas.gl;\n        const edgeIndices = buildEdgeIndices(state.positions, state.indices, state.positionsDecodeMatrix, this._edgeThreshold, state.combineGeometry);\n        if (state.combineGeometry) {\n            const indicesOffset = this._sceneVertexBufs.getIndicesOffset(state);\n            for (let i = 0, len = edgeIndices.length; i < len; i++) {\n                edgeIndices[i] += indicesOffset;\n            }\n        }\n        this._edgeIndicesBuf = new ArrayBuf(gl, gl.ELEMENT_ARRAY_BUFFER, edgeIndices, edgeIndices.length, 1, gl.STATIC_DRAW);\n        memoryStats.indices += this._edgeIndicesBuf.numItems;\n    }\n\n    _buildPickTriangleVBOs() { // Builds positions and indices arrays that allow each triangle to have a unique color\n        const state = this._state;\n        if (!state.positions || !state.indices) {\n            return;\n        }\n        const gl = this.scene.canvas.gl;\n        const arrays = math.buildPickTriangles(state.positions, state.indices, state.compressGeometry);\n        const positions = arrays.positions;\n        const colors = arrays.colors;\n        this._pickTrianglePositionsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, positions, positions.length, 3, gl.STATIC_DRAW);\n        this._pickTriangleColorsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, colors, colors.length, 4, gl.STATIC_DRAW, true);\n        memoryStats.positions += this._pickTrianglePositionsBuf.numItems;\n        memoryStats.colors += this._pickTriangleColorsBuf.numItems;\n    }\n\n    _buildPickVertexVBOs() {\n        // var state = this._state;\n        // if (!state.positions || !state.indices) {\n        //     return;\n        // }\n        // var gl = this.scene.canvas.gl;\n        // var arrays = math.buildPickVertices(state.positions, state.indices, state.compressGeometry);\n        // var pickVertexPositions = arrays.positions;\n        // var pickColors = arrays.colors;\n        // this._pickVertexPositionsBuf = new xeokit.renderer.ArrayBuf(gl, gl.ARRAY_BUFFER, pickVertexPositions, pickVertexPositions.length, 3, gl.STATIC_DRAW);\n        // this._pickVertexColorsBuf = new xeokit.renderer.ArrayBuf(gl, gl.ARRAY_BUFFER, pickColors, pickColors.length, 4, gl.STATIC_DRAW, true);\n        // memoryStats.positions += this._pickVertexPositionsBuf.numItems;\n        // memoryStats.colors += this._pickVertexColorsBuf.numItems;\n    }\n\n    _webglContextLost() {\n        if (this._sceneVertexBufs) {\n            this._sceneVertexBufs.webglContextLost();\n        }\n    }\n\n    _webglContextRestored() {\n        if (this._sceneVertexBufs) {\n            this._sceneVertexBufs.webglContextRestored();\n        }\n        this._buildVBOs();\n        this._edgeIndicesBuf = null;\n        this._pickVertexPositionsBuf = null;\n        this._pickTrianglePositionsBuf = null;\n        this._pickTriangleColorsBuf = null;\n        this._pickVertexPositionsBuf = null;\n        this._pickVertexColorsBuf = null;\n    }\n\n    /**\n     The Geometry's primitive type.\n\n     Valid types are: 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'.\n\n     @property primitive\n     @default \"triangles\"\n     @type String\n     */\n    get primitive() {\n        return this._state.primitiveName;\n    }\n\n    /**\n     Indicates if this Geometry is quantized.\n\n     Compression is an internally-performed optimization which stores positions, colors, normals and UVs\n     in quantized and oct-encoded formats for reduced memory footprint and GPU bus usage.\n\n     Quantized geometry may not be updated.\n\n     @property compressGeometry\n     @default false\n     @type Boolean\n     @final\n     */\n    get compressGeometry() {\n        return this._state.compressGeometry;\n    }\n\n    /**\n     Indicates if this Geometry is combined.\n\n     Combination is an internally-performed optimization which combines positions, colors, normals and UVs into\n     the same WebGL vertex buffers with other Geometries, in order to reduce the number of buffer binds\n     performed per frame.\n\n     @property combineGeometry\n     @default false\n     @type Boolean\n     @final\n     */\n    get combineGeometry() {\n        return this._state.combineGeometry;\n    }\n\n    /**\n     The Geometry's vertex positions.\n\n     @property positions\n     @default null\n     @type Float32Array\n     */\n    get positions() {\n        if (!this._state.positions) {\n            return;\n        }\n        if (!this._state.compressGeometry) {\n            return this._state.positions;\n        }\n        if (!this._decompressedPositions) {\n            this._decompressedPositions = new Float32Array(this._state.positions.length);\n            math.decompressPositions(this._state.positions, this._state.positionsDecodeMatrix, this._decompressedPositions);\n        }\n        return this._decompressedPositions;\n    }\n\n    set positions(newPositions) {\n        const state = this._state;\n        const positions = state.positions;\n        if (!positions) {\n            this.error(\"can't update geometry positions - geometry has no positions\");\n            return;\n        }\n        if (positions.length !== newPositions.length) {\n            this.error(\"can't update geometry positions - new positions are wrong length\");\n            return;\n        }\n        if (this._state.compressGeometry) {\n            const bounds = getBounds(newPositions, 3);\n            const compressed = quantizeVec3(newPositions, bounds.min, bounds.max);\n            newPositions = compressed.compressed; // TODO: Copy in-place\n            state.positionsDecodeMatrix = compressed.decode;\n        }\n        positions.set(newPositions);\n        if (state.positionsBuf) {\n            state.positionsBuf.setData(positions);\n        }\n        if (this._state.combineGeometry) {\n            this._sceneVertexBufs.setPositions(state);\n        }\n        this._setBoundaryDirty();\n        this.glRedraw();\n    }\n\n    /**\n     The Geometry's vertex normals.\n\n     @property normals\n     @default null\n     @type Float32Array\n     */\n    get normals() {\n        if (!this._state.normals) {\n            return;\n        }\n        if (!this._state.compressGeometry) {\n            return this._state.normals;\n        }\n        if (!this._decompressedNormals) {\n            const lenCompressed = this._state.normals.length;\n            const lenDecompressed = lenCompressed + (lenCompressed / 2); // 2 -> 3\n            this._decompressedNormals = new Float32Array(lenDecompressed);\n            math.octDecodeVec2s(this._state.normals, this._decompressedNormals);\n        }\n        return this._decompressedNormals;\n    }\n\n    set normals(newNormals) {\n        if (this._state.compressGeometry) {\n            this.error(\"can't update geometry normals - quantized geometry is immutable\"); // But will be eventually\n            return;\n        }\n        const state = this._state;\n        const normals = state.normals;\n        if (!normals) {\n            this.error(\"can't update geometry normals - geometry has no normals\");\n            return;\n        }\n        if (normals.length !== newNormals.length) {\n            this.error(\"can't update geometry normals - new normals are wrong length\");\n            return;\n        }\n        normals.set(newNormals);\n        if (state.normalsBuf) {\n            state.normalsBuf.setData(normals);\n        }\n        if (this._state.combineGeometry) {\n            this._sceneVertexBufs.setNormals(state);\n        }\n        this.glRedraw();\n    }\n\n\n    /**\n     The Geometry's UV coordinates.\n\n     @property uv\n     @default null\n     @type Float32Array\n     */\n    get uv() {\n        if (!this._state.uv) {\n            return;\n        }\n        if (!this._state.compressGeometry) {\n            return this._state.uv;\n        }\n        if (!this._decompressedUV) {\n            this._decompressedUV = new Float32Array(this._state.uv.length);\n            math.decompressUVs(this._state.uv, this._state.uvDecodeMatrix, this._decompressedUV);\n        }\n        return this._decompressedUV;\n    }\n\n    set uv(newUV) {\n        if (this._state.compressGeometry) {\n            this.error(\"can't update geometry UVs - quantized geometry is immutable\"); // But will be eventually\n            return;\n        }\n        const state = this._state;\n        const uv = state.uv;\n        if (!uv) {\n            this.error(\"can't update geometry UVs - geometry has no UVs\");\n            return;\n        }\n        if (uv.length !== newUV.length) {\n            this.error(\"can't update geometry UVs - new UVs are wrong length\");\n            return;\n        }\n        uv.set(newUV);\n        if (state.uvBuf) {\n            state.uvBuf.setData(uv);\n        }\n        if (this._state.combineGeometry) {\n            this._sceneVertexBufs.setUVs(state);\n        }\n        this.glRedraw();\n    }\n\n    /**\n     The Geometry's vertex colors.\n\n     @property colors\n     @default null\n     @type Float32Array\n     */\n    get colors() {\n        return this._state.colors;\n    }\n\n    set colors(newColors) {\n        if (this._state.compressGeometry) {\n            this.error(\"can't update geometry colors - quantized geometry is immutable\"); // But will be eventually\n            return;\n        }\n        const state = this._state;\n        const colors = state.colors;\n        if (!colors) {\n            this.error(\"can't update geometry colors - geometry has no colors\");\n            return;\n        }\n        if (colors.length !== newColors.length) {\n            this.error(\"can't update geometry colors - new colors are wrong length\");\n            return;\n        }\n        colors.set(newColors);\n        if (state.colorsBuf) {\n            state.colorsBuf.setData(colors);\n        }\n        if (this._state.combineGeometry) {\n            this._sceneVertexBufs.setColors(state);\n        }\n        this.glRedraw();\n    }\n\n    /**\n     The Geometry's indices.\n\n     If ````xeokit.WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"]```` is true, then this can be\n     a ````Uint32Array````, otherwise it needs to be a ````Uint16Array````.\n\n     @property indices\n     @default null\n     @type Uint16Array | Uint32Array\n     @final\n     */\n    get indices() {\n        return this._state.indices;\n    }\n\n    /**\n     * Local-space axis-aligned 3D boundary (AABB) of this geometry.\n     *\n     * The AABB is represented by a six-element Float32Array containing the min/max extents of the\n     * axis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.\n     *\n     * @property aabb\n     * @final\n     * @type {Float32Array}\n     */\n    get aabb() {\n        if (this._aabbDirty) {\n            if (!this._aabb) {\n                this._aabb = math.AABB3();\n            }\n            math.positions3ToAABB3(this._state.positions, this._aabb, this._state.positionsDecodeMatrix);\n            this._aabbDirty = false;\n        }\n        return this._aabb;\n    }\n\n    /**\n     * Local-space oriented 3D boundary (OBB) of this geometry.\n     *\n     * The OBB is represented by a 32-element Float32Array containing the eight vertices of the box,\n     * where each vertex is a homogeneous coordinate having [x,y,z,w] elements.\n     *\n     * @property obb\n     * @final\n     * @type {Float32Array}\n     */\n    get obb() {\n        if (this._obbDirty) {\n            if (!this._obb) {\n                this._obb = math.OBB3();\n            }\n            math.positions3ToAABB3(this._state.positions, tempAABB, this._state.positionsDecodeMatrix);\n            math.AABB3ToOBB3(tempAABB, this._obb);\n            this._obbDirty = false;\n        }\n        return this._obb;\n    }\n\n    get kdtree() {\n        const state = this._state;\n        if (!state.indices || !state.positions) {\n            this.error(\"Can't provide a KD-tree: no indices/positions\");\n            return;\n        }\n        if (!this._kdtree) {\n            this._kdtree = math.buildKDTree(state.indices, state.positions, this._state.positionsDecodeMatrix);\n        }\n        return this._kdtree;\n    }\n\n    _setBoundaryDirty() {\n        if (this._boundaryDirty) {\n            return;\n        }\n        this._boundaryDirty = true;\n        this._aabbDirty = true;\n        this._obbDirty = true;\n\n        /**\n         Fired whenever this Geometry's boundary changes.\n\n         Get the latest boundary from the Geometry's {@link Geometry/aabb}\n         and {@link Geometry/obb} properties.\n\n         @event boundary\n\n         */\n        this.fire(\"boundary\");\n    }\n\n    _getState() {\n        return this._state;\n    }\n\n    _getVertexBufs() {\n        return this._state && this._state.combineGeometry ? this._sceneVertexBufs.getVertexBufs(this._state) : nullVertexBufs;\n    }\n\n    destroy() {\n        super.destroy();\n        const state = this._state;\n        if (state.indicesBuf) {\n            state.indicesBuf.destroy();\n        }\n        if (state.positionsBuf) {\n            state.positionsBuf.destroy();\n        }\n        if (state.normalsBuf) {\n            state.normalsBuf.destroy();\n        }\n        if (state.uvBuf) {\n            state.uvBuf.destroy();\n        }\n        if (state.colorsBuf) {\n            state.colorsBuf.destroy();\n        }\n        if (this._edgeIndicesBuf) {\n            this._edgeIndicesBuf.destroy();\n        }\n        if (this._pickTrianglePositionsBuf) {\n            this._pickTrianglePositionsBuf.destroy();\n        }\n        if (this._pickTriangleColorsBuf) {\n            this._pickTriangleColorsBuf.destroy();\n        }\n        if (this._pickVertexPositionsBuf) {\n            this._pickVertexPositionsBuf.destroy();\n        }\n        if (this._pickVertexColorsBuf) {\n            this._pickVertexColorsBuf.destroy();\n        }\n        if (this._state.combineGeometry) {\n            this._sceneVertexBufs.removeGeometry(state);\n        }\n        state.destroy();\n        memoryStats.meshes--;\n    }\n}\n\nfunction getBounds(array, stride) {\n    const min = new Float32Array(stride);\n    const max = new Float32Array(stride);\n    let i, j;\n    for (i = 0; i < stride; i++) {\n        min[i] = Number.MAX_VALUE;\n        max[i] = -Number.MAX_VALUE;\n    }\n    for (i = 0; i < array.length; i += stride) {\n        for (j = 0; j < stride; j++) {\n            min[j] = Math.min(min[j], array[i + j]);\n            max[j] = Math.max(max[j], array[i + j]);\n        }\n    }\n    return {\n        min: min,\n        max: max\n    };\n}\n\n// http://cg.postech.ac.kr/research/mesh_comp_mobile/mesh_comp_mobile_conference.pdf\nvar quantizeVec3 = (function () {\n    const translate = math.mat4();\n    const scale = math.mat4();\n    return function (array, min, max) {\n        const quantized = new Uint16Array(array.length);\n        const multiplier = new Float32Array([\n            65535 / (max[0] - min[0]),\n            65535 / (max[1] - min[1]),\n            65535 / (max[2] - min[2])\n        ]);\n        let i;\n        for (i = 0; i < array.length; i += 3) {\n            quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n            quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n            quantized[i + 2] = Math.floor((array[i + 2] - min[2]) * multiplier[2]);\n        }\n        math.identityMat4(translate);\n        math.translationMat4v(min, translate);\n        math.identityMat4(scale);\n        math.scalingMat4v([\n            (max[0] - min[0]) / 65535,\n            (max[1] - min[1]) / 65535,\n            (max[2] - min[2]) / 65535\n        ], scale);\n        const decodeMat = math.mulMat4(translate, scale, math.identityMat4());\n        return {\n            compressed: compressed,\n            decode: decodeMat\n        };\n    };\n})();\n\nvar quantizeVec2 = (function () {\n    const translate = math.mat3();\n    const scale = math.mat3();\n    return function (array, min, max) {\n        const quantized = new Uint16Array(array.length);\n        const multiplier = new Float32Array([\n            65535 / (max[0] - min[0]),\n            65535 / (max[1] - min[1])\n        ]);\n        let i;\n        for (i = 0; i < array.length; i += 2) {\n            quantized[i + 0] = Math.floor((array[i + 0] - min[0]) * multiplier[0]);\n            quantized[i + 1] = Math.floor((array[i + 1] - min[1]) * multiplier[1]);\n        }\n        math.identityMat3(translate);\n        math.translationMat3v(min, translate);\n        math.identityMat3(scale);\n        math.scalingMat3v([\n            (max[0] - min[0]) / 65535,\n            (max[1] - min[1]) / 65535\n        ], scale);\n        const decodeMat = math.mulMat3(translate, scale, math.identityMat3());\n        return {\n            quantized: quantized,\n            decode: decodeMat\n        };\n    };\n})();\n\n// http://jcgt.org/published/0003/02/01/\nfunction octEncode(array) {\n\n    // Note: three elements for each encoded normal, in which the last element in each triplet is redundant.\n    // This is to work around a mysterious WebGL issue where 2-element normals just wouldn't work in the shader :/\n\n    const encoded = new Int8Array(array.length);\n    let oct, dec, best, currentCos, bestCos;\n    for (let i = 0; i < array.length; i += 3) {\n        // Test various combinations of ceil and floor\n        // to minimize rounding errors\n        best = oct = octEncodeVec3(array, i, \"floor\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = bestCos = dot(array, i, dec);\n        oct = octEncodeVec3(array, i, \"ceil\", \"floor\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(array, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(array, i, \"floor\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(array, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        oct = octEncodeVec3(array, i, \"ceil\", \"ceil\");\n        dec = octDecodeVec2(oct);\n        currentCos = dot(array, i, dec);\n        if (currentCos > bestCos) {\n            best = oct;\n            bestCos = currentCos;\n        }\n        encoded[i] = best[0];\n        encoded[i + 1] = best[1];\n    }\n    return encoded;\n}\n\n// Oct-encode single normal vector in 2 bytes\nfunction octEncodeVec3(array, i, xfunc, yfunc) {\n    let x = array[i] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    let y = array[i + 1] / (Math.abs(array[i]) + Math.abs(array[i + 1]) + Math.abs(array[i + 2]));\n    if (array[i + 2] < 0) {\n        let tempx = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        let tempy = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        x = tempx;\n        y = tempy;\n    }\n    return new Int8Array([\n        Math[xfunc](x * 127.5 + (x < 0 ? -1 : 0)),\n        Math[yfunc](y * 127.5 + (y < 0 ? -1 : 0))\n    ]);\n}\n\n// Decode an oct-encoded normal\nfunction octDecodeVec2(oct) {\n    let x = oct[0];\n    let y = oct[1];\n    x /= x < 0 ? 127 : 128;\n    y /= y < 0 ? 127 : 128;\n    const z = 1 - Math.abs(x) - Math.abs(y);\n    if (z < 0) {\n        x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n        y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n    }\n    const length = Math.sqrt(x * x + y * y + z * z);\n    return [\n        x / length,\n        y / length,\n        z / length\n    ];\n}\n\n// Dot product of a normal in an array against a candidate decoding\nfunction dot(array, i, vec3) {\n    return array[i] * vec3[0] + array[i + 1] * vec3[1] + array[i + 2] * vec3[2];\n}\n\n\nexport {Geometry};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/geometry/Geometry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1080,
    "kind": "variable",
    "name": "memoryStats",
    "memberof": "scene/geometry/Geometry.js",
    "static": true,
    "longname": "scene/geometry/Geometry.js~memoryStats",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/Geometry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1081,
    "kind": "variable",
    "name": "bigIndicesSupported",
    "memberof": "scene/geometry/Geometry.js",
    "static": true,
    "longname": "scene/geometry/Geometry.js~bigIndicesSupported",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/Geometry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1082,
    "kind": "variable",
    "name": "IndexArrayType",
    "memberof": "scene/geometry/Geometry.js",
    "static": true,
    "longname": "scene/geometry/Geometry.js~IndexArrayType",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/Geometry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1083,
    "kind": "variable",
    "name": "nullVertexBufs",
    "memberof": "scene/geometry/Geometry.js",
    "static": true,
    "longname": "scene/geometry/Geometry.js~nullVertexBufs",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/Geometry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "scene/webgl/RenderState.js~RenderState"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1084,
    "kind": "variable",
    "name": "tempAABB",
    "memberof": "scene/geometry/Geometry.js",
    "static": true,
    "longname": "scene/geometry/Geometry.js~tempAABB",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/Geometry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1085,
    "kind": "function",
    "name": "getBounds",
    "memberof": "scene/geometry/Geometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/geometry/Geometry.js~getBounds",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/Geometry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 805,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "stride",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "{\"min\": *, \"max\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1086,
    "kind": "variable",
    "name": "quantizeVec3",
    "memberof": "scene/geometry/Geometry.js",
    "static": true,
    "longname": "scene/geometry/Geometry.js~quantizeVec3",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/Geometry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 826,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1087,
    "kind": "variable",
    "name": "quantizeVec2",
    "memberof": "scene/geometry/Geometry.js",
    "static": true,
    "longname": "scene/geometry/Geometry.js~quantizeVec2",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/Geometry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 858,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1088,
    "kind": "function",
    "name": "octEncode",
    "memberof": "scene/geometry/Geometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/geometry/Geometry.js~octEncode",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/Geometry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 888,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1089,
    "kind": "function",
    "name": "octEncodeVec3",
    "memberof": "scene/geometry/Geometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/geometry/Geometry.js~octEncodeVec3",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/Geometry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 929,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "xfunc",
        "types": [
          "*"
        ]
      },
      {
        "name": "yfunc",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1090,
    "kind": "function",
    "name": "octDecodeVec2",
    "memberof": "scene/geometry/Geometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/geometry/Geometry.js~octDecodeVec2",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/Geometry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 945,
    "undocument": true,
    "params": [
      {
        "name": "oct",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "undefined[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1091,
    "kind": "function",
    "name": "dot",
    "memberof": "scene/geometry/Geometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/geometry/Geometry.js~dot",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/Geometry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 964,
    "undocument": true,
    "params": [
      {
        "name": "array",
        "types": [
          "*"
        ]
      },
      {
        "name": "i",
        "types": [
          "*"
        ]
      },
      {
        "name": "vec3",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1092,
    "kind": "class",
    "name": "Geometry",
    "memberof": "scene/geometry/Geometry.js",
    "static": true,
    "longname": "scene/geometry/Geometry.js~Geometry",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/geometry/Geometry.js",
    "importStyle": "{Geometry}",
    "description": "Defines a shape for one or more {@link Mesh}es.\n\n## Basic Usage\n\nCreating a {@link Mesh} with a Geometry defining a single triangle and a {@link PhongMaterial} with diffuse {@link Texture}:\n\n````javascript\nnew Mesh(myViewer.scene, {\n     geometry: new Geometry(myViewer.scene, {\n         primitive: \"triangles\",\n         positions:  [0.0, 0.9, 0.0, -0.9,-0.9, 0.0, 0.9, -0.9, 0.0],\n         normals:    [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0],\n         uv:         [0.0, 0.0, 0.5, 0.0, 1.0, 0.0],\n         indices:    [0, 1, 2]\n     }),\n     material: new PhongMaterial(myViewer.scene, {\n         diffuseMap: new Texture(myViewer.scene, {\n             src: \"textures/diffuse/uvGrid2.jpg\"\n         })\n     })\n});\n````\n\n## Default Geometry\n\nA {@link Mesh} created without a Geometry will automatically inherit the\ndefault {@link Scene#geometry}, which is a {@link BoxGeometry} of unit size.\n\n````javascript\nnew Mesh(myViewer.scene, {\n     material: new PhongMaterial(myViewer.scene, {\n         diffuseMap: new Texture(myViewer.scene, {\n             src: \"textures/diffuse/uvGrid2.jpg\"\n         })\n     })\n});\n````\n\n## Geometry Compression\n\nBy default, a Geometry automatically quantizes its vertex data to reduce memory and GPU bus usage. Usually the data arrays,\nsuch as positions and normals, are stored as 32-bit floating-point values. Quantization compresses those arrays\nto 16-bit integers represented on a scale between their minimum and maximum values. The arrays are then decompressed\non the GPU, via a simple matrix multiplication in the vertex shader.\n\nGeometry quantizes each normal vector by oct-encoded it into two 8-bit unsigned integers. This can cause them to lose\nprecision, which may affect the accuracy of any operations that rely on them being perfectly perpendicular to their\nsurfaces. In such cases, you may need to disable compression, as shown below.\n\n````javascript\nnew Mesh(myViewer.scene, {\n     geometry: new Geometry(myViewer.scene, {\n         primitive: \"triangles\",\n         positions:  [0.0, 0.9, 0.0, -0.9,-0.9, 0.0, 0.9, -0.9, 0.0],\n         normals:    [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0],\n         uv:         [0.0, 0.0, 0.5, 0.0, 1.0, 0.0],\n         indices:    [0, 1, 2],\n         compressGeometry: false // <<------------ Disable automatic geometry compression\n     }),\n     material: new PhongMaterial(myViewer.scene, {\n         diffuseMap: new Texture(myViewer.scene, {\n             src: \"textures/diffuse/uvGrid2.jpg\"\n         })\n     })\n});\n````\n\n## Geometry Batching\n\nGeometries may be optionally combined into the same vertex buffer objects (VBOs) to reduce the number of VBO\nbinds performed by WebGL when rendering each frame. VBO binds are expensive, so this really makes a difference when\nwe have large numbers of Meshes that share similar Materials.\n\n````javascript\nnew Mesh(myViewer.scene, {\n     geometry: new Geometry(myViewer.scene, {\n         primitive: \"triangles\",\n         positions:  [0.0, 0.9, 0.0, -0.9,-0.9, 0.0, 0.9, -0.9, 0.0],\n         normals:    [0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0],\n         uv:         [0.0, 0.0, 0.5, 0.0, 1.0, 0.0],\n         indices:    [0, 1, 2],\n         combineGeometry:   true // <<------------- Enable geometry batching\n     }),\n     material: new PhongMaterial(myViewer.scene, {\n         diffuseMap: new Texture(myViewer.scene, {\n             src: \"textures/diffuse/uvGrid2.jpg\"\n         })\n     })\n});\n````",
    "lineNumber": 108,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 1093,
    "kind": "get",
    "name": "type",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 119,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1094,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 152,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Geometry"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "geometry"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@extends",
        "tagValue": "Component"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "Configs"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent {@link Scene},\ngenerated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "String:Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.meta",
        "description": "Optional map of user-defined metadata to attach to this Geometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"triangles\"",
        "defaultRaw": "triangles",
        "name": "cfg.primitive",
        "description": "{String} The primitive type. Accepted values are 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.positions",
        "description": "{Array of Number} Positions array."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.normals",
        "description": "{Array of Number} Vertex normal vectors array."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.uv",
        "description": "{Array of Number} UVs array."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.colors",
        "description": "{Array of Number} Vertex colors."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.indices",
        "description": "{Array of Number} Indices array."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.autoVertexNormals",
        "description": "{Boolean} Set true to automatically generate normal vectors from the positions and\nindices, if those are supplied."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.compressGeometry",
        "description": "{Boolean} Stores positions, colors, normals and UVs in compressGeometry and oct-encoded formats\nfor reduced memory footprint and GPU bus usage."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.combineGeometry",
        "description": "{Boolean} Combines positions, colors, normals and UVs into the same WebGL vertex buffers\nwith other Geometries, in order to reduce the number of buffer binds performed per frame."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "cfg.edgeThreshold",
        "description": "{Number} When a {@link Mesh} renders this Geometry as wireframe,\nthis indicates the threshold angle (in degrees) between the face normals of adjacent triangles below which the edge is discarded."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1095,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_state",
    "access": "private",
    "description": null,
    "lineNumber": 158,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1096,
    "kind": "member",
    "name": "_edgeThreshold",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_edgeThreshold",
    "access": "private",
    "description": null,
    "lineNumber": 180,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1097,
    "kind": "member",
    "name": "_edgeIndicesBuf",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_edgeIndicesBuf",
    "access": "private",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1098,
    "kind": "member",
    "name": "_pickTrianglePositionsBuf",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_pickTrianglePositionsBuf",
    "access": "private",
    "description": null,
    "lineNumber": 185,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1099,
    "kind": "member",
    "name": "_pickTriangleColorsBuf",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_pickTriangleColorsBuf",
    "access": "private",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1100,
    "kind": "member",
    "name": "_boundaryDirty",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_boundaryDirty",
    "access": "private",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1101,
    "kind": "member",
    "name": "_aabb",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_aabb",
    "access": "private",
    "description": null,
    "lineNumber": 192,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1102,
    "kind": "member",
    "name": "_aabbDirty",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_aabbDirty",
    "access": "private",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1103,
    "kind": "member",
    "name": "_obb",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_obb",
    "access": "private",
    "description": null,
    "lineNumber": 195,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1104,
    "kind": "member",
    "name": "_obbDirty",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_obbDirty",
    "access": "private",
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1105,
    "kind": "member",
    "name": "_sceneVertexBufs",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_sceneVertexBufs",
    "access": "private",
    "description": null,
    "lineNumber": 289,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1106,
    "kind": "method",
    "name": "_buildVBOs",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_buildVBOs",
    "access": "private",
    "description": null,
    "lineNumber": 298,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1107,
    "kind": "method",
    "name": "_buildHash",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_buildHash",
    "access": "private",
    "description": null,
    "lineNumber": 330,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1108,
    "kind": "method",
    "name": "_getEdgeIndices",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_getEdgeIndices",
    "access": "private",
    "description": null,
    "lineNumber": 353,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1109,
    "kind": "method",
    "name": "_getPickTrianglePositions",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_getPickTrianglePositions",
    "access": "private",
    "description": null,
    "lineNumber": 360,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1110,
    "kind": "method",
    "name": "_getPickTriangleColors",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_getPickTriangleColors",
    "access": "private",
    "description": null,
    "lineNumber": 367,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1111,
    "kind": "method",
    "name": "_buildEdgeIndices",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_buildEdgeIndices",
    "access": "private",
    "description": null,
    "lineNumber": 374,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1113,
    "kind": "method",
    "name": "_buildPickTriangleVBOs",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_buildPickTriangleVBOs",
    "access": "private",
    "description": null,
    "lineNumber": 391,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1116,
    "kind": "method",
    "name": "_buildPickVertexVBOs",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_buildPickVertexVBOs",
    "access": "private",
    "description": null,
    "lineNumber": 406,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1117,
    "kind": "method",
    "name": "_webglContextLost",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_webglContextLost",
    "access": "private",
    "description": null,
    "lineNumber": 421,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1118,
    "kind": "method",
    "name": "_webglContextRestored",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_webglContextRestored",
    "access": "private",
    "description": null,
    "lineNumber": 427,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1120,
    "kind": "member",
    "name": "_pickVertexPositionsBuf",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_pickVertexPositionsBuf",
    "access": "private",
    "description": null,
    "lineNumber": 433,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1124,
    "kind": "member",
    "name": "_pickVertexColorsBuf",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_pickVertexColorsBuf",
    "access": "private",
    "description": null,
    "lineNumber": 437,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1125,
    "kind": "get",
    "name": "primitive",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#primitive",
    "access": "public",
    "description": "The Geometry's primitive type.\n\nValid types are: 'points', 'lines', 'line-loop', 'line-strip', 'triangles', 'triangle-strip' and 'triangle-fan'.",
    "lineNumber": 449,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"triangles\""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "primitive",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1126,
    "kind": "get",
    "name": "compressGeometry",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#compressGeometry",
    "access": "public",
    "description": "Indicates if this Geometry is quantized.\n\nCompression is an internally-performed optimization which stores positions, colors, normals and UVs\nin quantized and oct-encoded formats for reduced memory footprint and GPU bus usage.\n\nQuantized geometry may not be updated.",
    "lineNumber": 466,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "compressGeometry",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1127,
    "kind": "get",
    "name": "combineGeometry",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#combineGeometry",
    "access": "public",
    "description": "Indicates if this Geometry is combined.\n\nCombination is an internally-performed optimization which combines positions, colors, normals and UVs into\nthe same WebGL vertex buffers with other Geometries, in order to reduce the number of buffer binds\nperformed per frame.",
    "lineNumber": 482,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "combineGeometry",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1128,
    "kind": "get",
    "name": "positions",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#positions",
    "access": "public",
    "description": "The Geometry's vertex positions.",
    "lineNumber": 493,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "null"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "positions",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1129,
    "kind": "member",
    "name": "_decompressedPositions",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_decompressedPositions",
    "access": "private",
    "description": null,
    "lineNumber": 501,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1130,
    "kind": "set",
    "name": "positions",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#positions",
    "access": "public",
    "description": null,
    "lineNumber": 507,
    "undocument": true
  },
  {
    "__docId__": 1131,
    "kind": "get",
    "name": "normals",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#normals",
    "access": "public",
    "description": "The Geometry's vertex normals.",
    "lineNumber": 542,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "null"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "normals",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1132,
    "kind": "member",
    "name": "_decompressedNormals",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_decompressedNormals",
    "access": "private",
    "description": null,
    "lineNumber": 552,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1133,
    "kind": "set",
    "name": "normals",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#normals",
    "access": "public",
    "description": null,
    "lineNumber": 558,
    "undocument": true
  },
  {
    "__docId__": 1134,
    "kind": "get",
    "name": "uv",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#uv",
    "access": "public",
    "description": "The Geometry's UV coordinates.",
    "lineNumber": 591,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "null"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "uv",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1135,
    "kind": "member",
    "name": "_decompressedUV",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_decompressedUV",
    "access": "private",
    "description": null,
    "lineNumber": 599,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1136,
    "kind": "set",
    "name": "uv",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#uv",
    "access": "public",
    "description": null,
    "lineNumber": 605,
    "undocument": true
  },
  {
    "__docId__": 1137,
    "kind": "get",
    "name": "colors",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#colors",
    "access": "public",
    "description": "The Geometry's vertex colors.",
    "lineNumber": 637,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "null"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "colors",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1138,
    "kind": "set",
    "name": "colors",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#colors",
    "access": "public",
    "description": null,
    "lineNumber": 641,
    "undocument": true
  },
  {
    "__docId__": 1139,
    "kind": "get",
    "name": "indices",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#indices",
    "access": "public",
    "description": "The Geometry's indices.\n\nIf ````xeokit.WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"]```` is true, then this can be\na ````Uint32Array````, otherwise it needs to be a ````Uint16Array````.",
    "lineNumber": 677,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "null"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "indices",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1140,
    "kind": "get",
    "name": "aabb",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#aabb",
    "access": "public",
    "description": "Local-space axis-aligned 3D boundary (AABB) of this geometry.\n\nThe AABB is represented by a six-element Float32Array containing the min/max extents of the\naxis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.",
    "lineNumber": 691,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "aabb",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1143,
    "kind": "get",
    "name": "obb",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#obb",
    "access": "public",
    "description": "Local-space oriented 3D boundary (OBB) of this geometry.\n\nThe OBB is represented by a 32-element Float32Array containing the eight vertices of the box,\nwhere each vertex is a homogeneous coordinate having [x,y,z,w] elements.",
    "lineNumber": 712,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obb",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1146,
    "kind": "get",
    "name": "kdtree",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#kdtree",
    "access": "public",
    "description": null,
    "lineNumber": 724,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1147,
    "kind": "member",
    "name": "_kdtree",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_kdtree",
    "access": "private",
    "description": null,
    "lineNumber": 731,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1148,
    "kind": "method",
    "name": "_setBoundaryDirty",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_setBoundaryDirty",
    "access": "private",
    "description": null,
    "lineNumber": 736,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1152,
    "kind": "method",
    "name": "_getState",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_getState",
    "access": "private",
    "description": null,
    "lineNumber": 756,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1153,
    "kind": "method",
    "name": "_getVertexBufs",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#_getVertexBufs",
    "access": "private",
    "description": null,
    "lineNumber": 760,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1154,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/geometry/Geometry.js~Geometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/Geometry.js~Geometry#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 764,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1155,
    "kind": "file",
    "name": "scene/geometry/OBBGeometry.js",
    "content": "\nimport {utils} from '../utils.js';\nimport {core} from '../core.js';\nimport {Geometry} from './Geometry.js';\n\n/**\n * @desc Defines the shape of one of more {@link #Mesh}es to visualize the extents of an object-aligned bounding box (OBB).\n *\n *\n * * A xeokit OBB is given as a 32-element array containing the homogeneous coordinates for the eight corner vertices, ie. each having elements [x,y,z,w].\n * * Set {@link OBBGeometry#targetOBB} to an OBB or set {@link OBBGeometry#target} to a {@link Geometry}.\n *\n * ## Usage\n *\n * ````javascript\n * // Create a Mesh with a TorusGeometry\n * var mesh = new Mesh(myViewer.scene, {\n *      geometry: new TorusGeometry(myViewer.scene, )\n * });\n *\n * // Create a second Mesh with an OBBGeometry that shows a wireframe box for the OBB of the first Mesh's TorusGeometry\n * var boundaryHelper = new Mesh(myViewer.scene, {\n *      geometry: new OBBGeometry(myViewer.scene, {\n *          target: mesh.geometry\n *      }),\n *      material: new PhongMaterial(myViewer.scene, {\n *          diffuse: [0.5, 1.0, 0.5],\n *          emissive: [0.5, 1.0, 0.5],\n *          lineWidth:2\n *      })\n * });\n * ````\n *\n * We can also directly configure the OBBGeometry with the {@link Geometry#obb}:\n *\n * ````javascript\n * var boundaryHelper2 = new Mesh(myViewer.scene, {\n *\n *      geometry: new OBBGeometry(myViewer.scene, {\n *          targetOBB: mesh.obb\n *      }),\n *\n *      material: new xeokit.PhongMaterial(myViewer.scene, {\n *          diffuse: [0.5, 1.0, 0.5],\n *          emissive: [0.5, 1.0, 0.5],\n *          lineWidth:2\n *      })\n * });\n * ````\n*/\nclass OBBGeometry extends Geometry {\n\n    /**\n     * @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] Configs\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene},\n     generated automatically when omitted.\n     @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this OBBGeometry.\n     @param [cfg.target] {Component} ID or instance of a {@link Component} whose OBB we'll show.\n     @param [cfg.targetOBB] {Float32Array} An mesh-oriented box (OBB) in a 32-element Float32Array\n     containing homogeneous coordinates for the eight corner vertices, ie. each having elements (x,y,z,w).\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg={}) {\n        super(owner, utils.apply(cfg, {\n            combineGeometry: true,\n            compressGeometry: false, // Quantized geometry is immutable\n            primitive: cfg.primitive || \"lines\",\n            positions: cfg.positions || [1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0,\n                1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0],\n            indices: [0, 1, 1, 2, 2, 3, 3, 0, 4, 5, 5, 6, 6, 7, 7, 4, 0, 4, 1, 5, 2, 6, 3, 7]\n        }));\n        if (cfg.target) {\n            this.target = cfg.target;\n        } else if (cfg.targetOBB) {\n            this.targetOBB = cfg.targetOBB;\n        }\n    }\n\n    /**\n     A component whose OBB we'll dynamically fit this AABBGeometry to.\n\n     This property effectively replaces the {@link OBBGeometry#targetOBB} property.\n\n     @property target\n     @type Component\n     */\n    set target(value) {\n        let geometryDirty = false;\n        const self = this;\n        this._attach({\n            name: \"target\",\n            type: \"Component\",\n            component: value,\n            sceneDefault: false,\n            on: {\n                boundary: function () {\n                    if (geometryDirty) {\n                        return;\n                    }\n                    geometryDirty = true;\n                    core.scheduleTask(function () {\n                        self._setPositionsFromOBB(self._attached.target.obb);\n                        geometryDirty = false;\n                    });\n                }\n            },\n            onAttached: function () {\n                self._setPositionsFromOBB(self._attached.target.obb);\n            }\n        });\n    }\n\n    get target() {\n        return this._attached.target;\n    }\n\n    /**\n     Sets this OBBGeometry to an mesh-oriented bounding box (OBB), given as a 32-element Float32Array\n     containing homogeneous coordinates for the eight corner vertices, ie. each having elements [x,y,z,w].\n\n     This property effectively replaces the {@link OBBGeometry#boundary} property, causing it to become null.\n\n     @property targetOBB\n     @type Float32Array\n     */\n    set targetOBB(value) {\n        if (!value) {\n            return;\n        }\n        if (this._attached.target) {\n            this.target = null;\n        }\n        this._setPositionsFromOBB(value);\n    }\n\n    _setPositionsFromOBB(obb) {\n        this.positions = [\n            obb[0], obb[1], obb[2],\n            obb[4], obb[5], obb[6],\n            obb[8], obb[9], obb[10],\n            obb[12], obb[13], obb[14],\n            obb[16], obb[17], obb[18],\n            obb[20], obb[21], obb[22],\n            obb[24], obb[25], obb[26],\n            obb[28], obb[29], obb[30]\n        ];\n    }\n}\n\nexport {OBBGeometry};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/geometry/OBBGeometry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1156,
    "kind": "class",
    "name": "OBBGeometry",
    "memberof": "scene/geometry/OBBGeometry.js",
    "static": true,
    "longname": "scene/geometry/OBBGeometry.js~OBBGeometry",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/geometry/OBBGeometry.js",
    "importStyle": "{OBBGeometry}",
    "description": "Defines the shape of one of more {@link #Mesh}es to visualize the extents of an object-aligned bounding box (OBB).\n\n\n* A xeokit OBB is given as a 32-element array containing the homogeneous coordinates for the eight corner vertices, ie. each having elements [x,y,z,w].\n* Set {@link OBBGeometry#targetOBB} to an OBB or set {@link OBBGeometry#target} to a {@link Geometry}.\n\n## Usage\n\n````javascript\n// Create a Mesh with a TorusGeometry\nvar mesh = new Mesh(myViewer.scene, {\n     geometry: new TorusGeometry(myViewer.scene, )\n});\n\n// Create a second Mesh with an OBBGeometry that shows a wireframe box for the OBB of the first Mesh's TorusGeometry\nvar boundaryHelper = new Mesh(myViewer.scene, {\n     geometry: new OBBGeometry(myViewer.scene, {\n         target: mesh.geometry\n     }),\n     material: new PhongMaterial(myViewer.scene, {\n         diffuse: [0.5, 1.0, 0.5],\n         emissive: [0.5, 1.0, 0.5],\n         lineWidth:2\n     })\n});\n````\n\nWe can also directly configure the OBBGeometry with the {@link Geometry#obb}:\n\n````javascript\nvar boundaryHelper2 = new Mesh(myViewer.scene, {\n\n     geometry: new OBBGeometry(myViewer.scene, {\n         targetOBB: mesh.obb\n     }),\n\n     material: new xeokit.PhongMaterial(myViewer.scene, {\n         diffuse: [0.5, 1.0, 0.5],\n         emissive: [0.5, 1.0, 0.5],\n         lineWidth:2\n     })\n});\n````",
    "lineNumber": 51,
    "interface": false,
    "extends": [
      "scene/geometry/Geometry.js~Geometry"
    ]
  },
  {
    "__docId__": 1157,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/geometry/OBBGeometry.js~OBBGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/OBBGeometry.js~OBBGeometry#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 65,
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "Configs"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent {@link Scene},\ngenerated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "String:Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.meta",
        "description": "Optional map of user-defined metadata to attach to this OBBGeometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.target",
        "description": "{Component} ID or instance of a {@link Component} whose OBB we'll show."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.targetOBB",
        "description": "{Float32Array} An mesh-oriented box (OBB) in a 32-element Float32Array\ncontaining homogeneous coordinates for the eight corner vertices, ie. each having elements (x,y,z,w)."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1160,
    "kind": "set",
    "name": "target",
    "memberof": "scene/geometry/OBBGeometry.js~OBBGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/OBBGeometry.js~OBBGeometry#target",
    "access": "public",
    "description": "A component whose OBB we'll dynamically fit this AABBGeometry to.\n\nThis property effectively replaces the {@link OBBGeometry#targetOBB} property.",
    "lineNumber": 89,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1161,
    "kind": "get",
    "name": "target",
    "memberof": "scene/geometry/OBBGeometry.js~OBBGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/OBBGeometry.js~OBBGeometry#target",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1162,
    "kind": "set",
    "name": "targetOBB",
    "memberof": "scene/geometry/OBBGeometry.js~OBBGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/OBBGeometry.js~OBBGeometry#targetOBB",
    "access": "public",
    "description": "Sets this OBBGeometry to an mesh-oriented bounding box (OBB), given as a 32-element Float32Array\ncontaining homogeneous coordinates for the eight corner vertices, ie. each having elements [x,y,z,w].\n\nThis property effectively replaces the {@link OBBGeometry#boundary} property, causing it to become null.",
    "lineNumber": 128,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "targetOBB",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1164,
    "kind": "method",
    "name": "_setPositionsFromOBB",
    "memberof": "scene/geometry/OBBGeometry.js~OBBGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/OBBGeometry.js~OBBGeometry#_setPositionsFromOBB",
    "access": "private",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "obb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1165,
    "kind": "member",
    "name": "positions",
    "memberof": "scene/geometry/OBBGeometry.js~OBBGeometry",
    "static": false,
    "longname": "scene/geometry/OBBGeometry.js~OBBGeometry#positions",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "type": {
      "types": [
        "undefined[]"
      ]
    }
  },
  {
    "__docId__": 1166,
    "kind": "file",
    "name": "scene/geometry/PlaneGeometry.js",
    "content": "import {utils} from '../utils.js';\nimport {Geometry} from './Geometry.js';\n\n/**\n * @desc Defines a planar shape for one or more {@link Mesh}es.\n *\n * ## Usage\n * Creating a {@link Mesh} with a PlaneGeometry and a {@link PhongMaterial} with diffuse {@link Texture}:\n *\n * ````javascript\n * new Mesh(myViewer.scene, {\n *     geometry: new PlaneGeometry(myViewer.scene, {\n *          center: [0,0,0],\n *          xSize: 2,\n *          zSize: 2,\n *          xSegments: 10,\n *          zSegments: 10\n *      }),\n *      material: new PhongMaterial(myViewer.scene, {\n *          diffuseMap: new Texture(myViewer.scene, {\n *              src: \"textures/diffuse/uvGrid2.jpg\"\n *          })\n *      })\n *  });\n ````\n */\nclass PlaneGeometry extends Geometry {\n\n    /**\n     @param [cfg.primitive=\"triangles\"] {String} The primitive type. Accepted values for a PlaneGeometry are 'points', 'lines' and 'triangles'.\n     @param [cfg.center] {Float32Array} 3D point indicating the center position of the PlaneGeometry.\n     @param [cfg.xSize=1] {Number} Dimension on the X-axis.\n     @param [cfg.zSize=1] {Number} Dimension on the Z-axis.\n     @param [cfg.xSegments=1] {Number} Number of segments on the X-axis.\n     @param [cfg.zSegments=1] {Number} Number of segments on the Z-axis.\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        let xSize = cfg.xSize || 1;\n        if (xSize < 0) {\n            console.error(\"negative xSize not allowed - will invert\");\n            xSize *= -1;\n        }\n\n        let zSize = cfg.zSize || 1;\n        if (zSize < 0) {\n            console.error(\"negative zSize not allowed - will invert\");\n            zSize *= -1;\n        }\n\n        let xSegments = cfg.xSegments || 1;\n        if (xSegments < 0) {\n            console.error(\"negative xSegments not allowed - will invert\");\n            xSegments *= -1;\n        }\n        if (xSegments < 1) {\n            xSegments = 1;\n        }\n\n        let zSegments = cfg.xSegments || 1;\n        if (zSegments < 0) {\n            console.error(\"negative zSegments not allowed - will invert\");\n            zSegments *= -1;\n        }\n        if (zSegments < 1) {\n            zSegments = 1;\n        }\n\n        const center = cfg.center;\n        const centerX = center ? center[0] : 0;\n        const centerY = center ? center[1] : 0;\n        const centerZ = center ? center[2] : 0;\n\n        const halfWidth = xSize / 2;\n        const halfHeight = zSize / 2;\n\n        const planeX = Math.floor(xSegments) || 1;\n        const planeZ = Math.floor(zSegments) || 1;\n\n        const planeX1 = planeX + 1;\n        const planeZ1 = planeZ + 1;\n\n        const segmentWidth = xSize / planeX;\n        const segmentHeight = zSize / planeZ;\n\n        const positions = new Float32Array(planeX1 * planeZ1 * 3);\n        const normals = new Float32Array(planeX1 * planeZ1 * 3);\n        const uvs = new Float32Array(planeX1 * planeZ1 * 2);\n\n        let offset = 0;\n        let offset2 = 0;\n\n        let iz;\n        let ix;\n        let x;\n        let a;\n        let b;\n        let c;\n        let d;\n\n        for (iz = 0; iz < planeZ1; iz++) {\n\n            const z = iz * segmentHeight - halfHeight;\n\n            for (ix = 0; ix < planeX1; ix++) {\n\n                x = ix * segmentWidth - halfWidth;\n\n                positions[offset] = x + centerX;\n                positions[offset + 1] = centerY;\n                positions[offset + 2] = -z + centerZ;\n\n                normals[offset + 2] = -1;\n\n                uvs[offset2] = (planeX - ix) / planeX;\n                uvs[offset2 + 1] = ((planeZ - iz) / planeZ);\n\n                offset += 3;\n                offset2 += 2;\n            }\n        }\n\n        offset = 0;\n\n        const indices = new ((positions.length / 3) > 65535 ? Uint32Array : Uint16Array)(planeX * planeZ * 6);\n\n        for (iz = 0; iz < planeZ; iz++) {\n\n            for (ix = 0; ix < planeX; ix++) {\n\n                a = ix + planeX1 * iz;\n                b = ix + planeX1 * (iz + 1);\n                c = (ix + 1) + planeX1 * (iz + 1);\n                d = (ix + 1) + planeX1 * iz;\n\n                indices[offset] = d;\n                indices[offset + 1] = b;\n                indices[offset + 2] = a;\n\n                indices[offset + 3] = d;\n                indices[offset + 4] = c;\n                indices[offset + 5] = b;\n\n                offset += 6;\n            }\n        }\n\n        super(owner, utils.apply(cfg, {\n            positions: positions,\n            normals: normals,\n            uv: uvs,\n            indices: indices\n        }));\n    }\n}\n\nexport {PlaneGeometry};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/geometry/PlaneGeometry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1167,
    "kind": "class",
    "name": "PlaneGeometry",
    "memberof": "scene/geometry/PlaneGeometry.js",
    "static": true,
    "longname": "scene/geometry/PlaneGeometry.js~PlaneGeometry",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/geometry/PlaneGeometry.js",
    "importStyle": "{PlaneGeometry}",
    "description": "Defines a planar shape for one or more {@link Mesh}es.\n\n## Usage\nCreating a {@link Mesh} with a PlaneGeometry and a {@link PhongMaterial} with diffuse {@link Texture}:\n\n````javascript\nnew Mesh(myViewer.scene, {\n    geometry: new PlaneGeometry(myViewer.scene, {\n         center: [0,0,0],\n         xSize: 2,\n         zSize: 2,\n         xSegments: 10,\n         zSegments: 10\n     }),\n     material: new PhongMaterial(myViewer.scene, {\n         diffuseMap: new Texture(myViewer.scene, {\n             src: \"textures/diffuse/uvGrid2.jpg\"\n         })\n     })\n });\n````",
    "lineNumber": 27,
    "interface": false,
    "extends": [
      "scene/geometry/Geometry.js~Geometry"
    ]
  },
  {
    "__docId__": 1168,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/geometry/PlaneGeometry.js~PlaneGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/PlaneGeometry.js~PlaneGeometry#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 39,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"triangles\"",
        "defaultRaw": "triangles",
        "name": "cfg.primitive",
        "description": "{String} The primitive type. Accepted values for a PlaneGeometry are 'points', 'lines' and 'triangles'."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.center",
        "description": "{Float32Array} 3D point indicating the center position of the PlaneGeometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.xSize",
        "description": "{Number} Dimension on the X-axis."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.zSize",
        "description": "{Number} Dimension on the Z-axis."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.xSegments",
        "description": "{Number} Number of segments on the X-axis."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.zSegments",
        "description": "{Number} Number of segments on the Z-axis."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1169,
    "kind": "file",
    "name": "scene/geometry/SceneVertexBufs.js",
    "content": "import {RenderState} from '../webgl/RenderState.js';\nimport {ArrayBuf} from '../webgl/ArrayBuf.js';\nimport {stats} from './../stats.js';\nimport {WEBGL_INFO} from './../webglInfo.js';\n\nconst CHUNK_LEN = bigIndicesSupported ? (Number.MAX_SAFE_INTEGER / 6) : (64000 * 4); // RGBA is largest item\nconst memoryStats = stats.memory;\nvar bigIndicesSupported = WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"];\nconst IndexArrayType = bigIndicesSupported ? Uint32Array : Uint16Array;\nconst nullVertexBufs = new RenderState({});\n\nclass SceneVertexBufs {\n\n    constructor(scene, hasPositions, hasNormals, hasColors, hasUVs, compressGeometry) {\n\n        this.scene = scene;\n        this.gl = scene.canvas.gl;\n        this.contextLost = false;\n        this.geometries = {};\n        this.geometryIndicesOffsets = {};\n        this.newGeometries = [];\n        this.geometryVertexBufs = {};\n        this.needRebuild = false;\n        this.needAppend = false;\n        this.positions = hasPositions ? [] : null;\n        this.normals = hasNormals ? [] : null;\n        this.colors = hasColors ? [] : null;\n        this.uv = hasUVs ? [] : null;\n        this.compressGeometry = compressGeometry;\n        this.vertexBufs = null;\n    }\n\n    addGeometry(geometry) {\n        if (!geometry.positions || !geometry.indices) {\n            this.scene.warn(`Ignoring geometry with no positions or indices: ${geometry.id}`);\n            return;\n        }\n        this.geometries[geometry.id] = geometry;\n        this.geometryIndicesOffsets[geometry.id] = 0; // Will initialize below\n        this.newGeometries.push(geometry);\n        this.needAppend = true;\n    }\n\n    getIndicesOffset(geometry) {\n        if (this.needRebuild || this.needAppend) {\n            this.build();\n        }\n        return this.geometryIndicesOffsets[geometry.id];\n    }\n\n    getVertexBufs(geometry) {\n        if (!this.geometries[geometry.id]) {\n            return nullVertexBufs;\n        }\n        if (this.needRebuild || this.needAppend) {\n            this.build();\n        }\n        return this.geometryVertexBufs[geometry.id];\n    }\n\n    setPositions(geometry) {\n        const vertexBufs = this.geometryVertexBufs[geometry.id];\n        if (!vertexBufs) {\n            return;\n        }\n        if (!geometry.positions) {\n            return;\n        }\n        const positionsBuf = vertexBufs.positionsBuf;\n        if (!positionsBuf) {\n            return;\n        }\n        positionsBuf.setData(geometry.positions, this.geometryIndicesOffsets[geometry.id] * 3);\n    }\n\n    setNormals(geometry) {\n        const vertexBufs = this.geometryVertexBufs[geometry.id];\n        if (!vertexBufs) {\n            return;\n        }\n        if (!geometry.normals) {\n            return;\n        }\n        const normalsBuf = vertexBufs.normalsBuf;\n        if (!normalsBuf) {\n            return;\n        }\n        normalsBuf.setData(geometry.normals, this.geometryIndicesOffsets[geometry.id] * 3);\n    }\n\n    setUVs(geometry) {\n        const vertexBufs = this.geometryVertexBufs[geometry.id];\n        if (!vertexBufs) {\n            return;\n        }\n        if (!geometry.uv) {\n            return;\n        }\n        const uvBuf = vertexBufs.uvBuf;\n        if (!uvBuf) {\n            return;\n        }\n        uvBuf.setData(geometry.uv, this.geometryIndicesOffsets[geometry.id] * 2);\n    }\n\n    setColors(geometry) {\n        const vertexBufs = this.geometryVertexBufs[geometry.id];\n        if (!vertexBufs) {\n            return;\n        }\n        if (!geometry.color) {\n            return;\n        }\n        const colorsBuf = vertexBufs.colorsBuf;\n        if (!colorsBuf) {\n            return;\n        }\n        colorsBuf.setData(geometry.colors, this.geometryIndicesOffsets[geometry.id] * 4);\n    }\n\n    removeGeometry(geometry) {\n        const id = geometry.id;\n        if (!this.geometries[id]) {\n            return;\n        }\n        delete this.geometries[id];\n        delete this.geometryIndicesOffsets[id];\n        if (geometry.indicesBufCombined) {\n            geometry.indicesBufCombined.destroy();\n        }\n        this.needRebuild = true;\n    }\n\n    webglContextLost() {\n        this.contextLost = true;\n    }\n\n    webglContextRestored() {\n        if (this.contextLost) {\n            for (const id in this.geometries) {\n                if (this.geometries.hasOwnProperty(id)) {\n                    this.geometries[id].indicesBufCombined = null;\n                }\n            }\n            this.build();\n            this.contextLost = false;\n        }\n    }\n\n    build() {\n\n        const gl = this.scene.canvas.gl;\n\n        this.geometryVertexBufs = {};\n\n        let id;\n        let geometry;\n        let indicesOffset = 0;\n\n        this.vertexBufs = null;\n\n        let lenPositions = 0;\n        let lenNormals = 0;\n        let lenUVs = 0;\n        let lenColors = 0;\n\n        for (id in this.geometries) {\n            if (this.geometries.hasOwnProperty(id)) {\n                geometry = this.geometries[id];\n                if (this.positions) {\n                    lenPositions += geometry.positions.length;\n                }\n                if (this.normals) {\n                    lenNormals += geometry.normals.length;\n                }\n                if (this.uv) {\n                    lenUVs += geometry.uv.length;\n                }\n                if (this.colors) {\n                    lenColors += geometry.colors.length;\n                }\n            }\n        }\n\n        // if (this.positions) {\n        //     positions = this.compressGeometry ? new Uint16Array(lenPositions) : new Float32Array(lenPositions);\n        // }\n        // if (this.normals) {\n        //     normals = this.compressGeometry ? new Uint16Array(lenNormals) : new Float32Array(lenNormals);\n        // }\n        // if (this.uv) {\n        //     uv = this.compressGeometry ? new Uint16Array(lenUVs) : new Float32Array(lenUVs);\n        // }\n        // if (this.colors) {\n        //     colors = this.compressGeometry ? new Uint16Array(lenColors) : new Float32Array(lenColors);\n        // }\n\n        for (id in this.geometries) {\n            if (this.geometries.hasOwnProperty(id)) {\n\n                geometry = this.geometries[id];\n\n                const needNew = (!this.vertexBufs) || (this.positions.length + geometry.positions.length > CHUNK_LEN);\n\n                if (needNew) {\n                    if (this.vertexBufs) {\n                        this.createBufs(this.vertexBufs);\n                    }\n                    this.vertexBufs = new RenderState({\n                        positionsBuf: null,\n                        normalsBuf: null,\n                        uvBuf: null,\n                        colorsBuf: null,\n                        compressGeometry: this.compressGeometry\n                    });\n                    indicesOffset = 0;\n                }\n\n                this.geometryVertexBufs[id] = this.vertexBufs;\n\n                if (this.positions) {\n                    for (var i = 0, len = geometry.positions.length; i < len; i++) {\n                        this.positions.push(geometry.positions[i]);\n                    }\n                }\n\n                if (this.normals) {\n                    for (var i = 0, len = geometry.normals.length; i < len; i++) {\n                        this.normals.push(geometry.normals[i]);\n                    }\n                }\n\n                if (this.colors) {\n                    for (var i = 0, len = geometry.colors.length; i < len; i++) {\n                        this.colors.push(geometry.colors[i]);\n                    }\n                }\n\n                if (this.uv) {\n                    for (var i = 0, len = geometry.uv.length; i < len; i++) {\n                        this.uv.push(geometry.uv[i]);\n                    }\n                }\n\n                // Adjust geometry indices\n\n                this.geometryIndicesOffsets[id] = indicesOffset;\n\n                let indices;\n\n                if (indicesOffset) {\n                    indices = new (bigIndicesSupported ? Uint32Array : Uint16Array)(geometry.indices);\n                    for (var i = 0, len = indices.length; i < len; i++) {\n                        indices[i] += indicesOffset;\n                        if (indices[i] > (CHUNK_LEN / 3)) {\n                            console.error(`out of range: ${indices[i]}`)\n                        }\n                    }\n                } else {\n                    indices = geometry.indices;\n                }\n\n                // Update indices buffer, lazy-create first if necessary\n\n                if (!geometry.indicesBufCombined) {\n                    geometry.indicesBufCombined = new ArrayBuf(gl, gl.ELEMENT_ARRAY_BUFFER, indices, indices.length, 1, gl.STATIC_DRAW);\n                } else {\n                    geometry.indicesBufCombined.setData(indices);\n                }\n\n                indicesOffset += geometry.positions.length / 3;\n            }\n        }\n\n        if (this.vertexBufs) {\n            this.createBufs(this.vertexBufs);\n        }\n\n        this.needRebuild = false;\n        this.needAppend = false;\n    }\n\n    createBufs(vertexBufs) {\n        const gl = this.scene.canvas.gl;\n        let array;\n        if (this.positions) {\n            array = this.compressGeometry ? new Uint16Array(this.positions) : new Float32Array(this.positions);\n            vertexBufs.positionsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, array, array.length, 3, gl.STATIC_DRAW);\n            memoryStats.positions += vertexBufs.positionsBuf.numItems;\n            this.positions = [];\n        }\n        if (this.normals) {\n            if (this.compressGeometry) {\n                array = new Int8Array(this.normals);\n                let normalized = true;\n                vertexBufs.normalsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, array, array.length, 3, gl.STATIC_DRAW, normalized);\n            } else {\n                array = new Float32Array(this.normals);\n                vertexBufs.normalsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, array, array.length, 3, gl.STATIC_DRAW);\n            }\n            memoryStats.normals += vertexBufs.normalsBuf.numItems;\n            this.normals = [];\n        }\n        if (this.colors) {\n            array = new Float32Array(this.colors);\n            vertexBufs.colorsBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, array, array.length, 4, gl.STATIC_DRAW);\n            memoryStats.colors += vertexBufs.colorsBuf.numItems;\n            this.colors = [];\n        }\n        if (this.uv) {\n            array = this.compressGeometry ? new Uint16Array(this.uv) : new Float32Array(this.uv);\n            vertexBufs.uvBuf = new ArrayBuf(gl, gl.ARRAY_BUFFER, array, array.length, 2, gl.STATIC_DRAW);\n            memoryStats.uvs += vertexBufs.uvBuf.numItems;\n            this.uv = [];\n        }\n    }\n}\n\n/**\n * @private\n */\nconst getSceneVertexBufs = (scene, geometry) => {\n    const hasPositions = !!geometry.positions;\n    const compressGeometry = !!geometry.compressGeometry;\n    const hasNormals = !!geometry.normals;\n    const hasColors = !!geometry.colors;\n    const hasUVs = !!geometry.uv;\n    const hash = ([scene.id, hasPositions ? \"p\" : \"\", compressGeometry ? \"c\" : \"\", hasNormals ? \"n\" : \"\", hasColors ? \"c\" : \"\", hasUVs ? \"u\" : \"\"]).join(\";\");\n    if (!scene._sceneVertexBufs) {\n        scene._sceneVertexBufs = {};\n    }\n    let sceneVertexBufs = scene._sceneVertexBufs[hash];\n    if (!sceneVertexBufs) {\n        sceneVertexBufs = new SceneVertexBufs(scene, hasPositions, hasNormals, hasColors, hasUVs, compressGeometry);\n        scene._sceneVertexBufs[hash] = sceneVertexBufs;\n    }\n    return sceneVertexBufs;\n};\n\nexport {getSceneVertexBufs};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/geometry/SceneVertexBufs.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1170,
    "kind": "variable",
    "name": "CHUNK_LEN",
    "memberof": "scene/geometry/SceneVertexBufs.js",
    "static": true,
    "longname": "scene/geometry/SceneVertexBufs.js~CHUNK_LEN",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/SceneVertexBufs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1171,
    "kind": "variable",
    "name": "memoryStats",
    "memberof": "scene/geometry/SceneVertexBufs.js",
    "static": true,
    "longname": "scene/geometry/SceneVertexBufs.js~memoryStats",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/SceneVertexBufs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1172,
    "kind": "variable",
    "name": "bigIndicesSupported",
    "memberof": "scene/geometry/SceneVertexBufs.js",
    "static": true,
    "longname": "scene/geometry/SceneVertexBufs.js~bigIndicesSupported",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/SceneVertexBufs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1173,
    "kind": "variable",
    "name": "IndexArrayType",
    "memberof": "scene/geometry/SceneVertexBufs.js",
    "static": true,
    "longname": "scene/geometry/SceneVertexBufs.js~IndexArrayType",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/SceneVertexBufs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1174,
    "kind": "variable",
    "name": "nullVertexBufs",
    "memberof": "scene/geometry/SceneVertexBufs.js",
    "static": true,
    "longname": "scene/geometry/SceneVertexBufs.js~nullVertexBufs",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/SceneVertexBufs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "scene/webgl/RenderState.js~RenderState"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1175,
    "kind": "class",
    "name": "SceneVertexBufs",
    "memberof": "scene/geometry/SceneVertexBufs.js",
    "static": true,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/SceneVertexBufs.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 1176,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 1177,
    "kind": "member",
    "name": "scene",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#scene",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1178,
    "kind": "member",
    "name": "gl",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#gl",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1179,
    "kind": "member",
    "name": "contextLost",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#contextLost",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1180,
    "kind": "member",
    "name": "geometries",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#geometries",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 1181,
    "kind": "member",
    "name": "geometryIndicesOffsets",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#geometryIndicesOffsets",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 1182,
    "kind": "member",
    "name": "newGeometries",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#newGeometries",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1183,
    "kind": "member",
    "name": "geometryVertexBufs",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#geometryVertexBufs",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 1184,
    "kind": "member",
    "name": "needRebuild",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#needRebuild",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1185,
    "kind": "member",
    "name": "needAppend",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#needAppend",
    "access": "public",
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1186,
    "kind": "member",
    "name": "positions",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#positions",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1187,
    "kind": "member",
    "name": "normals",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#normals",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1188,
    "kind": "member",
    "name": "colors",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#colors",
    "access": "public",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1189,
    "kind": "member",
    "name": "uv",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#uv",
    "access": "public",
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1190,
    "kind": "member",
    "name": "compressGeometry",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#compressGeometry",
    "access": "public",
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1191,
    "kind": "member",
    "name": "vertexBufs",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#vertexBufs",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1192,
    "kind": "method",
    "name": "addGeometry",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#addGeometry",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1194,
    "kind": "method",
    "name": "getIndicesOffset",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#getIndicesOffset",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1195,
    "kind": "method",
    "name": "getVertexBufs",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#getVertexBufs",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1196,
    "kind": "method",
    "name": "setPositions",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#setPositions",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "params": [
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1197,
    "kind": "method",
    "name": "setNormals",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#setNormals",
    "access": "public",
    "description": null,
    "lineNumber": 76,
    "undocument": true,
    "params": [
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1198,
    "kind": "method",
    "name": "setUVs",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#setUVs",
    "access": "public",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "params": [
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1199,
    "kind": "method",
    "name": "setColors",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#setColors",
    "access": "public",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "params": [
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1200,
    "kind": "method",
    "name": "removeGeometry",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#removeGeometry",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1202,
    "kind": "method",
    "name": "webglContextLost",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#webglContextLost",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1204,
    "kind": "method",
    "name": "webglContextRestored",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#webglContextRestored",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1206,
    "kind": "method",
    "name": "build",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#build",
    "access": "public",
    "description": null,
    "lineNumber": 150,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1212,
    "kind": "method",
    "name": "createBufs",
    "memberof": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/SceneVertexBufs.js~SceneVertexBufs#createBufs",
    "access": "public",
    "description": null,
    "lineNumber": 283,
    "undocument": true,
    "params": [
      {
        "name": "vertexBufs",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1217,
    "kind": "function",
    "name": "getSceneVertexBufs",
    "memberof": "scene/geometry/SceneVertexBufs.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/geometry/SceneVertexBufs.js~getSceneVertexBufs",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/geometry/SceneVertexBufs.js",
    "importStyle": "{getSceneVertexBufs}",
    "description": "",
    "lineNumber": 322,
    "ignore": true,
    "params": [
      {
        "name": "scene",
        "types": [
          "*"
        ]
      },
      {
        "name": "geometry",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1218,
    "kind": "file",
    "name": "scene/geometry/SphereGeometry.js",
    "content": "import {utils} from '../utils.js';\nimport {Geometry} from './Geometry.js';\n\nconst type = \"SphereGeometry\";\n\n/**\n * @desc Defines a spherical shape for one or more {@link Mesh}es.\n *\n * ## Usage\n * Creating a {@link Mesh} with a SphereGeometry and a {@link PhongMaterial} with diffuse {@link Texture}:\n *\n * ````javascript\n * new Mesh(myViewer.scene, {\n *     geometry: new SphereGeometry(myViewer.scene, {\n *          center: [0,0,0],\n *          radius: 1.5,\n *          heightSegments: 60,\n *          widthSegments: 60\n *      }),\n *      material: new PhongMaterial(myViewer.scene, {\n *          diffuseMap: new Texture(myViewer.scene, {\n *              src: \"textures/diffuse/uvGrid2.jpg\"\n *          })\n *      })\n *  });\n ````\n */\nclass SphereGeometry extends Geometry {\n\n    /**\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] Configs\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene},\n     generated automatically when omitted.\n     @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this SphereGeometry.\n     @param [cfg.primitive=\"triangles\"] {String} The primitive type. Accepted values for a SphereGeometry are 'points', 'lines' and 'triangles'.\n     @param [cfg.center] {Float32Array} 3D point indicating the center position of the SphereGeometry.\n     @param [cfg.radius=1] {Number}\n     @param [cfg.heightSegments=24] {Number} The SphereGeometry's number of latitudinal bands.\n     @param [cfg.widthSegments=18] {Number} The SphereGeometry's number of longitudinal bands.\n     @param [cfg.lod=1] {Number} Level-of-detail, in range [0..1].\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        const lod = cfg.lod || 1;\n\n        const centerX = cfg.center ? cfg.center[0] : 0;\n        const centerY = cfg.center ? cfg.center[1] : 0;\n        const centerZ = cfg.center ? cfg.center[2] : 0;\n\n        let radius = cfg.radius || 1;\n        if (radius < 0) {\n            console.warn(\"negative radius not allowed - will invert\");\n            radius *= -1;\n        }\n\n        let heightSegments = cfg.heightSegments || 18;\n        if (heightSegments < 0) {\n            console.warn(\"negative heightSegments not allowed - will invert\");\n            heightSegments *= -1;\n        }\n        heightSegments = Math.floor(lod * heightSegments);\n        if (heightSegments < 18) {\n            heightSegments = 18;\n        }\n\n        let widthSegments = cfg.widthSegments || 18;\n        if (widthSegments < 0) {\n            console.warn(\"negative widthSegments not allowed - will invert\");\n            widthSegments *= -1;\n        }\n        widthSegments = Math.floor(lod * widthSegments);\n        if (widthSegments < 18) {\n            widthSegments = 18;\n        }\n\n        const positions = [];\n        const normals = [];\n        const uvs = [];\n        const indices = [];\n\n        let i;\n        let j;\n\n        let theta;\n        let sinTheta;\n        let cosTheta;\n\n        let phi;\n        let sinPhi;\n        let cosPhi;\n\n        let x;\n        let y;\n        let z;\n\n        let u;\n        let v;\n\n        let first;\n        let second;\n\n        for (i = 0; i <= heightSegments; i++) {\n\n            theta = i * Math.PI / heightSegments;\n            sinTheta = Math.sin(theta);\n            cosTheta = Math.cos(theta);\n\n            for (j = 0; j <= widthSegments; j++) {\n\n                phi = j * 2 * Math.PI / widthSegments;\n                sinPhi = Math.sin(phi);\n                cosPhi = Math.cos(phi);\n\n                x = cosPhi * sinTheta;\n                y = cosTheta;\n                z = sinPhi * sinTheta;\n                u = 1.0 - j / widthSegments;\n                v = i / heightSegments;\n\n                normals.push(x);\n                normals.push(y);\n                normals.push(z);\n\n                uvs.push(u);\n                uvs.push(v);\n\n                positions.push(centerX + radius * x);\n                positions.push(centerY + radius * y);\n                positions.push(centerZ + radius * z);\n            }\n        }\n\n        for (i = 0; i < heightSegments; i++) {\n            for (j = 0; j < widthSegments; j++) {\n\n                first = (i * (widthSegments + 1)) + j;\n                second = first + widthSegments + 1;\n\n                indices.push(first + 1);\n                indices.push(second + 1);\n                indices.push(second);\n                indices.push(first + 1);\n                indices.push(second);\n                indices.push(first);\n            }\n        }\n\n        super(owner, utils.apply(cfg, {\n            positions: positions,\n            normals: normals,\n            uv: uvs,\n            indices: indices\n        }));\n    }\n}\n\nexport {SphereGeometry};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/geometry/SphereGeometry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1219,
    "kind": "variable",
    "name": "type",
    "memberof": "scene/geometry/SphereGeometry.js",
    "static": true,
    "longname": "scene/geometry/SphereGeometry.js~type",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/SphereGeometry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1220,
    "kind": "class",
    "name": "SphereGeometry",
    "memberof": "scene/geometry/SphereGeometry.js",
    "static": true,
    "longname": "scene/geometry/SphereGeometry.js~SphereGeometry",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/geometry/SphereGeometry.js",
    "importStyle": "{SphereGeometry}",
    "description": "Defines a spherical shape for one or more {@link Mesh}es.\n\n## Usage\nCreating a {@link Mesh} with a SphereGeometry and a {@link PhongMaterial} with diffuse {@link Texture}:\n\n````javascript\nnew Mesh(myViewer.scene, {\n    geometry: new SphereGeometry(myViewer.scene, {\n         center: [0,0,0],\n         radius: 1.5,\n         heightSegments: 60,\n         widthSegments: 60\n     }),\n     material: new PhongMaterial(myViewer.scene, {\n         diffuseMap: new Texture(myViewer.scene, {\n             src: \"textures/diffuse/uvGrid2.jpg\"\n         })\n     })\n });\n````",
    "lineNumber": 28,
    "interface": false,
    "extends": [
      "scene/geometry/Geometry.js~Geometry"
    ]
  },
  {
    "__docId__": 1221,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/geometry/SphereGeometry.js~SphereGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/SphereGeometry.js~SphereGeometry#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 45,
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "Configs"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent {@link Scene},\ngenerated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "String:Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.meta",
        "description": "Optional map of user-defined metadata to attach to this SphereGeometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"triangles\"",
        "defaultRaw": "triangles",
        "name": "cfg.primitive",
        "description": "{String} The primitive type. Accepted values for a SphereGeometry are 'points', 'lines' and 'triangles'."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.center",
        "description": "{Float32Array} 3D point indicating the center position of the SphereGeometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.radius",
        "description": "{Number}"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "24",
        "defaultRaw": 24,
        "name": "cfg.heightSegments",
        "description": "{Number} The SphereGeometry's number of latitudinal bands."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "18",
        "defaultRaw": 18,
        "name": "cfg.widthSegments",
        "description": "{Number} The SphereGeometry's number of longitudinal bands."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.lod",
        "description": "{Number} Level-of-detail, in range [0..1]."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1222,
    "kind": "file",
    "name": "scene/geometry/TorusGeometry.js",
    "content": "import {utils} from \"../utils.js\";\nimport {Geometry} from './Geometry.js';\nimport {math} from '../math/math.js';\n\n/**\n * @desc Defines a toroidal shape for one or more {@link Mesh}es.\n *\n * ## Usage\n * Creating a {@link Mesh} with a TorusGeometry and a {@link PhongMaterial} with diffuse {@link Texture}:\n *\n * ````javascript\n * new Mesh(myViewer.scene, {\n *     geometry: new TorusGeometry(myViewer.scene, {\n *          center: [0,0,0],\n *          radius: 1.0,\n *          tube: 0.5,\n *          radialSegments: 32,\n *          tubeSegments: 24,\n *          arc: Math.PI * 2.0\n *      }),\n *      material: new PhongMaterial(myViewer.scene, {\n *          diffuseMap: new Texture(myViewer.scene, {\n *              src: \"textures/diffuse/uvGrid2.jpg\"\n *          })\n *      })\n *  });\n ````\n */\nclass TorusGeometry extends Geometry {\n\n    /**\n     @constructor\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] Configs\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene},\n     generated automatically when omitted.\n     @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this TorusGeometry.\n     @param [cfg.primitive=\"triangles\"] {String} The primitive type. Accepted values for a TorusGeometry are 'points', 'lines' and 'triangles'.\n     @param [cfg.center] {Float32Array} 3D point indicating the center position of the TorusGeometry.\n     @param [cfg.radius=1] {Number} The overall radius of the TorusGeometry.\n     @param [cfg.tube=0.3] {Number} The tube radius of the TorusGeometry.\n     @param [cfg.radialSegments=32] {Number} The number of radial segments that make up the TorusGeometry.\n     @param [cfg.tubeSegments=24] {Number} The number of tubular segments that make up the TorusGeometry.\n     @param [cfg.arc=Math.PI / 2.0] {Number} The length of the TorusGeometry's arc in radians, where Math.PI*2 is a closed torus.\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        let radius = cfg.radius || 1;\n        if (radius < 0) {\n            console.error(\"negative radius not allowed - will invert\");\n            radius *= -1;\n        }\n        radius *= 0.5;\n\n        let tube = cfg.tube || 0.3;\n        if (tube < 0) {\n            console.error(\"negative tube not allowed - will invert\");\n            tube *= -1;\n        }\n\n        let radialSegments = cfg.radialSegments || 32;\n        if (radialSegments < 0) {\n            console.error(\"negative radialSegments not allowed - will invert\");\n            radialSegments *= -1;\n        }\n        if (radialSegments < 4) {\n            radialSegments = 4;\n        }\n\n        let tubeSegments = cfg.tubeSegments || 24;\n        if (tubeSegments < 0) {\n            console.error(\"negative tubeSegments not allowed - will invert\");\n            tubeSegments *= -1;\n        }\n        if (tubeSegments < 4) {\n            tubeSegments = 4;\n        }\n\n        let arc = cfg.arc || Math.PI * 2;\n        if (arc < 0) {\n            console.warn(\"negative arc not allowed - will invert\");\n            arc *= -1;\n        }\n        if (arc > 360) {\n            arc = 360;\n        }\n\n        const center = cfg.center;\n        let centerX = center ? center[0] : 0;\n        let centerY = center ? center[1] : 0;\n        const centerZ = center ? center[2] : 0;\n\n        const positions = [];\n        const normals = [];\n        const uvs = [];\n        const indices = [];\n\n        let u;\n        let v;\n        let x;\n        let y;\n        let z;\n        let vec;\n\n        let i;\n        let j;\n\n        for (j = 0; j <= tubeSegments; j++) {\n            for (i = 0; i <= radialSegments; i++) {\n\n                u = i / radialSegments * arc;\n                v = 0.785398 + (j / tubeSegments * Math.PI * 2);\n\n                centerX = radius * Math.cos(u);\n                centerY = radius * Math.sin(u);\n\n                x = (radius + tube * Math.cos(v)) * Math.cos(u);\n                y = (radius + tube * Math.cos(v)) * Math.sin(u);\n                z = tube * Math.sin(v);\n\n                positions.push(x + centerX);\n                positions.push(y + centerY);\n                positions.push(z + centerZ);\n\n                uvs.push(1 - (i / radialSegments));\n                uvs.push((j / tubeSegments));\n\n                vec = math.normalizeVec3(math.subVec3([x, y, z], [centerX, centerY, centerZ], []), []);\n\n                normals.push(vec[0]);\n                normals.push(vec[1]);\n                normals.push(vec[2]);\n            }\n        }\n\n        let a;\n        let b;\n        let c;\n        let d;\n\n        for (j = 1; j <= tubeSegments; j++) {\n            for (i = 1; i <= radialSegments; i++) {\n\n                a = (radialSegments + 1) * j + i - 1;\n                b = (radialSegments + 1) * (j - 1) + i - 1;\n                c = (radialSegments + 1) * (j - 1) + i;\n                d = (radialSegments + 1) * j + i;\n\n                indices.push(a);\n                indices.push(b);\n                indices.push(c);\n\n                indices.push(c);\n                indices.push(d);\n                indices.push(a);\n            }\n        }\n\n        super(owner, utils.apply(cfg, {\n            positions: positions,\n            normals: normals,\n            uv: uvs,\n            indices: indices\n        }));\n    }\n}\n\nexport {TorusGeometry};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/geometry/TorusGeometry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1223,
    "kind": "class",
    "name": "TorusGeometry",
    "memberof": "scene/geometry/TorusGeometry.js",
    "static": true,
    "longname": "scene/geometry/TorusGeometry.js~TorusGeometry",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/geometry/TorusGeometry.js",
    "importStyle": "{TorusGeometry}",
    "description": "Defines a toroidal shape for one or more {@link Mesh}es.\n\n## Usage\nCreating a {@link Mesh} with a TorusGeometry and a {@link PhongMaterial} with diffuse {@link Texture}:\n\n````javascript\nnew Mesh(myViewer.scene, {\n    geometry: new TorusGeometry(myViewer.scene, {\n         center: [0,0,0],\n         radius: 1.0,\n         tube: 0.5,\n         radialSegments: 32,\n         tubeSegments: 24,\n         arc: Math.PI * 2.0\n     }),\n     material: new PhongMaterial(myViewer.scene, {\n         diffuseMap: new Texture(myViewer.scene, {\n             src: \"textures/diffuse/uvGrid2.jpg\"\n         })\n     })\n });\n````",
    "lineNumber": 29,
    "interface": false,
    "extends": [
      "scene/geometry/Geometry.js~Geometry"
    ]
  },
  {
    "__docId__": 1224,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/geometry/TorusGeometry.js~TorusGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/TorusGeometry.js~TorusGeometry#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "Configs"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent {@link Scene},\ngenerated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "String:Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.meta",
        "description": "Optional map of user-defined metadata to attach to this TorusGeometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"triangles\"",
        "defaultRaw": "triangles",
        "name": "cfg.primitive",
        "description": "{String} The primitive type. Accepted values for a TorusGeometry are 'points', 'lines' and 'triangles'."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.center",
        "description": "{Float32Array} 3D point indicating the center position of the TorusGeometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.radius",
        "description": "{Number} The overall radius of the TorusGeometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.3",
        "defaultRaw": 0.3,
        "name": "cfg.tube",
        "description": "{Number} The tube radius of the TorusGeometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "32",
        "defaultRaw": 32,
        "name": "cfg.radialSegments",
        "description": "{Number} The number of radial segments that make up the TorusGeometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "24",
        "defaultRaw": 24,
        "name": "cfg.tubeSegments",
        "description": "{Number} The number of tubular segments that make up the TorusGeometry."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "Math.PI / 2.0",
        "defaultRaw": "Math.PI / 2.0",
        "name": "cfg.arc",
        "description": "{Number} The length of the TorusGeometry's arc in radians, where Math.PI*2 is a closed torus."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1225,
    "kind": "file",
    "name": "scene/geometry/VectorTextGeometry.js",
    "content": "import {Geometry} from './Geometry.js';\nimport {utils} from \"../utils.js\";\n\n\nvar letters;\n\n/**\n * @desc Defines a wireframe vector text shape for one or more {@link Mesh}es.\n *\n * ## Usage\n * Creating a {@link Mesh} with a VectorTextGeometry and a {@link PhongMaterial}:\n *\n * ````javascript\n * new Mesh(myViewer.scene, {\n *     geometry: new VectorTextGeometry(myViewer.scene, {\n *          origin: [0,0,0],\n *          text: \"On the other side of the screen, it all looks so easy!\"\n *      }),\n *      material: new PhongMaterial(myViewer.scene, {\n *          diffuse: [0.3, 1.0, 0.3]\n *      })\n * });\n ````\n */\n class VectorTextGeometry extends Geometry {\n\n    /**\n     * @constructor\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg={}) {\n\n        if (!letters) {\n            letters = buildStrokeData();\n        }\n\n        var origin = cfg.origin || [0, 0, 0];\n        var xOrigin = origin[0];\n        var yOrigin = origin[1];\n        var zOrigin = origin[2];\n        var size = cfg.size || 1;\n\n        var positions = [];\n        var indices = [];\n        var text = cfg.text;\n        if (utils.isNumeric(text)) {\n            text = \"\" + text;\n        }\n        var lines = (text || \"\").split(\"\\n\");\n        var countVerts = 0;\n        var y = 0;\n        var x;\n        var str;\n        var len;\n        var c;\n        var mag = 1.0 / 25.0;\n        var penUp;\n        var p1;\n        var p2;\n        var needLine;\n        var pointsLen;\n        var a;\n\n        for (var iLine = 0; iLine < lines.length; iLine++) {\n\n            x = 0;\n            str = lines[iLine];\n            len = str.length;\n\n            for (var i = 0; i < len; i++) {\n\n                c = letters[str.charAt(i)];\n\n                if (c === '\\n') {\n                    //alert(\"newline\");\n                }\n\n                if (!c) {\n                    continue;\n                }\n\n                penUp = 1;\n                p1 = -1;\n                p2 = -1;\n                needLine = false;\n\n                pointsLen = c.points.length;\n\n                for (var j = 0; j < pointsLen; j++) {\n                    a = c.points[j];\n\n                    if (a[0] === -1 && a[1] === -1) {\n                        penUp = 1;\n                        needLine = false;\n                        continue;\n                    }\n\n                    positions.push((x + (a[0] * size) * mag) + xOrigin);\n                    positions.push((y + (a[1] * size) * mag) + yOrigin);\n                    positions.push(0 + zOrigin);\n\n                    if (p1 === -1) {\n                        p1 = countVerts;\n                    } else if (p2 === -1) {\n                        p2 = countVerts;\n                    } else {\n                        p1 = p2;\n                        p2 = countVerts;\n                    }\n                    countVerts++;\n\n                    if (penUp) {\n                        penUp = false;\n\n                    } else {\n                        indices.push(p1);\n                        indices.push(p2);\n                    }\n\n                    needLine = true;\n                }\n                x += c.width * mag * size;\n\n            }\n            y -= 35 * mag * size;\n        }\n\n        super(owner, utils.apply(cfg, {\n            primitive: \"lines\",\n            positions: positions,\n            indices: indices\n        }));\n    }\n}\n\nfunction buildStrokeData() {\n    return {\n        ' ': {width: 16, points: []},\n        '!': {\n            width: 10, points: [\n                [5, 21],\n                [5, 7],\n                [-1, -1],\n                [5, 2],\n                [4, 1],\n                [5, 0],\n                [6, 1],\n                [5, 2]\n            ]\n        },\n        '\"': {\n            width: 16, points: [\n                [4, 21],\n                [4, 14],\n                [-1, -1],\n                [12, 21],\n                [12, 14]\n            ]\n        },\n        '#': {\n            width: 21, points: [\n                [11, 25],\n                [4, -7],\n                [-1, -1],\n                [17, 25],\n                [10, -7],\n                [-1, -1],\n                [4, 12],\n                [18, 12],\n                [-1, -1],\n                [3, 6],\n                [17, 6]\n            ]\n        },\n        '$': {\n            width: 20, points: [\n                [8, 25],\n                [8, -4],\n                [-1, -1],\n                [12, 25],\n                [12, -4],\n                [-1, -1],\n                [17, 18],\n                [15, 20],\n                [12, 21],\n                [8, 21],\n                [5, 20],\n                [3, 18],\n                [3, 16],\n                [4, 14],\n                [5, 13],\n                [7, 12],\n                [13, 10],\n                [15, 9],\n                [16, 8],\n                [17, 6],\n                [17, 3],\n                [15, 1],\n                [12, 0],\n                [8, 0],\n                [5, 1],\n                [3, 3]\n            ]\n        },\n        '%': {\n            width: 24, points: [\n                [21, 21],\n                [3, 0],\n                [-1, -1],\n                [8, 21],\n                [10, 19],\n                [10, 17],\n                [9, 15],\n                [7, 14],\n                [5, 14],\n                [3, 16],\n                [3, 18],\n                [4, 20],\n                [6, 21],\n                [8, 21],\n                [10, 20],\n                [13, 19],\n                [16, 19],\n                [19, 20],\n                [21, 21],\n                [-1, -1],\n                [17, 7],\n                [15, 6],\n                [14, 4],\n                [14, 2],\n                [16, 0],\n                [18, 0],\n                [20, 1],\n                [21, 3],\n                [21, 5],\n                [19, 7],\n                [17, 7]\n            ]\n        },\n        '&': {\n            width: 26, points: [\n                [23, 12],\n                [23, 13],\n                [22, 14],\n                [21, 14],\n                [20, 13],\n                [19, 11],\n                [17, 6],\n                [15, 3],\n                [13, 1],\n                [11, 0],\n                [7, 0],\n                [5, 1],\n                [4, 2],\n                [3, 4],\n                [3, 6],\n                [4, 8],\n                [5, 9],\n                [12, 13],\n                [13, 14],\n                [14, 16],\n                [14, 18],\n                [13, 20],\n                [11, 21],\n                [9, 20],\n                [8, 18],\n                [8, 16],\n                [9, 13],\n                [11, 10],\n                [16, 3],\n                [18, 1],\n                [20, 0],\n                [22, 0],\n                [23, 1],\n                [23, 2]\n            ]\n        },\n        '\\'': {\n            width: 10, points: [\n                [5, 19],\n                [4, 20],\n                [5, 21],\n                [6, 20],\n                [6, 18],\n                [5, 16],\n                [4, 15]\n            ]\n        },\n        '(': {\n            width: 14, points: [\n                [11, 25],\n                [9, 23],\n                [7, 20],\n                [5, 16],\n                [4, 11],\n                [4, 7],\n                [5, 2],\n                [7, -2],\n                [9, -5],\n                [11, -7]\n            ]\n        },\n        ')': {\n            width: 14, points: [\n                [3, 25],\n                [5, 23],\n                [7, 20],\n                [9, 16],\n                [10, 11],\n                [10, 7],\n                [9, 2],\n                [7, -2],\n                [5, -5],\n                [3, -7]\n            ]\n        },\n        '*': {\n            width: 16, points: [\n                [8, 21],\n                [8, 9],\n                [-1, -1],\n                [3, 18],\n                [13, 12],\n                [-1, -1],\n                [13, 18],\n                [3, 12]\n            ]\n        },\n        '+': {\n            width: 26, points: [\n                [13, 18],\n                [13, 0],\n                [-1, -1],\n                [4, 9],\n                [22, 9]\n            ]\n        },\n        ',': {\n            width: 10, points: [\n                [6, 1],\n                [5, 0],\n                [4, 1],\n                [5, 2],\n                [6, 1],\n                [6, -1],\n                [5, -3],\n                [4, -4]\n            ]\n        },\n        '-': {\n            width: 26, points: [\n                [4, 9],\n                [22, 9]\n            ]\n        },\n        '.': {\n            width: 10, points: [\n                [5, 2],\n                [4, 1],\n                [5, 0],\n                [6, 1],\n                [5, 2]\n            ]\n        },\n        '/': {\n            width: 22, points: [\n                [20, 25],\n                [2, -7]\n            ]\n        },\n        '0': {\n            width: 20, points: [\n                [9, 21],\n                [6, 20],\n                [4, 17],\n                [3, 12],\n                [3, 9],\n                [4, 4],\n                [6, 1],\n                [9, 0],\n                [11, 0],\n                [14, 1],\n                [16, 4],\n                [17, 9],\n                [17, 12],\n                [16, 17],\n                [14, 20],\n                [11, 21],\n                [9, 21]\n            ]\n        },\n        '1': {\n            width: 20, points: [\n                [6, 17],\n                [8, 18],\n                [11, 21],\n                [11, 0]\n            ]\n        },\n        '2': {\n            width: 20, points: [\n                [4, 16],\n                [4, 17],\n                [5, 19],\n                [6, 20],\n                [8, 21],\n                [12, 21],\n                [14, 20],\n                [15, 19],\n                [16, 17],\n                [16, 15],\n                [15, 13],\n                [13, 10],\n                [3, 0],\n                [17, 0]\n            ]\n        },\n        '3': {\n            width: 20, points: [\n                [5, 21],\n                [16, 21],\n                [10, 13],\n                [13, 13],\n                [15, 12],\n                [16, 11],\n                [17, 8],\n                [17, 6],\n                [16, 3],\n                [14, 1],\n                [11, 0],\n                [8, 0],\n                [5, 1],\n                [4, 2],\n                [3, 4]\n            ]\n        },\n        '4': {\n            width: 20, points: [\n                [13, 21],\n                [3, 7],\n                [18, 7],\n                [-1, -1],\n                [13, 21],\n                [13, 0]\n            ]\n        },\n        '5': {\n            width: 20, points: [\n                [15, 21],\n                [5, 21],\n                [4, 12],\n                [5, 13],\n                [8, 14],\n                [11, 14],\n                [14, 13],\n                [16, 11],\n                [17, 8],\n                [17, 6],\n                [16, 3],\n                [14, 1],\n                [11, 0],\n                [8, 0],\n                [5, 1],\n                [4, 2],\n                [3, 4]\n            ]\n        },\n        '6': {\n            width: 20, points: [\n                [16, 18],\n                [15, 20],\n                [12, 21],\n                [10, 21],\n                [7, 20],\n                [5, 17],\n                [4, 12],\n                [4, 7],\n                [5, 3],\n                [7, 1],\n                [10, 0],\n                [11, 0],\n                [14, 1],\n                [16, 3],\n                [17, 6],\n                [17, 7],\n                [16, 10],\n                [14, 12],\n                [11, 13],\n                [10, 13],\n                [7, 12],\n                [5, 10],\n                [4, 7]\n            ]\n        },\n        '7': {\n            width: 20, points: [\n                [17, 21],\n                [7, 0],\n                [-1, -1],\n                [3, 21],\n                [17, 21]\n            ]\n        },\n        '8': {\n            width: 20, points: [\n                [8, 21],\n                [5, 20],\n                [4, 18],\n                [4, 16],\n                [5, 14],\n                [7, 13],\n                [11, 12],\n                [14, 11],\n                [16, 9],\n                [17, 7],\n                [17, 4],\n                [16, 2],\n                [15, 1],\n                [12, 0],\n                [8, 0],\n                [5, 1],\n                [4, 2],\n                [3, 4],\n                [3, 7],\n                [4, 9],\n                [6, 11],\n                [9, 12],\n                [13, 13],\n                [15, 14],\n                [16, 16],\n                [16, 18],\n                [15, 20],\n                [12, 21],\n                [8, 21]\n            ]\n        },\n        '9': {\n            width: 20, points: [\n                [16, 14],\n                [15, 11],\n                [13, 9],\n                [10, 8],\n                [9, 8],\n                [6, 9],\n                [4, 11],\n                [3, 14],\n                [3, 15],\n                [4, 18],\n                [6, 20],\n                [9, 21],\n                [10, 21],\n                [13, 20],\n                [15, 18],\n                [16, 14],\n                [16, 9],\n                [15, 4],\n                [13, 1],\n                [10, 0],\n                [8, 0],\n                [5, 1],\n                [4, 3]\n            ]\n        },\n        ':': {\n            width: 10, points: [\n                [5, 14],\n                [4, 13],\n                [5, 12],\n                [6, 13],\n                [5, 14],\n                [-1, -1],\n                [5, 2],\n                [4, 1],\n                [5, 0],\n                [6, 1],\n                [5, 2]\n            ]\n        },\n        ';': {\n            width: 10, points: [\n                [5, 14],\n                [4, 13],\n                [5, 12],\n                [6, 13],\n                [5, 14],\n                [-1, -1],\n                [6, 1],\n                [5, 0],\n                [4, 1],\n                [5, 2],\n                [6, 1],\n                [6, -1],\n                [5, -3],\n                [4, -4]\n            ]\n        },\n        '<': {\n            width: 24, points: [\n                [20, 18],\n                [4, 9],\n                [20, 0]\n            ]\n        },\n        '=': {\n            width: 26, points: [\n                [4, 12],\n                [22, 12],\n                [-1, -1],\n                [4, 6],\n                [22, 6]\n            ]\n        },\n        '>': {\n            width: 24, points: [\n                [4, 18],\n                [20, 9],\n                [4, 0]\n            ]\n        },\n        '?': {\n            width: 18, points: [\n                [3, 16],\n                [3, 17],\n                [4, 19],\n                [5, 20],\n                [7, 21],\n                [11, 21],\n                [13, 20],\n                [14, 19],\n                [15, 17],\n                [15, 15],\n                [14, 13],\n                [13, 12],\n                [9, 10],\n                [9, 7],\n                [-1, -1],\n                [9, 2],\n                [8, 1],\n                [9, 0],\n                [10, 1],\n                [9, 2]\n            ]\n        },\n        '@': {\n            width: 27, points: [\n                [18, 13],\n                [17, 15],\n                [15, 16],\n                [12, 16],\n                [10, 15],\n                [9, 14],\n                [8, 11],\n                [8, 8],\n                [9, 6],\n                [11, 5],\n                [14, 5],\n                [16, 6],\n                [17, 8],\n                [-1, -1],\n                [12, 16],\n                [10, 14],\n                [9, 11],\n                [9, 8],\n                [10, 6],\n                [11, 5],\n                [-1, -1],\n                [18, 16],\n                [17, 8],\n                [17, 6],\n                [19, 5],\n                [21, 5],\n                [23, 7],\n                [24, 10],\n                [24, 12],\n                [23, 15],\n                [22, 17],\n                [20, 19],\n                [18, 20],\n                [15, 21],\n                [12, 21],\n                [9, 20],\n                [7, 19],\n                [5, 17],\n                [4, 15],\n                [3, 12],\n                [3, 9],\n                [4, 6],\n                [5, 4],\n                [7, 2],\n                [9, 1],\n                [12, 0],\n                [15, 0],\n                [18, 1],\n                [20, 2],\n                [21, 3],\n                [-1, -1],\n                [19, 16],\n                [18, 8],\n                [18, 6],\n                [19, 5]\n            ]\n        },\n        'A': {\n            width: 18, points: [\n                [9, 21],\n                [1, 0],\n                [-1, -1],\n                [9, 21],\n                [17, 0],\n                [-1, -1],\n                [4, 7],\n                [14, 7]\n            ]\n        },\n        'B': {\n            width: 21, points: [\n                [4, 21],\n                [4, 0],\n                [-1, -1],\n                [4, 21],\n                [13, 21],\n                [16, 20],\n                [17, 19],\n                [18, 17],\n                [18, 15],\n                [17, 13],\n                [16, 12],\n                [13, 11],\n                [-1, -1],\n                [4, 11],\n                [13, 11],\n                [16, 10],\n                [17, 9],\n                [18, 7],\n                [18, 4],\n                [17, 2],\n                [16, 1],\n                [13, 0],\n                [4, 0]\n            ]\n        },\n        'C': {\n            width: 21, points: [\n                [18, 16],\n                [17, 18],\n                [15, 20],\n                [13, 21],\n                [9, 21],\n                [7, 20],\n                [5, 18],\n                [4, 16],\n                [3, 13],\n                [3, 8],\n                [4, 5],\n                [5, 3],\n                [7, 1],\n                [9, 0],\n                [13, 0],\n                [15, 1],\n                [17, 3],\n                [18, 5]\n            ]\n        },\n        'D': {\n            width: 21, points: [\n                [4, 21],\n                [4, 0],\n                [-1, -1],\n                [4, 21],\n                [11, 21],\n                [14, 20],\n                [16, 18],\n                [17, 16],\n                [18, 13],\n                [18, 8],\n                [17, 5],\n                [16, 3],\n                [14, 1],\n                [11, 0],\n                [4, 0]\n            ]\n        },\n        'E': {\n            width: 19, points: [\n                [4, 21],\n                [4, 0],\n                [-1, -1],\n                [4, 21],\n                [17, 21],\n                [-1, -1],\n                [4, 11],\n                [12, 11],\n                [-1, -1],\n                [4, 0],\n                [17, 0]\n            ]\n        },\n        'F': {\n            width: 18, points: [\n                [4, 21],\n                [4, 0],\n                [-1, -1],\n                [4, 21],\n                [17, 21],\n                [-1, -1],\n                [4, 11],\n                [12, 11]\n            ]\n        },\n        'G': {\n            width: 21, points: [\n                [18, 16],\n                [17, 18],\n                [15, 20],\n                [13, 21],\n                [9, 21],\n                [7, 20],\n                [5, 18],\n                [4, 16],\n                [3, 13],\n                [3, 8],\n                [4, 5],\n                [5, 3],\n                [7, 1],\n                [9, 0],\n                [13, 0],\n                [15, 1],\n                [17, 3],\n                [18, 5],\n                [18, 8],\n                [-1, -1],\n                [13, 8],\n                [18, 8]\n            ]\n        },\n        'H': {\n            width: 22, points: [\n                [4, 21],\n                [4, 0],\n                [-1, -1],\n                [18, 21],\n                [18, 0],\n                [-1, -1],\n                [4, 11],\n                [18, 11]\n            ]\n        },\n        'I': {\n            width: 8, points: [\n                [4, 21],\n                [4, 0]\n            ]\n        },\n        'J': {\n            width: 16, points: [\n                [12, 21],\n                [12, 5],\n                [11, 2],\n                [10, 1],\n                [8, 0],\n                [6, 0],\n                [4, 1],\n                [3, 2],\n                [2, 5],\n                [2, 7]\n            ]\n        },\n        'K': {\n            width: 21, points: [\n                [4, 21],\n                [4, 0],\n                [-1, -1],\n                [18, 21],\n                [4, 7],\n                [-1, -1],\n                [9, 12],\n                [18, 0]\n            ]\n        },\n        'L': {\n            width: 17, points: [\n                [4, 21],\n                [4, 0],\n                [-1, -1],\n                [4, 0],\n                [16, 0]\n            ]\n        },\n        'M': {\n            width: 24, points: [\n                [4, 21],\n                [4, 0],\n                [-1, -1],\n                [4, 21],\n                [12, 0],\n                [-1, -1],\n                [20, 21],\n                [12, 0],\n                [-1, -1],\n                [20, 21],\n                [20, 0]\n            ]\n        },\n        'N': {\n            width: 22, points: [\n                [4, 21],\n                [4, 0],\n                [-1, -1],\n                [4, 21],\n                [18, 0],\n                [-1, -1],\n                [18, 21],\n                [18, 0]\n            ]\n        },\n        'O': {\n            width: 22, points: [\n                [9, 21],\n                [7, 20],\n                [5, 18],\n                [4, 16],\n                [3, 13],\n                [3, 8],\n                [4, 5],\n                [5, 3],\n                [7, 1],\n                [9, 0],\n                [13, 0],\n                [15, 1],\n                [17, 3],\n                [18, 5],\n                [19, 8],\n                [19, 13],\n                [18, 16],\n                [17, 18],\n                [15, 20],\n                [13, 21],\n                [9, 21]\n            ]\n        },\n        'P': {\n            width: 21, points: [\n                [4, 21],\n                [4, 0],\n                [-1, -1],\n                [4, 21],\n                [13, 21],\n                [16, 20],\n                [17, 19],\n                [18, 17],\n                [18, 14],\n                [17, 12],\n                [16, 11],\n                [13, 10],\n                [4, 10]\n            ]\n        },\n        'Q': {\n            width: 22, points: [\n                [9, 21],\n                [7, 20],\n                [5, 18],\n                [4, 16],\n                [3, 13],\n                [3, 8],\n                [4, 5],\n                [5, 3],\n                [7, 1],\n                [9, 0],\n                [13, 0],\n                [15, 1],\n                [17, 3],\n                [18, 5],\n                [19, 8],\n                [19, 13],\n                [18, 16],\n                [17, 18],\n                [15, 20],\n                [13, 21],\n                [9, 21],\n                [-1, -1],\n                [12, 4],\n                [18, -2]\n            ]\n        },\n        'R': {\n            width: 21, points: [\n                [4, 21],\n                [4, 0],\n                [-1, -1],\n                [4, 21],\n                [13, 21],\n                [16, 20],\n                [17, 19],\n                [18, 17],\n                [18, 15],\n                [17, 13],\n                [16, 12],\n                [13, 11],\n                [4, 11],\n                [-1, -1],\n                [11, 11],\n                [18, 0]\n            ]\n        },\n        'S': {\n            width: 20, points: [\n                [17, 18],\n                [15, 20],\n                [12, 21],\n                [8, 21],\n                [5, 20],\n                [3, 18],\n                [3, 16],\n                [4, 14],\n                [5, 13],\n                [7, 12],\n                [13, 10],\n                [15, 9],\n                [16, 8],\n                [17, 6],\n                [17, 3],\n                [15, 1],\n                [12, 0],\n                [8, 0],\n                [5, 1],\n                [3, 3]\n            ]\n        },\n        'T': {\n            width: 16, points: [\n                [8, 21],\n                [8, 0],\n                [-1, -1],\n                [1, 21],\n                [15, 21]\n            ]\n        },\n        'U': {\n            width: 22, points: [\n                [4, 21],\n                [4, 6],\n                [5, 3],\n                [7, 1],\n                [10, 0],\n                [12, 0],\n                [15, 1],\n                [17, 3],\n                [18, 6],\n                [18, 21]\n            ]\n        },\n        'V': {\n            width: 18, points: [\n                [1, 21],\n                [9, 0],\n                [-1, -1],\n                [17, 21],\n                [9, 0]\n            ]\n        },\n        'W': {\n            width: 24, points: [\n                [2, 21],\n                [7, 0],\n                [-1, -1],\n                [12, 21],\n                [7, 0],\n                [-1, -1],\n                [12, 21],\n                [17, 0],\n                [-1, -1],\n                [22, 21],\n                [17, 0]\n            ]\n        },\n        'X': {\n            width: 20, points: [\n                [3, 21],\n                [17, 0],\n                [-1, -1],\n                [17, 21],\n                [3, 0]\n            ]\n        },\n        'Y': {\n            width: 18, points: [\n                [1, 21],\n                [9, 11],\n                [9, 0],\n                [-1, -1],\n                [17, 21],\n                [9, 11]\n            ]\n        },\n        'Z': {\n            width: 20, points: [\n                [17, 21],\n                [3, 0],\n                [-1, -1],\n                [3, 21],\n                [17, 21],\n                [-1, -1],\n                [3, 0],\n                [17, 0]\n            ]\n        },\n        '[': {\n            width: 14, points: [\n                [4, 25],\n                [4, -7],\n                [-1, -1],\n                [5, 25],\n                [5, -7],\n                [-1, -1],\n                [4, 25],\n                [11, 25],\n                [-1, -1],\n                [4, -7],\n                [11, -7]\n            ]\n        },\n        '\\\\': {\n            width: 14, points: [\n                [0, 21],\n                [14, -3]\n            ]\n        },\n        ']': {\n            width: 14, points: [\n                [9, 25],\n                [9, -7],\n                [-1, -1],\n                [10, 25],\n                [10, -7],\n                [-1, -1],\n                [3, 25],\n                [10, 25],\n                [-1, -1],\n                [3, -7],\n                [10, -7]\n            ]\n        },\n        '^': {\n            width: 16, points: [\n                [6, 15],\n                [8, 18],\n                [10, 15],\n                [-1, -1],\n                [3, 12],\n                [8, 17],\n                [13, 12],\n                [-1, -1],\n                [8, 17],\n                [8, 0]\n            ]\n        },\n        '_': {\n            width: 16, points: [\n                [0, -2],\n                [16, -2]\n            ]\n        },\n        '`': {\n            width: 10, points: [\n                [6, 21],\n                [5, 20],\n                [4, 18],\n                [4, 16],\n                [5, 15],\n                [6, 16],\n                [5, 17]\n            ]\n        },\n        'a': {\n            width: 19, points: [\n                [15, 14],\n                [15, 0],\n                [-1, -1],\n                [15, 11],\n                [13, 13],\n                [11, 14],\n                [8, 14],\n                [6, 13],\n                [4, 11],\n                [3, 8],\n                [3, 6],\n                [4, 3],\n                [6, 1],\n                [8, 0],\n                [11, 0],\n                [13, 1],\n                [15, 3]\n            ]\n        },\n        'b': {\n            width: 19, points: [\n                [4, 21],\n                [4, 0],\n                [-1, -1],\n                [4, 11],\n                [6, 13],\n                [8, 14],\n                [11, 14],\n                [13, 13],\n                [15, 11],\n                [16, 8],\n                [16, 6],\n                [15, 3],\n                [13, 1],\n                [11, 0],\n                [8, 0],\n                [6, 1],\n                [4, 3]\n            ]\n        },\n        'c': {\n            width: 18, points: [\n                [15, 11],\n                [13, 13],\n                [11, 14],\n                [8, 14],\n                [6, 13],\n                [4, 11],\n                [3, 8],\n                [3, 6],\n                [4, 3],\n                [6, 1],\n                [8, 0],\n                [11, 0],\n                [13, 1],\n                [15, 3]\n            ]\n        },\n        'd': {\n            width: 19, points: [\n                [15, 21],\n                [15, 0],\n                [-1, -1],\n                [15, 11],\n                [13, 13],\n                [11, 14],\n                [8, 14],\n                [6, 13],\n                [4, 11],\n                [3, 8],\n                [3, 6],\n                [4, 3],\n                [6, 1],\n                [8, 0],\n                [11, 0],\n                [13, 1],\n                [15, 3]\n            ]\n        },\n        'e': {\n            width: 18, points: [\n                [3, 8],\n                [15, 8],\n                [15, 10],\n                [14, 12],\n                [13, 13],\n                [11, 14],\n                [8, 14],\n                [6, 13],\n                [4, 11],\n                [3, 8],\n                [3, 6],\n                [4, 3],\n                [6, 1],\n                [8, 0],\n                [11, 0],\n                [13, 1],\n                [15, 3]\n            ]\n        },\n        'f': {\n            width: 12, points: [\n                [10, 21],\n                [8, 21],\n                [6, 20],\n                [5, 17],\n                [5, 0],\n                [-1, -1],\n                [2, 14],\n                [9, 14]\n            ]\n        },\n        'g': {\n            width: 19, points: [\n                [15, 14],\n                [15, -2],\n                [14, -5],\n                [13, -6],\n                [11, -7],\n                [8, -7],\n                [6, -6],\n                [-1, -1],\n                [15, 11],\n                [13, 13],\n                [11, 14],\n                [8, 14],\n                [6, 13],\n                [4, 11],\n                [3, 8],\n                [3, 6],\n                [4, 3],\n                [6, 1],\n                [8, 0],\n                [11, 0],\n                [13, 1],\n                [15, 3]\n            ]\n        },\n        'h': {\n            width: 19, points: [\n                [4, 21],\n                [4, 0],\n                [-1, -1],\n                [4, 10],\n                [7, 13],\n                [9, 14],\n                [12, 14],\n                [14, 13],\n                [15, 10],\n                [15, 0]\n            ]\n        },\n        'i': {\n            width: 8, points: [\n                [3, 21],\n                [4, 20],\n                [5, 21],\n                [4, 22],\n                [3, 21],\n                [-1, -1],\n                [4, 14],\n                [4, 0]\n            ]\n        },\n        'j': {\n            width: 10, points: [\n                [5, 21],\n                [6, 20],\n                [7, 21],\n                [6, 22],\n                [5, 21],\n                [-1, -1],\n                [6, 14],\n                [6, -3],\n                [5, -6],\n                [3, -7],\n                [1, -7]\n            ]\n        },\n        'k': {\n            width: 17, points: [\n                [4, 21],\n                [4, 0],\n                [-1, -1],\n                [14, 14],\n                [4, 4],\n                [-1, -1],\n                [8, 8],\n                [15, 0]\n            ]\n        },\n        'l': {\n            width: 8, points: [\n                [4, 21],\n                [4, 0]\n            ]\n        },\n        'm': {\n            width: 30, points: [\n                [4, 14],\n                [4, 0],\n                [-1, -1],\n                [4, 10],\n                [7, 13],\n                [9, 14],\n                [12, 14],\n                [14, 13],\n                [15, 10],\n                [15, 0],\n                [-1, -1],\n                [15, 10],\n                [18, 13],\n                [20, 14],\n                [23, 14],\n                [25, 13],\n                [26, 10],\n                [26, 0]\n            ]\n        },\n        'n': {\n            width: 19, points: [\n                [4, 14],\n                [4, 0],\n                [-1, -1],\n                [4, 10],\n                [7, 13],\n                [9, 14],\n                [12, 14],\n                [14, 13],\n                [15, 10],\n                [15, 0]\n            ]\n        },\n        'o': {\n            width: 19, points: [\n                [8, 14],\n                [6, 13],\n                [4, 11],\n                [3, 8],\n                [3, 6],\n                [4, 3],\n                [6, 1],\n                [8, 0],\n                [11, 0],\n                [13, 1],\n                [15, 3],\n                [16, 6],\n                [16, 8],\n                [15, 11],\n                [13, 13],\n                [11, 14],\n                [8, 14]\n            ]\n        },\n        'p': {\n            width: 19, points: [\n                [4, 14],\n                [4, -7],\n                [-1, -1],\n                [4, 11],\n                [6, 13],\n                [8, 14],\n                [11, 14],\n                [13, 13],\n                [15, 11],\n                [16, 8],\n                [16, 6],\n                [15, 3],\n                [13, 1],\n                [11, 0],\n                [8, 0],\n                [6, 1],\n                [4, 3]\n            ]\n        },\n        'q': {\n            width: 19, points: [\n                [15, 14],\n                [15, -7],\n                [-1, -1],\n                [15, 11],\n                [13, 13],\n                [11, 14],\n                [8, 14],\n                [6, 13],\n                [4, 11],\n                [3, 8],\n                [3, 6],\n                [4, 3],\n                [6, 1],\n                [8, 0],\n                [11, 0],\n                [13, 1],\n                [15, 3]\n            ]\n        },\n        'r': {\n            width: 13, points: [\n                [4, 14],\n                [4, 0],\n                [-1, -1],\n                [4, 8],\n                [5, 11],\n                [7, 13],\n                [9, 14],\n                [12, 14]\n            ]\n        },\n        's': {\n            width: 17, points: [\n                [14, 11],\n                [13, 13],\n                [10, 14],\n                [7, 14],\n                [4, 13],\n                [3, 11],\n                [4, 9],\n                [6, 8],\n                [11, 7],\n                [13, 6],\n                [14, 4],\n                [14, 3],\n                [13, 1],\n                [10, 0],\n                [7, 0],\n                [4, 1],\n                [3, 3]\n            ]\n        },\n        't': {\n            width: 12, points: [\n                [5, 21],\n                [5, 4],\n                [6, 1],\n                [8, 0],\n                [10, 0],\n                [-1, -1],\n                [2, 14],\n                [9, 14]\n            ]\n        },\n        'u': {\n            width: 19, points: [\n                [4, 14],\n                [4, 4],\n                [5, 1],\n                [7, 0],\n                [10, 0],\n                [12, 1],\n                [15, 4],\n                [-1, -1],\n                [15, 14],\n                [15, 0]\n            ]\n        },\n        'v': {\n            width: 16, points: [\n                [2, 14],\n                [8, 0],\n                [-1, -1],\n                [14, 14],\n                [8, 0]\n            ]\n        },\n        'w': {\n            width: 22, points: [\n                [3, 14],\n                [7, 0],\n                [-1, -1],\n                [11, 14],\n                [7, 0],\n                [-1, -1],\n                [11, 14],\n                [15, 0],\n                [-1, -1],\n                [19, 14],\n                [15, 0]\n            ]\n        },\n        'x': {\n            width: 17, points: [\n                [3, 14],\n                [14, 0],\n                [-1, -1],\n                [14, 14],\n                [3, 0]\n            ]\n        },\n        'y': {\n            width: 16, points: [\n                [2, 14],\n                [8, 0],\n                [-1, -1],\n                [14, 14],\n                [8, 0],\n                [6, -4],\n                [4, -6],\n                [2, -7],\n                [1, -7]\n            ]\n        },\n        'z': {\n            width: 17, points: [\n                [14, 14],\n                [3, 0],\n                [-1, -1],\n                [3, 14],\n                [14, 14],\n                [-1, -1],\n                [3, 0],\n                [14, 0]\n            ]\n        },\n        '{': {\n            width: 14, points: [\n                [9, 25],\n                [7, 24],\n                [6, 23],\n                [5, 21],\n                [5, 19],\n                [6, 17],\n                [7, 16],\n                [8, 14],\n                [8, 12],\n                [6, 10],\n                [-1, -1],\n                [7, 24],\n                [6, 22],\n                [6, 20],\n                [7, 18],\n                [8, 17],\n                [9, 15],\n                [9, 13],\n                [8, 11],\n                [4, 9],\n                [8, 7],\n                [9, 5],\n                [9, 3],\n                [8, 1],\n                [7, 0],\n                [6, -2],\n                [6, -4],\n                [7, -6],\n                [-1, -1],\n                [6, 8],\n                [8, 6],\n                [8, 4],\n                [7, 2],\n                [6, 1],\n                [5, -1],\n                [5, -3],\n                [6, -5],\n                [7, -6],\n                [9, -7]\n            ]\n        },\n        '|': {\n            width: 8, points: [\n                [4, 25],\n                [4, -7]\n            ]\n        },\n        '}': {\n            width: 14, points: [\n                [5, 25],\n                [7, 24],\n                [8, 23],\n                [9, 21],\n                [9, 19],\n                [8, 17],\n                [7, 16],\n                [6, 14],\n                [6, 12],\n                [8, 10],\n                [-1, -1],\n                [7, 24],\n                [8, 22],\n                [8, 20],\n                [7, 18],\n                [6, 17],\n                [5, 15],\n                [5, 13],\n                [6, 11],\n                [10, 9],\n                [6, 7],\n                [5, 5],\n                [5, 3],\n                [6, 1],\n                [7, 0],\n                [8, -2],\n                [8, -4],\n                [7, -6],\n                [-1, -1],\n                [8, 8],\n                [6, 6],\n                [6, 4],\n                [7, 2],\n                [8, 1],\n                [9, -1],\n                [9, -3],\n                [8, -5],\n                [7, -6],\n                [5, -7]\n            ]\n        },\n        '~': {\n            width: 24, points: [\n                [3, 6],\n                [3, 8],\n                [4, 11],\n                [6, 12],\n                [8, 12],\n                [10, 11],\n                [14, 8],\n                [16, 7],\n                [18, 7],\n                [20, 8],\n                [21, 10],\n                [-1, -1],\n                [3, 8],\n                [4, 10],\n                [6, 11],\n                [8, 11],\n                [10, 10],\n                [14, 7],\n                [16, 6],\n                [18, 6],\n                [20, 7],\n                [21, 10],\n                [21, 12]\n            ]\n        }\n    };\n}\n\n\nexport {VectorTextGeometry}\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/geometry/VectorTextGeometry.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1226,
    "kind": "function",
    "name": "buildStrokeData",
    "memberof": "scene/geometry/VectorTextGeometry.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/geometry/VectorTextGeometry.js~buildStrokeData",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/geometry/VectorTextGeometry.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{`\": *, \"a\": *, \"b\": *, \"c\": *, \"d\": *, \"e\": *, \"f\": *, \"g\": *, \"h\": *, \"i\": *, \"j\": *, \"k\": *, \"l\": *, \"m\": *, \"n\": *, \"o\": *, \"p\": *, \"q\": *, \"r\": *, \"s\": *, \"t\": *, \"u\": *, \"v\": *, \"w\": *, \"x\": *, \"y\": *, \"z\": *, \"{\": *, \"|\": *, \"}\": *, \"~\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1227,
    "kind": "class",
    "name": "VectorTextGeometry",
    "memberof": "scene/geometry/VectorTextGeometry.js",
    "static": true,
    "longname": "scene/geometry/VectorTextGeometry.js~VectorTextGeometry",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/geometry/VectorTextGeometry.js",
    "importStyle": "{VectorTextGeometry}",
    "description": "Defines a wireframe vector text shape for one or more {@link Mesh}es.\n\n## Usage\nCreating a {@link Mesh} with a VectorTextGeometry and a {@link PhongMaterial}:\n\n````javascript\nnew Mesh(myViewer.scene, {\n    geometry: new VectorTextGeometry(myViewer.scene, {\n         origin: [0,0,0],\n         text: \"On the other side of the screen, it all looks so easy!\"\n     }),\n     material: new PhongMaterial(myViewer.scene, {\n         diffuse: [0.3, 1.0, 0.3]\n     })\n});\n````",
    "lineNumber": 25,
    "interface": false,
    "extends": [
      "scene/geometry/Geometry.js~Geometry"
    ]
  },
  {
    "__docId__": 1228,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/geometry/VectorTextGeometry.js~VectorTextGeometry",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/geometry/VectorTextGeometry.js~VectorTextGeometry#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1229,
    "kind": "file",
    "name": "scene/input/Input.js",
    "content": "/**\n Publishes keyboard and mouse events that occur on the parent {@link Scene}'s {@link Canvas}.\n\n * Each {@link Scene} provides an Input on itself as a read-only property.\n\n ## Usage\n\n In this example, we're subscribing to some mouse and key events that will occur on\n a {@link Scene} {@link Canvas\"}}Canvas{{/crossLink}}.\n\n ````javascript\n var myScene = new xeokit.Scene();\n\n var input = myScene.input;\n\n // We'll save a handle to this subscription\n // to show how to unsubscribe, further down\n var handle = input.on(\"mousedown\", function(coords) {\n       console.log(\"Mouse down at: x=\" + coords[0] + \", y=\" + coords[1]);\n });\n\n input.on(\"mouseup\", function(coords) {\n       console.log(\"Mouse up at: x=\" + coords[0] + \", y=\" + coords[1]);\n });\n\n input.on(\"mouseclicked\", function(coords) {\n      console.log(\"Mouse clicked at: x=\" + coords[0] + \", y=\" + coords[1]);\n });\n\n input.on(\"dblclick\", function(coords) {\n       console.log(\"Double-click at: x=\" + coords[0] + \", y=\" + coords[1]);\n });\n\n input.on(\"keydown\", function(keyCode) {\n        switch (keyCode) {\n\n            case this.KEY_A:\n               console.log(\"The 'A' key is down\");\n               break;\n\n            case this.KEY_B:\n               console.log(\"The 'B' key is down\");\n               break;\n\n            case this.KEY_C:\n               console.log(\"The 'C' key is down\");\n               break;\n\n            default:\n               console.log(\"Some other key is down\");\n       }\n     });\n\n input.on(\"keyup\", function(keyCode) {\n        switch (keyCode) {\n\n            case this.KEY_A:\n               console.log(\"The 'A' key is up\");\n               break;\n\n            case this.KEY_B:\n               console.log(\"The 'B' key is up\");\n               break;\n\n            case this.KEY_C:\n               console.log(\"The 'C' key is up\");\n               break;\n\n            default:\n               console.log(\"Some other key is up\");\n        }\n     });\n\n // TODO: ALT and CTRL keys etc\n ````\n\n ### Unsubscribing from Events\n\n In the snippet above, we saved a handle to one of our event subscriptions.\n\n We can then use that handle to unsubscribe again, like this:\n\n ````javascript\n input.off(handle);\n ````\n\n @class Input\n @module xeokit\n @submodule input\n @extends Component\n */\nimport {Component} from '../Component.js';\nimport {math} from '../math/math.js';\n\nclass Input extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Input\";\n    }\n\n    constructor(owner, cfg={}) {\n\n        super(owner, cfg);\n\n        const self = this;\n\n        // Key codes\n\n        /**\n         * Code for the BACKSPACE key.\n         * @property KEY_BACKSPACE\n         * @final\n         * @type Number\n         */\n        // Key codes\n\n        /**\n         * Code for the BACKSPACE key.\n         * @property KEY_BACKSPACE\n         * @final\n         * @type Number\n         */\n        this.KEY_BACKSPACE = 8;\n\n        /**\n         * Code for the TAB key.\n         * @property KEY_TAB\n         * @final\n         * @type Number\n         */\n        this.KEY_TAB = 9;\n\n        /**\n         * Code for the ENTER key.\n         * @property KEY_ENTER\n         * @final\n         * @type Number\n         */\n        this.KEY_ENTER = 13;\n\n        /**\n         * Code for the SHIFT key.\n         * @property KEY_SHIFT\n         * @final\n         * @type Number\n         */\n        this.KEY_SHIFT = 16;\n\n        /**\n         * Code for the CTRL key.\n         * @property KEY_CTRL\n         * @final\n         * @type Number\n         */\n        this.KEY_CTRL = 17;\n\n        /**\n         * Code for the ALT key.\n         * @property KEY_ALT\n         * @final\n         * @type Number\n         */\n        this.KEY_ALT = 18;\n\n        /**\n         * Code for the PAUSE_BREAK key.\n         * @property KEY_PAUSE_BREAK\n         * @final\n         * @type Number\n         */\n        this.KEY_PAUSE_BREAK = 19;\n\n        /**\n         * Code for the CAPS_LOCK key.\n         * @property KEY_CAPS_LOCK\n         * @final\n         * @type Number\n         */\n        this.KEY_CAPS_LOCK = 20;\n\n        /**\n         * Code for the ESCAPE key.\n         * @property KEY_ESCAPE\n         * @final\n         * @type Number\n         */\n        this.KEY_ESCAPE = 27;\n\n        /**\n         * Code for the PAGE_UP key.\n         * @property KEY_PAGE_UP\n         * @final\n         * @type Number\n         */\n        this.KEY_PAGE_UP = 33;\n\n        /**\n         * Code for the PAGE_DOWN key.\n         * @property KEY_PAGE_DOWN\n         * @final\n         * @type Number\n         */\n        this.KEY_PAGE_DOWN = 34;\n\n        /**\n         * Code for the END key.\n         * @property KEY_END\n         * @final\n         * @type Number\n         */\n        this.KEY_END = 35;\n\n        /**\n         * Code for the HOME key.\n         * @property KEY_HOME\n         * @final\n         * @type Number\n         */\n        this.KEY_HOME = 36;\n\n        /**\n         * Code for the LEFT_ARROW key.\n         * @property KEY_LEFT_ARROW\n         * @final\n         * @type Number\n         */\n        this.KEY_LEFT_ARROW = 37;\n\n        /**\n         * Code for the UP_ARROW key.\n         * @property KEY_UP_ARROW\n         * @final\n         * @type Number\n         */\n        this.KEY_UP_ARROW = 38;\n\n        /**\n         * Code for the RIGHT_ARROW key.\n         * @property KEY_RIGHT_ARROW\n         * @final\n         * @type Number\n         */\n        this.KEY_RIGHT_ARROW = 39;\n\n        /**\n         * Code for the DOWN_ARROW key.\n         * @property KEY_DOWN_ARROW\n         * @final\n         * @type Number\n         */\n        this.KEY_DOWN_ARROW = 40;\n\n        /**\n         * Code for the INSERT key.\n         * @property KEY_INSERT\n         * @final\n         * @type Number\n         */\n        this.KEY_INSERT = 45;\n\n        /**\n         * Code for the DELETE key.\n         * @property KEY_DELETE\n         * @final\n         * @type Number\n         */\n        this.KEY_DELETE = 46;\n\n        /**\n         * Code for the 0 key.\n         * @property KEY_NUM_0\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_0 = 48;\n\n        /**\n         * Code for the 1 key.\n         * @property KEY_NUM_1\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_1 = 49;\n\n        /**\n         * Code for the 2 key.\n         * @property KEY_NUM_2\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_2 = 50;\n\n        /**\n         * Code for the 3 key.\n         * @property KEY_NUM_3\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_3 = 51;\n\n        /**\n         * Code for the 4 key.\n         * @property KEY_NUM_4\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_4 = 52;\n\n        /**\n         * Code for the 5 key.\n         * @property KEY_NUM_5\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_5 = 53;\n\n        /**\n         * Code for the 6 key.\n         * @property KEY_NUM_6\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_6 = 54;\n\n        /**\n         * Code for the 7 key.\n         * @property KEY_NUM_7\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_7 = 55;\n\n        /**\n         * Code for the 8 key.\n         * @property KEY_NUM_8\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_8 = 56;\n\n        /**\n         * Code for the 9 key.\n         * @property KEY_NUM_9\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_9 = 57;\n\n        /**\n         * Code for the A key.\n         * @property KEY_A\n         * @final\n         * @type Number\n         */\n        this.KEY_A = 65;\n\n        /**\n         * Code for the B key.\n         * @property KEY_B\n         * @final\n         * @type Number\n         */\n        this.KEY_B = 66;\n\n        /**\n         * Code for the C key.\n         * @property KEY_C\n         * @final\n         * @type Number\n         */\n        this.KEY_C = 67;\n\n        /**\n         * Code for the D key.\n         * @property KEY_D\n         * @final\n         * @type Number\n         */\n        this.KEY_D = 68;\n\n        /**\n         * Code for the E key.\n         * @property KEY_E\n         * @final\n         * @type Number\n         */\n        this.KEY_E = 69;\n\n        /**\n         * Code for the F key.\n         * @property KEY_F\n         * @final\n         * @type Number\n         */\n        this.KEY_F = 70;\n\n        /**\n         * Code for the G key.\n         * @property KEY_G\n         * @final\n         * @type Number\n         */\n        this.KEY_G = 71;\n\n        /**\n         * Code for the H key.\n         * @property KEY_H\n         * @final\n         * @type Number\n         */\n        this.KEY_H = 72;\n\n        /**\n         * Code for the I key.\n         * @property KEY_I\n         * @final\n         * @type Number\n         */\n        this.KEY_I = 73;\n\n        /**\n         * Code for the J key.\n         * @property KEY_J\n         * @final\n         * @type Number\n         */\n        this.KEY_J = 74;\n\n        /**\n         * Code for the K key.\n         * @property KEY_K\n         * @final\n         * @type Number\n         */\n        this.KEY_K = 75;\n\n        /**\n         * Code for the L key.\n         * @property KEY_L\n         * @final\n         * @type Number\n         */\n        this.KEY_L = 76;\n\n        /**\n         * Code for the M key.\n         * @property KEY_M\n         * @final\n         * @type Number\n         */\n        this.KEY_M = 77;\n\n        /**\n         * Code for the N key.\n         * @property KEY_N\n         * @final\n         * @type Number\n         */\n        this.KEY_N = 78;\n\n        /**\n         * Code for the O key.\n         * @property KEY_O\n         * @final\n         * @type Number\n         */\n        this.KEY_O = 79;\n\n        /**\n         * Code for the P key.\n         * @property KEY_P\n         * @final\n         * @type Number\n         */\n        this.KEY_P = 80;\n\n        /**\n         * Code for the Q key.\n         * @property KEY_Q\n         * @final\n         * @type Number\n         */\n        this.KEY_Q = 81;\n\n        /**\n         * Code for the R key.\n         * @property KEY_R\n         * @final\n         * @type Number\n         */\n        this.KEY_R = 82;\n\n        /**\n         * Code for the S key.\n         * @property KEY_S\n         * @final\n         * @type Number\n         */\n        this.KEY_S = 83;\n\n        /**\n         * Code for the T key.\n         * @property KEY_T\n         * @final\n         * @type Number\n         */\n        this.KEY_T = 84;\n\n        /**\n         * Code for the U key.\n         * @property KEY_U\n         * @final\n         * @type Number\n         */\n        this.KEY_U = 85;\n\n        /**\n         * Code for the V key.\n         * @property KEY_V\n         * @final\n         * @type Number\n         */\n        this.KEY_V = 86;\n\n        /**\n         * Code for the W key.\n         * @property KEY_W\n         * @final\n         * @type Number\n         */\n        this.KEY_W = 87;\n\n        /**\n         * Code for the X key.\n         * @property KEY_X\n         * @final\n         * @type Number\n         */\n        this.KEY_X = 88;\n\n        /**\n         * Code for the Y key.\n         * @property KEY_Y\n         * @final\n         * @type Number\n         */\n        this.KEY_Y = 89;\n\n        /**\n         * Code for the Z key.\n         * @property KEY_Z\n         * @final\n         * @type Number\n         */\n        this.KEY_Z = 90;\n\n        /**\n         * Code for the LEFT_WINDOW key.\n         * @property KEY_LEFT_WINDOW\n         * @final\n         * @type Number\n         */\n        this.KEY_LEFT_WINDOW = 91;\n\n        /**\n         * Code for the RIGHT_WINDOW key.\n         * @property KEY_RIGHT_WINDOW\n         * @final\n         * @type Number\n         */\n        this.KEY_RIGHT_WINDOW = 92;\n\n        /**\n         * Code for the SELECT key.\n         * @property KEY_SELECT\n         * @final\n         * @type Number\n         */\n        this.KEY_SELECT_KEY = 93;\n\n        /**\n         * Code for the number pad 0 key.\n         * @property KEY_NUMPAD_0\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_0 = 96;\n\n        /**\n         * Code for the number pad 1 key.\n         * @property KEY_NUMPAD_1\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_1 = 97;\n\n        /**\n         * Code for the number pad 2 key.\n         * @property KEY_NUMPAD 2\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_2 = 98;\n\n        /**\n         * Code for the number pad 3 key.\n         * @property KEY_NUMPAD_3\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_3 = 99;\n\n        /**\n         * Code for the number pad 4 key.\n         * @property KEY_NUMPAD_4\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_4 = 100;\n\n        /**\n         * Code for the number pad 5 key.\n         * @property KEY_NUMPAD_5\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_5 = 101;\n\n        /**\n         * Code for the number pad 6 key.\n         * @property KEY_NUMPAD_6\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_6 = 102;\n\n        /**\n         * Code for the number pad 7 key.\n         * @property KEY_NUMPAD_7\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_7 = 103;\n\n        /**\n         * Code for the number pad 8 key.\n         * @property KEY_NUMPAD_8\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_8 = 104;\n\n        /**\n         * Code for the number pad 9 key.\n         * @property KEY_NUMPAD_9\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_9 = 105;\n\n        /**\n         * Code for the MULTIPLY key.\n         * @property KEY_MULTIPLY\n         * @final\n         * @type Number\n         */\n        this.KEY_MULTIPLY = 106;\n\n        /**\n         * Code for the ADD key.\n         * @property KEY_ADD\n         * @final\n         * @type Number\n         */\n        this.KEY_ADD = 107;\n\n        /**\n         * Code for the SUBTRACT key.\n         * @property KEY_SUBTRACT\n         * @final\n         * @type Number\n         */\n        this.KEY_SUBTRACT = 109;\n\n        /**\n         * Code for the DECIMAL POINT key.\n         * @property KEY_DECIMAL_POINT\n         * @final\n         * @type Number\n         */\n        this.KEY_DECIMAL_POINT = 110;\n\n        /**\n         * Code for the DIVIDE key.\n         * @property KEY_DIVIDE\n         * @final\n         * @type Number\n         */\n        this.KEY_DIVIDE = 111;\n\n        /**\n         * Code for the F1 key.\n         * @property KEY_F1\n         * @final\n         * @type Number\n         */\n        this.KEY_F1 = 112;\n\n        /**\n         * Code for the F2 key.\n         * @property KEY_F2\n         * @final\n         * @type Number\n         */\n        this.KEY_F2 = 113;\n\n        /**\n         * Code for the F3 key.\n         * @property KEY_F3\n         * @final\n         * @type Number\n         */\n        this.KEY_F3 = 114;\n\n        /**\n         * Code for the F4 key.\n         * @property KEY_F4\n         * @final\n         * @type Number\n         */\n        this.KEY_F4 = 115;\n\n        /**\n         * Code for the F5 key.\n         * @property KEY_F5\n         * @final\n         * @type Number\n         */\n        this.KEY_F5 = 116;\n\n        /**\n         * Code for the F6 key.\n         * @property KEY_F6\n         * @final\n         * @type Number\n         */\n        this.KEY_F6 = 117;\n\n        /**\n         * Code for the F7 key.\n         * @property KEY_F7\n         * @final\n         * @type Number\n         */\n        this.KEY_F7 = 118;\n\n        /**\n         * Code for the F8 key.\n         * @property KEY_F8\n         * @final\n         * @type Number\n         */\n        this.KEY_F8 = 119;\n\n        /**\n         * Code for the F9 key.\n         * @property KEY_F9\n         * @final\n         * @type Number\n         */\n        this.KEY_F9 = 120;\n\n        /**\n         * Code for the F10 key.\n         * @property KEY_F10\n         * @final\n         * @type Number\n         */\n        this.KEY_F10 = 121;\n\n        /**\n         * Code for the F11 key.\n         * @property KEY_F11\n         * @final\n         * @type Number\n         */\n        this.KEY_F11 = 122;\n\n        /**\n         * Code for the F12 key.\n         * @property KEY_F12\n         * @final\n         * @type Number\n         */\n        this.KEY_F12 = 123;\n\n        /**\n         * Code for the NUM_LOCK key.\n         * @property KEY_NUM_LOCK\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_LOCK = 144;\n\n        /**\n         * Code for the SCROLL_LOCK key.\n         * @property KEY_SCROLL_LOCK\n         * @final\n         * @type Number\n         */\n        this.KEY_SCROLL_LOCK = 145;\n\n        /**\n         * Code for the SEMI_COLON key.\n         * @property KEY_SEMI_COLON\n         * @final\n         * @type Number\n         */\n        this.KEY_SEMI_COLON = 186;\n\n        /**\n         * Code for the EQUAL_SIGN key.\n         * @property KEY_EQUAL_SIGN\n         * @final\n         * @type Number\n         */\n        this.KEY_EQUAL_SIGN = 187;\n\n        /**\n         * Code for the COMMA key.\n         * @property KEY_COMMA\n         * @final\n         * @type Number\n         */\n        this.KEY_COMMA = 188;\n\n        /**\n         * Code for the DASH key.\n         * @property KEY_DASH\n         * @final\n         * @type Number\n         */\n        this.KEY_DASH = 189;\n\n        /**\n         * Code for the PERIOD key.\n         * @property KEY_PERIOD\n         * @final\n         * @type Number\n         */\n        this.KEY_PERIOD = 190;\n\n        /**\n         * Code for the FORWARD_SLASH key.\n         * @property KEY_FORWARD_SLASH\n         * @final\n         * @type Number\n         */\n        this.KEY_FORWARD_SLASH = 191;\n\n        /**\n         * Code for the GRAVE_ACCENT key.\n         * @property KEY_GRAVE_ACCENT\n         * @final\n         * @type Number\n         */\n        this.KEY_GRAVE_ACCENT = 192;\n\n        /**\n         * Code for the OPEN_BRACKET key.\n         * @property KEY_OPEN_BRACKET\n         * @final\n         * @type Number\n         */\n        this.KEY_OPEN_BRACKET = 219;\n\n        /**\n         * Code for the BACK_SLASH key.\n         * @property KEY_BACK_SLASH\n         * @final\n         * @type Number\n         */\n        this.KEY_BACK_SLASH = 220;\n\n        /**\n         * Code for the CLOSE_BRACKET key.\n         * @property KEY_CLOSE_BRACKET\n         * @final\n         * @type Number\n         */\n        this.KEY_CLOSE_BRACKET = 221;\n\n        /**\n         * Code for the SINGLE_QUOTE key.\n         * @property KEY_SINGLE_QUOTE\n         * @final\n         * @type Number\n         */\n        this.KEY_SINGLE_QUOTE = 222;\n\n        /**\n         * Code for the SPACE key.\n         * @property KEY_SPACE\n         * @final\n         * @type Number\n         */\n        this.KEY_SPACE = 32;\n        this.KEY_BACKSPACE = 8;\n\n        /**\n         * Code for the TAB key.\n         * @property KEY_TAB\n         * @final\n         * @type Number\n         */\n        this.KEY_TAB = 9;\n\n        /**\n         * Code for the ENTER key.\n         * @property KEY_ENTER\n         * @final\n         * @type Number\n         */\n        this.KEY_ENTER = 13;\n\n        /**\n         * Code for the SHIFT key.\n         * @property KEY_SHIFT\n         * @final\n         * @type Number\n         */\n        this.KEY_SHIFT = 16;\n\n        /**\n         * Code for the CTRL key.\n         * @property KEY_CTRL\n         * @final\n         * @type Number\n         */\n        this.KEY_CTRL = 17;\n\n        /**\n         * Code for the ALT key.\n         * @property KEY_ALT\n         * @final\n         * @type Number\n         */\n        this.KEY_ALT = 18;\n\n        /**\n         * Code for the PAUSE_BREAK key.\n         * @property KEY_PAUSE_BREAK\n         * @final\n         * @type Number\n         */\n        this.KEY_PAUSE_BREAK = 19;\n\n        /**\n         * Code for the CAPS_LOCK key.\n         * @property KEY_CAPS_LOCK\n         * @final\n         * @type Number\n         */\n        this.KEY_CAPS_LOCK = 20;\n\n        /**\n         * Code for the ESCAPE key.\n         * @property KEY_ESCAPE\n         * @final\n         * @type Number\n         */\n        this.KEY_ESCAPE = 27;\n\n        /**\n         * Code for the PAGE_UP key.\n         * @property KEY_PAGE_UP\n         * @final\n         * @type Number\n         */\n        this.KEY_PAGE_UP = 33;\n\n        /**\n         * Code for the PAGE_DOWN key.\n         * @property KEY_PAGE_DOWN\n         * @final\n         * @type Number\n         */\n        this.KEY_PAGE_DOWN = 34;\n\n        /**\n         * Code for the END key.\n         * @property KEY_END\n         * @final\n         * @type Number\n         */\n        this.KEY_END = 35;\n\n        /**\n         * Code for the HOME key.\n         * @property KEY_HOME\n         * @final\n         * @type Number\n         */\n        this.KEY_HOME = 36;\n\n        /**\n         * Code for the LEFT_ARROW key.\n         * @property KEY_LEFT_ARROW\n         * @final\n         * @type Number\n         */\n        this.KEY_LEFT_ARROW = 37;\n\n        /**\n         * Code for the UP_ARROW key.\n         * @property KEY_UP_ARROW\n         * @final\n         * @type Number\n         */\n        this.KEY_UP_ARROW = 38;\n\n        /**\n         * Code for the RIGHT_ARROW key.\n         * @property KEY_RIGHT_ARROW\n         * @final\n         * @type Number\n         */\n        this.KEY_RIGHT_ARROW = 39;\n\n        /**\n         * Code for the DOWN_ARROW key.\n         * @property KEY_DOWN_ARROW\n         * @final\n         * @type Number\n         */\n        this.KEY_DOWN_ARROW = 40;\n\n        /**\n         * Code for the INSERT key.\n         * @property KEY_INSERT\n         * @final\n         * @type Number\n         */\n        this.KEY_INSERT = 45;\n\n        /**\n         * Code for the DELETE key.\n         * @property KEY_DELETE\n         * @final\n         * @type Number\n         */\n        this.KEY_DELETE = 46;\n\n        /**\n         * Code for the 0 key.\n         * @property KEY_NUM_0\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_0 = 48;\n\n        /**\n         * Code for the 1 key.\n         * @property KEY_NUM_1\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_1 = 49;\n\n        /**\n         * Code for the 2 key.\n         * @property KEY_NUM_2\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_2 = 50;\n\n        /**\n         * Code for the 3 key.\n         * @property KEY_NUM_3\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_3 = 51;\n\n        /**\n         * Code for the 4 key.\n         * @property KEY_NUM_4\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_4 = 52;\n\n        /**\n         * Code for the 5 key.\n         * @property KEY_NUM_5\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_5 = 53;\n\n        /**\n         * Code for the 6 key.\n         * @property KEY_NUM_6\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_6 = 54;\n\n        /**\n         * Code for the 7 key.\n         * @property KEY_NUM_7\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_7 = 55;\n\n        /**\n         * Code for the 8 key.\n         * @property KEY_NUM_8\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_8 = 56;\n\n        /**\n         * Code for the 9 key.\n         * @property KEY_NUM_9\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_9 = 57;\n\n        /**\n         * Code for the A key.\n         * @property KEY_A\n         * @final\n         * @type Number\n         */\n        this.KEY_A = 65;\n\n        /**\n         * Code for the B key.\n         * @property KEY_B\n         * @final\n         * @type Number\n         */\n        this.KEY_B = 66;\n\n        /**\n         * Code for the C key.\n         * @property KEY_C\n         * @final\n         * @type Number\n         */\n        this.KEY_C = 67;\n\n        /**\n         * Code for the D key.\n         * @property KEY_D\n         * @final\n         * @type Number\n         */\n        this.KEY_D = 68;\n\n        /**\n         * Code for the E key.\n         * @property KEY_E\n         * @final\n         * @type Number\n         */\n        this.KEY_E = 69;\n\n        /**\n         * Code for the F key.\n         * @property KEY_F\n         * @final\n         * @type Number\n         */\n        this.KEY_F = 70;\n\n        /**\n         * Code for the G key.\n         * @property KEY_G\n         * @final\n         * @type Number\n         */\n        this.KEY_G = 71;\n\n        /**\n         * Code for the H key.\n         * @property KEY_H\n         * @final\n         * @type Number\n         */\n        this.KEY_H = 72;\n\n        /**\n         * Code for the I key.\n         * @property KEY_I\n         * @final\n         * @type Number\n         */\n        this.KEY_I = 73;\n\n        /**\n         * Code for the J key.\n         * @property KEY_J\n         * @final\n         * @type Number\n         */\n        this.KEY_J = 74;\n\n        /**\n         * Code for the K key.\n         * @property KEY_K\n         * @final\n         * @type Number\n         */\n        this.KEY_K = 75;\n\n        /**\n         * Code for the L key.\n         * @property KEY_L\n         * @final\n         * @type Number\n         */\n        this.KEY_L = 76;\n\n        /**\n         * Code for the M key.\n         * @property KEY_M\n         * @final\n         * @type Number\n         */\n        this.KEY_M = 77;\n\n        /**\n         * Code for the N key.\n         * @property KEY_N\n         * @final\n         * @type Number\n         */\n        this.KEY_N = 78;\n\n        /**\n         * Code for the O key.\n         * @property KEY_O\n         * @final\n         * @type Number\n         */\n        this.KEY_O = 79;\n\n        /**\n         * Code for the P key.\n         * @property KEY_P\n         * @final\n         * @type Number\n         */\n        this.KEY_P = 80;\n\n        /**\n         * Code for the Q key.\n         * @property KEY_Q\n         * @final\n         * @type Number\n         */\n        this.KEY_Q = 81;\n\n        /**\n         * Code for the R key.\n         * @property KEY_R\n         * @final\n         * @type Number\n         */\n        this.KEY_R = 82;\n\n        /**\n         * Code for the S key.\n         * @property KEY_S\n         * @final\n         * @type Number\n         */\n        this.KEY_S = 83;\n\n        /**\n         * Code for the T key.\n         * @property KEY_T\n         * @final\n         * @type Number\n         */\n        this.KEY_T = 84;\n\n        /**\n         * Code for the U key.\n         * @property KEY_U\n         * @final\n         * @type Number\n         */\n        this.KEY_U = 85;\n\n        /**\n         * Code for the V key.\n         * @property KEY_V\n         * @final\n         * @type Number\n         */\n        this.KEY_V = 86;\n\n        /**\n         * Code for the W key.\n         * @property KEY_W\n         * @final\n         * @type Number\n         */\n        this.KEY_W = 87;\n\n        /**\n         * Code for the X key.\n         * @property KEY_X\n         * @final\n         * @type Number\n         */\n        this.KEY_X = 88;\n\n        /**\n         * Code for the Y key.\n         * @property KEY_Y\n         * @final\n         * @type Number\n         */\n        this.KEY_Y = 89;\n\n        /**\n         * Code for the Z key.\n         * @property KEY_Z\n         * @final\n         * @type Number\n         */\n        this.KEY_Z = 90;\n\n        /**\n         * Code for the LEFT_WINDOW key.\n         * @property KEY_LEFT_WINDOW\n         * @final\n         * @type Number\n         */\n        this.KEY_LEFT_WINDOW = 91;\n\n        /**\n         * Code for the RIGHT_WINDOW key.\n         * @property KEY_RIGHT_WINDOW\n         * @final\n         * @type Number\n         */\n        this.KEY_RIGHT_WINDOW = 92;\n\n        /**\n         * Code for the SELECT key.\n         * @property KEY_SELECT\n         * @final\n         * @type Number\n         */\n        this.KEY_SELECT_KEY = 93;\n\n        /**\n         * Code for the number pad 0 key.\n         * @property KEY_NUMPAD_0\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_0 = 96;\n\n        /**\n         * Code for the number pad 1 key.\n         * @property KEY_NUMPAD_1\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_1 = 97;\n\n        /**\n         * Code for the number pad 2 key.\n         * @property KEY_NUMPAD 2\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_2 = 98;\n\n        /**\n         * Code for the number pad 3 key.\n         * @property KEY_NUMPAD_3\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_3 = 99;\n\n        /**\n         * Code for the number pad 4 key.\n         * @property KEY_NUMPAD_4\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_4 = 100;\n\n        /**\n         * Code for the number pad 5 key.\n         * @property KEY_NUMPAD_5\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_5 = 101;\n\n        /**\n         * Code for the number pad 6 key.\n         * @property KEY_NUMPAD_6\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_6 = 102;\n\n        /**\n         * Code for the number pad 7 key.\n         * @property KEY_NUMPAD_7\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_7 = 103;\n\n        /**\n         * Code for the number pad 8 key.\n         * @property KEY_NUMPAD_8\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_8 = 104;\n\n        /**\n         * Code for the number pad 9 key.\n         * @property KEY_NUMPAD_9\n         * @final\n         * @type Number\n         */\n        this.KEY_NUMPAD_9 = 105;\n\n        /**\n         * Code for the MULTIPLY key.\n         * @property KEY_MULTIPLY\n         * @final\n         * @type Number\n         */\n        this.KEY_MULTIPLY = 106;\n\n        /**\n         * Code for the ADD key.\n         * @property KEY_ADD\n         * @final\n         * @type Number\n         */\n        this.KEY_ADD = 107;\n\n        /**\n         * Code for the SUBTRACT key.\n         * @property KEY_SUBTRACT\n         * @final\n         * @type Number\n         */\n        this.KEY_SUBTRACT = 109;\n\n        /**\n         * Code for the DECIMAL POINT key.\n         * @property KEY_DECIMAL_POINT\n         * @final\n         * @type Number\n         */\n        this.KEY_DECIMAL_POINT = 110;\n\n        /**\n         * Code for the DIVIDE key.\n         * @property KEY_DIVIDE\n         * @final\n         * @type Number\n         */\n        this.KEY_DIVIDE = 111;\n\n        /**\n         * Code for the F1 key.\n         * @property KEY_F1\n         * @final\n         * @type Number\n         */\n        this.KEY_F1 = 112;\n\n        /**\n         * Code for the F2 key.\n         * @property KEY_F2\n         * @final\n         * @type Number\n         */\n        this.KEY_F2 = 113;\n\n        /**\n         * Code for the F3 key.\n         * @property KEY_F3\n         * @final\n         * @type Number\n         */\n        this.KEY_F3 = 114;\n\n        /**\n         * Code for the F4 key.\n         * @property KEY_F4\n         * @final\n         * @type Number\n         */\n        this.KEY_F4 = 115;\n\n        /**\n         * Code for the F5 key.\n         * @property KEY_F5\n         * @final\n         * @type Number\n         */\n        this.KEY_F5 = 116;\n\n        /**\n         * Code for the F6 key.\n         * @property KEY_F6\n         * @final\n         * @type Number\n         */\n        this.KEY_F6 = 117;\n\n        /**\n         * Code for the F7 key.\n         * @property KEY_F7\n         * @final\n         * @type Number\n         */\n        this.KEY_F7 = 118;\n\n        /**\n         * Code for the F8 key.\n         * @property KEY_F8\n         * @final\n         * @type Number\n         */\n        this.KEY_F8 = 119;\n\n        /**\n         * Code for the F9 key.\n         * @property KEY_F9\n         * @final\n         * @type Number\n         */\n        this.KEY_F9 = 120;\n\n        /**\n         * Code for the F10 key.\n         * @property KEY_F10\n         * @final\n         * @type Number\n         */\n        this.KEY_F10 = 121;\n\n        /**\n         * Code for the F11 key.\n         * @property KEY_F11\n         * @final\n         * @type Number\n         */\n        this.KEY_F11 = 122;\n\n        /**\n         * Code for the F12 key.\n         * @property KEY_F12\n         * @final\n         * @type Number\n         */\n        this.KEY_F12 = 123;\n\n        /**\n         * Code for the NUM_LOCK key.\n         * @property KEY_NUM_LOCK\n         * @final\n         * @type Number\n         */\n        this.KEY_NUM_LOCK = 144;\n\n        /**\n         * Code for the SCROLL_LOCK key.\n         * @property KEY_SCROLL_LOCK\n         * @final\n         * @type Number\n         */\n        this.KEY_SCROLL_LOCK = 145;\n\n        /**\n         * Code for the SEMI_COLON key.\n         * @property KEY_SEMI_COLON\n         * @final\n         * @type Number\n         */\n        this.KEY_SEMI_COLON = 186;\n\n        /**\n         * Code for the EQUAL_SIGN key.\n         * @property KEY_EQUAL_SIGN\n         * @final\n         * @type Number\n         */\n        this.KEY_EQUAL_SIGN = 187;\n\n        /**\n         * Code for the COMMA key.\n         * @property KEY_COMMA\n         * @final\n         * @type Number\n         */\n        this.KEY_COMMA = 188;\n\n        /**\n         * Code for the DASH key.\n         * @property KEY_DASH\n         * @final\n         * @type Number\n         */\n        this.KEY_DASH = 189;\n\n        /**\n         * Code for the PERIOD key.\n         * @property KEY_PERIOD\n         * @final\n         * @type Number\n         */\n        this.KEY_PERIOD = 190;\n\n        /**\n         * Code for the FORWARD_SLASH key.\n         * @property KEY_FORWARD_SLASH\n         * @final\n         * @type Number\n         */\n        this.KEY_FORWARD_SLASH = 191;\n\n        /**\n         * Code for the GRAVE_ACCENT key.\n         * @property KEY_GRAVE_ACCENT\n         * @final\n         * @type Number\n         */\n        this.KEY_GRAVE_ACCENT = 192;\n\n        /**\n         * Code for the OPEN_BRACKET key.\n         * @property KEY_OPEN_BRACKET\n         * @final\n         * @type Number\n         */\n        this.KEY_OPEN_BRACKET = 219;\n\n        /**\n         * Code for the BACK_SLASH key.\n         * @property KEY_BACK_SLASH\n         * @final\n         * @type Number\n         */\n        this.KEY_BACK_SLASH = 220;\n\n        /**\n         * Code for the CLOSE_BRACKET key.\n         * @property KEY_CLOSE_BRACKET\n         * @final\n         * @type Number\n         */\n        this.KEY_CLOSE_BRACKET = 221;\n\n        /**\n         * Code for the SINGLE_QUOTE key.\n         * @property KEY_SINGLE_QUOTE\n         * @final\n         * @type Number\n         */\n        this.KEY_SINGLE_QUOTE = 222;\n\n        /**\n         * Code for the SPACE key.\n         * @property KEY_SPACE\n         * @final\n         * @type Number\n         */\n        this.KEY_SPACE = 32;\n\n        this._element = cfg.element;\n\n        // True when ALT down\n        this.altDown = false;\n\n        /** True whenever CTRL is down\n         *\n         * @type {boolean}\n         */\n        this.ctrlDown = false;\n\n        /** True whenever left mouse button is down\n         *\n         * @type {boolean}\n         */\n        this.mouseDownLeft = false;\n\n        /** True whenever middle mouse button is down\n         *\n         * @type {boolean}\n         */\n        this.mouseDownMiddle = false;\n\n        /** True whenever right mouse button is down\n         *\n         * @type {boolean}\n         */\n        this.mouseDownRight = false;\n\n        /** Flag for each key that's down\n         *\n         * @type {boolean}\n         */\n        this.keyDown = [];\n\n        /** True while input enabled\n         *\n         * @type {boolean}\n         */\n        this.enabled = true;\n\n        /** True while mouse is over the parent {@link Scene} {@link Canvas\"}}Canvas{{/crossLink}}\n         *\n         * @type {boolean}\n         */\n        this.mouseover = false;\n\n        // Capture input events and publish them on this component\n\n        document.addEventListener(\"keydown\", this._keyDownListener = function (e) {\n\n            if (!self.enabled) {\n                return;\n            }\n\n            if (e.target.tagName !== \"INPUT\" && e.target.tagName !== \"TEXTAREA\") {\n\n                if (e.ctrlKey) {\n                    self.ctrlDown = true;\n\n                } else if (e.altKey) {\n                    self.altDown = true;\n\n                } else {\n                    self.keyDown[e.keyCode] = true;\n\n                    /**\n                     * Fired whenever a key is pressed while the parent\n                     * {@link Scene}'s {@link Canvas\"}}Canvas{{/crossLink}} has input focus.\n                     * @event keydown\n                     * @param value {Number} The key code, for example {@link Input/KEY_LEFT_ARROW},\n                     */\n                    self.fire(\"keydown\", e.keyCode, true);\n                }\n            }\n\n            if (self.mouseover) {\n                e.preventDefault();\n            }\n\n        }, true);\n\n        document.addEventListener(\"keyup\", this._keyUpListener = function (e) {\n\n            if (!self.enabled) {\n                return;\n            }\n\n            if (e.target.tagName !== \"INPUT\" && e.target.tagName !== \"TEXTAREA\") {\n\n                if (e.ctrlKey) {\n                    self.ctrlDown = false;\n\n                } else if (e.altKey) {\n                    self.altDown = false;\n\n                } else {\n                    self.keyDown[e.keyCode] = false;\n\n                    /**\n                     * Fired whenever a key is released while the parent\n                     * {@link Scene}'s {@link Canvas\"}}Canvas{{/crossLink}} has input focus.\n                     * @event keyup\n                     * @param value {Number} The key code, for example {@link Input/KEY_LEFT_ARROW},\n                     */\n                    self.fire(\"keyup\", e.keyCode, true);\n                }\n            }\n        });\n\n        cfg.element.addEventListener(\"mouseenter\", this._mouseEnterListener = function (e) {\n\n            if (!self.enabled) {\n                return;\n            }\n\n            self.mouseover = true;\n\n            const coords = self._getClickCoordsWithinElement(e);\n\n            /**\n             * Fired whenever the mouse is moved into of the parent\n             * {@link Scene}'s {@link Canvas\"}}Canvas{{/crossLink}}.\n             * @event mouseenter\n             * @param value {[Number, Number]} The mouse coordinates within the {@link Canvas\"}}Canvas{{/crossLink}},\n             */\n            self.fire(\"mouseenter\", coords, true);\n        });\n\n        cfg.element.addEventListener(\"mouseleave\", this._mouseLeaveListener = function (e) {\n\n            if (!self.enabled) {\n                return;\n            }\n\n            self.mouseover = false;\n\n            const coords = self._getClickCoordsWithinElement(e);\n\n            /**\n             * Fired whenever the mouse is moved out of the parent\n             * {@link Scene}'s {@link Canvas\"}}Canvas{{/crossLink}}.\n             * @event mouseleave\n             * @param value {[Number, Number]} The mouse coordinates within the {@link Canvas\"}}Canvas{{/crossLink}},\n             */\n            self.fire(\"mouseleave\", coords, true);\n        });\n\n\n        cfg.element.addEventListener(\"mousedown\", this._mouseDownListener = function (e) {\n\n            if (!self.enabled) {\n                return;\n            }\n\n            switch (e.which) {\n\n                case 1:// Left button\n                    self.mouseDownLeft = true;\n                    break;\n\n                case 2:// Middle/both buttons\n                    self.mouseDownMiddle = true;\n                    break;\n\n                case 3:// Right button\n                    self.mouseDownRight = true;\n                    break;\n\n                default:\n                    break;\n            }\n\n            const coords = self._getClickCoordsWithinElement(e);\n\n            cfg.element.focus();\n\n            /**\n             * Fired whenever the mouse is pressed over the parent\n             * {@link Scene}'s {@link Canvas\"}}Canvas{{/crossLink}}.\n             * @event mousedown\n             * @param value {[Number, Number]} The mouse coordinates within the {@link Canvas\"}}Canvas{{/crossLink}},\n             */\n            self.fire(\"mousedown\", coords, true);\n\n            if (self.mouseover) {\n                e.preventDefault();\n            }\n        });\n\n        document.addEventListener(\"mouseup\", this._mouseUpListener = function (e) {\n\n            if (!self.enabled) {\n                return;\n            }\n\n            switch (e.which) {\n\n                case 1:// Left button\n                    self.mouseDownLeft = false;\n                    break;\n\n                case 2:// Middle/both buttons\n                    self.mouseDownMiddle = false;\n                    break;\n\n                case 3:// Right button\n                    self.mouseDownRight = false;\n                    break;\n\n                default:\n                    break;\n            }\n\n            const coords = self._getClickCoordsWithinElement(e);\n\n            /**\n             * Fired whenever the mouse is released over the parent\n             * {@link Scene}'s {@link Canvas\"}}Canvas{{/crossLink}}.\n             * @event mouseup\n             * @param value {[Number, Number]} The mouse coordinates within the {@link Canvas\"}}Canvas{{/crossLink}},\n             */\n            self.fire(\"mouseup\", coords, true);\n\n            if (self.mouseover) {\n                e.preventDefault();\n            }\n        }, true);\n\n        document.addEventListener(\"dblclick\", this._dblClickListener = function (e) {\n\n            if (!self.enabled) {\n                return;\n            }\n\n            switch (e.which) {\n\n                case 1:// Left button\n                    self.mouseDownLeft = false;\n                    self.mouseDownRight = false;\n                    break;\n\n                case 2:// Middle/both buttons\n                    self.mouseDownMiddle = false;\n                    break;\n\n                case 3:// Right button\n                    self.mouseDownLeft = false;\n                    self.mouseDownRight = false;\n                    break;\n\n                default:\n                    break;\n            }\n\n            const coords = self._getClickCoordsWithinElement(e);\n\n            /**\n             * Fired whenever the mouse is double-clicked over the parent\n             * {@link Scene}'s {@link Canvas\"}}Canvas{{/crossLink}}.\n             * @event dblclick\n             * @param value {[Number, Number]} The mouse coordinates within the {@link Canvas\"}}Canvas{{/crossLink}},\n             */\n            self.fire(\"dblclick\", coords, true);\n\n            if (self.mouseover) {\n                e.preventDefault();\n            }\n        });\n\n        cfg.element.addEventListener(\"mousemove\", this._mouseMoveListener = function (e) {\n\n            if (!self.enabled) {\n                return;\n            }\n\n            const coords = self._getClickCoordsWithinElement(e);\n\n            /**\n             * Fired whenever the mouse is moved over the parent\n             * {@link Scene}'s {@link Canvas\"}}Canvas{{/crossLink}}.\n             * @event mousedown\n             * @param value {[Number, Number]} The mouse coordinates within the {@link Canvas\"}}Canvas{{/crossLink}},\n             */\n            self.fire(\"mousemove\", coords, true);\n\n            if (self.mouseover) {\n                e.preventDefault();\n            }\n        });\n\n        cfg.element.addEventListener(\"wheel\", this._mouseWheelListener = function (e, d) {\n\n            if (!self.enabled) {\n                return;\n            }\n\n            const delta = Math.max(-1, Math.min(1, -e.deltaY * 40));\n\n            /**\n             * Fired whenever the mouse wheel is moved over the parent\n             * {@link Scene}'s {@link Canvas\"}}Canvas{{/crossLink}}.\n             * @event mousewheel\n             * @param delta {Number} The mouse wheel delta,\n             */\n            self.fire(\"mousewheel\", delta, true);\n        }, {passive: true});\n\n        // mouseclicked\n\n        (function () {\n\n            let downX;\n            let downY;\n\n            // Tolerance between down and up positions for a mouse click\n            const tolerance = 2;\n\n            self.on(\"mousedown\", function (params) {\n                downX = params[0];\n                downY = params[1];\n            });\n\n            self.on(\"mouseup\", function (params) {\n\n                if (downX >= (params[0] - tolerance) &&\n                    downX <= (params[0] + tolerance) &&\n                    downY >= (params[1] - tolerance) &&\n                    downY <= (params[1] + tolerance)) {\n\n                    /**\n                     * Fired whenever the mouse is clicked over the parent\n                     * {@link Scene}'s {@link Canvas\"}}Canvas{{/crossLink}}.\n                     * @event mouseclicked\n                     * @param value {[Number, Number]} The mouse coordinates within the {@link Canvas\"}}Canvas{{/crossLink}},\n                     */\n                    self.fire(\"mouseclicked\", params, true);\n                }\n            });\n        })();\n\n\n        // VR\n\n        (function () {\n\n            const orientationAngleLookup = {\n                'landscape-primary': 90,\n                'landscape-secondary': -90,\n                'portrait-secondary': 180,\n                'portrait-primary': 0\n            };\n\n            let orientation;\n            let orientationAngle;\n            const acceleration = math.vec3();\n            const accelerationIncludingGravity = math.vec3();\n\n            const orientationChangeEvent = {\n                orientation: null,\n                orientationAngle: 0\n            };\n\n            const deviceMotionEvent = {\n                orientationAngle: 0,\n                acceleration: null,\n                accelerationIncludingGravity: accelerationIncludingGravity,\n                rotationRate: math.vec3(),\n                interval: 0\n            };\n\n            const deviceOrientationEvent = {\n                alpha: 0,\n                beta: 0,\n                gamma: 0,\n                absolute: false\n            };\n\n            if (window.OrientationChangeEvent) {\n                window.addEventListener('orientationchange', self._orientationchangedListener = function () {\n\n                        orientation = window.screen.orientation || window.screen.mozOrientation || window.msOrientation || null;\n                        orientationAngle = orientation ? (orientationAngleLookup[orientation] || 0) : 0;\n\n                        orientationChangeEvent.orientation = orientation;\n                        orientationChangeEvent.orientationAngle = orientationAngle;\n\n                        /**\n                         * Fired when the orientation of the device has changed.\n                         *\n                         * @event orientationchange\n                         * @param orientation The orientation: \"landscape-primary\", \"landscape-secondary\", \"portrait-secondary\" or \"portrait-primary\"\n                         * @param orientationAngle The orientation angle in degrees: 90 for landscape-primary, -90 for landscape-secondary, 180 for portrait-secondary or 0 for portrait-primary.\n                         */\n                        self.fire(\"orientationchange\", orientationChangeEvent);\n                    },\n                    false);\n            }\n\n            if (window.DeviceMotionEvent) {\n                window.addEventListener('devicemotion', self._deviceMotionListener = function (e) {\n\n                        deviceMotionEvent.interval = e.interval;\n                        deviceMotionEvent.orientationAngle = orientationAngle;\n\n                        const accel = e.acceleration;\n\n                        if (accel) {\n                            acceleration[0] = accel.x;\n                            acceleration[1] = accel.y;\n                            acceleration[2] = accel.z;\n                            deviceMotionEvent.acceleration = acceleration;\n                        } else {\n                            deviceMotionEvent.acceleration = null;\n                        }\n\n                        const accelGrav = e.accelerationIncludingGravity;\n\n                        if (accelGrav) {\n                            accelerationIncludingGravity[0] = accelGrav.x;\n                            accelerationIncludingGravity[1] = accelGrav.y;\n                            accelerationIncludingGravity[2] = accelGrav.z;\n                            deviceMotionEvent.accelerationIncludingGravity = accelerationIncludingGravity;\n                        } else {\n                            deviceMotionEvent.accelerationIncludingGravity = null;\n                        }\n\n                        deviceMotionEvent.rotationRate = e.rotationRate;\n\n                        /**\n                         * Fires on a regular interval and returns data about the rotation\n                         * (in degrees per second) and acceleration (in meters per second squared) of the device, at that moment in\n                         * time. Some devices do not have the hardware to exclude the effect of gravity.\n                         *\n                         * @event devicemotion\n                         * @param Float32Array acceleration The acceleration of the device, in meters per second squared, as a 3-element vector. This value has taken into account the effect of gravity and removed it from the figures. This value may not exist if the hardware doesn't know how to remove gravity from the acceleration data.\n                         * @param Float32Array accelerationIncludingGravity The acceleration of the device, in meters per second squared, as a 3-element vector. This value includes the effect of gravity, and may be the only value available on devices that don't have a gyroscope to allow them to properly remove gravity from the data.\n                         * @param, Number interval The interval, in milliseconds, at which this event is fired. The next event will be fired in approximately this amount of time.\n                         * @param  Float32Array rotationRate The rates of rotation of the device about each axis, in degrees per second.\n                         */\n                        self.fire(\"devicemotion\", deviceMotionEvent);\n                    },\n                    false);\n            }\n\n            if (window.DeviceOrientationEvent) {\n                window.addEventListener(\"deviceorientation\", self._deviceOrientListener = function (e) {\n\n                        deviceOrientationEvent.gamma = e.gamma;\n                        deviceOrientationEvent.beta = e.beta;\n                        deviceOrientationEvent.alpha = e.alpha;\n                        deviceOrientationEvent.absolute = e.absolute;\n\n                        /**\n                         * Fired when fresh data is available from an orientation sensor about the current orientation\n                         * of the device as compared to the Earth coordinate frame. This data is gathered from a\n                         * magnetometer inside the device. See\n                         * <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Orientation_and_motion_data_explained\">Orientation and motion data explained</a> for more info.\n                         *\n                         * @event deviceorientation\n                         * @param Number alpha The current orientation of the device around the Z axis in degrees; that is, how far the device is rotated around a line perpendicular to the device.\n                         * @param Number beta The current orientation of the device around the X axis in degrees; that is, how far the device is tipped forward or backward.\n                         * @param Number gamma The current orientation of the device around the Y axis in degrees; that is, how far the device is turned left or right.\n                         * @param Boolean absolute This value is true if the orientation is provided as a difference between the device coordinate frame and the Earth coordinate frame; if the device can't detect the Earth coordinate frame, this value is false.\n                         */\n                        self.fire(\"deviceorientation\", deviceOrientationEvent);\n                    },\n                    false);\n            }\n        })();\n    }\n\n    _getClickCoordsWithinElement(event) {\n        const coords = [0, 0];\n        if (!event) {\n            event = window.event;\n            coords.x = event.x;\n            coords.y = event.y;\n        }\n        else {\n            let element = event.target;\n            let totalOffsetLeft = 0;\n            let totalOffsetTop = 0;\n\n            while (element.offsetParent) {\n                totalOffsetLeft += element.offsetLeft;\n                totalOffsetTop += element.offsetTop;\n                element = element.offsetParent;\n            }\n            coords[0] = event.pageX - totalOffsetLeft;\n            coords[1] = event.pageY - totalOffsetTop;\n        }\n        return coords;\n    }\n\n    /**\n     * Enable or disable all input handlers\n     *\n     * @param enable\n     */\n    setEnabled(enable) {\n        if (this.enabled !== enable) {\n            this.fire(\"enabled\", this.enabled = enable);\n        }\n    }\n\n    destroy() {\n        super.destroy();\n        // Prevent memory leak when destroying canvas/WebGL context\n        document.removeEventListener(\"keydown\", this._keyDownListener);\n        document.removeEventListener(\"keyup\", this._keyUpListener);\n        this._element.removeEventListener(\"mouseenter\", this._mouseEnterListener);\n        this._element.removeEventListener(\"mouseleave\", this._mouseLeaveListener);\n        this._element.removeEventListener(\"mousedown\", this._mouseDownListener);\n        document.removeEventListener(\"mouseup\", this._mouseDownListener);\n        document.removeEventListener(\"dblclick\", this._dblClickListener);\n        this._element.removeEventListener(\"mousemove\", this._mouseMoveListener);\n        this._element.removeEventListener(\"wheel\", this._mouseWheelListener);\n        if (window.OrientationChangeEvent) {\n            window.removeEventListener('orientationchange', this._orientationchangedListener);\n        }\n        if (window.DeviceMotionEvent) {\n            window.removeEventListener('devicemotion', this._deviceMotionListener);\n        }\n        if (window.DeviceOrientationEvent) {\n            window.addEventListener(\"deviceorientation\", this._deviceOrientListener);\n        }\n    }\n}\n\nexport {Input};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/input/Input.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1230,
    "kind": "class",
    "name": "Input",
    "memberof": "scene/input/Input.js",
    "static": true,
    "longname": "scene/input/Input.js~Input",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/input/Input.js",
    "importStyle": "{Input}",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 1231,
    "kind": "get",
    "name": "type",
    "memberof": "scene/input/Input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/input/Input.js~Input#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1232,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/input/Input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/input/Input.js~Input#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true
  },
  {
    "__docId__": 1233,
    "kind": "member",
    "name": "KEY_BACKSPACE",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_BACKSPACE",
    "access": "public",
    "description": "Code for the BACKSPACE key.",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_BACKSPACE",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1234,
    "kind": "member",
    "name": "KEY_TAB",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_TAB",
    "access": "public",
    "description": "Code for the TAB key.",
    "lineNumber": 140,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_TAB",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1235,
    "kind": "member",
    "name": "KEY_ENTER",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_ENTER",
    "access": "public",
    "description": "Code for the ENTER key.",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_ENTER",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1236,
    "kind": "member",
    "name": "KEY_SHIFT",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_SHIFT",
    "access": "public",
    "description": "Code for the SHIFT key.",
    "lineNumber": 156,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_SHIFT",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1237,
    "kind": "member",
    "name": "KEY_CTRL",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_CTRL",
    "access": "public",
    "description": "Code for the CTRL key.",
    "lineNumber": 164,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_CTRL",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1238,
    "kind": "member",
    "name": "KEY_ALT",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_ALT",
    "access": "public",
    "description": "Code for the ALT key.",
    "lineNumber": 172,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_ALT",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1239,
    "kind": "member",
    "name": "KEY_PAUSE_BREAK",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_PAUSE_BREAK",
    "access": "public",
    "description": "Code for the PAUSE_BREAK key.",
    "lineNumber": 180,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_PAUSE_BREAK",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1240,
    "kind": "member",
    "name": "KEY_CAPS_LOCK",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_CAPS_LOCK",
    "access": "public",
    "description": "Code for the CAPS_LOCK key.",
    "lineNumber": 188,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_CAPS_LOCK",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1241,
    "kind": "member",
    "name": "KEY_ESCAPE",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_ESCAPE",
    "access": "public",
    "description": "Code for the ESCAPE key.",
    "lineNumber": 196,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_ESCAPE",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1242,
    "kind": "member",
    "name": "KEY_PAGE_UP",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_PAGE_UP",
    "access": "public",
    "description": "Code for the PAGE_UP key.",
    "lineNumber": 204,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_PAGE_UP",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1243,
    "kind": "member",
    "name": "KEY_PAGE_DOWN",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_PAGE_DOWN",
    "access": "public",
    "description": "Code for the PAGE_DOWN key.",
    "lineNumber": 212,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_PAGE_DOWN",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1244,
    "kind": "member",
    "name": "KEY_END",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_END",
    "access": "public",
    "description": "Code for the END key.",
    "lineNumber": 220,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_END",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1245,
    "kind": "member",
    "name": "KEY_HOME",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_HOME",
    "access": "public",
    "description": "Code for the HOME key.",
    "lineNumber": 228,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_HOME",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1246,
    "kind": "member",
    "name": "KEY_LEFT_ARROW",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_LEFT_ARROW",
    "access": "public",
    "description": "Code for the LEFT_ARROW key.",
    "lineNumber": 236,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_LEFT_ARROW",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1247,
    "kind": "member",
    "name": "KEY_UP_ARROW",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_UP_ARROW",
    "access": "public",
    "description": "Code for the UP_ARROW key.",
    "lineNumber": 244,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_UP_ARROW",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1248,
    "kind": "member",
    "name": "KEY_RIGHT_ARROW",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_RIGHT_ARROW",
    "access": "public",
    "description": "Code for the RIGHT_ARROW key.",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_RIGHT_ARROW",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1249,
    "kind": "member",
    "name": "KEY_DOWN_ARROW",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_DOWN_ARROW",
    "access": "public",
    "description": "Code for the DOWN_ARROW key.",
    "lineNumber": 260,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_DOWN_ARROW",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1250,
    "kind": "member",
    "name": "KEY_INSERT",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_INSERT",
    "access": "public",
    "description": "Code for the INSERT key.",
    "lineNumber": 268,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_INSERT",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1251,
    "kind": "member",
    "name": "KEY_DELETE",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_DELETE",
    "access": "public",
    "description": "Code for the DELETE key.",
    "lineNumber": 276,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_DELETE",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1252,
    "kind": "member",
    "name": "KEY_NUM_0",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUM_0",
    "access": "public",
    "description": "Code for the 0 key.",
    "lineNumber": 284,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUM_0",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1253,
    "kind": "member",
    "name": "KEY_NUM_1",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUM_1",
    "access": "public",
    "description": "Code for the 1 key.",
    "lineNumber": 292,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUM_1",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1254,
    "kind": "member",
    "name": "KEY_NUM_2",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUM_2",
    "access": "public",
    "description": "Code for the 2 key.",
    "lineNumber": 300,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUM_2",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1255,
    "kind": "member",
    "name": "KEY_NUM_3",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUM_3",
    "access": "public",
    "description": "Code for the 3 key.",
    "lineNumber": 308,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUM_3",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1256,
    "kind": "member",
    "name": "KEY_NUM_4",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUM_4",
    "access": "public",
    "description": "Code for the 4 key.",
    "lineNumber": 316,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUM_4",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1257,
    "kind": "member",
    "name": "KEY_NUM_5",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUM_5",
    "access": "public",
    "description": "Code for the 5 key.",
    "lineNumber": 324,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUM_5",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1258,
    "kind": "member",
    "name": "KEY_NUM_6",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUM_6",
    "access": "public",
    "description": "Code for the 6 key.",
    "lineNumber": 332,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUM_6",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1259,
    "kind": "member",
    "name": "KEY_NUM_7",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUM_7",
    "access": "public",
    "description": "Code for the 7 key.",
    "lineNumber": 340,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUM_7",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1260,
    "kind": "member",
    "name": "KEY_NUM_8",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUM_8",
    "access": "public",
    "description": "Code for the 8 key.",
    "lineNumber": 348,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUM_8",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1261,
    "kind": "member",
    "name": "KEY_NUM_9",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUM_9",
    "access": "public",
    "description": "Code for the 9 key.",
    "lineNumber": 356,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUM_9",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1262,
    "kind": "member",
    "name": "KEY_A",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_A",
    "access": "public",
    "description": "Code for the A key.",
    "lineNumber": 364,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_A",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1263,
    "kind": "member",
    "name": "KEY_B",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_B",
    "access": "public",
    "description": "Code for the B key.",
    "lineNumber": 372,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_B",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1264,
    "kind": "member",
    "name": "KEY_C",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_C",
    "access": "public",
    "description": "Code for the C key.",
    "lineNumber": 380,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_C",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1265,
    "kind": "member",
    "name": "KEY_D",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_D",
    "access": "public",
    "description": "Code for the D key.",
    "lineNumber": 388,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_D",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1266,
    "kind": "member",
    "name": "KEY_E",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_E",
    "access": "public",
    "description": "Code for the E key.",
    "lineNumber": 396,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_E",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1267,
    "kind": "member",
    "name": "KEY_F",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_F",
    "access": "public",
    "description": "Code for the F key.",
    "lineNumber": 404,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_F",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1268,
    "kind": "member",
    "name": "KEY_G",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_G",
    "access": "public",
    "description": "Code for the G key.",
    "lineNumber": 412,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_G",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1269,
    "kind": "member",
    "name": "KEY_H",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_H",
    "access": "public",
    "description": "Code for the H key.",
    "lineNumber": 420,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_H",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1270,
    "kind": "member",
    "name": "KEY_I",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_I",
    "access": "public",
    "description": "Code for the I key.",
    "lineNumber": 428,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_I",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1271,
    "kind": "member",
    "name": "KEY_J",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_J",
    "access": "public",
    "description": "Code for the J key.",
    "lineNumber": 436,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_J",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1272,
    "kind": "member",
    "name": "KEY_K",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_K",
    "access": "public",
    "description": "Code for the K key.",
    "lineNumber": 444,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_K",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1273,
    "kind": "member",
    "name": "KEY_L",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_L",
    "access": "public",
    "description": "Code for the L key.",
    "lineNumber": 452,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_L",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1274,
    "kind": "member",
    "name": "KEY_M",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_M",
    "access": "public",
    "description": "Code for the M key.",
    "lineNumber": 460,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_M",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1275,
    "kind": "member",
    "name": "KEY_N",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_N",
    "access": "public",
    "description": "Code for the N key.",
    "lineNumber": 468,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_N",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1276,
    "kind": "member",
    "name": "KEY_O",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_O",
    "access": "public",
    "description": "Code for the O key.",
    "lineNumber": 476,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_O",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1277,
    "kind": "member",
    "name": "KEY_P",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_P",
    "access": "public",
    "description": "Code for the P key.",
    "lineNumber": 484,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_P",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1278,
    "kind": "member",
    "name": "KEY_Q",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_Q",
    "access": "public",
    "description": "Code for the Q key.",
    "lineNumber": 492,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_Q",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1279,
    "kind": "member",
    "name": "KEY_R",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_R",
    "access": "public",
    "description": "Code for the R key.",
    "lineNumber": 500,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_R",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1280,
    "kind": "member",
    "name": "KEY_S",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_S",
    "access": "public",
    "description": "Code for the S key.",
    "lineNumber": 508,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_S",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1281,
    "kind": "member",
    "name": "KEY_T",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_T",
    "access": "public",
    "description": "Code for the T key.",
    "lineNumber": 516,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_T",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1282,
    "kind": "member",
    "name": "KEY_U",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_U",
    "access": "public",
    "description": "Code for the U key.",
    "lineNumber": 524,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_U",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1283,
    "kind": "member",
    "name": "KEY_V",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_V",
    "access": "public",
    "description": "Code for the V key.",
    "lineNumber": 532,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_V",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1284,
    "kind": "member",
    "name": "KEY_W",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_W",
    "access": "public",
    "description": "Code for the W key.",
    "lineNumber": 540,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_W",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1285,
    "kind": "member",
    "name": "KEY_X",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_X",
    "access": "public",
    "description": "Code for the X key.",
    "lineNumber": 548,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_X",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1286,
    "kind": "member",
    "name": "KEY_Y",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_Y",
    "access": "public",
    "description": "Code for the Y key.",
    "lineNumber": 556,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_Y",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1287,
    "kind": "member",
    "name": "KEY_Z",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_Z",
    "access": "public",
    "description": "Code for the Z key.",
    "lineNumber": 564,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_Z",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1288,
    "kind": "member",
    "name": "KEY_LEFT_WINDOW",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_LEFT_WINDOW",
    "access": "public",
    "description": "Code for the LEFT_WINDOW key.",
    "lineNumber": 572,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_LEFT_WINDOW",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1289,
    "kind": "member",
    "name": "KEY_RIGHT_WINDOW",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_RIGHT_WINDOW",
    "access": "public",
    "description": "Code for the RIGHT_WINDOW key.",
    "lineNumber": 580,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_RIGHT_WINDOW",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1290,
    "kind": "member",
    "name": "KEY_SELECT_KEY",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_SELECT_KEY",
    "access": "public",
    "description": "Code for the SELECT key.",
    "lineNumber": 588,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_SELECT",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1291,
    "kind": "member",
    "name": "KEY_NUMPAD_0",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUMPAD_0",
    "access": "public",
    "description": "Code for the number pad 0 key.",
    "lineNumber": 596,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUMPAD_0",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1292,
    "kind": "member",
    "name": "KEY_NUMPAD_1",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUMPAD_1",
    "access": "public",
    "description": "Code for the number pad 1 key.",
    "lineNumber": 604,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUMPAD_1",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1293,
    "kind": "member",
    "name": "KEY_NUMPAD_2",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUMPAD_2",
    "access": "public",
    "description": "Code for the number pad 2 key.",
    "lineNumber": 612,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUMPAD",
        "description": "2"
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1294,
    "kind": "member",
    "name": "KEY_NUMPAD_3",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUMPAD_3",
    "access": "public",
    "description": "Code for the number pad 3 key.",
    "lineNumber": 620,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUMPAD_3",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1295,
    "kind": "member",
    "name": "KEY_NUMPAD_4",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUMPAD_4",
    "access": "public",
    "description": "Code for the number pad 4 key.",
    "lineNumber": 628,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUMPAD_4",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1296,
    "kind": "member",
    "name": "KEY_NUMPAD_5",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUMPAD_5",
    "access": "public",
    "description": "Code for the number pad 5 key.",
    "lineNumber": 636,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUMPAD_5",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1297,
    "kind": "member",
    "name": "KEY_NUMPAD_6",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUMPAD_6",
    "access": "public",
    "description": "Code for the number pad 6 key.",
    "lineNumber": 644,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUMPAD_6",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1298,
    "kind": "member",
    "name": "KEY_NUMPAD_7",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUMPAD_7",
    "access": "public",
    "description": "Code for the number pad 7 key.",
    "lineNumber": 652,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUMPAD_7",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1299,
    "kind": "member",
    "name": "KEY_NUMPAD_8",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUMPAD_8",
    "access": "public",
    "description": "Code for the number pad 8 key.",
    "lineNumber": 660,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUMPAD_8",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1300,
    "kind": "member",
    "name": "KEY_NUMPAD_9",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUMPAD_9",
    "access": "public",
    "description": "Code for the number pad 9 key.",
    "lineNumber": 668,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUMPAD_9",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1301,
    "kind": "member",
    "name": "KEY_MULTIPLY",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_MULTIPLY",
    "access": "public",
    "description": "Code for the MULTIPLY key.",
    "lineNumber": 676,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_MULTIPLY",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1302,
    "kind": "member",
    "name": "KEY_ADD",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_ADD",
    "access": "public",
    "description": "Code for the ADD key.",
    "lineNumber": 684,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_ADD",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1303,
    "kind": "member",
    "name": "KEY_SUBTRACT",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_SUBTRACT",
    "access": "public",
    "description": "Code for the SUBTRACT key.",
    "lineNumber": 692,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_SUBTRACT",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1304,
    "kind": "member",
    "name": "KEY_DECIMAL_POINT",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_DECIMAL_POINT",
    "access": "public",
    "description": "Code for the DECIMAL POINT key.",
    "lineNumber": 700,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_DECIMAL_POINT",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1305,
    "kind": "member",
    "name": "KEY_DIVIDE",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_DIVIDE",
    "access": "public",
    "description": "Code for the DIVIDE key.",
    "lineNumber": 708,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_DIVIDE",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1306,
    "kind": "member",
    "name": "KEY_F1",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_F1",
    "access": "public",
    "description": "Code for the F1 key.",
    "lineNumber": 716,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_F1",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1307,
    "kind": "member",
    "name": "KEY_F2",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_F2",
    "access": "public",
    "description": "Code for the F2 key.",
    "lineNumber": 724,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_F2",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1308,
    "kind": "member",
    "name": "KEY_F3",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_F3",
    "access": "public",
    "description": "Code for the F3 key.",
    "lineNumber": 732,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_F3",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1309,
    "kind": "member",
    "name": "KEY_F4",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_F4",
    "access": "public",
    "description": "Code for the F4 key.",
    "lineNumber": 740,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_F4",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1310,
    "kind": "member",
    "name": "KEY_F5",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_F5",
    "access": "public",
    "description": "Code for the F5 key.",
    "lineNumber": 748,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_F5",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1311,
    "kind": "member",
    "name": "KEY_F6",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_F6",
    "access": "public",
    "description": "Code for the F6 key.",
    "lineNumber": 756,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_F6",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1312,
    "kind": "member",
    "name": "KEY_F7",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_F7",
    "access": "public",
    "description": "Code for the F7 key.",
    "lineNumber": 764,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_F7",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1313,
    "kind": "member",
    "name": "KEY_F8",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_F8",
    "access": "public",
    "description": "Code for the F8 key.",
    "lineNumber": 772,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_F8",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1314,
    "kind": "member",
    "name": "KEY_F9",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_F9",
    "access": "public",
    "description": "Code for the F9 key.",
    "lineNumber": 780,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_F9",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1315,
    "kind": "member",
    "name": "KEY_F10",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_F10",
    "access": "public",
    "description": "Code for the F10 key.",
    "lineNumber": 788,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_F10",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1316,
    "kind": "member",
    "name": "KEY_F11",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_F11",
    "access": "public",
    "description": "Code for the F11 key.",
    "lineNumber": 796,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_F11",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1317,
    "kind": "member",
    "name": "KEY_F12",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_F12",
    "access": "public",
    "description": "Code for the F12 key.",
    "lineNumber": 804,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_F12",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1318,
    "kind": "member",
    "name": "KEY_NUM_LOCK",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_NUM_LOCK",
    "access": "public",
    "description": "Code for the NUM_LOCK key.",
    "lineNumber": 812,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_NUM_LOCK",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1319,
    "kind": "member",
    "name": "KEY_SCROLL_LOCK",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_SCROLL_LOCK",
    "access": "public",
    "description": "Code for the SCROLL_LOCK key.",
    "lineNumber": 820,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_SCROLL_LOCK",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1320,
    "kind": "member",
    "name": "KEY_SEMI_COLON",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_SEMI_COLON",
    "access": "public",
    "description": "Code for the SEMI_COLON key.",
    "lineNumber": 828,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_SEMI_COLON",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1321,
    "kind": "member",
    "name": "KEY_EQUAL_SIGN",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_EQUAL_SIGN",
    "access": "public",
    "description": "Code for the EQUAL_SIGN key.",
    "lineNumber": 836,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_EQUAL_SIGN",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1322,
    "kind": "member",
    "name": "KEY_COMMA",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_COMMA",
    "access": "public",
    "description": "Code for the COMMA key.",
    "lineNumber": 844,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_COMMA",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1323,
    "kind": "member",
    "name": "KEY_DASH",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_DASH",
    "access": "public",
    "description": "Code for the DASH key.",
    "lineNumber": 852,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_DASH",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1324,
    "kind": "member",
    "name": "KEY_PERIOD",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_PERIOD",
    "access": "public",
    "description": "Code for the PERIOD key.",
    "lineNumber": 860,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_PERIOD",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1325,
    "kind": "member",
    "name": "KEY_FORWARD_SLASH",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_FORWARD_SLASH",
    "access": "public",
    "description": "Code for the FORWARD_SLASH key.",
    "lineNumber": 868,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_FORWARD_SLASH",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1326,
    "kind": "member",
    "name": "KEY_GRAVE_ACCENT",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_GRAVE_ACCENT",
    "access": "public",
    "description": "Code for the GRAVE_ACCENT key.",
    "lineNumber": 876,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_GRAVE_ACCENT",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1327,
    "kind": "member",
    "name": "KEY_OPEN_BRACKET",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_OPEN_BRACKET",
    "access": "public",
    "description": "Code for the OPEN_BRACKET key.",
    "lineNumber": 884,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_OPEN_BRACKET",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1328,
    "kind": "member",
    "name": "KEY_BACK_SLASH",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_BACK_SLASH",
    "access": "public",
    "description": "Code for the BACK_SLASH key.",
    "lineNumber": 892,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_BACK_SLASH",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1329,
    "kind": "member",
    "name": "KEY_CLOSE_BRACKET",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_CLOSE_BRACKET",
    "access": "public",
    "description": "Code for the CLOSE_BRACKET key.",
    "lineNumber": 900,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_CLOSE_BRACKET",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1330,
    "kind": "member",
    "name": "KEY_SINGLE_QUOTE",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_SINGLE_QUOTE",
    "access": "public",
    "description": "Code for the SINGLE_QUOTE key.",
    "lineNumber": 908,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_SINGLE_QUOTE",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1331,
    "kind": "member",
    "name": "KEY_SPACE",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#KEY_SPACE",
    "access": "public",
    "description": "Code for the SPACE key.",
    "lineNumber": 916,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "KEY_SPACE",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1431,
    "kind": "member",
    "name": "_element",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#_element",
    "access": "private",
    "description": null,
    "lineNumber": 1703,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1432,
    "kind": "member",
    "name": "altDown",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#altDown",
    "access": "public",
    "description": null,
    "lineNumber": 1706,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1433,
    "kind": "member",
    "name": "ctrlDown",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#ctrlDown",
    "access": "public",
    "description": "True whenever CTRL is down",
    "lineNumber": 1712,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1434,
    "kind": "member",
    "name": "mouseDownLeft",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#mouseDownLeft",
    "access": "public",
    "description": "True whenever left mouse button is down",
    "lineNumber": 1718,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1435,
    "kind": "member",
    "name": "mouseDownMiddle",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#mouseDownMiddle",
    "access": "public",
    "description": "True whenever middle mouse button is down",
    "lineNumber": 1724,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1436,
    "kind": "member",
    "name": "mouseDownRight",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#mouseDownRight",
    "access": "public",
    "description": "True whenever right mouse button is down",
    "lineNumber": 1730,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1437,
    "kind": "member",
    "name": "keyDown",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#keyDown",
    "access": "public",
    "description": "Flag for each key that's down",
    "lineNumber": 1736,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1438,
    "kind": "member",
    "name": "enabled",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#enabled",
    "access": "public",
    "description": "True while input enabled",
    "lineNumber": 1742,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1439,
    "kind": "member",
    "name": "mouseover",
    "memberof": "scene/input/Input.js~Input",
    "static": false,
    "longname": "scene/input/Input.js~Input#mouseover",
    "access": "public",
    "description": "True while mouse is over the parent {@link Scene} {@link Canvas\"}}Canvas{{/crossLink}}",
    "lineNumber": 1748,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1440,
    "kind": "method",
    "name": "_getClickCoordsWithinElement",
    "memberof": "scene/input/Input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/input/Input.js~Input#_getClickCoordsWithinElement",
    "access": "private",
    "description": null,
    "lineNumber": 2175,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "event",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1441,
    "kind": "method",
    "name": "setEnabled",
    "memberof": "scene/input/Input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/input/Input.js~Input#setEnabled",
    "access": "public",
    "description": "Enable or disable all input handlers",
    "lineNumber": 2203,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "enable",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 1442,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/input/Input.js~Input",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/input/Input.js~Input#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 2209,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1443,
    "kind": "file",
    "name": "scene/libs/canvas2image.js",
    "content": "/*\n * Canvas2Image v0.1\n * Copyright (c) 2008 Jacob Seidelin, cupboy@gmail.com\n * MIT License [http://www.opensource.org/licenses/mit-license.php]\n */\n\n/**\n * @private\n */\nconst Canvas2Image = (function () {\n    // check if we have canvas support\n    const oCanvas = document.createElement(\"canvas\"), sc = String.fromCharCode, strDownloadMime = \"image/octet-stream\", bReplaceDownloadMime = false;\n\n    // no canvas, bail out.\n    if (!oCanvas.getContext) {\n        return {\n            saveAsBMP: function () {\n            },\n            saveAsPNG: function () {\n            },\n            saveAsJPEG: function () {\n            }\n        }\n    }\n\n    const bHasImageData = !!(oCanvas.getContext(\"2d\").getImageData), bHasDataURL = !!(oCanvas.toDataURL), bHasBase64 = !!(window.btoa);\n\n    // ok, we're good\n    const readCanvasData = function (oCanvas) {\n        const iWidth = parseInt(oCanvas.width), iHeight = parseInt(oCanvas.height);\n        return oCanvas.getContext(\"2d\").getImageData(0, 0, iWidth, iHeight);\n    };\n\n    // base64 encodes either a string or an array of charcodes\n    const encodeData = function (data) {\n        let i, aData, strData = \"\";\n\n        if (typeof data == \"string\") {\n            strData = data;\n        } else {\n            aData = data;\n            for (i = 0; i < aData.length; i++) {\n                strData += sc(aData[i]);\n            }\n        }\n        return btoa(strData);\n    };\n\n    // creates a base64 encoded string containing BMP data takes an imagedata object as argument\n    const createBMP = function (oData) {\n        let strHeader = '';\n        const iWidth = oData.width;\n        const iHeight = oData.height;\n\n        strHeader += 'BM';\n\n        let iFileSize = iWidth * iHeight * 4 + 54; // total header size = 54 bytes\n        strHeader += sc(iFileSize % 256);\n        iFileSize = Math.floor(iFileSize / 256);\n        strHeader += sc(iFileSize % 256);\n        iFileSize = Math.floor(iFileSize / 256);\n        strHeader += sc(iFileSize % 256);\n        iFileSize = Math.floor(iFileSize / 256);\n        strHeader += sc(iFileSize % 256);\n\n        strHeader += sc(0, 0, 0, 0, 54, 0, 0, 0); // data offset\n        strHeader += sc(40, 0, 0, 0); // info header size\n\n        let iImageWidth = iWidth;\n        strHeader += sc(iImageWidth % 256);\n        iImageWidth = Math.floor(iImageWidth / 256);\n        strHeader += sc(iImageWidth % 256);\n        iImageWidth = Math.floor(iImageWidth / 256);\n        strHeader += sc(iImageWidth % 256);\n        iImageWidth = Math.floor(iImageWidth / 256);\n        strHeader += sc(iImageWidth % 256);\n\n        let iImageHeight = iHeight;\n        strHeader += sc(iImageHeight % 256);\n        iImageHeight = Math.floor(iImageHeight / 256);\n        strHeader += sc(iImageHeight % 256);\n        iImageHeight = Math.floor(iImageHeight / 256);\n        strHeader += sc(iImageHeight % 256);\n        iImageHeight = Math.floor(iImageHeight / 256);\n        strHeader += sc(iImageHeight % 256);\n\n        strHeader += sc(1, 0, 32, 0); // num of planes & num of bits per pixel\n        strHeader += sc(0, 0, 0, 0); // compression = none\n\n        let iDataSize = iWidth * iHeight * 4;\n        strHeader += sc(iDataSize % 256);\n        iDataSize = Math.floor(iDataSize / 256);\n        strHeader += sc(iDataSize % 256);\n        iDataSize = Math.floor(iDataSize / 256);\n        strHeader += sc(iDataSize % 256);\n        iDataSize = Math.floor(iDataSize / 256);\n        strHeader += sc(iDataSize % 256);\n\n        strHeader += sc(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0); // these bytes are not used\n\n        const aImgData = oData.data;\n        let strPixelData = \"\";\n        let c;\n        let x;\n        let y = iHeight;\n        let iOffsetX;\n        let iOffsetY;\n        let strPixelRow;\n\n        do {\n            iOffsetY = iWidth * (y - 1) * 4;\n            strPixelRow = \"\";\n            for (x = 0; x < iWidth; x++) {\n                iOffsetX = 4 * x;\n                strPixelRow += sc(\n                    aImgData[iOffsetY + iOffsetX + 2], // B\n                    aImgData[iOffsetY + iOffsetX + 1], // G\n                    aImgData[iOffsetY + iOffsetX],     // R\n                    aImgData[iOffsetY + iOffsetX + 3]  // A\n                );\n            }\n            strPixelData += strPixelRow;\n        } while (--y);\n\n        return encodeData(strHeader + strPixelData);\n    };\n\n    // sends the generated file to the client\n    const saveFile = function (strData) {\n        if (!window.open(strData)) {\n            document.location.href = strData;\n        }\n    };\n\n    const makeDataURI = function (strData, strMime) {\n        return \"data:\" + strMime + \";base64,\" + strData;\n    };\n\n    // generates a <img> object containing the imagedata\n    const makeImageObject = function (strSource) {\n        const oImgElement = document.createElement(\"img\");\n        oImgElement.src = strSource;\n        return oImgElement;\n    };\n\n    const scaleCanvas = function (oCanvas, iWidth, iHeight) {\n        if (iWidth && iHeight) {\n            const oSaveCanvas = document.createElement(\"canvas\");\n            oSaveCanvas.width = iWidth;\n            oSaveCanvas.height = iHeight;\n            oSaveCanvas.style.width = iWidth + \"px\";\n            oSaveCanvas.style.height = iHeight + \"px\";\n            const oSaveCtx = oSaveCanvas.getContext(\"2d\");\n            oSaveCtx.drawImage(oCanvas, 0, 0, oCanvas.width, oCanvas.height, 0, 0, iWidth, iHeight);\n            return oSaveCanvas;\n        }\n        return oCanvas;\n    };\n\n    return {\n        saveAsPNG: function (oCanvas, bReturnImg, iWidth, iHeight) {\n            if (!bHasDataURL) return false;\n            const oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight), strMime = \"image/png\", strData = oScaledCanvas.toDataURL(strMime);\n            if (bReturnImg) {\n                return makeImageObject(strData);\n            } else {\n                saveFile(bReplaceDownloadMime ? strData.replace(strMime, strDownloadMime) : strData);\n            }\n            return true;\n        },\n\n        saveAsJPEG: function (oCanvas, bReturnImg, iWidth, iHeight) {\n            if (!bHasDataURL) return false;\n            const oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight), strMime = \"image/jpeg\", strData = oScaledCanvas.toDataURL(strMime);\n            // check if browser actually supports jpeg by looking for the mime type in the data uri. if not, return false\n            if (strData.indexOf(strMime) != 5) return false;\n            if (bReturnImg) {\n                return makeImageObject(strData);\n            } else {\n                saveFile(bReplaceDownloadMime ? strData.replace(strMime, strDownloadMime) : strData);\n            }\n            return true;\n        },\n\n        saveAsBMP: function (oCanvas, bReturnImg, iWidth, iHeight) {\n            if (!(bHasDataURL && bHasImageData && bHasBase64)) return false;\n            const oScaledCanvas = scaleCanvas(oCanvas, iWidth, iHeight), strMime = \"image/bmp\", oData = readCanvasData(oScaledCanvas), strImgData = createBMP(oData);\n            if (bReturnImg) {\n                return makeImageObject(makeDataURI(strImgData, strMime));\n            } else {\n                saveFile(makeDataURI(strImgData, strMime));\n            }\n            return true;\n        }\n    };\n})();\n\nexport {Canvas2Image};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/libs/canvas2image.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1444,
    "kind": "variable",
    "name": "Canvas2Image",
    "memberof": "scene/libs/canvas2image.js",
    "static": true,
    "longname": "scene/libs/canvas2image.js~Canvas2Image",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/libs/canvas2image.js",
    "importStyle": "{Canvas2Image}",
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1445,
    "kind": "file",
    "name": "scene/lights/AmbientLight.js",
    "content": "import {math} from '../math/math.js';\nimport {Light} from './Light.js';\n\n/**\n * @desc An ambient light source of fixed color and intensity that illuminates all {@link Mesh}es equally.\n *\n * * {@link AmbientLight#color} multiplies by {@link PhongMaterial#ambient} at each position of each {@link Geometry} surface.\n * * {@link AmbientLight#color} multiplies by {@link LambertMaterial#color} uniformly across each triangle of each {@link Geometry} (ie. flat shaded).\n * * {@link AmbientLight}s, {@link DirLight}s and {@link PointLight}s are registered by their {@link Component#id} on {@link Scene#lights}.\n *\n * ## Usage\n *\n * In the example below we'll destroy the {@link Scene}'s default light sources then create an AmbientLight and a couple of {@link @DirLight}s:\n *\n * ````javascript\n * myViewer.scene.clearLights();\n *\n * new AmbientLight(myViewer.scene, {\n *     id: \"myAmbientLight\",\n *     color: [0.8, 0.8, 0.8],\n *     intensity: 0.5\n * });\n *\n * new DirLight(myViewer.scene, {\n *     id: \"myDirLight1\",\n *     dir: [-0.8, -0.4, -0.4],\n *     color: [0.4, 0.4, 0.5],\n *     intensity: 0.5,\n *     space: \"view\"\n * });\n *\n * new DirLight(myViewer.scene, {\n *     id: \"myDirLight2\",\n *     dir: [0.2, -0.8, 0.8],\n *     color: [0.8, 0.8, 0.8],\n *     intensity: 0.5,\n *     space: \"view\"\n * });\n *\n * // Adjust the color of our AmbientLight\n *\n * var ambientLight = myViewer.scene.lights[\"myAmbientLight\"];\n * ambientLight.color = [1.0, 0.8, 0.8];\n * ````\n */\nclass AmbientLight extends Light {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"AmbientLight\";\n    }\n\n    /**\n     * @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] AmbientLight configuration\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n     @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this AmbientLight.\n     @param [cfg.color=[0.7, 0.7, 0.8]] {Array(Number)} The color of this AmbientLight.\n     @param [cfg.intensity=[1.0]] {Number} The intensity of this AmbientLight, as a factor in range ````[0..1]````.\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg={}) {\n        super(owner, cfg);\n        this._state = {\n            type: \"ambient\",\n            color: math.vec3([0.7, 0.7, 0.7]),\n            intensity: 1.0\n        };\n        this.color = cfg.color;\n        this.intensity = cfg.intensity;\n        this.scene._lightCreated(this);\n    }\n\n    /**\n     The color of this AmbientLight.\n\n     @property color\n     @default [0.7, 0.7, 0.8]\n     @type Float32Array\n     */\n    set color(value) {\n        this._state.color.set(value || [0.7, 0.7, 0.8]);\n        this.glRedraw();\n    }\n\n    get color() {\n        return this._state.color;\n    }\n\n    /**\n     The intensity of this AmbientLight.\n\n     @property intensity\n     @default 1.0\n     @type Number\n     */\n    set intensity(value) {\n        this._state.intensity = value !== undefined ? value : 1.0;\n        this.glRedraw();\n    }\n\n    get intensity() {\n        return this._state.intensity;\n    }\n\n    destroy() {\n        super.destroy();\n    }\n}\n\nexport {AmbientLight};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/lights/AmbientLight.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1446,
    "kind": "class",
    "name": "AmbientLight",
    "memberof": "scene/lights/AmbientLight.js",
    "static": true,
    "longname": "scene/lights/AmbientLight.js~AmbientLight",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/lights/AmbientLight.js",
    "importStyle": "{AmbientLight}",
    "description": "An ambient light source of fixed color and intensity that illuminates all {@link Mesh}es equally.\n\n* {@link AmbientLight#color} multiplies by {@link PhongMaterial#ambient} at each position of each {@link Geometry} surface.\n* {@link AmbientLight#color} multiplies by {@link LambertMaterial#color} uniformly across each triangle of each {@link Geometry} (ie. flat shaded).\n* {@link AmbientLight}s, {@link DirLight}s and {@link PointLight}s are registered by their {@link Component#id} on {@link Scene#lights}.\n\n## Usage\n\nIn the example below we'll destroy the {@link Scene}'s default light sources then create an AmbientLight and a couple of {@link @DirLight}s:\n\n````javascript\nmyViewer.scene.clearLights();\n\nnew AmbientLight(myViewer.scene, {\n    id: \"myAmbientLight\",\n    color: [0.8, 0.8, 0.8],\n    intensity: 0.5\n});\n\nnew DirLight(myViewer.scene, {\n    id: \"myDirLight1\",\n    dir: [-0.8, -0.4, -0.4],\n    color: [0.4, 0.4, 0.5],\n    intensity: 0.5,\n    space: \"view\"\n});\n\nnew DirLight(myViewer.scene, {\n    id: \"myDirLight2\",\n    dir: [0.2, -0.8, 0.8],\n    color: [0.8, 0.8, 0.8],\n    intensity: 0.5,\n    space: \"view\"\n});\n\n// Adjust the color of our AmbientLight\n\nvar ambientLight = myViewer.scene.lights[\"myAmbientLight\"];\nambientLight.color = [1.0, 0.8, 0.8];\n````",
    "lineNumber": 46,
    "interface": false,
    "extends": [
      "scene/lights/Light.js~Light"
    ]
  },
  {
    "__docId__": 1447,
    "kind": "get",
    "name": "type",
    "memberof": "scene/lights/AmbientLight.js~AmbientLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/AmbientLight.js~AmbientLight#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 57,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1448,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/lights/AmbientLight.js~AmbientLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/AmbientLight.js~AmbientLight#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 71,
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "AmbientLight configuration"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "String:Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.meta",
        "description": "Optional map of user-defined metadata to attach to this AmbientLight."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0.7, 0.7, 0.8]",
        "defaultRaw": [
          0.7,
          0.7,
          0.8
        ],
        "name": "cfg.color",
        "description": "{Array(Number)} The color of this AmbientLight."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1.0]",
        "defaultRaw": [
          1
        ],
        "name": "cfg.intensity",
        "description": "{Number} The intensity of this AmbientLight, as a factor in range ````[0..1]````."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1449,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/lights/AmbientLight.js~AmbientLight",
    "static": false,
    "longname": "scene/lights/AmbientLight.js~AmbientLight#_state",
    "access": "private",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{\"type\": string, \"color\": *, \"intensity\": number}"
      ]
    }
  },
  {
    "__docId__": 1452,
    "kind": "set",
    "name": "color",
    "memberof": "scene/lights/AmbientLight.js~AmbientLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/AmbientLight.js~AmbientLight#color",
    "access": "public",
    "description": "The color of this AmbientLight.",
    "lineNumber": 90,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.7, 0.7, 0.8]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1453,
    "kind": "get",
    "name": "color",
    "memberof": "scene/lights/AmbientLight.js~AmbientLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/AmbientLight.js~AmbientLight#color",
    "access": "public",
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1454,
    "kind": "set",
    "name": "intensity",
    "memberof": "scene/lights/AmbientLight.js~AmbientLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/AmbientLight.js~AmbientLight#intensity",
    "access": "public",
    "description": "The intensity of this AmbientLight.",
    "lineNumber": 106,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "intensity",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1455,
    "kind": "get",
    "name": "intensity",
    "memberof": "scene/lights/AmbientLight.js~AmbientLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/AmbientLight.js~AmbientLight#intensity",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1456,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/lights/AmbientLight.js~AmbientLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/AmbientLight.js~AmbientLight#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1457,
    "kind": "file",
    "name": "scene/lights/CubeTexture.js",
    "content": "import {Component} from '../Component.js';\nimport {RenderState} from '../webgl/RenderState.js';\nimport {Texture2D} from '../webgl/Texture2D.js';\nimport {stats} from './../stats.js';\n\nfunction ensureImageSizePowerOfTwo(image) {\n    if (!isPowerOfTwo(image.width) || !isPowerOfTwo(image.height)) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = nextHighestPowerOfTwo(image.width);\n        canvas.height = nextHighestPowerOfTwo(image.height);\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(image,\n            0, 0, image.width, image.height,\n            0, 0, canvas.width, canvas.height);\n        image = canvas;\n    }\n    return image;\n}\n\nfunction isPowerOfTwo(x) {\n    return (x & (x - 1)) === 0;\n}\n\nfunction nextHighestPowerOfTwo(x) {\n    --x;\n    for (let i = 1; i < 32; i <<= 1) {\n        x = x | x >> i;\n    }\n    return x + 1;\n}\n\n/**\n * @desc A cube texture map.\n */\nclass CubeTexture extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"CubeTexture\";\n    }\n\n    /**\n     *  @constructor\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] Configs\n     @param {String} [cfg.id] Optional ID for this CubeTexture, unique among all components in the parent scene, generated automatically when omitted.\n     @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this CubeTexture.\n     @param [cfg.src=null] {Array of String} Paths to six image files to load into this CubeTexture.\n     @param [cfg.flipY=false] {Boolean} Flips this CubeTexture's source data along its vertical axis when true.\n     @param [cfg.encoding=\"linear\"] {String} Encoding format.  See the {@link CubeTexture/encoding} property for more info.\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        const gl = this.scene.canvas.gl;\n\n        this._state = new RenderState({\n            texture: new Texture2D(gl, gl.TEXTURE_CUBE_MAP),\n            flipY: this._checkFlipY(cfg.minFilter),\n            encoding: this._checkEncoding(cfg.encoding),\n            minFilter: \"linearMipmapLinear\",\n            magFilter: \"linear\",\n            wrapS: \"clampToEdge\",\n            wrapT: \"clampToEdge\",\n            mipmaps: true\n        });\n\n        this._src = cfg.src;\n        this._images = [];\n\n        this._loadSrc(cfg.src);\n\n        stats.memory.textures++;\n    }\n\n    _checkFlipY(value) {\n        return !!value;\n    }\n\n    _checkEncoding(value) {\n        value = value || \"linear\";\n        if (value !== \"linear\" && value !== \"sRGB\" && value !== \"gamma\") {\n            this.error(\"Unsupported value for 'encoding': '\" + value + \"' - supported values are 'linear', 'sRGB', 'gamma'. Defaulting to 'linear'.\");\n            value = \"linear\";\n        }\n        return value;\n    }\n\n    _webglContextRestored() {\n        const gl = this.scene.canvas.gl;\n        this._state.texture = null;\n        // if (this._images.length > 0) {\n        //     this._state.texture = new xeokit.renderer.Texture2D(gl, gl.TEXTURE_CUBE_MAP);\n        //     this._state.texture.setImage(this._images, this._state);\n        //     this._state.texture.setProps(this._state);\n        // } else\n        if (this._src) {\n            this._loadSrc(this._src);\n        }\n    }\n\n    _loadSrc(src) {\n        const self = this;\n        const gl = this.scene.canvas.gl;\n        this._images = [];\n        let loadFailed = false;\n        let numLoaded = 0;\n        for (let i = 0; i < src.length; i++) {\n            const image = new Image();\n            image.onload = (function () {\n                let _image = image;\n                const index = i;\n                return function () {\n                    if (loadFailed) {\n                        return;\n                    }\n                    _image = ensureImageSizePowerOfTwo(_image);\n                    self._images[index] = _image;\n                    numLoaded++;\n                    if (numLoaded === 6) {\n                        let texture = self._state.texture;\n                        if (!texture) {\n                            texture = new Texture2D(gl, gl.TEXTURE_CUBE_MAP);\n                            self._state.texture = texture;\n                        }\n                        texture.setImage(self._images, self._state);\n                        texture.setProps(self._state);\n                        /**\n                         * Fired whenever this CubeTexture has loaded the\n                         * image files that its {@link CubeTexture/src} property currently points to.\n                         * @event loaded\n                         * @param value {HTML Image} The value of the {@link CubeTexture/src} property\n                         */\n                        self.fire(\"loaded\", self._src);\n                    }\n                };\n            })();\n            image.onerror = function () {\n                loadFailed = true;\n            };\n            image.src = src[i];\n        }\n    }\n\n    destroy() {\n        super.destroy();\n        if (this._state.texture) {\n            this._state.texture.destroy();\n        }\n        stats.memory.textures--;\n        this._state.destroy();\n    }\n}\n\nexport {CubeTexture};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/lights/CubeTexture.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1458,
    "kind": "function",
    "name": "ensureImageSizePowerOfTwo",
    "memberof": "scene/lights/CubeTexture.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/lights/CubeTexture.js~ensureImageSizePowerOfTwo",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/lights/CubeTexture.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "params": [
      {
        "name": "image",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1459,
    "kind": "function",
    "name": "isPowerOfTwo",
    "memberof": "scene/lights/CubeTexture.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/lights/CubeTexture.js~isPowerOfTwo",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/lights/CubeTexture.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1460,
    "kind": "function",
    "name": "nextHighestPowerOfTwo",
    "memberof": "scene/lights/CubeTexture.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/lights/CubeTexture.js~nextHighestPowerOfTwo",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/lights/CubeTexture.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1461,
    "kind": "class",
    "name": "CubeTexture",
    "memberof": "scene/lights/CubeTexture.js",
    "static": true,
    "longname": "scene/lights/CubeTexture.js~CubeTexture",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/lights/CubeTexture.js",
    "importStyle": "{CubeTexture}",
    "description": "A cube texture map.",
    "lineNumber": 35,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 1462,
    "kind": "get",
    "name": "type",
    "memberof": "scene/lights/CubeTexture.js~CubeTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/CubeTexture.js~CubeTexture#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1463,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/lights/CubeTexture.js~CubeTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/CubeTexture.js~CubeTexture#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 62,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "Configs"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID for this CubeTexture, unique among all components in the parent scene, generated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "String:Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.meta",
        "description": "Optional map of user-defined metadata to attach to this CubeTexture."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "cfg.src",
        "description": "{Array of String} Paths to six image files to load into this CubeTexture."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.flipY",
        "description": "{Boolean} Flips this CubeTexture's source data along its vertical axis when true."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"linear\"",
        "defaultRaw": "linear",
        "name": "cfg.encoding",
        "description": "{String} Encoding format.  See the {@link CubeTexture/encoding} property for more info."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1464,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/lights/CubeTexture.js~CubeTexture",
    "static": false,
    "longname": "scene/lights/CubeTexture.js~CubeTexture#_state",
    "access": "private",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1465,
    "kind": "member",
    "name": "_src",
    "memberof": "scene/lights/CubeTexture.js~CubeTexture",
    "static": false,
    "longname": "scene/lights/CubeTexture.js~CubeTexture#_src",
    "access": "private",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1466,
    "kind": "member",
    "name": "_images",
    "memberof": "scene/lights/CubeTexture.js~CubeTexture",
    "static": false,
    "longname": "scene/lights/CubeTexture.js~CubeTexture#_images",
    "access": "private",
    "description": null,
    "lineNumber": 80,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 1467,
    "kind": "method",
    "name": "_checkFlipY",
    "memberof": "scene/lights/CubeTexture.js~CubeTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/CubeTexture.js~CubeTexture#_checkFlipY",
    "access": "private",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1468,
    "kind": "method",
    "name": "_checkEncoding",
    "memberof": "scene/lights/CubeTexture.js~CubeTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/CubeTexture.js~CubeTexture#_checkEncoding",
    "access": "private",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1469,
    "kind": "method",
    "name": "_webglContextRestored",
    "memberof": "scene/lights/CubeTexture.js~CubeTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/CubeTexture.js~CubeTexture#_webglContextRestored",
    "access": "private",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1470,
    "kind": "method",
    "name": "_loadSrc",
    "memberof": "scene/lights/CubeTexture.js~CubeTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/CubeTexture.js~CubeTexture#_loadSrc",
    "access": "private",
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "src",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 1472,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/lights/CubeTexture.js~CubeTexture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/CubeTexture.js~CubeTexture#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1473,
    "kind": "file",
    "name": "scene/lights/DirLight.js",
    "content": "import {Light} from './Light.js';\nimport {RenderState} from '../webgl/RenderState.js';\nimport {RenderBuffer} from '../webgl/RenderBuffer.js';\nimport {math} from '../math/math.js';\n\n/**\n * @desc A directional light source that illuminates all {@link Mesh}es equally from a given direction.\n *\n * * Has an emission direction vector in {@link DirLight#dir}, but no position.\n * * Defined in either *World* or *View* coordinate space. When in World-space, {@link DirLight#dir} is relative to the\n * World coordinate system, and will appear to move as the {@link Camera} moves. When in View-space, {@link DirLight#dir} is\n * relative to the View coordinate system, and will behave as if fixed to the viewer's head.\n * * {@link AmbientLight}s, {@link DirLight}s and {@link PointLight}s are registered by their {@link Component#id} on {@link Scene#lights}.\n *\n * ## Usage\n *\n * In the example below we'll destroy the {@link Scene}'s default light sources then create an {@link AmbientLight} and a couple of DirLights:\n *\n * ````javascript\n * myViewer.scene.clearLights();\n *\n * new AmbientLight(myViewer.scene, {\n *     id: \"myAmbientLight\",\n *     color: [0.8, 0.8, 0.8],\n *     intensity: 0.5\n * });\n *\n * new DirLight(myViewer.scene, {\n *     id: \"myDirLight1\",\n *     dir: [-0.8, -0.4, -0.4],\n *     color: [0.4, 0.4, 0.5],\n *     intensity: 0.5,\n *     space: \"view\"\n * });\n *\n * new DirLight(myViewer.scene, {\n *     id: \"myDirLight2\",\n *     dir: [0.2, -0.8, 0.8],\n *     color: [0.8, 0.8, 0.8],\n *     intensity: 0.5,\n *     space: \"view\"\n * });\n *\n * // Adjust the color of one of our DirLights\n *\n * var dirLight1 = myViewer.scene.lights[\"myDirLight1\"];\n * dirLight.color = [1.0, 0.8, 0.8];\n * ````\n */\nclass DirLight extends Light {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"DirLight\";\n    }\n\n    /**\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] The DirLight configuration\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n     @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this DirLight.\n     @param [cfg.dir=[1.0, 1.0, 1.0]] {Float32Array} A unit vector indicating the direction that the light is shining,\n     given in either World or View space, depending on the value of the **space** parameter.\n     @param [cfg.color=[0.7, 0.7, 0.8 ]] {Float32Array} The color of this DirLight.\n     @param [cfg.intensity=1.0 ] {Number} The intensity of this DirLight, as a factor in range ````[0..1]````.\n     @param [cfg.space=\"view\"] {String} The coordinate system the DirLight is defined in - \"view\" or \"space\".\n     @param [cfg.castShadow=false] {Boolean} Flag which indicates if this DirLight casts a castShadow.\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        const self = this;\n\n        this._shadowRenderBuf = null;\n        this._shadowViewMatrix = null;\n        this._shadowProjMatrix = null;\n        this._shadowViewMatrixDirty = true;\n        this._shadowProjMatrixDirty = true;\n\n        this._state = new RenderState({\n            type: \"dir\",\n            dir: math.vec3([1.0, 1.0, 1.0]),\n            color: math.vec3([0.7, 0.7, 0.8]),\n            intensity: 1.0,\n            space: cfg.space || \"view\",\n            castShadow: false,\n            shadowDirty: true,\n\n            getShadowViewMatrix: (function () {\n                const look = math.vec3();\n                const up = math.vec3([0, 1, 0]);\n                return function () {\n                    if (self._shadowViewMatrixDirty) {\n                        if (!self._shadowViewMatrix) {\n                            self._shadowViewMatrix = math.identityMat4();\n                        }\n                        const dir = self._state.dir;\n                        math.lookAtMat4v([-dir[0], -dir[1], -dir[2]], [0, 0, 0], up, self._shadowViewMatrix);\n                        self._shadowViewMatrixDirty = false;\n                    }\n                    return self._shadowViewMatrix;\n                };\n            })(),\n\n            getShadowProjMatrix: function () {\n                if (self._shadowProjMatrixDirty) { // TODO: Set when canvas resizes\n                    if (!self._shadowProjMatrix) {\n                        self._shadowProjMatrix = math.identityMat4();\n                    }\n                    math.orthoMat4c(-10, 10, -10, 10, 0, 500.0, self._shadowProjMatrix);\n                    self._shadowProjMatrixDirty = false;\n                }\n                return self._shadowProjMatrix;\n            },\n\n            getShadowRenderBuf: function () {\n                if (!self._shadowRenderBuf) {\n                    self._shadowRenderBuf = new RenderBuffer(self.scene.canvas.canvas, self.scene.canvas.gl, {size: [1024, 1024]});\n                }\n                return self._shadowRenderBuf;\n            }\n        });\n\n        this.dir = cfg.dir;\n        this.color = cfg.color;\n        this.intensity = cfg.intensity;\n        this.castShadow = cfg.castShadow;\n        this.scene._lightCreated(this);\n    }\n\n    /**\n     The direction in which the light is shining.\n\n     @property dir\n     @default [1.0, 1.0, 1.0]\n     @type Float32Array\n     */\n    set dir(value) {\n        this._state.dir.set(value || [1.0, 1.0, 1.0]);\n        this._shadowViewMatrixDirty = true;\n        this.glRedraw();\n    }\n\n    get dir() {\n        return this._state.dir;\n    }\n\n    /**\n     The color of this DirLight.\n\n     @property color\n     @default [0.7, 0.7, 0.8]\n     @type Float32Array\n     */\n    set color(value) {\n        this._state.color.set(value || [0.7, 0.7, 0.8]);\n        this.glRedraw();\n    }\n\n    get color() {\n        return this._state.color;\n    }\n\n    /**\n     The intensity of this DirLight.\n\n     Fires a {@link DirLight/intensity:event} event on change.\n\n     @property intensity\n     @default 1.0\n     @type Number\n     */\n    set intensity(value) {\n        value = value !== undefined ? value : 1.0;\n        this._state.intensity = value;\n        this.glRedraw();\n    }\n\n    get intensity() {\n        return this._state.intensity;\n    }\n\n    /**\n     Flag which indicates if this DirLight casts a shadow.\n\n     @property castShadow\n     @default false\n     @type Boolean\n     */\n    set castShadow(value) {\n        value = !!value;\n        if (this._state.castShadow === value) {\n            return;\n        }\n        this._state.castShadow = value;\n        this._shadowViewMatrixDirty = true;\n        this.glRedraw();\n    }\n\n    get castShadow() {\n        return this._state.castShadow;\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n        if (this._shadowRenderBuf) {\n            this._shadowRenderBuf.destroy();\n        }\n        this.scene._lightDestroyed(this);\n        this.glRedraw();\n    }\n}\n\nexport {DirLight};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/lights/DirLight.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1474,
    "kind": "class",
    "name": "DirLight",
    "memberof": "scene/lights/DirLight.js",
    "static": true,
    "longname": "scene/lights/DirLight.js~DirLight",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/lights/DirLight.js",
    "importStyle": "{DirLight}",
    "description": "A directional light source that illuminates all {@link Mesh}es equally from a given direction.\n\n* Has an emission direction vector in {@link DirLight#dir}, but no position.\n* Defined in either *World* or *View* coordinate space. When in World-space, {@link DirLight#dir} is relative to the\nWorld coordinate system, and will appear to move as the {@link Camera} moves. When in View-space, {@link DirLight#dir} is\nrelative to the View coordinate system, and will behave as if fixed to the viewer's head.\n* {@link AmbientLight}s, {@link DirLight}s and {@link PointLight}s are registered by their {@link Component#id} on {@link Scene#lights}.\n\n## Usage\n\nIn the example below we'll destroy the {@link Scene}'s default light sources then create an {@link AmbientLight} and a couple of DirLights:\n\n````javascript\nmyViewer.scene.clearLights();\n\nnew AmbientLight(myViewer.scene, {\n    id: \"myAmbientLight\",\n    color: [0.8, 0.8, 0.8],\n    intensity: 0.5\n});\n\nnew DirLight(myViewer.scene, {\n    id: \"myDirLight1\",\n    dir: [-0.8, -0.4, -0.4],\n    color: [0.4, 0.4, 0.5],\n    intensity: 0.5,\n    space: \"view\"\n});\n\nnew DirLight(myViewer.scene, {\n    id: \"myDirLight2\",\n    dir: [0.2, -0.8, 0.8],\n    color: [0.8, 0.8, 0.8],\n    intensity: 0.5,\n    space: \"view\"\n});\n\n// Adjust the color of one of our DirLights\n\nvar dirLight1 = myViewer.scene.lights[\"myDirLight1\"];\ndirLight.color = [1.0, 0.8, 0.8];\n````",
    "lineNumber": 50,
    "interface": false,
    "extends": [
      "scene/lights/Light.js~Light"
    ]
  },
  {
    "__docId__": 1475,
    "kind": "get",
    "name": "type",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 61,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1476,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "The DirLight configuration"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "String:Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.meta",
        "description": "Optional map of user-defined metadata to attach to this DirLight."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1.0, 1.0, 1.0]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "cfg.dir",
        "description": "{Float32Array} A unit vector indicating the direction that the light is shining,\ngiven in either World or View space, depending on the value of the **space** parameter."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0.7, 0.7, 0.8 ]",
        "defaultRaw": [
          0.7,
          0.7,
          0.8
        ],
        "name": "cfg.color",
        "description": "{Float32Array} The color of this DirLight."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0 ",
        "defaultRaw": 1,
        "name": "cfg.intensity",
        "description": "{Number} The intensity of this DirLight, as a factor in range ````[0..1]````."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"view\"",
        "defaultRaw": "view",
        "name": "cfg.space",
        "description": "{String} The coordinate system the DirLight is defined in - \"view\" or \"space\"."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.castShadow",
        "description": "{Boolean} Flag which indicates if this DirLight casts a castShadow."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1477,
    "kind": "member",
    "name": "_shadowRenderBuf",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#_shadowRenderBuf",
    "access": "private",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1478,
    "kind": "member",
    "name": "_shadowViewMatrix",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#_shadowViewMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 86,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1479,
    "kind": "member",
    "name": "_shadowProjMatrix",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#_shadowProjMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1480,
    "kind": "member",
    "name": "_shadowViewMatrixDirty",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#_shadowViewMatrixDirty",
    "access": "private",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1481,
    "kind": "member",
    "name": "_shadowProjMatrixDirty",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#_shadowProjMatrixDirty",
    "access": "private",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1482,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#_state",
    "access": "private",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1487,
    "kind": "set",
    "name": "dir",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#dir",
    "access": "public",
    "description": "The direction in which the light is shining.",
    "lineNumber": 149,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1.0, 1.0, 1.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "dir",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1489,
    "kind": "get",
    "name": "dir",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#dir",
    "access": "public",
    "description": null,
    "lineNumber": 155,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1490,
    "kind": "set",
    "name": "color",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#color",
    "access": "public",
    "description": "The color of this DirLight.",
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.7, 0.7, 0.8]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1491,
    "kind": "get",
    "name": "color",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#color",
    "access": "public",
    "description": null,
    "lineNumber": 171,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1492,
    "kind": "set",
    "name": "intensity",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#intensity",
    "access": "public",
    "description": "The intensity of this DirLight.\n\nFires a {@link DirLight/intensity:event} event on change.",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "intensity",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1493,
    "kind": "get",
    "name": "intensity",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#intensity",
    "access": "public",
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1494,
    "kind": "set",
    "name": "castShadow",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#castShadow",
    "access": "public",
    "description": "Flag which indicates if this DirLight casts a shadow.",
    "lineNumber": 201,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "castShadow",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1496,
    "kind": "get",
    "name": "castShadow",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#castShadow",
    "access": "public",
    "description": null,
    "lineNumber": 211,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1497,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/lights/DirLight.js~DirLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/DirLight.js~DirLight#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 215,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1498,
    "kind": "file",
    "name": "scene/lights/Light.js",
    "content": "import {Component} from '../Component.js';\n\n/**\n A dynamic light source within a {@link Scene}.\n\n These are registered by {@link Light#id} in {@link Scene#lights}.\n */\nclass Light extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Light\";\n    }\n\n    /**\n     * @private\n     */\n    get isLight() {\n        return true;\n    }\n\n    constructor(owner, cfg={}) {\n        super(owner, cfg);\n    }\n}\n\nexport {Light};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/lights/Light.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1499,
    "kind": "class",
    "name": "Light",
    "memberof": "scene/lights/Light.js",
    "static": true,
    "longname": "scene/lights/Light.js~Light",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/lights/Light.js",
    "importStyle": "{Light}",
    "description": "A dynamic light source within a {@link Scene}.\n\nThese are registered by {@link Light#id} in {@link Scene#lights}.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 1500,
    "kind": "get",
    "name": "type",
    "memberof": "scene/lights/Light.js~Light",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/Light.js~Light#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1501,
    "kind": "get",
    "name": "isLight",
    "memberof": "scene/lights/Light.js~Light",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/Light.js~Light#isLight",
    "access": "private",
    "description": "",
    "lineNumber": 26,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1502,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/lights/Light.js~Light",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/Light.js~Light#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 30,
    "undocument": true
  },
  {
    "__docId__": 1503,
    "kind": "file",
    "name": "scene/lights/LightMap.js",
    "content": "/**\n A **LightMap** specifies a cube texture light map.\n\n ## Usage\n\n ````javascript\n\n new xeokit.LightMap({\n    src: [\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_PX.png\",\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_NX.png\",\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_PY.png\",\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_NY.png\",\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_PZ.png\",\n        \"textures/light/Uffizi_Gallery/Uffizi_Gallery_Irradiance_NZ.png\"\n    ]\n });\n ````\n @class LightMap\n @module xeokit\n @submodule lighting\n @constructor\n @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n @param {*} [cfg] Configs\n @param {String} [cfg.id] Optional ID for this LightMap, unique among all components in the parent scene, generated automatically when omitted.\n @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this LightMap.\n @param [cfg.src=null] {Array of String} Paths to six image files to load into this LightMap.\n @param [cfg.flipY=false] {Boolean} Flips this LightMap's source data along its vertical axis when true.\n @param [cfg.encoding=\"linear\"] {String} Encoding format.  See the {@link LightMap/encoding} property for more info.\n @extends Component\n */\n\nimport {CubeTexture} from './CubeTexture.js';\n\nclass LightMap extends CubeTexture {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"LightMap\";\n    }\n\n    constructor(owner, cfg={}) {\n        super(owner, cfg);\n        this.scene._lightMapCreated(this);\n    }\n\n    destroy() {\n        super.destroy();\n        this.scene._lightMapDestroyed(this);\n    }\n}\n\nexport {LightMap};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/lights/LightMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1504,
    "kind": "class",
    "name": "LightMap",
    "memberof": "scene/lights/LightMap.js",
    "static": true,
    "longname": "scene/lights/LightMap.js~LightMap",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/lights/LightMap.js",
    "importStyle": "{LightMap}",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "interface": false,
    "extends": [
      "scene/lights/CubeTexture.js~CubeTexture"
    ]
  },
  {
    "__docId__": 1505,
    "kind": "get",
    "name": "type",
    "memberof": "scene/lights/LightMap.js~LightMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/LightMap.js~LightMap#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1506,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/lights/LightMap.js~LightMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/LightMap.js~LightMap#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true
  },
  {
    "__docId__": 1507,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/lights/LightMap.js~LightMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/LightMap.js~LightMap#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1508,
    "kind": "file",
    "name": "scene/lights/PointLight.js",
    "content": "import {Light} from './Light.js';\nimport {RenderState} from '../webgl/RenderState.js';\nimport {RenderBuffer} from '../webgl/RenderBuffer.js';\nimport {math} from '../math/math.js';\n\n/**\n * A positional light source that originates from a single point and spreads outward in all directions, with optional attenuation over distance.\n *\n * * Has a position in {@link PointLight#pos}, but no direction.\n * * Defined in either *World* or *View* coordinate space. When in World-space, {@link PointLight#pos} is relative to\n * the World coordinate system, and will appear to move as the {@link Camera} moves. When in View-space,\n * {@link PointLight#pos} is relative to the View coordinate system, and will behave as if fixed to the viewer's head.\n * * Has {@link PointLight#constantAttenuation}, {@link PointLight#linearAttenuation} and {@link PointLight#quadraticAttenuation}\n * factors, which indicate how intensity attenuates over distance.\n * * {@link AmbientLight}s, {@link DirLight}s and {@link PointLight}s are registered by their {@link Component#id} on {@link Scene#lights}.\n *\n * ## Usage\n *\n * In the example below we'll destroy the {@link Scene}'s default light sources then create an {@link AmbientLight}\n * and a couple of PointLights positioned within the View-space coordinate system:\n *\n * ````javascript\n * myViewer.scene.clearLights();\n *\n * new AmbientLight({\n *      id: \"myAmbientLight\",\n *      color: [0.8, 0.8, 0.8],\n *      intensity: 0.5\n * });\n *\n * new PointLight({\n *      id: \"myPointLight1\",\n *      pos: [-100, 0, 100],\n *      color: [0.3, 0.3, 0.5],\n *      intensity: .7\n *      constantAttenuation: 0,\n *      linearAttenuation: 0,\n *      quadraticAttenuation: 0,\n *      space: \"view\"\n * });\n *\n * new PointLight({\n *      id: \"myPointLight2\",\n *      pos: [0, 100, 100],\n *      color: [0.5, 0.7, 0.5],\n *      intensity: 1\n *      constantAttenuation: 0,\n *      linearAttenuation: 0,\n *      quadraticAttenuation: 0,\n *      space: \"view\"\n * });\n *\n * // Adjust the position of one of our PointLights\n *\n * var pointLight1 = myViewer.scene.lights[\"myPointLight1\"];\n * dirLight.pos = [-150.0, 0.0, 100.0];\n * ````\n */\nclass PointLight extends Light {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"PointLight\";\n    }\n\n    /**\n     * @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] The PointLight configuration\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n     @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this PointLight.\n     @param [cfg.pos=[ 1.0, 1.0, 1.0 ]] {Float32Array} Position, in either World or View space, depending on the value of the **space** parameter.\n     @param [cfg.color=[0.7, 0.7, 0.8 ]] {Float32Array} Color of this PointLight.\n     @param [cfg.intensity=1.0] {Number} Intensity of this PointLight, as a factor in range ````[0..1]````.\n     @param [cfg.constantAttenuation=0] {Number} Constant attenuation factor.\n     @param [cfg.linearAttenuation=0] {Number} Linear attenuation factor.\n     @param [cfg.quadraticAttenuation=0] {Number} Quadratic attenuation factor.\n     @param [cfg.space=\"view\"] {String} The coordinate system this PointLight is defined in - \"view\" or \"world\".\n     @param [cfg.castShadow=false] {Boolean} Flag which indicates if this PointLight casts a castShadow.\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        const self = this;\n\n        this._shadowRenderBuf = null;\n        this._shadowViewMatrix = null;\n        this._shadowProjMatrix = null;\n        this._shadowViewMatrixDirty = true;\n        this._shadowProjMatrixDirty = true;\n\n        this._state = new RenderState({\n            type: \"point\",\n            pos: math.vec3([1.0, 1.0, 1.0]),\n            color: math.vec3([0.7, 0.7, 0.8]),\n            intensity: 1.0, attenuation: [0.0, 0.0, 0.0],\n            space: cfg.space || \"view\",\n            castShadow: false,\n            shadowDirty: true,\n\n            getShadowViewMatrix: (function () {\n                const look = math.vec3([0, 0, 0]);\n                const up = math.vec3([0, 1, 0]);\n                return function () {\n                    if (self._shadowViewMatrixDirty) {\n                        if (!self._shadowViewMatrix) {\n                            self._shadowViewMatrix = math.identityMat4();\n                        }\n                        math.lookAtMat4v(self._state.pos, look, up, self._shadowViewMatrix);\n                        self._shadowViewMatrixDirty = false;\n                    }\n                    return self._shadowViewMatrix;\n                };\n            })(),\n\n            getShadowProjMatrix: function () {\n                if (self._shadowProjMatrixDirty) { // TODO: Set when canvas resizes\n                    if (!self._shadowProjMatrix) {\n                        self._shadowProjMatrix = math.identityMat4();\n                    }\n                    const canvas = self.scene.canvas.canvas;\n                    math.perspectiveMat4(70 * (Math.PI / 180.0), canvas.clientWidth / canvas.clientHeight, 0.1, 500.0, self._shadowProjMatrix);\n                    self._shadowProjMatrixDirty = false;\n                }\n                return self._shadowProjMatrix;\n            },\n\n            getShadowRenderBuf: function () {\n                if (!self._shadowRenderBuf) {\n                    self._shadowRenderBuf = new RenderBuffer(self.scene.canvas.canvas, self.scene.canvas.gl, {size: [1024, 1024]});\n                }\n                return self._shadowRenderBuf;\n            }\n        });\n\n        this.pos = cfg.pos;\n        this.color = cfg.color;\n        this.intensity = cfg.intensity;\n        this.constantAttenuation = cfg.constantAttenuation;\n        this.linearAttenuation = cfg.linearAttenuation;\n        this.quadraticAttenuation = cfg.quadraticAttenuation;\n        this.castShadow = cfg.castShadow;\n\n        this.scene._lightCreated(this);\n    }\n\n\n    /**\n     The position of this PointLight.\n\n     This will be either World- or View-space, depending on the value of {@link PointLight#space}.\n\n     @property pos\n     @default [1.0, 1.0, 1.0]\n     @type Array(Number)\n     */\n    set pos(value) {\n        this._state.pos.set(value || [1.0, 1.0, 1.0]);\n        this._shadowViewMatrixDirty = true;\n        this.glRedraw();\n    }\n\n    get pos() {\n        return this._state.pos;\n    }\n\n    /**\n     The color of this PointLight.\n\n     @property color\n     @default [0.7, 0.7, 0.8]\n     @type Float32Array\n     */\n    set color(value) {\n        this._state.color.set(value || [0.7, 0.7, 0.8]);\n        this.glRedraw();\n    }\n\n    get color() {\n        return this._state.color;\n    }\n\n    /**\n     The intensity of this PointLight.\n\n     @property intensity\n     @default 1.0\n     @type Number\n     */\n    set intensity(value) {\n        value = value !== undefined ? value : 1.0;\n        this._state.intensity = value;\n        this.glRedraw();\n    }\n\n    get intensity() {\n        return this._state.intensity;\n    }\n\n    /**\n     The constant attenuation factor for this PointLight.\n\n     @property constantAttenuation\n     @default 0\n     @type Number\n     */\n    set constantAttenuation(value) {\n        this._state.attenuation[0] = value || 0.0;\n        this.glRedraw();\n    }\n\n    get constantAttenuation() {\n        return this._state.attenuation[0];\n    }\n\n    /**\n     The linear attenuation factor for this PointLight.\n\n     @property linearAttenuation\n     @default 0\n     @type Number\n     */\n    set linearAttenuation(value) {\n        this._state.attenuation[1] = value || 0.0;\n        this.glRedraw();\n    }\n\n    get linearAttenuation() {\n        return this._state.attenuation[1];\n    }\n\n    /**\n     The quadratic attenuation factor for this Pointlight.\n\n     @property quadraticAttenuation\n     @default 0\n     @type Number\n     */\n    set quadraticAttenuation(value) {\n        this._state.attenuation[2] = value || 0.0;\n        this.glRedraw();\n    }\n\n    get quadraticAttenuation() {\n        return this._state.attenuation[2];\n    }\n\n    /**\n     Flag which indicates if this PointLight casts a shadow.\n\n     @property castShadow\n     @default false\n     @type Boolean\n     */\n    set castShadow(value) {\n        value = !!value;\n        if (this._state.castShadow === value) {\n            return;\n        }\n        this._state.castShadow = value;\n        this._shadowViewMatrixDirty = true;\n        this.glRedraw();\n    }\n\n    get castShadow() {\n        return this._state.castShadow;\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n        if (this._shadowRenderBuf) {\n            this._shadowRenderBuf.destroy();\n        }\n        this.scene._lightDestroyed(this);\n    }\n}\n\nexport {PointLight};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/lights/PointLight.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1509,
    "kind": "class",
    "name": "PointLight",
    "memberof": "scene/lights/PointLight.js",
    "static": true,
    "longname": "scene/lights/PointLight.js~PointLight",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/lights/PointLight.js",
    "importStyle": "{PointLight}",
    "description": "A positional light source that originates from a single point and spreads outward in all directions, with optional attenuation over distance.\n\n* Has a position in {@link PointLight#pos}, but no direction.\n* Defined in either *World* or *View* coordinate space. When in World-space, {@link PointLight#pos} is relative to\nthe World coordinate system, and will appear to move as the {@link Camera} moves. When in View-space,\n{@link PointLight#pos} is relative to the View coordinate system, and will behave as if fixed to the viewer's head.\n* Has {@link PointLight#constantAttenuation}, {@link PointLight#linearAttenuation} and {@link PointLight#quadraticAttenuation}\nfactors, which indicate how intensity attenuates over distance.\n* {@link AmbientLight}s, {@link DirLight}s and {@link PointLight}s are registered by their {@link Component#id} on {@link Scene#lights}.\n\n## Usage\n\nIn the example below we'll destroy the {@link Scene}'s default light sources then create an {@link AmbientLight}\nand a couple of PointLights positioned within the View-space coordinate system:\n\n````javascript\nmyViewer.scene.clearLights();\n\nnew AmbientLight({\n     id: \"myAmbientLight\",\n     color: [0.8, 0.8, 0.8],\n     intensity: 0.5\n});\n\nnew PointLight({\n     id: \"myPointLight1\",\n     pos: [-100, 0, 100],\n     color: [0.3, 0.3, 0.5],\n     intensity: .7\n     constantAttenuation: 0,\n     linearAttenuation: 0,\n     quadraticAttenuation: 0,\n     space: \"view\"\n});\n\nnew PointLight({\n     id: \"myPointLight2\",\n     pos: [0, 100, 100],\n     color: [0.5, 0.7, 0.5],\n     intensity: 1\n     constantAttenuation: 0,\n     linearAttenuation: 0,\n     quadraticAttenuation: 0,\n     space: \"view\"\n});\n\n// Adjust the position of one of our PointLights\n\nvar pointLight1 = myViewer.scene.lights[\"myPointLight1\"];\ndirLight.pos = [-150.0, 0.0, 100.0];\n````",
    "lineNumber": 59,
    "interface": false,
    "extends": [
      "scene/lights/Light.js~Light"
    ]
  },
  {
    "__docId__": 1510,
    "kind": "get",
    "name": "type",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 70,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1511,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 90,
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "The PointLight configuration"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "String:Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.meta",
        "description": "Optional map of user-defined metadata to attach to this PointLight."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[ 1.0, 1.0, 1.0 ]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "cfg.pos",
        "description": "{Float32Array} Position, in either World or View space, depending on the value of the **space** parameter."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0.7, 0.7, 0.8 ]",
        "defaultRaw": [
          0.7,
          0.7,
          0.8
        ],
        "name": "cfg.color",
        "description": "{Float32Array} Color of this PointLight."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "cfg.intensity",
        "description": "{Number} Intensity of this PointLight, as a factor in range ````[0..1]````."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "cfg.constantAttenuation",
        "description": "{Number} Constant attenuation factor."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "cfg.linearAttenuation",
        "description": "{Number} Linear attenuation factor."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "cfg.quadraticAttenuation",
        "description": "{Number} Quadratic attenuation factor."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"view\"",
        "defaultRaw": "view",
        "name": "cfg.space",
        "description": "{String} The coordinate system this PointLight is defined in - \"view\" or \"world\"."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.castShadow",
        "description": "{Boolean} Flag which indicates if this PointLight casts a castShadow."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1512,
    "kind": "member",
    "name": "_shadowRenderBuf",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#_shadowRenderBuf",
    "access": "private",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1513,
    "kind": "member",
    "name": "_shadowViewMatrix",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#_shadowViewMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1514,
    "kind": "member",
    "name": "_shadowProjMatrix",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#_shadowProjMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1515,
    "kind": "member",
    "name": "_shadowViewMatrixDirty",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#_shadowViewMatrixDirty",
    "access": "private",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1516,
    "kind": "member",
    "name": "_shadowProjMatrixDirty",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#_shadowProjMatrixDirty",
    "access": "private",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1517,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#_state",
    "access": "private",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1525,
    "kind": "set",
    "name": "pos",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#pos",
    "access": "public",
    "description": "The position of this PointLight.\n\nThis will be either World- or View-space, depending on the value of {@link PointLight#space}.",
    "lineNumber": 167,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1.0, 1.0, 1.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pos",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1527,
    "kind": "get",
    "name": "pos",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#pos",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1528,
    "kind": "set",
    "name": "color",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#color",
    "access": "public",
    "description": "The color of this PointLight.",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.7, 0.7, 0.8]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1529,
    "kind": "get",
    "name": "color",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#color",
    "access": "public",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1530,
    "kind": "set",
    "name": "intensity",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#intensity",
    "access": "public",
    "description": "The intensity of this PointLight.",
    "lineNumber": 200,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "intensity",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1531,
    "kind": "get",
    "name": "intensity",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#intensity",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1532,
    "kind": "set",
    "name": "constantAttenuation",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#constantAttenuation",
    "access": "public",
    "description": "The constant attenuation factor for this PointLight.",
    "lineNumber": 217,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "constantAttenuation",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1533,
    "kind": "get",
    "name": "constantAttenuation",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#constantAttenuation",
    "access": "public",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1534,
    "kind": "set",
    "name": "linearAttenuation",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#linearAttenuation",
    "access": "public",
    "description": "The linear attenuation factor for this PointLight.",
    "lineNumber": 233,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "linearAttenuation",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1535,
    "kind": "get",
    "name": "linearAttenuation",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#linearAttenuation",
    "access": "public",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1536,
    "kind": "set",
    "name": "quadraticAttenuation",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#quadraticAttenuation",
    "access": "public",
    "description": "The quadratic attenuation factor for this Pointlight.",
    "lineNumber": 249,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "quadraticAttenuation",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1537,
    "kind": "get",
    "name": "quadraticAttenuation",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#quadraticAttenuation",
    "access": "public",
    "description": null,
    "lineNumber": 254,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1538,
    "kind": "set",
    "name": "castShadow",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#castShadow",
    "access": "public",
    "description": "Flag which indicates if this PointLight casts a shadow.",
    "lineNumber": 265,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "castShadow",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1540,
    "kind": "get",
    "name": "castShadow",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#castShadow",
    "access": "public",
    "description": null,
    "lineNumber": 275,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1541,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/lights/PointLight.js~PointLight",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/PointLight.js~PointLight#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1542,
    "kind": "file",
    "name": "scene/lights/ReflectionMap.js",
    "content": "import {CubeTexture} from './CubeTexture.js';\n\n/**\n * A reflection cube map.\n *\n * ## Usage\n *\n * ````javascript\n * new ReflectionMap(myViewer.scene, {\n *     src: [\n *         \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_PX.png\",\n *         \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_NX.png\",\n *         \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_PY.png\",\n *         \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_NY.png\",\n *         \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_PZ.png\",\n *         \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_NZ.png\"\n *     ]\n * });\n * ````\n */\nclass ReflectionMap extends CubeTexture {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"ReflectionMap\";\n    }\n\n    /**\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] Configs\n     @param {String} [cfg.id] Optional ID for this ReflectionMap, unique among all components in the parent scene, generated automatically when omitted.\n     @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this ReflectionMap.\n     @param [cfg.src=null] {Array of String} Paths to six image files to load into this ReflectionMap.\n     @param [cfg.flipY=false] {Boolean} Flips this ReflectionMap's source data along its vertical axis when true.\n     @param [cfg.encoding=\"linear\"] {String} Encoding format.  See the {@link ReflectionMap/encoding} property for more info.\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n        super(owner, cfg);\n        this.scene._lightsState.addReflectionMap(this._state);\n        this.scene._reflectionMapCreated(this);\n    }\n\n    destroy() {\n        super.destroy();\n        this.scene._reflectionMapDestroyed(this);\n    }\n}\n\nexport {ReflectionMap};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/lights/ReflectionMap.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1543,
    "kind": "class",
    "name": "ReflectionMap",
    "memberof": "scene/lights/ReflectionMap.js",
    "static": true,
    "longname": "scene/lights/ReflectionMap.js~ReflectionMap",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/lights/ReflectionMap.js",
    "importStyle": "{ReflectionMap}",
    "description": "A reflection cube map.\n\n## Usage\n\n````javascript\nnew ReflectionMap(myViewer.scene, {\n    src: [\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_PX.png\",\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_NX.png\",\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_PY.png\",\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_NY.png\",\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_PZ.png\",\n        \"textures/reflect/Uffizi_Gallery/Uffizi_Gallery_Radiance_NZ.png\"\n    ]\n});\n````",
    "lineNumber": 21,
    "interface": false,
    "extends": [
      "scene/lights/CubeTexture.js~CubeTexture"
    ]
  },
  {
    "__docId__": 1544,
    "kind": "get",
    "name": "type",
    "memberof": "scene/lights/ReflectionMap.js~ReflectionMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/ReflectionMap.js~ReflectionMap#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1545,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/lights/ReflectionMap.js~ReflectionMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/ReflectionMap.js~ReflectionMap#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "Configs"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID for this ReflectionMap, unique among all components in the parent scene, generated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "String:Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.meta",
        "description": "Optional map of user-defined metadata to attach to this ReflectionMap."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "cfg.src",
        "description": "{Array of String} Paths to six image files to load into this ReflectionMap."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.flipY",
        "description": "{Boolean} Flips this ReflectionMap's source data along its vertical axis when true."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"linear\"",
        "defaultRaw": "linear",
        "name": "cfg.encoding",
        "description": "{String} Encoding format.  See the {@link ReflectionMap/encoding} property for more info."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1546,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/lights/ReflectionMap.js~ReflectionMap",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/ReflectionMap.js~ReflectionMap#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1547,
    "kind": "file",
    "name": "scene/lights/Shadow.js",
    "content": "/**\n A **Shadow** defines a shadow cast by a {@link DirLight} or a {@link SpotLight}.\n\n Work in progress!\n\n ## Overview\n\n * Shadows are attached to {@link DirLight} and {@link SpotLight} components.\n\n TODO\n\n ## Examples\n\n TODO\n\n ## Usage\n\n ```` javascript\n var mesh = new xeokit.Mesh(scene, {\n\n        lights: new xeokit.Lights({\n            lights: [\n\n                new xeokit.SpotLight({\n                    pos: [0, 100, 100],\n                    dir: [0, -1, 0],\n                    color: [0.5, 0.7, 0.5],\n                    intensity: 1\n                    constantAttenuation: 0,\n                    linearAttenuation: 0,\n                    quadraticAttenuation: 0,\n                    space: \"view\",\n\n                    shadow: new xeokit.Shadow({\n                        resolution: [1000, 1000],\n                        intensity: 0.7,\n                        sampling: \"stratified\" // \"stratified\" | \"poisson\" | \"basic\"\n                    });\n                })\n            ]\n        }),\n ,\n        material: new xeokit.PhongMaterial({\n            diffuse: [0.5, 0.5, 0.0]\n        }),\n\n        geometry: new xeokit.BoxGeometry()\n  });\n ````\n\n @class Shadow\n @module xeokit\n @submodule lighting\n @constructor\n @extends Component\n @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n @param {*} [cfg] The Shadow configuration\n @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this Shadow.\n @param [cfg.resolution=[1000,1000]] {Uint16Array} Resolution of the texture map for this Shadow.\n @param [cfg.intensity=1.0] {Number} Intensity of this Shadow.\n */\nimport {Component} from '../Component.js';\nimport {math} from '../math/math.js';\n\nclass Shadow extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Shadow\";\n    }\n\n    constructor(owner, cfg={}) {\n        super(owner, cfg);\n        this._state = {\n            resolution: math.vec3([1000, 1000]),\n            intensity: 1.0\n        };\n        this.resolution = cfg.resolution;\n        this.intensity = cfg.intensity;\n    }\n\n    /**\n     The resolution of the texture map for this Shadow.\n\n     This will be either World- or View-space, depending on the value of {@link Shadow/space}.\n\n     Fires a {@link Shadow/resolution:event} event on change.\n\n     @property resolution\n     @default [1000, 1000]\n     @type Uint16Array\n     */\n    set resolution(value) {\n\n        this._state.resolution.set(value || [1000.0, 1000.0]);\n\n        this.glRedraw();\n\n        /**\n         Fired whenever this Shadow's  {@link Shadow/resolution} property changes.\n         @event resolution\n         @param value The property's new value\n         */\n        this.fire(\"resolution\", this._state.resolution);\n    }\n\n    get resolution() {\n        return this._state.resolution;\n    }\n\n    /**\n     The intensity of this Shadow.\n\n     Fires a {@link Shadow/intensity:event} event on change.\n\n     @property intensity\n     @default 1.0\n     @type Number\n     */\n    set intensity(value) {\n\n        value = value !== undefined ? value : 1.0;\n\n        this._state.intensity = value;\n\n        this.glRedraw();\n\n        /**\n         * Fired whenever this Shadow's  {@link Shadow/intensity} property changes.\n         * @event intensity\n         * @param value The property's new value\n         */\n        this.fire(\"intensity\", this._state.intensity);\n    }\n\n    get intensity() {\n        return this._state.intensity;\n    }\n\n    destroy() {\n        super.destroy();\n        //this._state.destroy();\n    }\n}\n\nexport {Shadow};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/lights/Shadow.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1548,
    "kind": "class",
    "name": "Shadow",
    "memberof": "scene/lights/Shadow.js",
    "static": true,
    "longname": "scene/lights/Shadow.js~Shadow",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/lights/Shadow.js",
    "importStyle": "{Shadow}",
    "description": null,
    "lineNumber": 66,
    "undocument": true,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 1549,
    "kind": "get",
    "name": "type",
    "memberof": "scene/lights/Shadow.js~Shadow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/Shadow.js~Shadow#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1550,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/lights/Shadow.js~Shadow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/Shadow.js~Shadow#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 81,
    "undocument": true
  },
  {
    "__docId__": 1551,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/lights/Shadow.js~Shadow",
    "static": false,
    "longname": "scene/lights/Shadow.js~Shadow#_state",
    "access": "private",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{\"resolution\": *, \"intensity\": number}"
      ]
    }
  },
  {
    "__docId__": 1554,
    "kind": "set",
    "name": "resolution",
    "memberof": "scene/lights/Shadow.js~Shadow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/Shadow.js~Shadow#resolution",
    "access": "public",
    "description": "The resolution of the texture map for this Shadow.\n\nThis will be either World- or View-space, depending on the value of {@link Shadow/space}.\n\nFires a {@link Shadow/resolution:event} event on change.",
    "lineNumber": 102,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1000, 1000]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "resolution",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1555,
    "kind": "get",
    "name": "resolution",
    "memberof": "scene/lights/Shadow.js~Shadow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/Shadow.js~Shadow#resolution",
    "access": "public",
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1556,
    "kind": "set",
    "name": "intensity",
    "memberof": "scene/lights/Shadow.js~Shadow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/Shadow.js~Shadow#intensity",
    "access": "public",
    "description": "The intensity of this Shadow.\n\nFires a {@link Shadow/intensity:event} event on change.",
    "lineNumber": 129,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "intensity",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1557,
    "kind": "get",
    "name": "intensity",
    "memberof": "scene/lights/Shadow.js~Shadow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/Shadow.js~Shadow#intensity",
    "access": "public",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1558,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/lights/Shadow.js~Shadow",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/lights/Shadow.js~Shadow#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1559,
    "kind": "file",
    "name": "scene/materials/EdgeMaterial.js",
    "content": "import {Material} from './Material.js';\nimport {RenderState} from '../webgl/RenderState.js';\n\nconst PRESETS = {\n    \"default\": {\n        edgeColor: [0.0, 0.0, 0.0],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    },\n    \"defaultWhiteBG\": {\n        edgeColor: [0.2, 0.2, 0.2],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    },\n    \"defaultLightBG\": {\n        edgeColor: [0.2, 0.2, 0.2],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    },\n    \"defaultDarkBG\": {\n        edgeColor: [0.5, 0.5, 0.5],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    }\n};\n\n/**\n * Defines the appearance of {@link Mesh}es when their edges are emphasised.\n *\n * * Emphasise edges of a {@link Mesh} by setting {@link Mesh#edges} ````true````.\n * * When {@link Mesh}es are within the subtree of a {@link Node}, then setting {@link Node#edges} ````true```` will collectively set {@link Mesh#edges} ````true```` on all those {@link Mesh}es.\n * * EdgeMaterial provides several presets. Select a preset by setting {@link EdgeMaterial#preset} to the ID of a preset in {@link EdgeMaterial#presets}.\n * * By default, a {@link Mesh} uses the default EdgeMaterial in {@link Scene#edgeMaterial}, but you can assign each {@link Mesh#edgeMaterial} to a custom EdgeMaterial if required.\n *\n * ## Usage\n *\n * In the example below, we'll create a {@link Mesh} with its own EdgeMaterial and set {@link Mesh#edges} ````true```` to emphasise its edges.\n *\n * ````javascript\n * new Mesh(myViewer.scene, {\n *     geometry: new BoxGeometry(myViewer.scene, {\n *         edgeThreshold: 1\n *     }),\n *     material: new PhongMaterial(myViewer.scene, {\n *         diffuse: [0.2, 0.2, 1.0]\n *     }),\n *     edgeMaterial: new EdgeMaterial(myViewer.scene, {\n *         edgeColor: [0.2, 1.0, 0.2],\n *         edgeAlpha: 1.0,\n *         edgeWidth: 2\n *     }),\n *     edges: true\n * });\n * ````\n *\n * Note the ````edgeThreshold```` configuration for the {@link Geometry} on our {@link Mesh}.  EdgeMaterial configures\n * a wireframe representation of the {@link Geometry}, which will have inner edges (those edges between\n * adjacent co-planar triangles) removed for visual clarity. The ````edgeThreshold```` indicates that, for\n * this particular {@link Geometry}, an inner edge is one where the angle between the surface normals of adjacent triangles\n * is not greater than ````5```` degrees. That's set to ````2```` by default, but we can override it to tweak the effect\n * as needed for particular Geometries.\n *\n * Here's the example again, this time implicitly defaulting to the {@link Scene#edgeMaterial}. We'll also modify that EdgeMaterial\n * to customize the effect.\n *\n * ````javascript\n * new Mesh({\n *     geometry: new TeapotGeometry(myViewer.scene, {\n *         edgeThreshold: 5\n *     }),\n *     material: new PhongMaterial(myViewer.scene, {\n *         diffuse: [0.2, 0.2, 1.0]\n *     }),\n *     edges: true\n * });\n *\n * var edgeMaterial = myViewer.scene.edgeMaterial;\n *\n * edgeMaterial.edgeColor = [0.2, 1.0, 0.2];\n * edgeMaterial.edgeAlpha = 1.0;\n * edgeMaterial.edgeWidth = 2;\n * ````\n*\n *  ## Presets\n *\n * Let's switch the {@link Scene#edgeMaterial} to one of the presets in {@link EdgeMaterial#presets}:\n *\n * ````javascript\n * myViewer.edgeMaterial.preset = EdgeMaterial.presets[\"sepia\"];\n * ````\n *\n * We can also create an EdgeMaterial from a preset, while overriding properties of the preset as required:\n *\n * ````javascript\n * var myEdgeMaterial = new EdgeMaterial(myViewer.scene, {\n *      preset: \"sepia\",\n *      edgeColor = [1.0, 0.5, 0.5]\n * });\n * ````\n */\nclass EdgeMaterial extends Material {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"EdgeMaterial\";\n    }\n\n    /**\n     Available EdgeMaterial presets.\n\n     @property presets\n     @type {Object}\n     @static\n     */\n    get presets() {\n        return PRESETS;\n    };\n\n    /**\n\n     @class EdgeMaterial\n     @module xeokit\n     @submodule materials\n     @constructor\n     @extends Material\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] The EdgeMaterial configuration\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n     @param [cfg.meta=null] {String:Object} Metadata to attach to this EdgeMaterial.\n\n     @param [cfg.edgeColor=[0.2,0.2,0.2]] {Array of Number}  RGB color of ghost edges.\n     @param [cfg.edgeAlpha=1.0] {Number} Transparency of ghost edges. A value of 0.0 indicates fully transparent, 1.0 is fully opaque.\n     @param [cfg.edgeWidth=1] {Number}  Width of ghost edges, in pixels.\n\n     @param [cfg.preset] {String} Selects a preset EdgeMaterial configuration - see {@link EdgeMaterial#preset:method\"}}EdgeMaterial#preset(){{/crossLink}}.\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({\n            type: \"EdgeMaterial\",\n            edgeColor: null,\n            edgeAlpha: null,\n            edgeWidth: null\n        });\n\n        this._preset = \"default\";\n\n        if (cfg.preset) { // Apply preset then override with configs where provided\n            this.preset = cfg.preset;\n            if (cfg.edgeColor) {\n                this.edgeColor = cfg.edgeColor;\n            }\n            if (cfg.edgeAlpha !== undefined) {\n                this.edgeAlpha = cfg.edgeAlpha;\n            }\n            if (cfg.edgeWidth !== undefined) {\n                this.edgeWidth = cfg.edgeWidth;\n            }\n        } else {\n            this.edgeColor = cfg.edgeColor;\n            this.edgeAlpha = cfg.edgeAlpha;\n            this.edgeWidth = cfg.edgeWidth;\n        }\n    }\n\n\n    /**\n     RGB color of ghost edges.\n\n     @property edgeColor\n     @default [0.2, 0.2, 0.2]\n     @type Float32Array\n     */\n    set edgeColor(value) {\n        let edgeColor = this._state.edgeColor;\n        if (!edgeColor) {\n            edgeColor = this._state.edgeColor = new Float32Array(3);\n        } else if (value && edgeColor[0] === value[0] && edgeColor[1] === value[1] && edgeColor[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            edgeColor[0] = value[0];\n            edgeColor[1] = value[1];\n            edgeColor[2] = value[2];\n        } else {\n            edgeColor[0] = 0.2;\n            edgeColor[1] = 0.2;\n            edgeColor[2] = 0.2;\n        }\n        this.glRedraw();\n    }\n\n    get edgeColor() {\n        return this._state.edgeColor;\n    }\n\n    /**\n     Transparency of ghost edges.\n\n     A value of 0.0 indicates fully transparent, 1.0 is fully opaque.\n\n     @property edgeAlpha\n     @default 1.0\n     @type Number\n     */\n    set edgeAlpha(value) {\n        value = (value !== undefined && value !== null) ? value : 1.0;\n        if (this._state.edgeAlpha === value) {\n            return;\n        }\n        this._state.edgeAlpha = value;\n        this.glRedraw();\n    }\n\n    get edgeAlpha() {\n        return this._state.edgeAlpha;\n    }\n\n    /**\n     Width of ghost edges, in pixels.\n\n     @property edgeWidth\n     @default 1.0\n     @type Number\n     */\n    set edgeWidth(value) {\n        this._state.edgeWidth = value || 1.0;\n        this.glRedraw();\n    }\n\n    get edgeWidth() {\n        return this._state.edgeWidth;\n    }\n\n    /**\n     Selects a preset EdgeMaterial configuration.\n\n     Available presets are:\n\n     * \"default\" - grey wireframe with translucent fill, for light backgrounds.\n     * \"defaultLightBG\" - grey wireframe with grey translucent fill, for light backgrounds.\n     * \"defaultDarkBG\" - grey wireframe with grey translucent fill, for dark backgrounds.\n     * \"vectorscope\" - green wireframe with glowing vertices and black translucent fill.\n     * \"battlezone\" - green wireframe with black opaque fill, giving a solid hidden-lines-removed effect.\n     * \"sepia\" - light red-grey wireframe with light sepia translucent fill - easy on the eyes.\n     * \"gamegrid\" - light blue wireframe with dark blue translucent fill - reminiscent of Tron.\n     * \"yellowHighlight\" - light yellow translucent fill - highlights while allowing underlying detail to show through.\n\n     @property preset\n     @default \"default\"\n     @type String\n     */\n    set preset(value) {\n        value = value || \"default\";\n        if (this._preset === value) {\n            return;\n        }\n        const preset = PRESETS[value];\n        if (!preset) {\n            this.error(\"unsupported preset: '\" + value + \"' - supported values are \" + Object.keys(PRESETS).join(\", \"));\n            return;\n        }\n        this.edgeColor = preset.edgeColor;\n        this.edgeAlpha = preset.edgeAlpha;\n        this.edgeWidth = preset.edgeWidth;\n        this._preset = value;\n    }\n\n    get preset() {\n        return this._preset;\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\nexport {EdgeMaterial};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/materials/EdgeMaterial.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1560,
    "kind": "variable",
    "name": "PRESETS",
    "memberof": "scene/materials/EdgeMaterial.js",
    "static": true,
    "longname": "scene/materials/EdgeMaterial.js~PRESETS",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/materials/EdgeMaterial.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"default\": *, \"defaultWhiteBG\": *, \"defaultLightBG\": *, \"defaultDarkBG\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1561,
    "kind": "class",
    "name": "EdgeMaterial",
    "memberof": "scene/materials/EdgeMaterial.js",
    "static": true,
    "longname": "scene/materials/EdgeMaterial.js~EdgeMaterial",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/materials/EdgeMaterial.js",
    "importStyle": "{EdgeMaterial}",
    "description": "Defines the appearance of {@link Mesh}es when their edges are emphasised.\n\n* Emphasise edges of a {@link Mesh} by setting {@link Mesh#edges} ````true````.\n* When {@link Mesh}es are within the subtree of a {@link Node}, then setting {@link Node#edges} ````true```` will collectively set {@link Mesh#edges} ````true```` on all those {@link Mesh}es.\n* EdgeMaterial provides several presets. Select a preset by setting {@link EdgeMaterial#preset} to the ID of a preset in {@link EdgeMaterial#presets}.\n* By default, a {@link Mesh} uses the default EdgeMaterial in {@link Scene#edgeMaterial}, but you can assign each {@link Mesh#edgeMaterial} to a custom EdgeMaterial if required.\n\n## Usage\n\nIn the example below, we'll create a {@link Mesh} with its own EdgeMaterial and set {@link Mesh#edges} ````true```` to emphasise its edges.\n\n````javascript\nnew Mesh(myViewer.scene, {\n    geometry: new BoxGeometry(myViewer.scene, {\n        edgeThreshold: 1\n    }),\n    material: new PhongMaterial(myViewer.scene, {\n        diffuse: [0.2, 0.2, 1.0]\n    }),\n    edgeMaterial: new EdgeMaterial(myViewer.scene, {\n        edgeColor: [0.2, 1.0, 0.2],\n        edgeAlpha: 1.0,\n        edgeWidth: 2\n    }),\n    edges: true\n});\n````\n\nNote the ````edgeThreshold```` configuration for the {@link Geometry} on our {@link Mesh}.  EdgeMaterial configures\na wireframe representation of the {@link Geometry}, which will have inner edges (those edges between\nadjacent co-planar triangles) removed for visual clarity. The ````edgeThreshold```` indicates that, for\nthis particular {@link Geometry}, an inner edge is one where the angle between the surface normals of adjacent triangles\nis not greater than ````5```` degrees. That's set to ````2```` by default, but we can override it to tweak the effect\nas needed for particular Geometries.\n\nHere's the example again, this time implicitly defaulting to the {@link Scene#edgeMaterial}. We'll also modify that EdgeMaterial\nto customize the effect.\n\n````javascript\nnew Mesh({\n    geometry: new TeapotGeometry(myViewer.scene, {\n        edgeThreshold: 5\n    }),\n    material: new PhongMaterial(myViewer.scene, {\n        diffuse: [0.2, 0.2, 1.0]\n    }),\n    edges: true\n});\n\nvar edgeMaterial = myViewer.scene.edgeMaterial;\n\nedgeMaterial.edgeColor = [0.2, 1.0, 0.2];\nedgeMaterial.edgeAlpha = 1.0;\nedgeMaterial.edgeWidth = 2;\n````\n\n ## Presets\n\nLet's switch the {@link Scene#edgeMaterial} to one of the presets in {@link EdgeMaterial#presets}:\n\n````javascript\nmyViewer.edgeMaterial.preset = EdgeMaterial.presets[\"sepia\"];\n````\n\nWe can also create an EdgeMaterial from a preset, while overriding properties of the preset as required:\n\n````javascript\nvar myEdgeMaterial = new EdgeMaterial(myViewer.scene, {\n     preset: \"sepia\",\n     edgeColor = [1.0, 0.5, 0.5]\n});\n````",
    "lineNumber": 101,
    "interface": false,
    "extends": [
      "scene/materials/Material.js~Material"
    ]
  },
  {
    "__docId__": 1562,
    "kind": "get",
    "name": "type",
    "memberof": "scene/materials/EdgeMaterial.js~EdgeMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EdgeMaterial.js~EdgeMaterial#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1563,
    "kind": "get",
    "name": "presets",
    "memberof": "scene/materials/EdgeMaterial.js~EdgeMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EdgeMaterial.js~EdgeMaterial#presets",
    "access": "public",
    "description": "Available EdgeMaterial presets.",
    "lineNumber": 123,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "presets",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1564,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/materials/EdgeMaterial.js~EdgeMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EdgeMaterial.js~EdgeMaterial#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 145,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "EdgeMaterial"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "materials"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@extends",
        "tagValue": "Material"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "The EdgeMaterial configuration"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "cfg.meta",
        "description": "{String:Object} Metadata to attach to this EdgeMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0.2,0.2,0.2]",
        "defaultRaw": [
          0.2,
          0.2,
          0.2
        ],
        "name": "cfg.edgeColor",
        "description": "{Array of Number}  RGB color of ghost edges."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "cfg.edgeAlpha",
        "description": "{Number} Transparency of ghost edges. A value of 0.0 indicates fully transparent, 1.0 is fully opaque."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.edgeWidth",
        "description": "{Number}  Width of ghost edges, in pixels."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.preset",
        "description": "{String} Selects a preset EdgeMaterial configuration - see {@link EdgeMaterial#preset:method\"}}EdgeMaterial#preset(){{/crossLink}}."
      }
    ]
  },
  {
    "__docId__": 1565,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/materials/EdgeMaterial.js~EdgeMaterial",
    "static": false,
    "longname": "scene/materials/EdgeMaterial.js~EdgeMaterial#_state",
    "access": "private",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1566,
    "kind": "member",
    "name": "_preset",
    "memberof": "scene/materials/EdgeMaterial.js~EdgeMaterial",
    "static": false,
    "longname": "scene/materials/EdgeMaterial.js~EdgeMaterial#_preset",
    "access": "private",
    "description": null,
    "lineNumber": 156,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1574,
    "kind": "set",
    "name": "edgeColor",
    "memberof": "scene/materials/EdgeMaterial.js~EdgeMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EdgeMaterial.js~EdgeMaterial#edgeColor",
    "access": "public",
    "description": "RGB color of ghost edges.",
    "lineNumber": 184,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.2, 0.2, 0.2]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeColor",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1575,
    "kind": "get",
    "name": "edgeColor",
    "memberof": "scene/materials/EdgeMaterial.js~EdgeMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EdgeMaterial.js~EdgeMaterial#edgeColor",
    "access": "public",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1576,
    "kind": "set",
    "name": "edgeAlpha",
    "memberof": "scene/materials/EdgeMaterial.js~EdgeMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EdgeMaterial.js~EdgeMaterial#edgeAlpha",
    "access": "public",
    "description": "Transparency of ghost edges.\n\nA value of 0.0 indicates fully transparent, 1.0 is fully opaque.",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeAlpha",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1577,
    "kind": "get",
    "name": "edgeAlpha",
    "memberof": "scene/materials/EdgeMaterial.js~EdgeMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EdgeMaterial.js~EdgeMaterial#edgeAlpha",
    "access": "public",
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1578,
    "kind": "set",
    "name": "edgeWidth",
    "memberof": "scene/materials/EdgeMaterial.js~EdgeMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EdgeMaterial.js~EdgeMaterial#edgeWidth",
    "access": "public",
    "description": "Width of ghost edges, in pixels.",
    "lineNumber": 236,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeWidth",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1579,
    "kind": "get",
    "name": "edgeWidth",
    "memberof": "scene/materials/EdgeMaterial.js~EdgeMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EdgeMaterial.js~EdgeMaterial#edgeWidth",
    "access": "public",
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1580,
    "kind": "set",
    "name": "preset",
    "memberof": "scene/materials/EdgeMaterial.js~EdgeMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EdgeMaterial.js~EdgeMaterial#preset",
    "access": "public",
    "description": "Selects a preset EdgeMaterial configuration.\n\nAvailable presets are:\n\n\"default\" - grey wireframe with translucent fill, for light backgrounds.\n\"defaultLightBG\" - grey wireframe with grey translucent fill, for light backgrounds.\n\"defaultDarkBG\" - grey wireframe with grey translucent fill, for dark backgrounds.\n\"vectorscope\" - green wireframe with glowing vertices and black translucent fill.\n\"battlezone\" - green wireframe with black opaque fill, giving a solid hidden-lines-removed effect.\n\"sepia\" - light red-grey wireframe with light sepia translucent fill - easy on the eyes.\n\"gamegrid\" - light blue wireframe with dark blue translucent fill - reminiscent of Tron.\n\"yellowHighlight\" - light yellow translucent fill - highlights while allowing underlying detail to show through.",
    "lineNumber": 263,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"default\""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "preset",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1585,
    "kind": "get",
    "name": "preset",
    "memberof": "scene/materials/EdgeMaterial.js~EdgeMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EdgeMaterial.js~EdgeMaterial#preset",
    "access": "public",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1586,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/materials/EdgeMaterial.js~EdgeMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EdgeMaterial.js~EdgeMaterial#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 283,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1587,
    "kind": "file",
    "name": "scene/materials/EmphasisMaterial.js",
    "content": "import {Material} from './Material.js';\nimport {RenderState} from '../webgl/RenderState.js';\n\nconst PRESETS = {\n    \"default\": {\n        fill: true,\n        fillColor: [0.4, 0.4, 0.4],\n        fillAlpha: 0.2,\n        edges: true,\n        edgeColor: [0.2, 0.2, 0.2],\n        edgeAlpha: 0.5,\n        edgeWidth: 1\n    },\n    \"defaultWhiteBG\": {\n        fill: true,\n        fillColor: [1, 1, 1],\n        fillAlpha: 0.6,\n        edgeColor: [0.2, 0.2, 0.2],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    },\n    \"defaultLightBG\": {\n        fill: true,\n        fillColor: [0.4, 0.4, 0.4],\n        fillAlpha: 0.2,\n        edges: true,\n        edgeColor: [0.2, 0.2, 0.2],\n        edgeAlpha: 0.5,\n        edgeWidth: 1\n    },\n    \"defaultDarkBG\": {\n        fill: true,\n        fillColor: [0.4, 0.4, 0.4],\n        fillAlpha: 0.2,\n        edges: true,\n        edgeColor: [0.5, 0.5, 0.5],\n        edgeAlpha: 0.5,\n        edgeWidth: 1\n    },\n    \"phosphorous\": {\n        fill: true,\n        fillColor: [0.0, 0.0, 0.0],\n        fillAlpha: 0.4,\n        edges: true,\n        edgeColor: [0.9, 0.9, 0.9],\n        edgeAlpha: 0.5,\n        edgeWidth: 2\n    },\n    \"sunset\": {\n        fill: true,\n        fillColor: [0.9, 0.9, 0.6],\n        fillAlpha: 0.2,\n        edges: true,\n        edgeColor: [0.9, 0.9, 0.9],\n        edgeAlpha: 0.5,\n        edgeWidth: 1\n    },\n    \"vectorscope\": {\n        fill: true,\n        fillColor: [0.0, 0.0, 0.0],\n        fillAlpha: 0.7,\n        edges: true,\n        edgeColor: [0.2, 1.0, 0.2],\n        edgeAlpha: 1,\n        edgeWidth: 2\n    },\n    \"battlezone\": {\n        fill: true,\n        fillColor: [0.0, 0.0, 0.0],\n        fillAlpha: 1.0,\n        edges: true,\n        edgeColor: [0.2, 1.0, 0.2],\n        edgeAlpha: 1,\n        edgeWidth: 3\n    },\n    \"sepia\": {\n        fill: true,\n        fillColor: [0.970588207244873, 0.7965892553329468, 0.6660899519920349],\n        fillAlpha: 0.4,\n        edges: true,\n        edgeColor: [0.529411792755127, 0.4577854573726654, 0.4100345969200134],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    },\n    \"yellowHighlight\": {\n        fill: true,\n        fillColor: [1.0, 1.0, 0.0],\n        fillAlpha: 0.5,\n        edges: true,\n        edgeColor: [0.529411792755127, 0.4577854573726654, 0.4100345969200134],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    },\n    \"greenSelected\": {\n        fill: true,\n        fillColor: [0.0, 1.0, 0.0],\n        fillAlpha: 0.5,\n        edges: true,\n        edgeColor: [0.4577854573726654, 0.529411792755127, 0.4100345969200134],\n        edgeAlpha: 1.0,\n        edgeWidth: 1\n    },\n    \"gamegrid\": {\n        fill: true,\n        fillColor: [0.2, 0.2, 0.7],\n        fillAlpha: 0.9,\n        edges: true,\n        edgeColor: [0.4, 0.4, 1.6],\n        edgeAlpha: 0.8,\n        edgeWidth: 3\n    }\n};\n\n/**\n * Configures the appearance of {@link Mesh}es when ghosted, highlighted or selected.\n *\n * * Ghost a {@link Mesh} by setting {@link Mesh#ghosted} ````true````.\n * * Highlight a {@link Mesh} by setting {@link Mesh#highlighted} ````true````.\n * * Select a {@link Mesh} by setting {@link Mesh#selected} ````true````.\n * * When {@link Mesh}es are within the subtree of a {@link Node}, then setting {@link Node#ghosted}, {@link Node#highlighted} or {@link Node#selected}\n * will collectively set {@link Mesh#ghosted}, {@link Mesh#highlighted} or {@link Mesh#selected} on all those {@link Mesh}es.\n * * EmphasisMaterial provides several presets. Select a preset by setting {@link EmphasisMaterial#preset} to the ID of a preset in {@link EmphasisMaterial#presets}.\n * * By default, a {@link Mesh} uses the default EmphasisMaterials in {@link Scene#ghostMaterial}, {@link Scene#highlightMaterial} and {@link Scene#selectedMaterial}\n * but you can assign each {@link Mesh#ghostMaterial}, {@link Mesh#highlightMaterial} or {@link Mesh#selectedMaterial} to a custom EmphasisMaterial, if required.\n *\n * ## Usage\n *\n * In the example below, we'll create a {@link Mesh} with its own GhostMaterial and set {@link Mesh#ghosted} ````true```` to ghost it.\n *\n * ````javascript\n * new Mesh(myViewer.scene, {\n *     geometry: new BoxGeometry(myViewer.scene, {\n *         edgeThreshold: 1\n *     }),\n *     material: new PhongMaterial(myViewer.scene, {\n *         diffuse: [0.2, 0.2, 1.0]\n *     }),\n *     ghostMaterial: new EdgeMaterial(myViewer.scene, {\n *         fill: true,\n *         fillColor: [0, 0, 0],\n *         fillAlpha: 0.7,\n *         edges: true,\n *         edgeColor: [0.2, 1.0, 0.2],\n *         edgeAlpha: 1.0,\n *         edgeWidth: 2\n *     }),\n *     ghosted: true\n * });\n * ````\n *\n * Note the ````edgeThreshold```` configuration for the {@link Geometry} on our {@link Mesh}.  EmphasisMaterial configures\n * a wireframe representation of the {@link Geometry} for the selected emphasis mode, which will have inner edges (those edges between\n * adjacent co-planar triangles) removed for visual clarity. The ````edgeThreshold```` indicates that, for\n * this particular {@link Geometry}, an inner edge is one where the angle between the surface normals of adjacent triangles\n * is not greater than ````5```` degrees. That's set to ````2```` by default, but we can override it to tweak the effect\n * as needed for particular Geometries.\n *\n * Here's the example again, this time implicitly defaulting to the {@link Scene#edgeMaterial}. We'll also modify that EdgeMaterial\n * to customize the effect.\n *\n * ````javascript\n * new Mesh({\n *     geometry: new TeapotGeometry(myViewer.scene, {\n *         edgeThreshold: 5\n *     }),\n *     material: new PhongMaterial(myViewer.scene, {\n *         diffuse: [0.2, 0.2, 1.0]\n *     }),\n *     ghosted: true\n * });\n *\n * var ghostMaterial = myViewer.scene.ghostMaterial;\n *\n * ghostMaterial.fillColor = [0.2, 1.0, 0.2];\n * ghostMaterial.fillAlpha = 1.0;\n * ````\n *\n * ## Presets\n *\n * Let's switch the {@link Scene#ghostMaterial} to one of the presets in {@link EmphasisMaterial#presets}:\n *\n * ````javascript\n * myViewer.ghostMaterial.preset = EmphasisMaterial.presets[\"sepia\"];\n * ````\n *\n * We can also create an EmphasisMaterial from a preset, while overriding properties of the preset as required:\n *\n * ````javascript\n * var myEmphasisMaterial = new EMphasisMaterial(myViewer.scene, {\n *      preset: \"sepia\",\n *      fillColor = [1.0, 0.5, 0.5]\n * });\n * ````\n */\nclass EmphasisMaterial extends Material {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"EmphasisMaterial\";\n    }\n\n    /**\n     Available EmphasisMaterial presets.\n\n     @property presets\n     @type {Object}\n     @static\n     */\n    get presets() {\n        return PRESETS;\n    };\n\n    /**\n     @constructor\n     @extends Material\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] The EmphasisMaterial configuration\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n     @param [cfg.meta=null] {String:Object} Metadata to attach to this EmphasisMaterial.\n     @param [cfg.fill=true] {Boolean} Indicates whether or not ghost surfaces are filled with color.\n     @param [cfg.fillColor=[0.4,0.4,0.4]] {Array of Number} EmphasisMaterial fill color.\n     @param [cfg.fillAlpha=0.2] {Number}  Transparency of filled ghost faces. A value of 0.0 indicates fully transparent, 1.0 is fully opaque.\n     @param [cfg.edges=true] {Boolean} Indicates whether or not ghost edges are visible.\n     @param [cfg.edgeColor=[0.2,0.2,0.2]] {Array of Number}  RGB color of ghost edges.\n     @param [cfg.edgeAlpha=0.5] {Number} Transparency of ghost edges. A value of 0.0 indicates fully transparent, 1.0 is fully opaque.\n     @param [cfg.edgeWidth=1] {Number}  Width of ghost edges, in pixels.\n     @param [cfg.backfaces=false] {Boolean} Whether to render {@link Geometry} backfaces.\n     @param [cfg.preset] {String} Selects a preset EmphasisMaterial configuration - see {@link EmphasisMaterial/preset:method\"}}EmphasisMaterial#preset(){{/crossLink}}.\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({\n            type: \"EmphasisMaterial\",\n            fill: null,\n            fillColor: null,\n            fillAlpha: null,\n            edges: null,\n            edgeColor: null,\n            edgeAlpha: null,\n            edgeWidth: null,\n            backfaces: true\n        });\n\n        this._preset = \"default\";\n\n        if (cfg.preset) { // Apply preset then override with configs where provided\n            this.preset = cfg.preset;\n            if (cfg.fill !== undefined) {\n                this.fill = cfg.fill;\n            }\n            if (cfg.fillColor) {\n                this.fillColor = cfg.fillColor;\n            }\n            if (cfg.fillAlpha !== undefined) {\n                this.fillAlpha = cfg.fillAlpha;\n            }\n            if (cfg.edges !== undefined) {\n                this.edges = cfg.edges;\n            }\n            if (cfg.edgeColor) {\n                this.edgeColor = cfg.edgeColor;\n            }\n            if (cfg.edgeAlpha !== undefined) {\n                this.edgeAlpha = cfg.edgeAlpha;\n            }\n            if (cfg.edgeWidth !== undefined) {\n                this.edgeWidth = cfg.edgeWidth;\n            }\n            if (cfg.backfaces !== undefined) {\n                this.backfaces = cfg.backfaces;\n            }\n        } else {\n            this.fill = cfg.fill;\n            this.fillColor = cfg.fillColor;\n            this.fillAlpha = cfg.fillAlpha;\n            this.edges = cfg.edges;\n            this.edgeColor = cfg.edgeColor;\n            this.edgeAlpha = cfg.edgeAlpha;\n            this.edgeWidth = cfg.edgeWidth;\n            this.backfaces = cfg.backfaces;\n        }\n    }\n\n    /**\n     Indicates whether or not ghost surfaces are filled with color.\n\n     @property fill\n     @default true\n     @type Boolean\n     */\n    set fill(value) {\n        value = value !== false;\n        if (this._state.fill === value) {\n            return;\n        }\n        this._state.fill = value;\n        this.glRedraw();\n    }\n\n    get fill() {\n        return this._state.fill;\n    }\n\n    /**\n     RGB color of filled ghost faces.\n\n     @property fillColor\n     @default [0.4, 0.4, 0.4]\n     @type Float32Array\n     */\n    set fillColor(value) {\n        let fillColor = this._state.fillColor;\n        if (!fillColor) {\n            fillColor = this._state.fillColor = new Float32Array(3);\n        } else if (value && fillColor[0] === value[0] && fillColor[1] === value[1] && fillColor[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            fillColor[0] = value[0];\n            fillColor[1] = value[1];\n            fillColor[2] = value[2];\n        } else {\n            fillColor[0] = 0.4;\n            fillColor[1] = 0.4;\n            fillColor[2] = 0.4;\n        }\n        this.glRedraw();\n    }\n\n    get fillColor() {\n        return this._state.fillColor;\n    }\n\n    /**\n     Transparency of filled ghost faces.\n\n     A value of 0.0 indicates fully transparent, 1.0 is fully opaque.\n\n     @property fillAlpha\n     @default 0.2\n     @type Number\n     */\n    set fillAlpha(value) {\n        value = (value !== undefined && value !== null) ? value : 0.2;\n        if (this._state.fillAlpha === value) {\n            return;\n        }\n        this._state.fillAlpha = value;\n        this.glRedraw();\n    }\n\n    get fillAlpha() {\n        return this._state.fillAlpha;\n    }\n\n    /**\n     Indicates whether or not ghost edges are visible.\n\n     @property edges\n     @default true\n     @type Boolean\n     */\n    set edges(value) {\n        value = value !== false;\n        if (this._state.edges === value) {\n            return;\n        }\n        this._state.edges = value;\n        this.glRedraw();\n    }\n\n    get edges() {\n        return this._state.edges;\n    }\n\n    /**\n     RGB color of ghost edges.\n\n     @property edgeColor\n     @default [0.2, 0.2, 0.2]\n     @type Float32Array\n     */\n    set edgeColor(value) {\n        let edgeColor = this._state.edgeColor;\n        if (!edgeColor) {\n            edgeColor = this._state.edgeColor = new Float32Array(3);\n        } else if (value && edgeColor[0] === value[0] && edgeColor[1] === value[1] && edgeColor[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            edgeColor[0] = value[0];\n            edgeColor[1] = value[1];\n            edgeColor[2] = value[2];\n        } else {\n            edgeColor[0] = 0.2;\n            edgeColor[1] = 0.2;\n            edgeColor[2] = 0.2;\n        }\n        this.glRedraw();\n    }\n\n    get edgeColor() {\n        return this._state.edgeColor;\n    }\n\n    /**\n     Transparency of ghost edges.\n\n     A value of 0.0 indicates fully transparent, 1.0 is fully opaque.\n\n     @property edgeAlpha\n     @default 0.5\n     @type Number\n     */\n    set edgeAlpha(value) {\n        value = (value !== undefined && value !== null) ? value : 0.5;\n        if (this._state.edgeAlpha === value) {\n            return;\n        }\n        this._state.edgeAlpha = value;\n        this.glRedraw();\n    }\n\n    get edgeAlpha() {\n        return this._state.edgeAlpha;\n    }\n\n    /**\n     Width of ghost edges, in pixels.\n\n     @property edgeWidth\n     @default 1.0\n     @type Number\n     */\n    set edgeWidth(value) {\n        this._state.edgeWidth = value || 1.0;\n        this.glRedraw();\n    }\n\n    get edgeWidth() {\n        return this._state.edgeWidth;\n    }\n\n    /**\n     Whether backfaces are visible on attached {@link Mesh}es.\n\n     The backfaces will belong to {@link Geometry} components that are also attached to\n     the {@link Mesh}es.\n\n     @property backfaces\n     @default false\n     @type Boolean\n     */\n    set backfaces(value) {\n        value = !!value;\n        if (this._state.backfaces === value) {\n            return;\n        }\n        this._state.backfaces = value;\n        this.glRedraw();\n    }\n\n    get backfaces() {\n        return this._state.backfaces;\n    }\n\n    /**\n     Selects a preset EmphasisMaterial configuration.\n\n     Available presets are:\n\n     * \"default\" - grey wireframe with translucent fill, for light backgrounds.\n     * \"defaultLightBG\" - grey wireframe with grey translucent fill, for light backgrounds.\n     * \"defaultDarkBG\" - grey wireframe with grey translucent fill, for dark backgrounds.\n     * \"vectorscope\" - green wireframe and black translucent fill.\n     * \"battlezone\" - green wireframe with black opaque fill, giving a solid hidden-lines-removed effect.\n     * \"sepia\" - light red-grey wireframe with light sepia translucent fill - easy on the eyes.\n     * \"gamegrid\" - light blue wireframe with dark blue translucent fill - reminiscent of Tron.\n     * \"yellowHighlight\" - light yellow translucent fill - highlights while allowing underlying detail to show through.\n\n     @property preset\n     @default \"default\"\n     @type String\n     */\n    set preset(value) {\n        value = value || \"default\";\n        if (this._preset === value) {\n            return;\n        }\n        const preset = PRESETS[value];\n        if (!preset) {\n            this.error(\"unsupported preset: '\" + value + \"' - supported values are \" + Object.keys(PRESETS).join(\", \"));\n            return;\n        }\n        this.fill = preset.fill;\n        this.fillColor = preset.fillColor;\n        this.fillAlpha = preset.fillAlpha;\n        this.edges = preset.edges;\n        this.edgeColor = preset.edgeColor;\n        this.edgeAlpha = preset.edgeAlpha;\n        this.edgeWidth = preset.edgeWidth;\n        this._preset = value;\n    }\n\n    get preset() {\n        return this._preset;\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\nexport {EmphasisMaterial};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/materials/EmphasisMaterial.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1588,
    "kind": "variable",
    "name": "PRESETS",
    "memberof": "scene/materials/EmphasisMaterial.js",
    "static": true,
    "longname": "scene/materials/EmphasisMaterial.js~PRESETS",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/materials/EmphasisMaterial.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "{\"default\": *, \"defaultWhiteBG\": *, \"defaultLightBG\": *, \"defaultDarkBG\": *, \"phosphorous\": *, \"sunset\": *, \"vectorscope\": *, \"battlezone\": *, \"sepia\": *, \"yellowHighlight\": *, \"greenSelected\": *, \"gamegrid\": *}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1589,
    "kind": "class",
    "name": "EmphasisMaterial",
    "memberof": "scene/materials/EmphasisMaterial.js",
    "static": true,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/materials/EmphasisMaterial.js",
    "importStyle": "{EmphasisMaterial}",
    "description": "Configures the appearance of {@link Mesh}es when ghosted, highlighted or selected.\n\n* Ghost a {@link Mesh} by setting {@link Mesh#ghosted} ````true````.\n* Highlight a {@link Mesh} by setting {@link Mesh#highlighted} ````true````.\n* Select a {@link Mesh} by setting {@link Mesh#selected} ````true````.\n* When {@link Mesh}es are within the subtree of a {@link Node}, then setting {@link Node#ghosted}, {@link Node#highlighted} or {@link Node#selected}\nwill collectively set {@link Mesh#ghosted}, {@link Mesh#highlighted} or {@link Mesh#selected} on all those {@link Mesh}es.\n* EmphasisMaterial provides several presets. Select a preset by setting {@link EmphasisMaterial#preset} to the ID of a preset in {@link EmphasisMaterial#presets}.\n* By default, a {@link Mesh} uses the default EmphasisMaterials in {@link Scene#ghostMaterial}, {@link Scene#highlightMaterial} and {@link Scene#selectedMaterial}\nbut you can assign each {@link Mesh#ghostMaterial}, {@link Mesh#highlightMaterial} or {@link Mesh#selectedMaterial} to a custom EmphasisMaterial, if required.\n\n## Usage\n\nIn the example below, we'll create a {@link Mesh} with its own GhostMaterial and set {@link Mesh#ghosted} ````true```` to ghost it.\n\n````javascript\nnew Mesh(myViewer.scene, {\n    geometry: new BoxGeometry(myViewer.scene, {\n        edgeThreshold: 1\n    }),\n    material: new PhongMaterial(myViewer.scene, {\n        diffuse: [0.2, 0.2, 1.0]\n    }),\n    ghostMaterial: new EdgeMaterial(myViewer.scene, {\n        fill: true,\n        fillColor: [0, 0, 0],\n        fillAlpha: 0.7,\n        edges: true,\n        edgeColor: [0.2, 1.0, 0.2],\n        edgeAlpha: 1.0,\n        edgeWidth: 2\n    }),\n    ghosted: true\n});\n````\n\nNote the ````edgeThreshold```` configuration for the {@link Geometry} on our {@link Mesh}.  EmphasisMaterial configures\na wireframe representation of the {@link Geometry} for the selected emphasis mode, which will have inner edges (those edges between\nadjacent co-planar triangles) removed for visual clarity. The ````edgeThreshold```` indicates that, for\nthis particular {@link Geometry}, an inner edge is one where the angle between the surface normals of adjacent triangles\nis not greater than ````5```` degrees. That's set to ````2```` by default, but we can override it to tweak the effect\nas needed for particular Geometries.\n\nHere's the example again, this time implicitly defaulting to the {@link Scene#edgeMaterial}. We'll also modify that EdgeMaterial\nto customize the effect.\n\n````javascript\nnew Mesh({\n    geometry: new TeapotGeometry(myViewer.scene, {\n        edgeThreshold: 5\n    }),\n    material: new PhongMaterial(myViewer.scene, {\n        diffuse: [0.2, 0.2, 1.0]\n    }),\n    ghosted: true\n});\n\nvar ghostMaterial = myViewer.scene.ghostMaterial;\n\nghostMaterial.fillColor = [0.2, 1.0, 0.2];\nghostMaterial.fillAlpha = 1.0;\n````\n\n## Presets\n\nLet's switch the {@link Scene#ghostMaterial} to one of the presets in {@link EmphasisMaterial#presets}:\n\n````javascript\nmyViewer.ghostMaterial.preset = EmphasisMaterial.presets[\"sepia\"];\n````\n\nWe can also create an EmphasisMaterial from a preset, while overriding properties of the preset as required:\n\n````javascript\nvar myEmphasisMaterial = new EMphasisMaterial(myViewer.scene, {\n     preset: \"sepia\",\n     fillColor = [1.0, 0.5, 0.5]\n});\n````",
    "lineNumber": 195,
    "interface": false,
    "extends": [
      "scene/materials/Material.js~Material"
    ]
  },
  {
    "__docId__": 1590,
    "kind": "get",
    "name": "type",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 206,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1591,
    "kind": "get",
    "name": "presets",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#presets",
    "access": "public",
    "description": "Available EmphasisMaterial presets.",
    "lineNumber": 217,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "presets",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1592,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 240,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@extends",
        "tagValue": "Material"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "The EmphasisMaterial configuration"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "cfg.meta",
        "description": "{String:Object} Metadata to attach to this EmphasisMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cfg.fill",
        "description": "{Boolean} Indicates whether or not ghost surfaces are filled with color."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0.4,0.4,0.4]",
        "defaultRaw": [
          0.4,
          0.4,
          0.4
        ],
        "name": "cfg.fillColor",
        "description": "{Array of Number} EmphasisMaterial fill color."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.2",
        "defaultRaw": 0.2,
        "name": "cfg.fillAlpha",
        "description": "{Number}  Transparency of filled ghost faces. A value of 0.0 indicates fully transparent, 1.0 is fully opaque."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cfg.edges",
        "description": "{Boolean} Indicates whether or not ghost edges are visible."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0.2,0.2,0.2]",
        "defaultRaw": [
          0.2,
          0.2,
          0.2
        ],
        "name": "cfg.edgeColor",
        "description": "{Array of Number}  RGB color of ghost edges."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.5",
        "defaultRaw": 0.5,
        "name": "cfg.edgeAlpha",
        "description": "{Number} Transparency of ghost edges. A value of 0.0 indicates fully transparent, 1.0 is fully opaque."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.edgeWidth",
        "description": "{Number}  Width of ghost edges, in pixels."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.backfaces",
        "description": "{Boolean} Whether to render {@link Geometry} backfaces."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.preset",
        "description": "{String} Selects a preset EmphasisMaterial configuration - see {@link EmphasisMaterial/preset:method\"}}EmphasisMaterial#preset(){{/crossLink}}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1593,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#_state",
    "access": "private",
    "description": null,
    "lineNumber": 244,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1594,
    "kind": "member",
    "name": "_preset",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#_preset",
    "access": "private",
    "description": null,
    "lineNumber": 256,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1612,
    "kind": "set",
    "name": "fill",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#fill",
    "access": "public",
    "description": "Indicates whether or not ghost surfaces are filled with color.",
    "lineNumber": 303,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fill",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1613,
    "kind": "get",
    "name": "fill",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#fill",
    "access": "public",
    "description": null,
    "lineNumber": 312,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1614,
    "kind": "set",
    "name": "fillColor",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#fillColor",
    "access": "public",
    "description": "RGB color of filled ghost faces.",
    "lineNumber": 323,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.4, 0.4, 0.4]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fillColor",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1615,
    "kind": "get",
    "name": "fillColor",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#fillColor",
    "access": "public",
    "description": null,
    "lineNumber": 342,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1616,
    "kind": "set",
    "name": "fillAlpha",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#fillAlpha",
    "access": "public",
    "description": "Transparency of filled ghost faces.\n\nA value of 0.0 indicates fully transparent, 1.0 is fully opaque.",
    "lineNumber": 355,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0.2"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "fillAlpha",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1617,
    "kind": "get",
    "name": "fillAlpha",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#fillAlpha",
    "access": "public",
    "description": null,
    "lineNumber": 364,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1618,
    "kind": "set",
    "name": "edges",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#edges",
    "access": "public",
    "description": "Indicates whether or not ghost edges are visible.",
    "lineNumber": 375,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edges",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1619,
    "kind": "get",
    "name": "edges",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#edges",
    "access": "public",
    "description": null,
    "lineNumber": 384,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1620,
    "kind": "set",
    "name": "edgeColor",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#edgeColor",
    "access": "public",
    "description": "RGB color of ghost edges.",
    "lineNumber": 395,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.2, 0.2, 0.2]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeColor",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1621,
    "kind": "get",
    "name": "edgeColor",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#edgeColor",
    "access": "public",
    "description": null,
    "lineNumber": 414,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1622,
    "kind": "set",
    "name": "edgeAlpha",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#edgeAlpha",
    "access": "public",
    "description": "Transparency of ghost edges.\n\nA value of 0.0 indicates fully transparent, 1.0 is fully opaque.",
    "lineNumber": 427,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0.5"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeAlpha",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1623,
    "kind": "get",
    "name": "edgeAlpha",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#edgeAlpha",
    "access": "public",
    "description": null,
    "lineNumber": 436,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1624,
    "kind": "set",
    "name": "edgeWidth",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#edgeWidth",
    "access": "public",
    "description": "Width of ghost edges, in pixels.",
    "lineNumber": 447,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeWidth",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1625,
    "kind": "get",
    "name": "edgeWidth",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#edgeWidth",
    "access": "public",
    "description": null,
    "lineNumber": 452,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1626,
    "kind": "set",
    "name": "backfaces",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#backfaces",
    "access": "public",
    "description": "Whether backfaces are visible on attached {@link Mesh}es.\n\nThe backfaces will belong to {@link Geometry} components that are also attached to\nthe {@link Mesh}es.",
    "lineNumber": 466,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "backfaces",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1627,
    "kind": "get",
    "name": "backfaces",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#backfaces",
    "access": "public",
    "description": null,
    "lineNumber": 475,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1628,
    "kind": "set",
    "name": "preset",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#preset",
    "access": "public",
    "description": "Selects a preset EmphasisMaterial configuration.\n\nAvailable presets are:\n\n\"default\" - grey wireframe with translucent fill, for light backgrounds.\n\"defaultLightBG\" - grey wireframe with grey translucent fill, for light backgrounds.\n\"defaultDarkBG\" - grey wireframe with grey translucent fill, for dark backgrounds.\n\"vectorscope\" - green wireframe and black translucent fill.\n\"battlezone\" - green wireframe with black opaque fill, giving a solid hidden-lines-removed effect.\n\"sepia\" - light red-grey wireframe with light sepia translucent fill - easy on the eyes.\n\"gamegrid\" - light blue wireframe with dark blue translucent fill - reminiscent of Tron.\n\"yellowHighlight\" - light yellow translucent fill - highlights while allowing underlying detail to show through.",
    "lineNumber": 497,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"default\""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "preset",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1637,
    "kind": "get",
    "name": "preset",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#preset",
    "access": "public",
    "description": null,
    "lineNumber": 517,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1638,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/materials/EmphasisMaterial.js~EmphasisMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/EmphasisMaterial.js~EmphasisMaterial#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 521,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1639,
    "kind": "file",
    "name": "scene/materials/Fresnel.js",
    "content": "import {Component} from '../Component.js';\nimport {RenderState} from '../webgl/RenderState.js';\nimport {math} from '../math/math.js';\n\n/**\n * Configures Fresnel effects for {@link PhongMaterial}s.\n *\n * Fresnels are attached to {@link PhongMaterial}s, which are attached to {@link Mesh}es.\n *\n * ## Usage\n *\n * In the example below we'll create a {@link Mesh} with a {@link PhongMaterial} that uses two Fresnels to configure\n * Fresnel effects for diffuse and specular illumination.\n *\n *  ````javascript\n * var mesh = new Mesh(myViewer.scene, {\n *\n *      material: new PhongMaterial(myViewer.scene, {\n *          ambient: [0.3, 0.3, 0.3],\n *          shininess: 30,\n *\n *          diffuseFresnel: new Fresnel(myViewer.scene, {\n *              edgeColor: [1.0, 1.0, 1.0],\n *              centerColor: [0.0, 0.0, 0.0],\n *              power: 4,\n *              bias: 0.6\n *          }),\n *\n *          specularFresnel: new Fresnel(myViewer.scene, {\n *              edgeColor: [1.0, 1.0, 1.0],\n *              centerColor: [0.0, 0.0, 0.0],\n *              power: 4,\n *              bias: 0.2\n *          })\n *      }),\n *\n *      new TorusGeometry(myViewer.scene)\n * });\n * ````\n */\nclass Fresnel extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Fresnel\";\n    }\n\n    /**\n     @class Fresnel\n     @module xeokit\n     @submodule materials\n     @constructor\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] Configs\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent scene, generated automatically when omitted.\n     @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this Fresnel.\n     @param [cfg.edgeColor=[ 0.0, 0.0, 0.0 ]] {Array of Number} Color used on edges.\n     @param [cfg.centerColor=[ 1.0, 1.0, 1.0 ]] {Array of Number} Color used on center.\n     @param [cfg.edgeBias=0] {Number} Bias at the edge.\n     @param [cfg.centerBias=1] {Number} Bias at the center.\n     @param [cfg.power=0] {Number} The power.\n     @extends Component\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({\n            edgeColor: math.vec3([0, 0, 0]),\n            centerColor: math.vec3([1, 1, 1]),\n            edgeBias: 0,\n            centerBias: 1,\n            power: 1\n        });\n\n        this.edgeColor = cfg.edgeColor;\n        this.centerColor = cfg.centerColor;\n        this.edgeBias = cfg.edgeBias;\n        this.centerBias = cfg.centerBias;\n        this.power = cfg.power;\n    }\n\n    /**\n     This Fresnel's edge color.\n\n     @property edgeColor\n     @default [0.0, 0.0, 0.0]\n     @type Float32Array\n     */\n    set edgeColor(value) {\n        this._state.edgeColor.set(value || [0.0, 0.0, 0.0]);\n        this.glRedraw();\n    }\n\n    get edgeColor() {\n        return this._state.edgeColor;\n    }\n\n    /**\n     This Fresnel's center color.\n\n     @property centerColor\n     @default [1.0, 1.0, 1.0]\n     @type Float32Array\n     */\n    set centerColor(value) {\n        this._state.centerColor.set(value || [1.0, 1.0, 1.0]);\n        this.glRedraw();\n    }\n\n    get centerColor() {\n        return this._state.centerColor;\n    }\n\n    /**\n     * Indicates this Fresnel's edge bias.\n     *\n     * @property edgeBias\n     * @default 0\n     * @type Number\n     */\n    set edgeBias(value) {\n        this._state.edgeBias = value || 0;\n        this.glRedraw();\n    }\n\n    get edgeBias() {\n        return this._state.edgeBias;\n    }\n\n    /**\n     * Indicates this Fresnel's center bias.\n     *\n     * @property centerBias\n     * @default 1\n     * @type Number\n     */\n    set centerBias(value) {\n        this._state.centerBias = (value !== undefined && value !== null) ? value : 1;\n        this.glRedraw();\n    }\n\n    get centerBias() {\n        return this._state.centerBias;\n    }\n\n    /**\n     * Indicates this Fresnel's power.\n     *\n     * @property power\n     * @default 1\n     * @type Number\n     */\n    set power(value) {\n        this._state.power = (value !== undefined && value !== null) ? value : 1;\n        this.glRedraw();\n    }\n\n    get power() {\n        return this._state.power;\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\nexport {Fresnel};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/materials/Fresnel.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1640,
    "kind": "class",
    "name": "Fresnel",
    "memberof": "scene/materials/Fresnel.js",
    "static": true,
    "longname": "scene/materials/Fresnel.js~Fresnel",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/materials/Fresnel.js",
    "importStyle": "{Fresnel}",
    "description": "Configures Fresnel effects for {@link PhongMaterial}s.\n\nFresnels are attached to {@link PhongMaterial}s, which are attached to {@link Mesh}es.\n\n## Usage\n\nIn the example below we'll create a {@link Mesh} with a {@link PhongMaterial} that uses two Fresnels to configure\nFresnel effects for diffuse and specular illumination.\n\n ````javascript\nvar mesh = new Mesh(myViewer.scene, {\n\n     material: new PhongMaterial(myViewer.scene, {\n         ambient: [0.3, 0.3, 0.3],\n         shininess: 30,\n\n         diffuseFresnel: new Fresnel(myViewer.scene, {\n             edgeColor: [1.0, 1.0, 1.0],\n             centerColor: [0.0, 0.0, 0.0],\n             power: 4,\n             bias: 0.6\n         }),\n\n         specularFresnel: new Fresnel(myViewer.scene, {\n             edgeColor: [1.0, 1.0, 1.0],\n             centerColor: [0.0, 0.0, 0.0],\n             power: 4,\n             bias: 0.2\n         })\n     }),\n\n     new TorusGeometry(myViewer.scene)\n});\n````",
    "lineNumber": 41,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 1641,
    "kind": "get",
    "name": "type",
    "memberof": "scene/materials/Fresnel.js~Fresnel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Fresnel.js~Fresnel#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 52,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1642,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/materials/Fresnel.js~Fresnel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Fresnel.js~Fresnel#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Fresnel"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "materials"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@extends",
        "tagValue": "Component"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "Configs"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent scene, generated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "String:Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.meta",
        "description": "Optional map of user-defined metadata to attach to this Fresnel."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[ 0.0, 0.0, 0.0 ]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "cfg.edgeColor",
        "description": "{Array of Number} Color used on edges."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[ 1.0, 1.0, 1.0 ]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "cfg.centerColor",
        "description": "{Array of Number} Color used on center."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "cfg.edgeBias",
        "description": "{Number} Bias at the edge."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.centerBias",
        "description": "{Number} Bias at the center."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0",
        "defaultRaw": 0,
        "name": "cfg.power",
        "description": "{Number} The power."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1643,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/materials/Fresnel.js~Fresnel",
    "static": false,
    "longname": "scene/materials/Fresnel.js~Fresnel#_state",
    "access": "private",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1649,
    "kind": "set",
    "name": "edgeColor",
    "memberof": "scene/materials/Fresnel.js~Fresnel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Fresnel.js~Fresnel#edgeColor",
    "access": "public",
    "description": "This Fresnel's edge color.",
    "lineNumber": 100,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.0, 0.0, 0.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeColor",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1650,
    "kind": "get",
    "name": "edgeColor",
    "memberof": "scene/materials/Fresnel.js~Fresnel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Fresnel.js~Fresnel#edgeColor",
    "access": "public",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1651,
    "kind": "set",
    "name": "centerColor",
    "memberof": "scene/materials/Fresnel.js~Fresnel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Fresnel.js~Fresnel#centerColor",
    "access": "public",
    "description": "This Fresnel's center color.",
    "lineNumber": 116,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1.0, 1.0, 1.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "centerColor",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1652,
    "kind": "get",
    "name": "centerColor",
    "memberof": "scene/materials/Fresnel.js~Fresnel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Fresnel.js~Fresnel#centerColor",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1653,
    "kind": "set",
    "name": "edgeBias",
    "memberof": "scene/materials/Fresnel.js~Fresnel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Fresnel.js~Fresnel#edgeBias",
    "access": "public",
    "description": "Indicates this Fresnel's edge bias.",
    "lineNumber": 132,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeBias",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1654,
    "kind": "get",
    "name": "edgeBias",
    "memberof": "scene/materials/Fresnel.js~Fresnel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Fresnel.js~Fresnel#edgeBias",
    "access": "public",
    "description": null,
    "lineNumber": 137,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1655,
    "kind": "set",
    "name": "centerBias",
    "memberof": "scene/materials/Fresnel.js~Fresnel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Fresnel.js~Fresnel#centerBias",
    "access": "public",
    "description": "Indicates this Fresnel's center bias.",
    "lineNumber": 148,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "centerBias",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1656,
    "kind": "get",
    "name": "centerBias",
    "memberof": "scene/materials/Fresnel.js~Fresnel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Fresnel.js~Fresnel#centerBias",
    "access": "public",
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1657,
    "kind": "set",
    "name": "power",
    "memberof": "scene/materials/Fresnel.js~Fresnel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Fresnel.js~Fresnel#power",
    "access": "public",
    "description": "Indicates this Fresnel's power.",
    "lineNumber": 164,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "power",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1658,
    "kind": "get",
    "name": "power",
    "memberof": "scene/materials/Fresnel.js~Fresnel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Fresnel.js~Fresnel#power",
    "access": "public",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1659,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/materials/Fresnel.js~Fresnel",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Fresnel.js~Fresnel#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1660,
    "kind": "file",
    "name": "scene/materials/LambertMaterial.js",
    "content": "import {Material} from './Material.js';\nimport {RenderState} from '../webgl/RenderState.js';\nimport {math} from '../math/math.js';\n\n/**\n * @desc Configures the normal rendered appearance of {@link Mesh}es using the non-realistic\n * but GPU-efficient <a href=\"https://en.wikipedia.org/wiki/Lambertian_reflectance\">Lambertian</a> model for calculating reflectance.\n *\n * * Used for efficiently rendering non-realistic objects for high-detail CAD.\n * * Use  {@link PhongMaterial} when you need specular highlights.\n * * Use the physically based {@link MetallicMaterial} or {@link SpecularMaterial} when you need more realism.\n *\n * For LambertMaterial, the illumination calculation is performed at each triangle vertex, and the resulting color is\n * interpolated across the face of the triangle. For {@link PhongMaterial}, {@link MetallicMaterial} and\n * {@link SpecularMaterial}, vertex normals are interpolated across the surface of the triangle, and\n * the illumination calculation is performed at each texel.\n *\n * The following table summarizes LambertMaterial properties:\n *\n *  | Property | Type | Range | Default Value | Space | Description |\n *  |:--------:|:----:|:-----:|:-------------:|:-----:|:-----------:|\n *  | {@link LambertMaterial#ambient} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the ambient light reflected by the material. |\n *  | {@link LambertMaterial#color} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the diffuse light reflected by the material. |\n *  | {@link LambertMaterial#emissive} | Array | [0, 1] for all components | [0,0,0] | linear | The RGB components of the light emitted by the material. |\n *  | {@link LambertMaterial#alpha} | Number | [0, 1] | 1 | linear | The transparency of the material surface (0 fully transparent, 1 fully opaque). |\n *  | {@link LambertMaterial#lineWidth} | Number | [0..100] | 1 |  | Line width in pixels. |\n *  | {@link LambertMaterial#pointSize} | Number | [0..100] | 1 |  | Point size in pixels. |\n *  | {@link LambertMaterial#backfaces} | Boolean |  | false |  | Whether to render {@link Geometry} backfaces. |\n *  | {@link LambertMaterial#backfaces} | String | \"ccw\", \"cw\" | \"ccw\" |  | The winding order for {@link Geometry} frontfaces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise. |\n *\n * ## Usage\n *\n * In the example below we'll create a {@link Mesh} with a shape defined by a {@link TorusGeometry} and\n * normal rendering appearance configured with a LambertMaterial.\n *\n * ```` javascript\n * new Mesh(myViewer.scene, {\n *      material: new LambertMaterial(myViewer.scene, {\n *          ambient: [0.3, 0.3, 0.3],\n *          color: [0.5, 0.5, 0.0],\n *          alpha: 1.0 // Default\n *      }),\n *      geometry: new TorusGeometry(myViewer.scene)\n * });\n * ````\n */\nclass LambertMaterial extends Material {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"LambertMaterial\";\n    }\n\n    /**\n     @constructor\n     @extends Material\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] The LambertMaterial configuration\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n     @param [cfg.meta=null] {String:Object} Metadata to attach to this LambertMaterial.\n     @param [cfg.ambient=[1.0, 1.0, 1.0 ]] {Array of Number} LambertMaterial ambient color.\n     @param [cfg.color=[ 1.0, 1.0, 1.0 ]] {Array of Number} LambertMaterial diffuse color.\n     @param [cfg.emissive=[ 0.0, 0.0, 0.0 ]] {Array of Number} LambertMaterial emissive color.\n     @param [cfg.alpha=1] {Number} Scalar in range 0-1 that controls alpha, where 0 is completely transparent and 1 is completely opaque.\n     @param [cfg.reflectivity=1] {Number} Scalar in range 0-1 that controls how much {@link CubeMap\"}}CubeMap{{/crossLink}} is reflected.\n     @param [cfg.lineWidth=1] {Number} Scalar that controls the width of lines for {@link Geometry} with {@link Geometry/primitive} set to \"lines\".\n     @param [cfg.pointSize=1] {Number} Scalar that controls the size of points for {@link Geometry} with {@link Geometry/primitive} set to \"points\".\n     @param [cfg.backfaces=false] {Boolean} Whether to render {@link Geometry} backfaces.\n     @param [cfg.frontface=\"ccw\"] {Boolean} The winding order for {@link Geometry} front faces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise.\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({\n            type: \"LambertMaterial\",\n            ambient: math.vec3([1.0, 1.0, 1.0]),\n            color: math.vec3([1.0, 1.0, 1.0]),\n            emissive: math.vec3([0.0, 0.0, 0.0]),\n            alpha: null,\n            alphaMode: 0, // 2 (\"blend\") when transparent, so renderer knows when to add to transparency bin\n            lineWidth: null,\n            pointSize: null,\n            backfaces: null,\n            frontface: null, // Boolean for speed; true == \"ccw\", false == \"cw\"\n            hash: \"/lam;\"\n        });\n\n        this.ambient = cfg.ambient;\n        this.color = cfg.color;\n        this.emissive = cfg.emissive;\n        this.alpha = cfg.alpha;\n        this.lineWidth = cfg.lineWidth;\n        this.pointSize = cfg.pointSize;\n        this.backfaces = cfg.backfaces;\n        this.frontface = cfg.frontface;\n    }\n\n    /**\n     The LambertMaterial's ambient color.\n\n     @property ambient\n     @default [0.3, 0.3, 0.3]\n     @type Float32Array\n     */\n\n    set ambient(value) {\n        let ambient = this._state.ambient;\n        if (!ambient) {\n            ambient = this._state.ambient = new Float32Array(3);\n        } else if (value && ambient[0] === value[0] && ambient[1] === value[1] && ambient[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            ambient[0] = value[0];\n            ambient[1] = value[1];\n            ambient[2] = value[2];\n        } else {\n            ambient[0] = .2;\n            ambient[1] = .2;\n            ambient[2] = .2;\n        }\n        this.glRedraw();\n    }\n\n    get ambient() {\n        return this._state.ambient;\n    }\n\n    /**\n     The LambertMaterial's diffuse color.\n\n     @property color\n     @default [1.0, 1.0, 1.0]\n     @type Float32Array\n     */\n    set color(value) {\n        let color = this._state.color;\n        if (!color) {\n            color = this._state.color = new Float32Array(3);\n        } else if (value && color[0] === value[0] && color[1] === value[1] && color[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            color[0] = value[0];\n            color[1] = value[1];\n            color[2] = value[2];\n        } else {\n            color[0] = 1;\n            color[1] = 1;\n            color[2] = 1;\n        }\n        this.glRedraw();\n    }\n\n    get color() {\n        return this._state.color;\n    }\n\n    /**\n     The LambertMaterial's emissive color.\n\n     @property emissive\n     @default [0.0, 0.0, 0.0]\n     @type Float32Array\n     */\n    set emissive(value) {\n        let emissive = this._state.emissive;\n        if (!emissive) {\n            emissive = this._state.emissive = new Float32Array(3);\n        } else if (value && emissive[0] === value[0] && emissive[1] === value[1] && emissive[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            emissive[0] = value[0];\n            emissive[1] = value[1];\n            emissive[2] = value[2];\n        } else {\n            emissive[0] = 0;\n            emissive[1] = 0;\n            emissive[2] = 0;\n        }\n        this.glRedraw();\n    }\n\n    get emissive() {\n        return this._state.emissive;\n    }\n\n    /**\n     Factor in the range [0..1] indicating how transparent the LambertMaterial is.\n\n     A value of 0.0 indicates fully transparent, 1.0 is fully opaque.\n\n     @property alpha\n     @default 1.0\n     @type Number\n     */\n\n    set alpha(value) {\n        value = (value !== undefined && value !== null) ? value : 1.0;\n        if (this._state.alpha === value) {\n            return;\n        }\n        this._state.alpha = value;\n        this._state.alphaMode = value < 1.0 ? 2 /* blend */ : 0\n        /* opaque */\n        this.glRedraw();\n    }\n\n    get alpha() {\n        return this._state.alpha;\n    }\n\n    /**\n     The LambertMaterial's line width.\n\n     @property lineWidth\n     @default 1.0\n     @type Number\n     */\n\n    set lineWidth(value) {\n        this._state.lineWidth = value || 1.0;\n        this.glRedraw();\n    }\n\n    get lineWidth() {\n        return this._state.lineWidth;\n    }\n\n    /**\n     The LambertMaterial's point size.\n\n     @property pointSize\n     @default 1.0\n     @type Number\n     */\n    set pointSize(value) {\n        this._state.pointSize = value || 1.0;\n        this.glRedraw();\n    }\n\n    get pointSize() {\n        return this._state.pointSize;\n    }\n\n    /**\n     Whether backfaces are visible on attached {@link Mesh}es.\n\n     The backfaces will belong to {@link Geometry} components that are also attached to\n     the {@link Mesh}es.\n\n     @property backfaces\n     @default false\n     @type Boolean\n     */\n    set backfaces(value) {\n        value = !!value;\n        if (this._state.backfaces === value) {\n            return;\n        }\n        this._state.backfaces = value;\n        this.glRedraw();\n    }\n\n    get backfaces() {\n        return this._state.backfaces;\n    }\n\n    /**\n     Indicates the winding direction of front faces on attached {@link Mesh}es.\n\n     The faces will belong to {@link Geometry} components that are also attached to\n     the {@link Mesh}es.\n\n     @property frontface\n     @default \"ccw\"\n     @type String\n     */\n    set frontface(value) {\n        value = value !== \"cw\";\n        if (this._state.frontface === value) {\n            return;\n        }\n        this._state.frontface = value;\n        this.glRedraw();\n    }\n\n    get frontface() {\n        return this._state.frontface ? \"ccw\" : \"cw\";\n    }\n\n    _getState() {\n        return this._state;\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\nexport {LambertMaterial};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/materials/LambertMaterial.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1661,
    "kind": "class",
    "name": "LambertMaterial",
    "memberof": "scene/materials/LambertMaterial.js",
    "static": true,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/materials/LambertMaterial.js",
    "importStyle": "{LambertMaterial}",
    "description": "Configures the normal rendered appearance of {@link Mesh}es using the non-realistic\nbut GPU-efficient <a href=\"https://en.wikipedia.org/wiki/Lambertian_reflectance\">Lambertian</a> model for calculating reflectance.\n\n* Used for efficiently rendering non-realistic objects for high-detail CAD.\n* Use  {@link PhongMaterial} when you need specular highlights.\n* Use the physically based {@link MetallicMaterial} or {@link SpecularMaterial} when you need more realism.\n\nFor LambertMaterial, the illumination calculation is performed at each triangle vertex, and the resulting color is\ninterpolated across the face of the triangle. For {@link PhongMaterial}, {@link MetallicMaterial} and\n{@link SpecularMaterial}, vertex normals are interpolated across the surface of the triangle, and\nthe illumination calculation is performed at each texel.\n\nThe following table summarizes LambertMaterial properties:\n\n | Property | Type | Range | Default Value | Space | Description |\n |:--------:|:----:|:-----:|:-------------:|:-----:|:-----------:|\n | {@link LambertMaterial#ambient} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the ambient light reflected by the material. |\n | {@link LambertMaterial#color} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the diffuse light reflected by the material. |\n | {@link LambertMaterial#emissive} | Array | [0, 1] for all components | [0,0,0] | linear | The RGB components of the light emitted by the material. |\n | {@link LambertMaterial#alpha} | Number | [0, 1] | 1 | linear | The transparency of the material surface (0 fully transparent, 1 fully opaque). |\n | {@link LambertMaterial#lineWidth} | Number | [0..100] | 1 |  | Line width in pixels. |\n | {@link LambertMaterial#pointSize} | Number | [0..100] | 1 |  | Point size in pixels. |\n | {@link LambertMaterial#backfaces} | Boolean |  | false |  | Whether to render {@link Geometry} backfaces. |\n | {@link LambertMaterial#backfaces} | String | \"ccw\", \"cw\" | \"ccw\" |  | The winding order for {@link Geometry} frontfaces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise. |\n\n## Usage\n\nIn the example below we'll create a {@link Mesh} with a shape defined by a {@link TorusGeometry} and\nnormal rendering appearance configured with a LambertMaterial.\n\n```` javascript\nnew Mesh(myViewer.scene, {\n     material: new LambertMaterial(myViewer.scene, {\n         ambient: [0.3, 0.3, 0.3],\n         color: [0.5, 0.5, 0.0],\n         alpha: 1.0 // Default\n     }),\n     geometry: new TorusGeometry(myViewer.scene)\n});\n````",
    "lineNumber": 47,
    "interface": false,
    "extends": [
      "scene/materials/Material.js~Material"
    ]
  },
  {
    "__docId__": 1662,
    "kind": "get",
    "name": "type",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 58,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1663,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 81,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@extends",
        "tagValue": "Material"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "The LambertMaterial configuration"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "cfg.meta",
        "description": "{String:Object} Metadata to attach to this LambertMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1.0, 1.0, 1.0 ]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "cfg.ambient",
        "description": "{Array of Number} LambertMaterial ambient color."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[ 1.0, 1.0, 1.0 ]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "cfg.color",
        "description": "{Array of Number} LambertMaterial diffuse color."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[ 0.0, 0.0, 0.0 ]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "cfg.emissive",
        "description": "{Array of Number} LambertMaterial emissive color."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.alpha",
        "description": "{Number} Scalar in range 0-1 that controls alpha, where 0 is completely transparent and 1 is completely opaque."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.reflectivity",
        "description": "{Number} Scalar in range 0-1 that controls how much {@link CubeMap\"}}CubeMap{{/crossLink}} is reflected."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.lineWidth",
        "description": "{Number} Scalar that controls the width of lines for {@link Geometry} with {@link Geometry/primitive} set to \"lines\"."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.pointSize",
        "description": "{Number} Scalar that controls the size of points for {@link Geometry} with {@link Geometry/primitive} set to \"points\"."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.backfaces",
        "description": "{Boolean} Whether to render {@link Geometry} backfaces."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"ccw\"",
        "defaultRaw": "ccw",
        "name": "cfg.frontface",
        "description": "{Boolean} The winding order for {@link Geometry} front faces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1664,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#_state",
    "access": "private",
    "description": null,
    "lineNumber": 85,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1673,
    "kind": "set",
    "name": "ambient",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#ambient",
    "access": "public",
    "description": "The LambertMaterial's ambient color.",
    "lineNumber": 117,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.3, 0.3, 0.3]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ambient",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1674,
    "kind": "get",
    "name": "ambient",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#ambient",
    "access": "public",
    "description": null,
    "lineNumber": 136,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1675,
    "kind": "set",
    "name": "color",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#color",
    "access": "public",
    "description": "The LambertMaterial's diffuse color.",
    "lineNumber": 147,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1.0, 1.0, 1.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1676,
    "kind": "get",
    "name": "color",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#color",
    "access": "public",
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1677,
    "kind": "set",
    "name": "emissive",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#emissive",
    "access": "public",
    "description": "The LambertMaterial's emissive color.",
    "lineNumber": 177,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.0, 0.0, 0.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "emissive",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1678,
    "kind": "get",
    "name": "emissive",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#emissive",
    "access": "public",
    "description": null,
    "lineNumber": 196,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1679,
    "kind": "set",
    "name": "alpha",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#alpha",
    "access": "public",
    "description": "Factor in the range [0..1] indicating how transparent the LambertMaterial is.\n\nA value of 0.0 indicates fully transparent, 1.0 is fully opaque.",
    "lineNumber": 210,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1680,
    "kind": "get",
    "name": "alpha",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#alpha",
    "access": "public",
    "description": null,
    "lineNumber": 221,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1681,
    "kind": "set",
    "name": "lineWidth",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#lineWidth",
    "access": "public",
    "description": "The LambertMaterial's line width.",
    "lineNumber": 233,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "lineWidth",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1682,
    "kind": "get",
    "name": "lineWidth",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#lineWidth",
    "access": "public",
    "description": null,
    "lineNumber": 238,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1683,
    "kind": "set",
    "name": "pointSize",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#pointSize",
    "access": "public",
    "description": "The LambertMaterial's point size.",
    "lineNumber": 249,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pointSize",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1684,
    "kind": "get",
    "name": "pointSize",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#pointSize",
    "access": "public",
    "description": null,
    "lineNumber": 254,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1685,
    "kind": "set",
    "name": "backfaces",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#backfaces",
    "access": "public",
    "description": "Whether backfaces are visible on attached {@link Mesh}es.\n\nThe backfaces will belong to {@link Geometry} components that are also attached to\nthe {@link Mesh}es.",
    "lineNumber": 268,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "backfaces",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1686,
    "kind": "get",
    "name": "backfaces",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#backfaces",
    "access": "public",
    "description": null,
    "lineNumber": 277,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1687,
    "kind": "set",
    "name": "frontface",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#frontface",
    "access": "public",
    "description": "Indicates the winding direction of front faces on attached {@link Mesh}es.\n\nThe faces will belong to {@link Geometry} components that are also attached to\nthe {@link Mesh}es.",
    "lineNumber": 291,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"ccw\""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "frontface",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1688,
    "kind": "get",
    "name": "frontface",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#frontface",
    "access": "public",
    "description": null,
    "lineNumber": 300,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1689,
    "kind": "method",
    "name": "_getState",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#_getState",
    "access": "private",
    "description": null,
    "lineNumber": 304,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1690,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/materials/LambertMaterial.js~LambertMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/LambertMaterial.js~LambertMaterial#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 308,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1691,
    "kind": "file",
    "name": "scene/materials/Material.js",
    "content": "/**\n A **Material** defines the surface appearance of attached {@link Mesh}es.\n\n Material is the base class for:\n\n * {@link MetallicMaterial} - physically-based material for metallic surfaces. Use this one for things made of metal.\n * {@link SpecularMaterial} - physically-based material for non-metallic (dielectric)\n surfaces. Use this one for insulators, such as ceramics, plastics, wood etc.\n * {@link PhongMaterial} - material for classic Blinn-Phong shading. This is less demanding of graphics hardware than the physically-based materials.\n * {@link LambertMaterial} - material for fast, flat-shaded CAD rendering without textures. Use\n this for navigating huge CAD or BIM models interactively. This material gives the best rendering performance and uses the least memory.\n * {@link EmphasisMaterial} - defines the appearance of Meshes when \"ghosted\" or \"highlighted\".\n * {@link EdgeMaterial} - defines the appearance of Meshes when edges are emphasized.\n * {@link OutlineMaterial} - defines the appearance of outlines drawn around Meshes.\n\n A {@link Scene} is allowed to contain a mixture of these material types.\n\n @class Material\n @module xeokit\n @submodule materials\n @constructor\n @extends Component\n */\nimport {Component} from '../Component.js';\nimport {stats} from './../stats.js';\n\nclass Material extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Material\";\n    }\n\n    constructor(owner, cfg={}) {\n        super(owner, cfg);\n        stats.memory.materials++;\n    }\n\n    destroy() {\n        super.destroy();\n        stats.memory.materials--;\n    }\n}\n\nexport {Material};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/materials/Material.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1692,
    "kind": "class",
    "name": "Material",
    "memberof": "scene/materials/Material.js",
    "static": true,
    "longname": "scene/materials/Material.js~Material",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/materials/Material.js",
    "importStyle": "{Material}",
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 1693,
    "kind": "get",
    "name": "type",
    "memberof": "scene/materials/Material.js~Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Material.js~Material#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1694,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/materials/Material.js~Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Material.js~Material#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true
  },
  {
    "__docId__": 1695,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/materials/Material.js~Material",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Material.js~Material#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1696,
    "kind": "file",
    "name": "scene/materials/MetallicMaterial.js",
    "content": "import {Material} from './Material.js';\nimport {RenderState} from '../webgl/RenderState.js';\nimport {math} from '../math/math.js';\n\nconst modes = {\"opaque\": 0, \"mask\": 1, \"blend\": 2};\nconst modeNames = [\"opaque\", \"mask\", \"blend\"];\n\n/**\n * @desc Configures the normal rendered appearance of {@link Mesh}es using the physically-accurate *metallic-roughness* shading model.\n *\n * * Useful for conductive materials, such as metal, but also appropriate for insulators.\n * * {@link SpecularMaterial} is best for insulators, such as wood, ceramics and plastic.\n * * {@link PhongMaterial} is appropriate for non-realistic objects.\n * * {@link LambertMaterial} is appropriate for high-detail models that need to render as efficiently as possible.\n *\n * For an introduction to PBR concepts, try these articles:\n *\n * * Joe Wilson's [Basic Theory of Physically-Based Rendering](https://www.marmoset.co/posts/basic-theory-of-physically-based-rendering/)\n * * Jeff Russel's [Physically-based Rendering, and you can too!](https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/)\n * * Sebastien Legarde's [Adapting a physically-based shading model](http://seblagarde.wordpress.com/tag/physically-based-rendering/)\n *\n * The following table summarizes MetallicMaterial properties:\n *\n * | Property | Type | Range | Default Value | Space | Description |\n * |:--------:|:----:|:-----:|:-------------:|:-----:|:-----------:|\n * | {@link MetallicMaterial#baseColor} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the base color of the material. |\n * | {@link MetallicMaterial#metallic} | Number | [0, 1] | 1 | linear | The metallic-ness the material (1 for metals, 0 for non-metals). |\n * | {@link MetallicMaterial#roughness} | Number | [0, 1] | 1 | linear | The roughness of the material surface. |\n * | {@link MetallicMaterial#specularF0} | Number | [0, 1] | 1 | linear | The specular Fresnel of the material surface. |\n * | {@link MetallicMaterial#emissive} | Array | [0, 1] for all components | [0,0,0] | linear | The RGB components of the emissive color of the material. |\n * | {@link MetallicMaterial#alpha} | Number | [0, 1] | 1 | linear | The transparency of the material surface (0 fully transparent, 1 fully opaque). |\n * | {@link MetallicMaterial#baseColorMap} | {@link Texture} |  | null | sRGB | Texture RGB components multiplying by {@link MetallicMaterial#baseColor}. If the fourth component (A) is present, it multiplies by {@link MetallicMaterial#alpha}. |\n * | {@link MetallicMaterial#metallicMap} | {@link Texture} |  | null | linear | Texture with first component multiplying by {@link MetallicMaterial#metallic}. |\n * | {@link MetallicMaterial#roughnessMap} | {@link Texture} |  | null | linear | Texture with first component multiplying by {@link MetallicMaterial#roughness}. |\n * | {@link MetallicMaterial#metallicRoughnessMap} | {@link Texture} |  | null | linear | Texture with first component multiplying by {@link MetallicMaterial#metallic} and second component multiplying by {@link MetallicMaterial#roughness}. |\n * | {@link MetallicMaterial#emissiveMap} | {@link Texture} |  | null | linear | Texture with RGB components multiplying by {@link MetallicMaterial#emissive}. |\n * | {@link MetallicMaterial#alphaMap} | {@link Texture} |  | null | linear | Texture with first component multiplying by {@link MetallicMaterial#alpha}. |\n * | {@link MetallicMaterial#occlusionMap} | {@link Texture} |  | null | linear | Ambient occlusion texture multiplying by surface's reflected diffuse and specular light. |\n * | {@link MetallicMaterial#normalMap} | {@link Texture} |  | null | linear | Tangent-space normal map. |\n * | {@link MetallicMaterial#alphaMode} | String | \"opaque\", \"blend\", \"mask\" | \"blend\" |  | Alpha blend mode. |\n * | {@link MetallicMaterial#alphaCutoff} | Number | [0..1] | 0.5 |  | Alpha cutoff value. |\n * | {@link MetallicMaterial#backfaces} | Boolean |  | false |  | Whether to render {@link Geometry} backfaces. |\n * | {@link MetallicMaterial#frontface} | String | \"ccw\", \"cw\" | \"ccw\" |  | The winding order for {@link Geometry} frontfaces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise. |\n *\n * ## Usage\n *\n * In the example below we'll create a {@link Mesh} with a {@link TorusGeometry} and a MetallicMaterial.\n *\n * Note that in this example we're providing separate {@link Texture} for the {@link MetallicMaterial#metallic} and {@link MetallicMaterial#roughness}\n * channels, which allows us a little creative flexibility. Then, in the next example further down, we'll combine those channels\n * within the same {@link Texture} for efficiency.\n *\n * ````javascript\n * const myMesh = new Mesh(myViewer.scene, {\n *\n *     geometry: new TorusGeometry(myViewer.scene),\n *\n *     material: new MetallicMaterial(myViewer.scene, {\n *\n *         // Channels with default values, just to show them\n *\n *         baseColor: [1.0, 1.0, 1.0],\n *         metallic: 1.0,\n *         roughness: 1.0,\n *         emissive: [0.0, 0.0, 0.0],\n *         alpha: 1.0,\n *\n *         // Textures to multiply by some of the channels\n *         baseColorMap : new Texture(myViewer.scene, {  // Multiplies by baseColor\n *             src: \"textures/diffuse/fire_hydrant_Base_Color.png\"\n *         }),\n *         metallicMap : new Texture(myViewer.scene, {   // R component multiplies by metallic\n *             src: \"textures/metallic/fire_hydrant_Metallic.png\"\n *         }),\n *         roughnessMap : new Texture(myViewer.scene, {  // R component multiplies by roughness\n *             src: \"textures/roughness/fire_hydrant_Roughness.png\"\n *         }),\n *         occlusionMap : new Texture(myViewer.scene, {  // Multiplies by fragment alpha\n *             src: \"textures/occlusion/fire_hydrant_Mixed_AO.png\"\n *         }),\n *         normalMap : new Texture(myViewer.scene, {\n *             src: \"textures/normal/fire_hydrant_Normal_OpenGL.png\"\n *         })\n *     })\n * });\n * ````\n *\n * ## Combining channels within the same textures\n *\n * In the previous example we provided separate {@link Texture} for the {@link MetallicMaterial#metallic} and\n * {@link MetallicMaterial#roughness} channels, but we can combine those channels into the same {@link Texture} to\n * reduce download time, memory footprint and rendering time (and also for glTF compatibility).\n *\n * Here's our MetallicMaterial again with those channels combined in the {@link MetallicMaterial#metallicRoughnessMap}\n * {@link Texture}, where the *R* component multiplies by {@link MetallicMaterial#metallic} and *G* multiplies\n * by {@link MetallicMaterial#roughness}.\n *\n * ````javascript\n * const myMesh = new Mesh(myViewer.scene, {\n *\n *     geometry: new TorusGeometry(myViewer.scene),\n *\n *     material: new MetallicMaterial(myViewer.scene, {\n *\n *         // Channels with default values, just to show them\n *\n *         baseColor: [1.0, 1.0, 1.0],\n *         metallic: 1.0,\n *         roughness: 1.0,\n *         emissive: [0.0, 0.0, 0.0],\n *         alpha: 1.0,\n *\n *         // Textures to multiply by some of the channels\n *\n *         baseColorMap : new Texture(myViewer.scene, {  // Multiplies by baseColor\n *             src: \"textures/Base_Color.png\"\n *         }),\n *         metallicRoughnessMap : new Texture(myViewer.scene, {   // <<----------- Added\n *             src: \"textures/MetallicRoughness.png\"              // R component multiplies by metallic\n *         }),                                                    // G component multiplies by roughness\n *         occlusionMap : new Texture(myViewer.scene, {  // Multiplies by fragment alpha\n *             src: \"textures/Mixed_AO.png\"\n *         }),\n *         normalMap : new Texture(myViewer.scene, {\n *             src: \"textures/Normal.png\"\n *         })\n *     })\n * });\n * ````\n *\n * Although not shown in this example, we can also texture {@link MetallicMaterial#alpha} with the *A* component of\n * {@link MetallicMaterial#baseColorMap}'s {@link Texture}, if required.\n *\n * ## Alpha Blending\n *\n * Let's make our {@link Mesh} transparent.\n *\n * We'll update the {@link MetallicMaterial#alpha} and {@link MetallicMaterial#alphaMode}, causing it to blend 50%\n * with the background:\n *\n * ````javascript\n * hydrant.material.alpha = 0.5;\n * hydrant.material.alphaMode = \"blend\";\n * ````\n *\n * ## Alpha Masking\n *\n * Let's apply an alpha mask to our {@link Mesh}.\n *\n * We'll configure an {@link MetallicMaterial#alphaMap} to multiply by {@link MetallicMaterial#alpha},\n * with {@link MetallicMaterial#alphaMode} and {@link MetallicMaterial#alphaCutoff} to treat it as an alpha mask:\n *\n * ````javascript\n * const myMesh = new Mesh(myViewer.scene, {\n *\n *     geometry: new TorusGeometry(myViewer.scene),\n *\n *     material: new MetallicMaterial(myViewer.scene, {\n *\n *         // Channels with default values, just to show them\n *\n *         baseColor: [1.0, 1.0, 1.0],\n *         metallic: 1.0,\n *         roughness: 1.0,\n *         emissive: [0.0, 0.0, 0.0],\n *         alpha: 1.0,\n *         alphaMode : \"mask\",  // <<---------------- Added\n *         alphaCutoff : 0.2,   // <<---------------- Added\n *\n *         // Textures to multiply by some of the channels\n *\n *         alphaMap : new Texture(myViewer.scene{ // <<---------------- Added\n *              src: \"textures/crossGridColorMap.jpg\"\n *         }),\n *         baseColorMap : new Texture(myViewer.scene, {  // Multiplies by baseColor\n *             src: \"textures/Base_Color.png\"\n *         }),\n *         metallicRoughnessMap : new Texture(myViewer.scene, {   // R component multiplies by metallic\n *             src: \"textures/MetallicRoughness.png\"              // G component multiplies by roughness\n *         }),\n *         occlusionMap : new Texture(myViewer.scene, {  // Multiplies by fragment alpha\n *             src: \"textures/Mixed_AO.png\"\n *         }),\n *         normalMap : new Texture(myViewer.scene, {\n *             src: \"textures/Normal.png\"\n *         })\n *      })\n * });\n * ````\n */\nclass MetallicMaterial extends Material {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"MetallicMaterial\";\n    }\n\n    /**\n     @constructor\n     @extends Material\n\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n\n     @param {*} [cfg] The MetallicMaterial configuration.\n\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n\n     @param [cfg.meta=null] {String:Object} Metadata to attach to this material.\n\n     @param [cfg.baseColor=[1,1,1]] {Float32Array}  RGB diffuse color of this MetallicMaterial. Multiplies by the RGB\n     components of {@link MetallicMaterial#baseColorMap}.\n\n     @param [cfg.metallic=1.0] {Number} Factor in the range 0..1 indicating how metallic this MetallicMaterial is.\n     1 is metal, 0 is non-metal. Multiplies by the *R* component of {@link MetallicMaterial#metallicMap} and the *A* component of\n     {@link MetallicMaterial#metalRoughnessMap}.\n\n     @param [cfg.roughness=1.0] {Number} Factor in the range 0..1 indicating the roughness of this MetallicMaterial.\n     0 is fully smooth, 1 is fully rough. Multiplies by the *R* component of {@link MetallicMaterial#roughnessMap}.\n\n     @param [cfg.specularF0=0.0] {Number} Factor in the range 0..1 indicating specular Fresnel.\n\n     @param [cfg.emissive=[0,0,0]] {Float32Array}  RGB emissive color of this MetallicMaterial. Multiplies by the RGB\n     components of {@link MetallicMaterial#emissiveMap}.\n\n     @param [cfg.alpha=1.0] {Number} Factor in the range 0..1 indicating the alpha of this MetallicMaterial.\n     Multiplies by the *R* component of {@link MetallicMaterial#alphaMap} and the *A* component,\n     if present, of {@link MetallicMaterial#baseColorMap}. The value of\n     {@link MetallicMaterial#alphaMode} indicates how alpha is interpreted when rendering.\n\n     @param [cfg.baseColorMap=undefined] {Texture} RGBA {@link Texture} containing the diffuse color\n     of this MetallicMaterial, with optional *A* component for alpha. The RGB components multiply by the\n     {@link MetallicMaterial#baseColor} property,\n     while the *A* component, if present, multiplies by the {@link MetallicMaterial#alpha} property.\n\n     @param [cfg.alphaMap=undefined] {Texture} RGB {@link Texture} containing this MetallicMaterial's\n     alpha in its *R* component. The *R* component multiplies by the {@link MetallicMaterial#alpha} property. Must\n     be within the same {@link Scene} as this MetallicMaterial.\n\n     @param [cfg.metallicMap=undefined] {Texture} RGB {@link Texture} containing this MetallicMaterial's\n     metallic factor in its *R* component. The *R* component multiplies by the\n     {@link MetallicMaterial#metallic} property. Must be within the same\n     {@link Scene} as this MetallicMaterial.\n\n     @param [cfg.roughnessMap=undefined] {Texture} RGB {@link Texture} containing this MetallicMaterial's\n     roughness factor in its *R* component. The *R* component multiplies by the\n     {@link MetallicMaterial#roughness} property. Must be within the same\n     {@link Scene} as this MetallicMaterial.\n\n     @param [cfg.metallicRoughnessMap=undefined] {Texture} RGB {@link Texture} containing this\n     MetallicMaterial's metalness in its *R* component and roughness in its *G* component. Its *R* component multiplies by the\n     {@link MetallicMaterial#metallic} property, while its *G* component multiplies by the\n     {@link MetallicMaterial#roughness} property. Must be within the same\n     {@link Scene} as this MetallicMaterial.\n\n     @param [cfg.emissiveMap=undefined] {Texture} RGB {@link Texture} containing the emissive color of this\n     MetallicMaterial. Multiplies by the {@link MetallicMaterial#emissive} property.\n     Must be within the same {@link Scene} as this MetallicMaterial.\n\n     @param [cfg.occlusionMap=undefined] {Texture} RGB ambient occlusion {@link Texture}. Within shaders,\n     multiplies by the specular and diffuse light reflected by surfaces. Must be within the same {@link Scene}\n     as this MetallicMaterial.\n\n     @param [cfg.normalMap=undefined] {Texture} RGB tangent-space normal {@link Texture}. Must be\n     within the same {@link Scene} as this MetallicMaterial.\n\n     @param [cfg.alphaMode=\"opaque\"] {String} The alpha blend mode, which specifies how alpha is to be interpreted. Accepted\n     values are \"opaque\", \"blend\" and \"mask\". See the {@link MetallicMaterial#alphaMode} property for more info.\n\n     @param [cfg.alphaCutoff=0.5] {Number} The alpha cutoff value.\n     See the {@link MetallicMaterial#alphaCutoff} property for more info.\n\n     @param [cfg.backfaces=false] {Boolean} Whether to render {@link Geometry} backfaces.\n     @param [cfg.frontface=\"ccw\"] {Boolean} The winding order for {@link Geometry} front faces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise.\n\n     @param [cfg.lineWidth=1] {Number} Scalar that controls the width of lines for {@link Geometry} with {@link Geometry/primitive} set to \"lines\".\n     @param [cfg.pointSize=1] {Number} Scalar that controls the size of points for {@link Geometry} with {@link Geometry/primitive} set to \"points\".\n\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({\n            type: \"MetallicMaterial\",\n            baseColor: math.vec4([1.0, 1.0, 1.0]),\n            emissive: math.vec4([0.0, 0.0, 0.0]),\n            metallic: null,\n            roughness: null,\n            specularF0: null,\n            alpha: null,\n            alphaMode: null, // \"opaque\"\n            alphaCutoff: null,\n            lineWidth: null,\n            pointSize: null,\n            backfaces: null,\n            frontface: null, // Boolean for speed; true == \"ccw\", false == \"cw\"\n            hash: null\n        });\n\n        this.baseColor = cfg.baseColor;\n        this.metallic = cfg.metallic;\n        this.roughness = cfg.roughness;\n        this.specularF0 = cfg.specularF0;\n        this.emissive = cfg.emissive;\n        this.alpha = cfg.alpha;\n\n        if (cfg.baseColorMap) {\n            this._baseColorMap = this._checkComponent(\"Texture\", cfg.baseColorMap);\n        }\n        if (cfg.metallicMap) {\n            this._metallicMap = this._checkComponent(\"Texture\", cfg.metallicMap);\n\n        }\n        if (cfg.roughnessMap) {\n            this._roughnessMap = this._checkComponent(\"Texture\", cfg.roughnessMap);\n        }\n        if (cfg.metallicRoughnessMap) {\n            this._metallicRoughnessMap = this._checkComponent(\"Texture\", cfg.metallicRoughnessMap);\n        }\n        if (cfg.emissiveMap) {\n            this._emissiveMap = this._checkComponent(\"Texture\", cfg.emissiveMap);\n        }\n        if (cfg.occlusionMap) {\n            this._occlusionMap = this._checkComponent(\"Texture\", cfg.occlusionMap);\n        }\n        if (cfg.alphaMap) {\n            this._alphaMap = this._checkComponent(\"Texture\", cfg.alphaMap);\n        }\n        if (cfg.normalMap) {\n            this._normalMap = this._checkComponent(\"Texture\", cfg.normalMap);\n        }\n\n        this.alphaMode = cfg.alphaMode;\n        this.alphaCutoff = cfg.alphaCutoff;\n        this.backfaces = cfg.backfaces;\n        this.frontface = cfg.frontface;\n        this.lineWidth = cfg.lineWidth;\n        this.pointSize = cfg.pointSize;\n\n        this._makeHash();\n    }\n\n    _makeHash() {\n        const state = this._state;\n        const hash = [\"/met\"];\n        if (this._baseColorMap) {\n            hash.push(\"/bm\");\n            if (this._baseColorMap._state.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n            hash.push(\"/\" + this._baseColorMap._state.encoding);\n        }\n        if (this._metallicMap) {\n            hash.push(\"/mm\");\n            if (this._metallicMap._state.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._roughnessMap) {\n            hash.push(\"/rm\");\n            if (this._roughnessMap._state.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._metallicRoughnessMap) {\n            hash.push(\"/mrm\");\n            if (this._metallicRoughnessMap._state.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._emissiveMap) {\n            hash.push(\"/em\");\n            if (this._emissiveMap._state.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._occlusionMap) {\n            hash.push(\"/ocm\");\n            if (this._occlusionMap._state.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._alphaMap) {\n            hash.push(\"/am\");\n            if (this._alphaMap._state.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._normalMap) {\n            hash.push(\"/nm\");\n            if (this._normalMap._state.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        hash.push(\";\");\n        state.hash = hash.join(\"\");\n    }\n\n\n    /**\n     RGB diffuse color.\n\n     Multiplies by the RGB components of {@link MetallicMaterial#baseColorMap}.\n\n     @property baseColor\n     @default [1.0, 1.0, 1.0]\n     @type Float32Array\n     */\n    set baseColor(value) {\n        let baseColor = this._state.baseColor;\n        if (!baseColor) {\n            baseColor = this._state.baseColor = new Float32Array(3);\n        } else if (value && baseColor[0] === value[0] && baseColor[1] === value[1] && baseColor[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            baseColor[0] = value[0];\n            baseColor[1] = value[1];\n            baseColor[2] = value[2];\n        } else {\n            baseColor[0] = 1;\n            baseColor[1] = 1;\n            baseColor[2] = 1;\n        }\n        this.glRedraw();\n    }\n\n    get baseColor() {\n        return this._state.baseColor;\n    }\n\n\n    /**\n     RGB {@link Texture} containing the diffuse color of this MetallicMaterial, with optional *A* component for alpha.\n\n     The RGB components multiply by the {@link MetallicMaterial#baseColor} property,\n     while the *A* component, if present, multiplies by the {@link MetallicMaterial#alpha} property.\n\n     @property baseColorMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get baseColorMap() {\n        return this._baseColorMap;\n    }\n\n    /**\n     Factor in the range [0..1] indicating how metallic this MetallicMaterial is.\n\n     1 is metal, 0 is non-metal.\n\n     Multiplies by the *R* component of {@link MetallicMaterial#metallicMap}\n     and the *A* component of {@link MetallicMaterial#metalRoughnessMap}.\n\n     @property metallic\n     @default 1.0\n     @type Number\n     */\n    set metallic(value) {\n        value = (value !== undefined && value !== null) ? value : 1.0;\n        if (this._state.metallic === value) {\n            return;\n        }\n        this._state.metallic = value;\n        this.glRedraw();\n    }\n\n    get metallic() {\n        return this._state.metallic;\n    }\n\n    /**\n     RGB {@link Texture} containing this MetallicMaterial's metallic factor in its *R* component.\n\n     The *R* component multiplies by the {@link MetallicMaterial#metallic} property.\n\n     @property metallicMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get metallicMap() {\n        return this._attached.metallicMap;\n    }\n\n    /**\n     Factor in the range [0..1] indicating the roughness of this MetallicMaterial.\n\n     0 is fully smooth, 1 is fully rough.\n\n     Multiplies by the *R* component of {@link MetallicMaterial#roughnessMap}.\n\n     @property roughness\n     @default 1.0\n     @type Number\n     */\n    set roughness(value) {\n        value = (value !== undefined && value !== null) ? value : 1.0;\n        if (this._state.roughness === value) {\n            return;\n        }\n        this._state.roughness = value;\n        this.glRedraw();\n    }\n\n    get roughness() {\n        return this._state.roughness;\n    }\n\n    /**\n     RGB {@link Texture} containing this MetallicMaterial's roughness factor in its *R* component.\n\n     The *R* component multiplies by the {@link MetallicMaterial#roughness} property.\n\n     Must be within the same {@link Scene} as this MetallicMaterial.\n\n     @property roughnessMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get roughnessMap() {\n        return this._attached.roughnessMap;\n    }\n\n    /**\n     RGB {@link Texture} containing this MetallicMaterial's metalness in its *R* component and roughness in its *G* component.\n\n     Its *B* component multiplies by the {@link MetallicMaterial#metallic} property, while\n     its *G* component multiplies by the {@link MetallicMaterial#roughness} property.\n\n     Must be within the same {@link Scene} as this MetallicMaterial.\n\n     @property metallicRoughnessMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get metallicRoughnessMap() {\n        return this._attached.metallicRoughnessMap;\n    }\n\n    /**\n     Factor in the range [0..1] indicating specular Fresnel value.\n\n     @property specularF0\n     @default 0.0\n     @type Number\n     */\n    set specularF0(value) {\n        value = (value !== undefined && value !== null) ? value : 0.0;\n        if (this._state.specularF0 === value) {\n            return;\n        }\n        this._state.specularF0 = value;\n        this.glRedraw();\n    }\n\n    get specularF0() {\n        return this._state.specularF0;\n    }\n\n    /**\n     RGB emissive color.\n\n     Multiplies by {@link MetallicMaterial#emissiveMap}.\n\n     @property emissive\n     @default [0.0, 0.0, 0.0]\n     @type Float32Array\n     */\n    set emissive(value) {\n        let emissive = this._state.emissive;\n        if (!emissive) {\n            emissive = this._state.emissive = new Float32Array(3);\n        } else if (value && emissive[0] === value[0] && emissive[1] === value[1] && emissive[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            emissive[0] = value[0];\n            emissive[1] = value[1];\n            emissive[2] = value[2];\n        } else {\n            emissive[0] = 0;\n            emissive[1] = 0;\n            emissive[2] = 0;\n        }\n        this.glRedraw();\n    }\n\n    get emissive() {\n        return this._state.emissive;\n    }\n\n    /**\n     RGB emissive map.\n\n     Multiplies by {@link MetallicMaterial#emissive}.\n\n     @property emissiveMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get emissiveMap() {\n        return this._attached.emissiveMap;\n    }\n\n    /**\n     RGB ambient occlusion map.\n\n     Within objectRenderers, multiplies by the specular and diffuse light reflected by surfaces.\n\n     @property occlusionMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get occlusionMap() {\n        return this._attached.occlusionMap;\n    }\n\n    /**\n     Factor in the range [0..1] indicating the alpha value.\n\n     Multiplies by the *R* component of {@link MetallicMaterial#alphaMap} and\n     the *A* component, if present, of {@link MetallicMaterial#baseColorMap}.\n\n     The value of {@link MetallicMaterial#alphaMode} indicates how alpha is\n     interpreted when rendering.\n\n     @property alpha\n     @default 1.0\n     @type Number\n     */\n    set alpha(value) {\n        value = (value !== undefined && value !== null) ? value : 1.0;\n        if (this._state.alpha === value) {\n            return;\n        }\n        this._state.alpha = value;\n        this.glRedraw();\n    }\n\n    get alpha() {\n        return this._state.alpha;\n    }\n\n    /**\n     RGB {@link Texture} containing this MetallicMaterial's alpha in its *R* component.\n\n     The *R* component multiplies by the {@link MetallicMaterial#alpha} property.\n\n     @property alphaMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get alphaMap() {\n        return this._attached.alphaMap;\n    }\n\n    /**\n     RGB tangent-space normal map {@link Texture}.\n\n     Must be within the same {@link Scene} as this MetallicMaterial.\n\n     @property normalMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get normalMap() {\n        return this._attached.normalMap;\n    }\n\n    /**\n     The alpha rendering mode.\n\n     This specifies how alpha is interpreted. Alpha is the combined result of the\n     {@link MetallicMaterial#alpha} and\n     {@link MetallicMaterial#alphaMap} properties.\n\n     * \"opaque\" - The alpha value is ignored and the rendered output is fully opaque.\n     * \"mask\" - The rendered output is either fully opaque or fully transparent depending on the alpha and {@link MetallicMaterial#alphaCutoff}.\n     * \"blend\" - The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator).\n\n     @property alphaMode\n     @default \"opaque\"\n     @type {String}\n     */\n\n    set alphaMode(alphaMode) {\n        alphaMode = alphaMode || \"opaque\";\n        let value = modes[alphaMode];\n        if (value === undefined) {\n            this.error(\"Unsupported value for 'alphaMode': \" + alphaMode + \" defaulting to 'opaque'\");\n            value = \"opaque\";\n        }\n        if (this._state.alphaMode === value) {\n            return;\n        }\n        this._state.alphaMode = value;\n        this.glRedraw();\n    }\n\n    get alphaMode() {\n        return modeNames[this._state.alphaMode];\n    }\n\n    /**\n     The alpha cutoff value.\n\n     Specifies the cutoff threshold when {@link MetallicMaterial#alphaMode}\n     equals \"mask\". If the alpha is greater than or equal to this value then it is rendered as fully\n     opaque, otherwise, it is rendered as fully transparent. A value greater than 1.0 will render the entire\n     material as fully transparent. This value is ignored for other modes.\n\n     Alpha is the combined result of the\n     {@link MetallicMaterial#alpha} and\n     {@link MetallicMaterial#alphaMap} properties.\n\n     @property alphaCutoff\n     @default 0.5\n     @type {Number}\n     */\n    set alphaCutoff(alphaCutoff) {\n        if (alphaCutoff === null || alphaCutoff === undefined) {\n            alphaCutoff = 0.5;\n        }\n        if (this._state.alphaCutoff === alphaCutoff) {\n            return;\n        }\n        this._state.alphaCutoff = alphaCutoff;\n    }\n\n    get alphaCutoff() {\n        return this._state.alphaCutoff;\n    }\n\n    /**\n     Whether backfaces are visible on attached {@link Mesh}es.\n\n     The backfaces will belong to {@link Geometry} compoents that are also attached to\n     the {@link Mesh}es.\n\n     @property backfaces\n     @default false\n     @type Boolean\n     */\n    set backfaces(value) {\n        value = !!value;\n        if (this._state.backfaces === value) {\n            return;\n        }\n        this._state.backfaces = value;\n        this.glRedraw();\n    }\n\n    get backfaces() {\n        return this._state.backfaces;\n    }\n\n    /**\n     Indicates the winding direction of front faces on attached {@link Mesh}es.\n\n     The faces will belong to {@link Geometry} components that are also attached to\n     the {@link Mesh}es.\n\n     @property frontface\n     @default \"ccw\"\n     @type String\n     */\n    set frontface(value) {\n        value = value !== \"cw\";\n        if (this._state.frontface === value) {\n            return;\n        }\n        this._state.frontface = value;\n        this.glRedraw();\n    }\n\n    get frontface() {\n        return this._state.frontface ? \"ccw\" : \"cw\";\n    }\n\n    /**\n     The MetallicMaterial's line width.\n\n     @property lineWidth\n     @default 1.0\n     @type Number\n     */\n    set lineWidth(value) {\n        this._state.lineWidth = value || 1.0;\n        this.glRedraw();\n    }\n\n    get lineWidth() {\n        return this._state.lineWidth;\n    }\n\n    /**\n     The MetallicMaterial's point size.\n\n     @property pointSize\n     @default 1.0\n     @type Number\n     */\n    set pointSize(value) {\n        this._state.pointSize = value || 1.0;\n        this.glRedraw();\n    }\n\n    get pointSize() {\n        return this._state.pointSize;\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\nexport {MetallicMaterial};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/materials/MetallicMaterial.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1697,
    "kind": "variable",
    "name": "modes",
    "memberof": "scene/materials/MetallicMaterial.js",
    "static": true,
    "longname": "scene/materials/MetallicMaterial.js~modes",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/materials/MetallicMaterial.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"opaque\": *, \"mask\": number, \"blend\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1698,
    "kind": "variable",
    "name": "modeNames",
    "memberof": "scene/materials/MetallicMaterial.js",
    "static": true,
    "longname": "scene/materials/MetallicMaterial.js~modeNames",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/materials/MetallicMaterial.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1699,
    "kind": "class",
    "name": "MetallicMaterial",
    "memberof": "scene/materials/MetallicMaterial.js",
    "static": true,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/materials/MetallicMaterial.js",
    "importStyle": "{MetallicMaterial}",
    "description": "Configures the normal rendered appearance of {@link Mesh}es using the physically-accurate *metallic-roughness* shading model.\n\n* Useful for conductive materials, such as metal, but also appropriate for insulators.\n* {@link SpecularMaterial} is best for insulators, such as wood, ceramics and plastic.\n* {@link PhongMaterial} is appropriate for non-realistic objects.\n* {@link LambertMaterial} is appropriate for high-detail models that need to render as efficiently as possible.\n\nFor an introduction to PBR concepts, try these articles:\n\n* Joe Wilson's [Basic Theory of Physically-Based Rendering](https://www.marmoset.co/posts/basic-theory-of-physically-based-rendering/)\n* Jeff Russel's [Physically-based Rendering, and you can too!](https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/)\n* Sebastien Legarde's [Adapting a physically-based shading model](http://seblagarde.wordpress.com/tag/physically-based-rendering/)\n\nThe following table summarizes MetallicMaterial properties:\n\n| Property | Type | Range | Default Value | Space | Description |\n|:--------:|:----:|:-----:|:-------------:|:-----:|:-----------:|\n| {@link MetallicMaterial#baseColor} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the base color of the material. |\n| {@link MetallicMaterial#metallic} | Number | [0, 1] | 1 | linear | The metallic-ness the material (1 for metals, 0 for non-metals). |\n| {@link MetallicMaterial#roughness} | Number | [0, 1] | 1 | linear | The roughness of the material surface. |\n| {@link MetallicMaterial#specularF0} | Number | [0, 1] | 1 | linear | The specular Fresnel of the material surface. |\n| {@link MetallicMaterial#emissive} | Array | [0, 1] for all components | [0,0,0] | linear | The RGB components of the emissive color of the material. |\n| {@link MetallicMaterial#alpha} | Number | [0, 1] | 1 | linear | The transparency of the material surface (0 fully transparent, 1 fully opaque). |\n| {@link MetallicMaterial#baseColorMap} | {@link Texture} |  | null | sRGB | Texture RGB components multiplying by {@link MetallicMaterial#baseColor}. If the fourth component (A) is present, it multiplies by {@link MetallicMaterial#alpha}. |\n| {@link MetallicMaterial#metallicMap} | {@link Texture} |  | null | linear | Texture with first component multiplying by {@link MetallicMaterial#metallic}. |\n| {@link MetallicMaterial#roughnessMap} | {@link Texture} |  | null | linear | Texture with first component multiplying by {@link MetallicMaterial#roughness}. |\n| {@link MetallicMaterial#metallicRoughnessMap} | {@link Texture} |  | null | linear | Texture with first component multiplying by {@link MetallicMaterial#metallic} and second component multiplying by {@link MetallicMaterial#roughness}. |\n| {@link MetallicMaterial#emissiveMap} | {@link Texture} |  | null | linear | Texture with RGB components multiplying by {@link MetallicMaterial#emissive}. |\n| {@link MetallicMaterial#alphaMap} | {@link Texture} |  | null | linear | Texture with first component multiplying by {@link MetallicMaterial#alpha}. |\n| {@link MetallicMaterial#occlusionMap} | {@link Texture} |  | null | linear | Ambient occlusion texture multiplying by surface's reflected diffuse and specular light. |\n| {@link MetallicMaterial#normalMap} | {@link Texture} |  | null | linear | Tangent-space normal map. |\n| {@link MetallicMaterial#alphaMode} | String | \"opaque\", \"blend\", \"mask\" | \"blend\" |  | Alpha blend mode. |\n| {@link MetallicMaterial#alphaCutoff} | Number | [0..1] | 0.5 |  | Alpha cutoff value. |\n| {@link MetallicMaterial#backfaces} | Boolean |  | false |  | Whether to render {@link Geometry} backfaces. |\n| {@link MetallicMaterial#frontface} | String | \"ccw\", \"cw\" | \"ccw\" |  | The winding order for {@link Geometry} frontfaces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise. |\n\n## Usage\n\nIn the example below we'll create a {@link Mesh} with a {@link TorusGeometry} and a MetallicMaterial.\n\nNote that in this example we're providing separate {@link Texture} for the {@link MetallicMaterial#metallic} and {@link MetallicMaterial#roughness}\nchannels, which allows us a little creative flexibility. Then, in the next example further down, we'll combine those channels\nwithin the same {@link Texture} for efficiency.\n\n````javascript\nconst myMesh = new Mesh(myViewer.scene, {\n\n    geometry: new TorusGeometry(myViewer.scene),\n\n    material: new MetallicMaterial(myViewer.scene, {\n\n        // Channels with default values, just to show them\n\n        baseColor: [1.0, 1.0, 1.0],\n        metallic: 1.0,\n        roughness: 1.0,\n        emissive: [0.0, 0.0, 0.0],\n        alpha: 1.0,\n\n        // Textures to multiply by some of the channels\n        baseColorMap : new Texture(myViewer.scene, {  // Multiplies by baseColor\n            src: \"textures/diffuse/fire_hydrant_Base_Color.png\"\n        }),\n        metallicMap : new Texture(myViewer.scene, {   // R component multiplies by metallic\n            src: \"textures/metallic/fire_hydrant_Metallic.png\"\n        }),\n        roughnessMap : new Texture(myViewer.scene, {  // R component multiplies by roughness\n            src: \"textures/roughness/fire_hydrant_Roughness.png\"\n        }),\n        occlusionMap : new Texture(myViewer.scene, {  // Multiplies by fragment alpha\n            src: \"textures/occlusion/fire_hydrant_Mixed_AO.png\"\n        }),\n        normalMap : new Texture(myViewer.scene, {\n            src: \"textures/normal/fire_hydrant_Normal_OpenGL.png\"\n        })\n    })\n});\n````\n\n## Combining channels within the same textures\n\nIn the previous example we provided separate {@link Texture} for the {@link MetallicMaterial#metallic} and\n{@link MetallicMaterial#roughness} channels, but we can combine those channels into the same {@link Texture} to\nreduce download time, memory footprint and rendering time (and also for glTF compatibility).\n\nHere's our MetallicMaterial again with those channels combined in the {@link MetallicMaterial#metallicRoughnessMap}\n{@link Texture}, where the *R* component multiplies by {@link MetallicMaterial#metallic} and *G* multiplies\nby {@link MetallicMaterial#roughness}.\n\n````javascript\nconst myMesh = new Mesh(myViewer.scene, {\n\n    geometry: new TorusGeometry(myViewer.scene),\n\n    material: new MetallicMaterial(myViewer.scene, {\n\n        // Channels with default values, just to show them\n\n        baseColor: [1.0, 1.0, 1.0],\n        metallic: 1.0,\n        roughness: 1.0,\n        emissive: [0.0, 0.0, 0.0],\n        alpha: 1.0,\n\n        // Textures to multiply by some of the channels\n\n        baseColorMap : new Texture(myViewer.scene, {  // Multiplies by baseColor\n            src: \"textures/Base_Color.png\"\n        }),\n        metallicRoughnessMap : new Texture(myViewer.scene, {   // <<----------- Added\n            src: \"textures/MetallicRoughness.png\"              // R component multiplies by metallic\n        }),                                                    // G component multiplies by roughness\n        occlusionMap : new Texture(myViewer.scene, {  // Multiplies by fragment alpha\n            src: \"textures/Mixed_AO.png\"\n        }),\n        normalMap : new Texture(myViewer.scene, {\n            src: \"textures/Normal.png\"\n        })\n    })\n});\n````\n\nAlthough not shown in this example, we can also texture {@link MetallicMaterial#alpha} with the *A* component of\n{@link MetallicMaterial#baseColorMap}'s {@link Texture}, if required.\n\n## Alpha Blending\n\nLet's make our {@link Mesh} transparent.\n\nWe'll update the {@link MetallicMaterial#alpha} and {@link MetallicMaterial#alphaMode}, causing it to blend 50%\nwith the background:\n\n````javascript\nhydrant.material.alpha = 0.5;\nhydrant.material.alphaMode = \"blend\";\n````\n\n## Alpha Masking\n\nLet's apply an alpha mask to our {@link Mesh}.\n\nWe'll configure an {@link MetallicMaterial#alphaMap} to multiply by {@link MetallicMaterial#alpha},\nwith {@link MetallicMaterial#alphaMode} and {@link MetallicMaterial#alphaCutoff} to treat it as an alpha mask:\n\n````javascript\nconst myMesh = new Mesh(myViewer.scene, {\n\n    geometry: new TorusGeometry(myViewer.scene),\n\n    material: new MetallicMaterial(myViewer.scene, {\n\n        // Channels with default values, just to show them\n\n        baseColor: [1.0, 1.0, 1.0],\n        metallic: 1.0,\n        roughness: 1.0,\n        emissive: [0.0, 0.0, 0.0],\n        alpha: 1.0,\n        alphaMode : \"mask\",  // <<---------------- Added\n        alphaCutoff : 0.2,   // <<---------------- Added\n\n        // Textures to multiply by some of the channels\n\n        alphaMap : new Texture(myViewer.scene{ // <<---------------- Added\n             src: \"textures/crossGridColorMap.jpg\"\n        }),\n        baseColorMap : new Texture(myViewer.scene, {  // Multiplies by baseColor\n            src: \"textures/Base_Color.png\"\n        }),\n        metallicRoughnessMap : new Texture(myViewer.scene, {   // R component multiplies by metallic\n            src: \"textures/MetallicRoughness.png\"              // G component multiplies by roughness\n        }),\n        occlusionMap : new Texture(myViewer.scene, {  // Multiplies by fragment alpha\n            src: \"textures/Mixed_AO.png\"\n        }),\n        normalMap : new Texture(myViewer.scene, {\n            src: \"textures/Normal.png\"\n        })\n     })\n});\n````",
    "lineNumber": 191,
    "interface": false,
    "extends": [
      "scene/materials/Material.js~Material"
    ]
  },
  {
    "__docId__": 1700,
    "kind": "get",
    "name": "type",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 202,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1701,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 289,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@extends",
        "tagValue": "Material"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "The MetallicMaterial configuration."
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "cfg.meta",
        "description": "{String:Object} Metadata to attach to this material."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,1,1]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "cfg.baseColor",
        "description": "{Float32Array}  RGB diffuse color of this MetallicMaterial. Multiplies by the RGB\ncomponents of {@link MetallicMaterial#baseColorMap}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "cfg.metallic",
        "description": "{Number} Factor in the range 0..1 indicating how metallic this MetallicMaterial is.\n1 is metal, 0 is non-metal. Multiplies by the *R* component of {@link MetallicMaterial#metallicMap} and the *A* component of\n{@link MetallicMaterial#metalRoughnessMap}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "cfg.roughness",
        "description": "{Number} Factor in the range 0..1 indicating the roughness of this MetallicMaterial.\n0 is fully smooth, 1 is fully rough. Multiplies by the *R* component of {@link MetallicMaterial#roughnessMap}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "cfg.specularF0",
        "description": "{Number} Factor in the range 0..1 indicating specular Fresnel."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "cfg.emissive",
        "description": "{Float32Array}  RGB emissive color of this MetallicMaterial. Multiplies by the RGB\ncomponents of {@link MetallicMaterial#emissiveMap}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "cfg.alpha",
        "description": "{Number} Factor in the range 0..1 indicating the alpha of this MetallicMaterial.\nMultiplies by the *R* component of {@link MetallicMaterial#alphaMap} and the *A* component,\nif present, of {@link MetallicMaterial#baseColorMap}. The value of\n{@link MetallicMaterial#alphaMode} indicates how alpha is interpreted when rendering."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "cfg.baseColorMap",
        "description": "{Texture} RGBA {@link Texture} containing the diffuse color\nof this MetallicMaterial, with optional *A* component for alpha. The RGB components multiply by the\n{@link MetallicMaterial#baseColor} property,\nwhile the *A* component, if present, multiplies by the {@link MetallicMaterial#alpha} property."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "cfg.alphaMap",
        "description": "{Texture} RGB {@link Texture} containing this MetallicMaterial's\nalpha in its *R* component. The *R* component multiplies by the {@link MetallicMaterial#alpha} property. Must\nbe within the same {@link Scene} as this MetallicMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "cfg.metallicMap",
        "description": "{Texture} RGB {@link Texture} containing this MetallicMaterial's\nmetallic factor in its *R* component. The *R* component multiplies by the\n{@link MetallicMaterial#metallic} property. Must be within the same\n{@link Scene} as this MetallicMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "cfg.roughnessMap",
        "description": "{Texture} RGB {@link Texture} containing this MetallicMaterial's\nroughness factor in its *R* component. The *R* component multiplies by the\n{@link MetallicMaterial#roughness} property. Must be within the same\n{@link Scene} as this MetallicMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "cfg.metallicRoughnessMap",
        "description": "{Texture} RGB {@link Texture} containing this\nMetallicMaterial's metalness in its *R* component and roughness in its *G* component. Its *R* component multiplies by the\n{@link MetallicMaterial#metallic} property, while its *G* component multiplies by the\n{@link MetallicMaterial#roughness} property. Must be within the same\n{@link Scene} as this MetallicMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "cfg.emissiveMap",
        "description": "{Texture} RGB {@link Texture} containing the emissive color of this\nMetallicMaterial. Multiplies by the {@link MetallicMaterial#emissive} property.\nMust be within the same {@link Scene} as this MetallicMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "cfg.occlusionMap",
        "description": "{Texture} RGB ambient occlusion {@link Texture}. Within shaders,\nmultiplies by the specular and diffuse light reflected by surfaces. Must be within the same {@link Scene}\nas this MetallicMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "cfg.normalMap",
        "description": "{Texture} RGB tangent-space normal {@link Texture}. Must be\nwithin the same {@link Scene} as this MetallicMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"opaque\"",
        "defaultRaw": "opaque",
        "name": "cfg.alphaMode",
        "description": "{String} The alpha blend mode, which specifies how alpha is to be interpreted. Accepted\nvalues are \"opaque\", \"blend\" and \"mask\". See the {@link MetallicMaterial#alphaMode} property for more info."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.5",
        "defaultRaw": 0.5,
        "name": "cfg.alphaCutoff",
        "description": "{Number} The alpha cutoff value.\nSee the {@link MetallicMaterial#alphaCutoff} property for more info."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.backfaces",
        "description": "{Boolean} Whether to render {@link Geometry} backfaces."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"ccw\"",
        "defaultRaw": "ccw",
        "name": "cfg.frontface",
        "description": "{Boolean} The winding order for {@link Geometry} front faces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.lineWidth",
        "description": "{Number} Scalar that controls the width of lines for {@link Geometry} with {@link Geometry/primitive} set to \"lines\"."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.pointSize",
        "description": "{Number} Scalar that controls the size of points for {@link Geometry} with {@link Geometry/primitive} set to \"points\"."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1702,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#_state",
    "access": "private",
    "description": null,
    "lineNumber": 293,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1709,
    "kind": "member",
    "name": "_baseColorMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#_baseColorMap",
    "access": "private",
    "description": null,
    "lineNumber": 318,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1710,
    "kind": "member",
    "name": "_metallicMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#_metallicMap",
    "access": "private",
    "description": null,
    "lineNumber": 321,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1711,
    "kind": "member",
    "name": "_roughnessMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#_roughnessMap",
    "access": "private",
    "description": null,
    "lineNumber": 325,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1712,
    "kind": "member",
    "name": "_metallicRoughnessMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#_metallicRoughnessMap",
    "access": "private",
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1713,
    "kind": "member",
    "name": "_emissiveMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#_emissiveMap",
    "access": "private",
    "description": null,
    "lineNumber": 331,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1714,
    "kind": "member",
    "name": "_occlusionMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#_occlusionMap",
    "access": "private",
    "description": null,
    "lineNumber": 334,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1715,
    "kind": "member",
    "name": "_alphaMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#_alphaMap",
    "access": "private",
    "description": null,
    "lineNumber": 337,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1716,
    "kind": "member",
    "name": "_normalMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#_normalMap",
    "access": "private",
    "description": null,
    "lineNumber": 340,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1723,
    "kind": "method",
    "name": "_makeHash",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#_makeHash",
    "access": "private",
    "description": null,
    "lineNumber": 353,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1724,
    "kind": "set",
    "name": "baseColor",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#baseColor",
    "access": "public",
    "description": "RGB diffuse color.\n\nMultiplies by the RGB components of {@link MetallicMaterial#baseColorMap}.",
    "lineNumber": 419,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1.0, 1.0, 1.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "baseColor",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1725,
    "kind": "get",
    "name": "baseColor",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#baseColor",
    "access": "public",
    "description": null,
    "lineNumber": 438,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1726,
    "kind": "get",
    "name": "baseColorMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#baseColorMap",
    "access": "public",
    "description": "RGB {@link Texture} containing the diffuse color of this MetallicMaterial, with optional *A* component for alpha.\n\nThe RGB components multiply by the {@link MetallicMaterial#baseColor} property,\nwhile the *A* component, if present, multiplies by the {@link MetallicMaterial#alpha} property.",
    "lineNumber": 454,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "baseColorMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1727,
    "kind": "set",
    "name": "metallic",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#metallic",
    "access": "public",
    "description": "Factor in the range [0..1] indicating how metallic this MetallicMaterial is.\n\n1 is metal, 0 is non-metal.\n\nMultiplies by the *R* component of {@link MetallicMaterial#metallicMap}\nand the *A* component of {@link MetallicMaterial#metalRoughnessMap}.",
    "lineNumber": 470,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "metallic",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1728,
    "kind": "get",
    "name": "metallic",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#metallic",
    "access": "public",
    "description": null,
    "lineNumber": 479,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1729,
    "kind": "get",
    "name": "metallicMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#metallicMap",
    "access": "public",
    "description": "RGB {@link Texture} containing this MetallicMaterial's metallic factor in its *R* component.\n\nThe *R* component multiplies by the {@link MetallicMaterial#metallic} property.",
    "lineNumber": 493,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "metallicMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1730,
    "kind": "set",
    "name": "roughness",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#roughness",
    "access": "public",
    "description": "Factor in the range [0..1] indicating the roughness of this MetallicMaterial.\n\n0 is fully smooth, 1 is fully rough.\n\nMultiplies by the *R* component of {@link MetallicMaterial#roughnessMap}.",
    "lineNumber": 508,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "roughness",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1731,
    "kind": "get",
    "name": "roughness",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#roughness",
    "access": "public",
    "description": null,
    "lineNumber": 517,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1732,
    "kind": "get",
    "name": "roughnessMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#roughnessMap",
    "access": "public",
    "description": "RGB {@link Texture} containing this MetallicMaterial's roughness factor in its *R* component.\n\nThe *R* component multiplies by the {@link MetallicMaterial#roughness} property.\n\nMust be within the same {@link Scene} as this MetallicMaterial.",
    "lineNumber": 533,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "roughnessMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1733,
    "kind": "get",
    "name": "metallicRoughnessMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#metallicRoughnessMap",
    "access": "public",
    "description": "RGB {@link Texture} containing this MetallicMaterial's metalness in its *R* component and roughness in its *G* component.\n\nIts *B* component multiplies by the {@link MetallicMaterial#metallic} property, while\nits *G* component multiplies by the {@link MetallicMaterial#roughness} property.\n\nMust be within the same {@link Scene} as this MetallicMaterial.",
    "lineNumber": 550,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "metallicRoughnessMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1734,
    "kind": "set",
    "name": "specularF0",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#specularF0",
    "access": "public",
    "description": "Factor in the range [0..1] indicating specular Fresnel value.",
    "lineNumber": 561,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "specularF0",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1735,
    "kind": "get",
    "name": "specularF0",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#specularF0",
    "access": "public",
    "description": null,
    "lineNumber": 570,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1736,
    "kind": "set",
    "name": "emissive",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#emissive",
    "access": "public",
    "description": "RGB emissive color.\n\nMultiplies by {@link MetallicMaterial#emissiveMap}.",
    "lineNumber": 583,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.0, 0.0, 0.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "emissive",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1737,
    "kind": "get",
    "name": "emissive",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#emissive",
    "access": "public",
    "description": null,
    "lineNumber": 602,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1738,
    "kind": "get",
    "name": "emissiveMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#emissiveMap",
    "access": "public",
    "description": "RGB emissive map.\n\nMultiplies by {@link MetallicMaterial#emissive}.",
    "lineNumber": 616,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "emissiveMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1739,
    "kind": "get",
    "name": "occlusionMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#occlusionMap",
    "access": "public",
    "description": "RGB ambient occlusion map.\n\nWithin objectRenderers, multiplies by the specular and diffuse light reflected by surfaces.",
    "lineNumber": 630,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "occlusionMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1740,
    "kind": "set",
    "name": "alpha",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#alpha",
    "access": "public",
    "description": "Factor in the range [0..1] indicating the alpha value.\n\nMultiplies by the *R* component of {@link MetallicMaterial#alphaMap} and\nthe *A* component, if present, of {@link MetallicMaterial#baseColorMap}.\n\nThe value of {@link MetallicMaterial#alphaMode} indicates how alpha is\ninterpreted when rendering.",
    "lineNumber": 647,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1741,
    "kind": "get",
    "name": "alpha",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#alpha",
    "access": "public",
    "description": null,
    "lineNumber": 656,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1742,
    "kind": "get",
    "name": "alphaMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#alphaMap",
    "access": "public",
    "description": "RGB {@link Texture} containing this MetallicMaterial's alpha in its *R* component.\n\nThe *R* component multiplies by the {@link MetallicMaterial#alpha} property.",
    "lineNumber": 670,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alphaMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1743,
    "kind": "get",
    "name": "normalMap",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#normalMap",
    "access": "public",
    "description": "RGB tangent-space normal map {@link Texture}.\n\nMust be within the same {@link Scene} as this MetallicMaterial.",
    "lineNumber": 684,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "normalMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1744,
    "kind": "set",
    "name": "alphaMode",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#alphaMode",
    "access": "public",
    "description": "The alpha rendering mode.\n\nThis specifies how alpha is interpreted. Alpha is the combined result of the\n{@link MetallicMaterial#alpha} and\n{@link MetallicMaterial#alphaMap} properties.\n\n\"opaque\" - The alpha value is ignored and the rendered output is fully opaque.\n\"mask\" - The rendered output is either fully opaque or fully transparent depending on the alpha and {@link MetallicMaterial#alphaCutoff}.\n\"blend\" - The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator).",
    "lineNumber": 704,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"opaque\""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alphaMode",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1745,
    "kind": "get",
    "name": "alphaMode",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#alphaMode",
    "access": "public",
    "description": null,
    "lineNumber": 718,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1746,
    "kind": "set",
    "name": "alphaCutoff",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#alphaCutoff",
    "access": "public",
    "description": "The alpha cutoff value.\n\nSpecifies the cutoff threshold when {@link MetallicMaterial#alphaMode}\nequals \"mask\". If the alpha is greater than or equal to this value then it is rendered as fully\nopaque, otherwise, it is rendered as fully transparent. A value greater than 1.0 will render the entire\nmaterial as fully transparent. This value is ignored for other modes.\n\nAlpha is the combined result of the\n{@link MetallicMaterial#alpha} and\n{@link MetallicMaterial#alphaMap} properties.",
    "lineNumber": 738,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0.5"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alphaCutoff",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1747,
    "kind": "get",
    "name": "alphaCutoff",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#alphaCutoff",
    "access": "public",
    "description": null,
    "lineNumber": 748,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1748,
    "kind": "set",
    "name": "backfaces",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#backfaces",
    "access": "public",
    "description": "Whether backfaces are visible on attached {@link Mesh}es.\n\nThe backfaces will belong to {@link Geometry} compoents that are also attached to\nthe {@link Mesh}es.",
    "lineNumber": 762,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "backfaces",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1749,
    "kind": "get",
    "name": "backfaces",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#backfaces",
    "access": "public",
    "description": null,
    "lineNumber": 771,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1750,
    "kind": "set",
    "name": "frontface",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#frontface",
    "access": "public",
    "description": "Indicates the winding direction of front faces on attached {@link Mesh}es.\n\nThe faces will belong to {@link Geometry} components that are also attached to\nthe {@link Mesh}es.",
    "lineNumber": 785,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"ccw\""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "frontface",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1751,
    "kind": "get",
    "name": "frontface",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#frontface",
    "access": "public",
    "description": null,
    "lineNumber": 794,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1752,
    "kind": "set",
    "name": "lineWidth",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#lineWidth",
    "access": "public",
    "description": "The MetallicMaterial's line width.",
    "lineNumber": 805,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "lineWidth",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1753,
    "kind": "get",
    "name": "lineWidth",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#lineWidth",
    "access": "public",
    "description": null,
    "lineNumber": 810,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1754,
    "kind": "set",
    "name": "pointSize",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#pointSize",
    "access": "public",
    "description": "The MetallicMaterial's point size.",
    "lineNumber": 821,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pointSize",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1755,
    "kind": "get",
    "name": "pointSize",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#pointSize",
    "access": "public",
    "description": null,
    "lineNumber": 826,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1756,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/materials/MetallicMaterial.js~MetallicMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/MetallicMaterial.js~MetallicMaterial#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 830,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1757,
    "kind": "file",
    "name": "scene/materials/OutlineMaterial.js",
    "content": "/**\n An **OutlineMaterial** is a {@link Material} that's applied to {@link Mesh}es\n to render an outline around them.\n\n WIP\n\n @class OutlineMaterial\n @module xeokit\n @submodule materials\n @constructor\n @extends Material\n @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n @param {*} [cfg] The OutlineMaterial configuration\n @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n @param [cfg.meta=null] {String:Object} Metadata to attach to this OutlineMaterial.\n @param [cfg.color=[1.0,0.2,0.2]] {Array of Number}  Outline RGB color.\n @param [cfg.alpha=1.0] {Number} Outline opacity. A value of 0.0 indicates fully transparent, 1.0 is fully opaque.\n @param [cfg.width=4] {Number}  Outline width, in pixels.\n */\nimport {Material} from './Material.js';\nimport {RenderState} from '../webgl/RenderState.js';\n\nclass OutlineMaterial extends Material {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"OutlineMaterial\";\n    }\n\n    constructor(owner, cfg={}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({\n            type: \"OutlineMaterial\",\n            color: null,\n            alpha: null,\n            width: null\n        });\n        this.color = cfg.color;\n        this.alpha = cfg.alpha;\n        this.width = cfg.width;\n    }\n\n    /**\n     RGB outline color.\n\n     @property color\n     @default [1.0, 0.2, 0.2]\n     @type Float32Array\n     */\n    set color(value) {\n        let color = this._state.color;\n        if (!color) {\n            color = this._state.color = new Float32Array(3);\n        } else if (value && color[0] === value[0] && color[1] === value[1] && color[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            color[0] = value[0];\n            color[1] = value[1];\n            color[2] = value[2];\n        } else {\n            color[0] = 1.0;\n            color[1] = 0.2;\n            color[2] = 0.2;\n        }\n        this.glRedraw();\n    }\n\n    get color() {\n        return this._state.color;\n    }\n\n    /**\n     Outline transparency.\n\n     A value of 0.0 indicates fully transparent, 1.0 is fully opaque.\n\n     @property alpha\n     @default 1.0\n     @type Number\n     */\n    set alpha(value) {\n        value = (value !== undefined && value !== null) ? value : 1.0;\n        if (this._state.alpha === value) {\n            return;\n        }\n        this._state.alpha = value;\n        this.glRedraw();\n    }\n\n    get alpha() {\n        return this._state.alpha;\n    }\n\n    /**\n     Outline width in pixels.\n\n     @property width\n     @default 4.0\n     @type Number\n     */\n    set width(value) {\n        this._state.width = value || 4.0;\n        this.glRedraw();\n    }\n\n    get width() {\n        return this._state.width;\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\nexport {OutlineMaterial};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/materials/OutlineMaterial.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1758,
    "kind": "class",
    "name": "OutlineMaterial",
    "memberof": "scene/materials/OutlineMaterial.js",
    "static": true,
    "longname": "scene/materials/OutlineMaterial.js~OutlineMaterial",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/materials/OutlineMaterial.js",
    "importStyle": "{OutlineMaterial}",
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "interface": false,
    "extends": [
      "scene/materials/Material.js~Material"
    ]
  },
  {
    "__docId__": 1759,
    "kind": "get",
    "name": "type",
    "memberof": "scene/materials/OutlineMaterial.js~OutlineMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/OutlineMaterial.js~OutlineMaterial#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1760,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/materials/OutlineMaterial.js~OutlineMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/OutlineMaterial.js~OutlineMaterial#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true
  },
  {
    "__docId__": 1761,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/materials/OutlineMaterial.js~OutlineMaterial",
    "static": false,
    "longname": "scene/materials/OutlineMaterial.js~OutlineMaterial#_state",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1765,
    "kind": "set",
    "name": "color",
    "memberof": "scene/materials/OutlineMaterial.js~OutlineMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/OutlineMaterial.js~OutlineMaterial#color",
    "access": "public",
    "description": "RGB outline color.",
    "lineNumber": 60,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1.0, 0.2, 0.2]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1766,
    "kind": "get",
    "name": "color",
    "memberof": "scene/materials/OutlineMaterial.js~OutlineMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/OutlineMaterial.js~OutlineMaterial#color",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1767,
    "kind": "set",
    "name": "alpha",
    "memberof": "scene/materials/OutlineMaterial.js~OutlineMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/OutlineMaterial.js~OutlineMaterial#alpha",
    "access": "public",
    "description": "Outline transparency.\n\nA value of 0.0 indicates fully transparent, 1.0 is fully opaque.",
    "lineNumber": 92,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1768,
    "kind": "get",
    "name": "alpha",
    "memberof": "scene/materials/OutlineMaterial.js~OutlineMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/OutlineMaterial.js~OutlineMaterial#alpha",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1769,
    "kind": "set",
    "name": "width",
    "memberof": "scene/materials/OutlineMaterial.js~OutlineMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/OutlineMaterial.js~OutlineMaterial#width",
    "access": "public",
    "description": "Outline width in pixels.",
    "lineNumber": 112,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "4.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "width",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1770,
    "kind": "get",
    "name": "width",
    "memberof": "scene/materials/OutlineMaterial.js~OutlineMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/OutlineMaterial.js~OutlineMaterial#width",
    "access": "public",
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1771,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/materials/OutlineMaterial.js~OutlineMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/OutlineMaterial.js~OutlineMaterial#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1772,
    "kind": "file",
    "name": "scene/materials/PhongMaterial.js",
    "content": "/**\n A **PhongMaterial** is a {@link Material} that defines the surface appearance of\n attached {@link Mesh}es using\n the classic <a href=\"https://en.wikipedia.org/wiki/Blinn%E2%80%93Phong_shading_model\">Blinn-Phong</a> lighting model.\n\n ## Examples\n\n | <a href=\"../../examples/#materials_phong_textures\"><img src=\"../../assets/images/screenshots/PhongMaterial/textures.png\"></img></a> | <a href=\"../../examples/#materials_phong_textures_video\"><img src=\"../../assets/images/screenshots/PhongMaterial/videoTexture.png\"></img></a> | <a href=\"../../examples/#materials_phong_fresnel\"><img src=\"../../assets/images/screenshots/PhongMaterial/fresnel.png\"></img></a> |\n |:------:|:----:|:-----:|:-----:|\n |[Phong textures](../../examples/#materials_phong_textures)|[Video texture](../../examples/#materials_phong_textures_video)| [Fresnels](../../examples/#materials_phong_fresnel)|\n\n ## Overview\n\n * Used for rendering non-realistic objects such as \"helpers\", wireframe objects, labels etc.\n * Use the physically-based {@link MetallicMaterial} or {@link SpecularMaterial} when more realism is required.\n\n The following table summarizes PhongMaterial properties:\n\n | Property | Type | Range | Default Value | Space | Description |\n |:--------:|:----:|:-----:|:-------------:|:-----:|:-----------:|\n |  {@link PhongMaterial#ambient} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the ambient light reflected by the material. |\n |  {@link PhongMaterial/diffuse} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the diffuse light reflected by the material. |\n |  {@link PhongMaterial/specular} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the specular light reflected by the material. |\n |  {@link PhongMaterial/emissive} | Array | [0, 1] for all components | [0,0,0] | linear | The RGB components of the light emitted by the material. |\n | {@link PhongMaterial/alpha} | Number | [0, 1] | 1 | linear | The transparency of the material surface (0 fully transparent, 1 fully opaque). |\n | {@link PhongMaterial/shininess} | Number | [0, 128] | 80 | linear | Determines the size and sharpness of specular highlights. |\n | {@link PhongMaterial/reflectivity} | Number | [0, 1] | 1 | linear | Determines the amount of reflectivity. |\n | {@link PhongMaterial/diffuseMap} | {@link Texture} |  | null | sRGB | Texture RGB components multiplying by {@link PhongMaterial/diffuse}. If the fourth component (A) is present, it multiplies by {@link PhongMaterial/alpha}. |\n | {@link PhongMaterial/specularMap} | {@link Texture} |  | null | sRGB | Texture RGB components multiplying by {@link PhongMaterial/specular}. If the fourth component (A) is present, it multiplies by {@link PhongMaterial/alpha}. |\n | {@link PhongMaterial/emissiveMap} | {@link Texture} |  | null | linear | Texture with RGB components multiplying by {@link PhongMaterial/emissive}. |\n | {@link PhongMaterial/alphaMap} | {@link Texture} |  | null | linear | Texture with first component multiplying by {@link PhongMaterial/alpha}. |\n | {@link PhongMaterial/occlusionMap} | {@link Texture} |  | null | linear | Ambient occlusion texture multiplying by {@link PhongMaterial#ambient}, {@link PhongMaterial/diffuse} and {@link PhongMaterial/specular}. |\n | {@link PhongMaterial/normalMap} | {@link Texture} |  | null | linear | Tangent-space normal map. |\n | {@link PhongMaterial/diffuseFresnel} | {@link Fresnel} |  | null |  | Fresnel term applied to {@link PhongMaterial/diffuse}. |\n | {@link PhongMaterial/specularFresnel} | {@link Fresnel} |  | null |  | Fresnel term applied to {@link PhongMaterial/specular}. |\n | {@link PhongMaterial/emissiveFresnel} | {@link Fresnel} |  | null |  | Fresnel term applied to {@link PhongMaterial/emissive}. |\n | {@link PhongMaterial/reflectivityFresnel} | {@link Fresnel} |  | null |  | Fresnel term applied to {@link PhongMaterial/reflectivity}. |\n | {@link PhongMaterial/alphaFresnel} | {@link Fresnel} |  | null |  | Fresnel term applied to {@link PhongMaterial/alpha}. |\n | {@link PhongMaterial/lineWidth} | Number | [0..100] | 1 |  | Line width in pixels. |\n | {@link PhongMaterial/pointSize} | Number | [0..100] | 1 |  | Point size in pixels. |\n | {@link PhongMaterial/alphaMode} | String | \"opaque\", \"blend\", \"mask\" | \"blend\" |  | Alpha blend mode. |\n | {@link PhongMaterial/alphaCutoff} | Number | [0..1] | 0.5 |  | Alpha cutoff value. |\n | {@link PhongMaterial/backfaces} | Boolean |  | false |  | Whether to render {@link Geometry} backfaces. |\n | {@link PhongMaterial/frontface} | String | \"ccw\", \"cw\" | \"ccw\" |  | The winding order for {@link Geometry} frontfaces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise. |\n\n ## Usage\n\n In this example we have a Mesh with\n\n * a {@link Lights} containing an {@link AmbientLight} and a {@link DirLight},\n * a {@link PhongMaterial} which applies a {@link Texture} as a diffuse map and a specular {@link Fresnel}, and\n * a {@link TorusGeometry}.\n\n ```` javascript\n var torus = new xeokit.Mesh({\n\n    lights: new xeokit.Lights({\n        lights: [\n            new xeokit.AmbientLight({\n                color: [0.7, 0.7, 0.7]\n            }),\n            new xeokit.DirLight({\n                dir: [-1, -1, -1],\n                color: [0.5, 0.7, 0.5],\n                intensity: [1.0, 1.0, 1.0],\n                space: \"view\"\n            })\n        ]\n    }),\n\n    material: new xeokit.PhongMaterial({\n        ambient: [0.3, 0.3, 0.3],\n        diffuse: [0.5, 0.5, 0.0],   // Ignored, since we have assigned a Texture to diffuseMap, below\n        diffuseMap: new xeokit.Texture({\n            src: \"diffuseMap.jpg\"\n        }),\n        specular: [1, 1, 1],\n        specularFresnel: new xeokit.Fresnel({\n            leftColor: [1.0, 1.0, 1.0],\n            rightColor: [0.0, 0.0, 0.0],\n            power: 4\n        }),\n        shininess: 80, // Default\n        alpha: 1.0 // Default\n    }),\n\n    geometry: new xeokit.TorusGeometry()\n});\n ````\n\n ## Transparency\n\n ### Alpha Blending\n\n Let's make our torus transparent. We'll update its PhongMaterial's {@link PhongMaterial/alpha}\n and {@link PhongMaterial/alphaMode}, causing it to blend 50% with the background:\n\n ````javascript\n torus.material.alpha = 0.5;\n torus.material.alphaMode = \"blend\";\n ````\n *TODO: Screenshot*\n\n ### Alpha Masking\n\n Now let's make holes in our torus instead. We'll give its PhongMaterial an {@link PhongMaterial/alphaMap}\n and configure {@link PhongMaterial/alpha}, {@link PhongMaterial/alphaMode},\n and {@link PhongMaterial/alphaCutoff} to treat it as an alpha mask:\n\n ````javascript\n torus.material.alphaMap = new xeokit.Texture({\n        src: \"textures/diffuse/crossGridColorMap.jpg\"\n    });\n\n torus.material.alpha = 1.0;\n torus.material.alphaMode = \"mask\";\n torus.material.alphaCutoff = 0.2;\n ````\n *TODO: Screenshot*\n\n\n @class PhongMaterial\n @module xeokit\n @submodule materials\n @constructor\n @extends Material\n @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n @param {*} [cfg] The PhongMaterial configuration\n @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n @param [cfg.meta=null] {String:Object} Metadata to attach to this PhongMaterial.\n @param [cfg.ambient=[1.0, 1.0, 1.0 ]] {Array of Number} PhongMaterial ambient color.\n @param [cfg.diffuse=[ 1.0, 1.0, 1.0 ]] {Array of Number} PhongMaterial diffuse color.\n @param [cfg.specular=[ 1.0, 1.0, 1.0 ]] {Array of Number} PhongMaterial specular color.\n @param [cfg.emissive=[ 0.0, 0.0, 0.0 ]] {Array of Number} PhongMaterial emissive color.\n @param [cfg.alpha=1] {Number} Scalar in range 0-1 that controls alpha, where 0 is completely transparent and 1 is completely opaque.\n @param [cfg.shininess=80] {Number} Scalar in range 0-128 that determines the size and sharpness of specular highlights.\n @param [cfg.reflectivity=1] {Number} Scalar in range 0-1 that controls how much {@link CubeMap\"}}CubeMap{{/crossLink}} is reflected.\n @param [cfg.lineWidth=1] {Number} Scalar that controls the width of lines for {@link Geometry} with {@link Geometry/primitive} set to \"lines\".\n @param [cfg.pointSize=1] {Number} Scalar that controls the size of points for {@link Geometry} with {@link Geometry/primitive} set to \"points\".\n @param [cfg.ambientMap=null] {Texture} A ambient map {@link Texture}, which will multiply by the diffuse property. Must be within the same {@link Scene} as this PhongMaterial.\n @param [cfg.diffuseMap=null] {Texture} A diffuse map {@link Texture}, which will override the effect of the diffuse property. Must be within the same {@link Scene} as this PhongMaterial.\n @param [cfg.specularMap=null] {Texture} A specular map {@link Texture}, which will override the effect of the specular property. Must be within the same {@link Scene} as this PhongMaterial.\n @param [cfg.emissiveMap=undefined] {Texture} An emissive map {@link Texture}, which will override the effect of the emissive property. Must be within the same {@link Scene} as this PhongMaterial.\n @param [cfg.normalMap=undefined] {Texture} A normal map {@link Texture}. Must be within the same {@link Scene} as this PhongMaterial.\n @param [cfg.alphaMap=undefined] {Texture} An alpha map {@link Texture}, which will override the effect of the alpha property. Must be within the same {@link Scene} as this PhongMaterial.\n @param [cfg.reflectivityMap=undefined] {Texture} A reflectivity control map {@link Texture}, which will override the effect of the reflectivity property. Must be within the same {@link Scene} as this PhongMaterial.\n @param [cfg.occlusionMap=null] {Texture} An occlusion map {@link Texture}. Must be within the same {@link Scene} as this PhongMaterial.\n @param [cfg.diffuseFresnel=undefined] {Fresnel} A diffuse {@link Fresnel\"}}Fresnel{{/crossLink}}. Must be within the same {@link Scene} as this PhongMaterial.\n @param [cfg.specularFresnel=undefined] {Fresnel} A specular {@link Fresnel\"}}Fresnel{{/crossLink}}. Must be within the same {@link Scene} as this PhongMaterial.\n @param [cfg.emissiveFresnel=undefined] {Fresnel} An emissive {@link Fresnel\"}}Fresnel{{/crossLink}}. Must be within the same {@link Scene} as this PhongMaterial.\n @param [cfg.alphaFresnel=undefined] {Fresnel} An alpha {@link Fresnel\"}}Fresnel{{/crossLink}}. Must be within the same {@link Scene} as this PhongMaterial.\n @param [cfg.reflectivityFresnel=undefined] {Fresnel} A reflectivity {@link Fresnel\"}}Fresnel{{/crossLink}}. Must be within the same {@link Scene} as this PhongMaterial.\n @param [cfg.alphaMode=\"opaque\"] {String} The alpha blend mode - accepted values are \"opaque\", \"blend\" and \"mask\".\n See the {@link PhongMaterial/alphaMode} property for more info.\n @param [cfg.alphaCutoff=0.5] {Number} The alpha cutoff value. See the {@link PhongMaterial/alphaCutoff} property for more info.\n @param [cfg.backfaces=false] {Boolean} Whether to render {@link Geometry} backfaces.\n @param [cfg.frontface=\"ccw\"] {Boolean} The winding order for {@link Geometry} front faces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise.\n */\nimport {Material} from './Material.js';\nimport {RenderState} from '../webgl/RenderState.js';\nimport {math} from '../math/math.js';\nconst alphaModes = {\"opaque\": 0, \"mask\": 1, \"blend\": 2};\nconst alphaModeNames = [\"opaque\", \"mask\", \"blend\"];\n\nclass PhongMaterial extends Material {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"PhongMaterial\";\n    }\n\n    constructor(owner, cfg={}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({\n            type: \"PhongMaterial\",\n            ambient: math.vec3([1.0, 1.0, 1.0]),\n            diffuse: math.vec3([1.0, 1.0, 1.0]),\n            specular: math.vec3([1.0, 1.0, 1.0]),\n            emissive: math.vec3([0.0, 0.0, 0.0]),\n            alpha: null,\n            shininess: null,\n            reflectivity: null,\n            alphaMode: null,\n            alphaCutoff: null,\n            lineWidth: null,\n            pointSize: null,\n            backfaces: null,\n            frontface: null, // Boolean for speed; true == \"ccw\", false == \"cw\"\n            hash: null\n        });\n\n        this.ambient = cfg.ambient;\n        this.diffuse = cfg.diffuse;\n        this.specular = cfg.specular;\n        this.emissive = cfg.emissive;\n        this.alpha = cfg.alpha;\n        this.shininess = cfg.shininess;\n        this.reflectivity = cfg.reflectivity;\n        this.lineWidth = cfg.lineWidth;\n        this.pointSize = cfg.pointSize;\n\n        if (cfg.ambientMap) {\n            this._ambientMap = this._checkComponent(\"Texture\", cfg.ambientMap);\n        }\n        if (cfg.diffuseMap) {\n            this._diffuseMap = this._checkComponent(\"Texture\", cfg.diffuseMap);\n        }\n        if (cfg.specularMap) {\n            this._specularMap = this._checkComponent(\"Texture\", cfg.specularMap);\n        }\n        if (cfg.emissiveMap) {\n            this._emissiveMap = this._checkComponent(\"Texture\", cfg.emissiveMap);\n        }\n        if (cfg.alphaMap) {\n            this._alphaMap = this._checkComponent(\"Texture\", cfg.alphaMap);\n        }\n        if (cfg.reflectivityMap) {\n            this._reflectivityMap = this._checkComponent(\"Texture\", cfg.reflectivityMap);\n        }\n        if (cfg.normalMap) {\n            this._normalMap = this._checkComponent(\"Texture\", cfg.normalMap);\n        }\n        if (cfg.occlusionMap) {\n            this._occlusionMap = this._checkComponent(\"Texture\", cfg.occlusionMap);\n        }\n        if (cfg.diffuseFresnel) {\n            this._diffuseFresnel = this._checkComponent(\"Fresnel\", cfg.diffuseFresnel);\n        }\n        if (cfg.specularFresnel) {\n            this._specularFresnel = this._checkComponent(\"Fresnel\", cfg.specularFresnel);\n        }\n        if (cfg.emissiveFresnel) {\n            this._emissiveFresnel = this._checkComponent(\"Fresnel\", cfg.emissiveFresnel);\n        }\n        if (cfg.alphaFresnel) {\n            this._alphaFresnel = this._checkComponent(\"Fresnel\", cfg.alphaFresnel);\n        }\n        if (cfg.reflectivityFresnel) {\n            this._reflectivityFresnel = this._checkComponent(\"Fresnel\", cfg.reflectivityFresnel);\n        }\n\n        this.alphaMode = cfg.alphaMode;\n        this.alphaCutoff = cfg.alphaCutoff;\n        this.backfaces = cfg.backfaces;\n        this.frontface = cfg.frontface;\n\n        this._makeHash();\n    }\n\n    _makeHash() {\n        const state = this._state;\n        const hash = [\"/p\"]; // 'P' for Phong\n        if (this._normalMap) {\n            hash.push(\"/nm\");\n            if (this._normalMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._ambientMap) {\n            hash.push(\"/am\");\n            if (this._ambientMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n            hash.push(\"/\" + this._ambientMap.encoding);\n        }\n        if (this._diffuseMap) {\n            hash.push(\"/dm\");\n            if (this._diffuseMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n            hash.push(\"/\" + this._diffuseMap.encoding);\n        }\n        if (this._specularMap) {\n            hash.push(\"/sm\");\n            if (this._specularMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._emissiveMap) {\n            hash.push(\"/em\");\n            if (this._emissiveMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n            hash.push(\"/\" + this._emissiveMap.encoding);\n        }\n        if (this._alphaMap) {\n            hash.push(\"/opm\");\n            if (this._alphaMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._reflectivityMap) {\n            hash.push(\"/rm\");\n            if (this._reflectivityMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._occlusionMap) {\n            hash.push(\"/ocm\");\n            if (this._occlusionMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._diffuseFresnel) {\n            hash.push(\"/df\");\n        }\n        if (this._specularFresnel) {\n            hash.push(\"/sf\");\n        }\n        if (this._emissiveFresnel) {\n            hash.push(\"/ef\");\n        }\n        if (this._alphaFresnel) {\n            hash.push(\"/of\");\n        }\n        if (this._reflectivityFresnel) {\n            hash.push(\"/rf\");\n        }\n        hash.push(\";\");\n        state.hash = hash.join(\"\");\n    }\n\n    /**\n     The PhongMaterial's ambient color.\n\n     @property ambient\n     @default [0.3, 0.3, 0.3]\n     @type Float32Array\n     */\n    set ambient(value) {\n        let ambient = this._state.ambient;\n        if (!ambient) {\n            ambient = this._state.ambient = new Float32Array(3);\n        } else if (value && ambient[0] === value[0] && ambient[1] === value[1] && ambient[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            ambient[0] = value[0];\n            ambient[1] = value[1];\n            ambient[2] = value[2];\n        } else {\n            ambient[0] = .2;\n            ambient[1] = .2;\n            ambient[2] = .2;\n        }\n        this.glRedraw();\n    }\n\n    get ambient() {\n        return this._state.ambient;\n    }\n\n    /**\n     The PhongMaterial's diffuse color.\n\n     Multiplies by {@link PhongMaterial/diffuseMap}.\n\n     @property diffuse\n     @default [1.0, 1.0, 1.0]\n     @type Float32Array\n     */\n    set diffuse(value) {\n        let diffuse = this._state.diffuse;\n        if (!diffuse) {\n            diffuse = this._state.diffuse = new Float32Array(3);\n        } else if (value && diffuse[0] === value[0] && diffuse[1] === value[1] && diffuse[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            diffuse[0] = value[0];\n            diffuse[1] = value[1];\n            diffuse[2] = value[2];\n        } else {\n            diffuse[0] = 1;\n            diffuse[1] = 1;\n            diffuse[2] = 1;\n        }\n        this.glRedraw();\n    }\n\n    get diffuse() {\n        return this._state.diffuse;\n    }\n\n    /**\n     The material's specular color.\n\n     Multiplies by {@link PhongMaterial/specularMap}.\n\n     @property specular\n     @default [1.0, 1.0, 1.0]\n     @type Float32Array\n     */\n    set specular(value) {\n        let specular = this._state.specular;\n        if (!specular) {\n            specular = this._state.specular = new Float32Array(3);\n        } else if (value && specular[0] === value[0] && specular[1] === value[1] && specular[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            specular[0] = value[0];\n            specular[1] = value[1];\n            specular[2] = value[2];\n        } else {\n            specular[0] = 1;\n            specular[1] = 1;\n            specular[2] = 1;\n        }\n        this.glRedraw();\n    }\n\n    get specular() {\n        return this._state.specular;\n    }\n\n    /**\n     The PhongMaterial's emissive color.\n\n     Multiplies by {@link PhongMaterial/emissiveMap}.\n\n     @property emissive\n     @default [0.0, 0.0, 0.0]\n     @type Float32Array\n     */\n    set emissive(value) {\n        let emissive = this._state.emissive;\n        if (!emissive) {\n            emissive = this._state.emissive = new Float32Array(3);\n        } else if (value && emissive[0] === value[0] && emissive[1] === value[1] && emissive[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            emissive[0] = value[0];\n            emissive[1] = value[1];\n            emissive[2] = value[2];\n        } else {\n            emissive[0] = 0;\n            emissive[1] = 0;\n            emissive[2] = 0;\n        }\n        this.glRedraw();\n    }\n\n    get emissive() {\n        return this._state.emissive;\n    }\n\n    /**\n     Factor in the range [0..1] indicating how transparent the PhongMaterial is.\n\n     A value of 0.0 indicates fully transparent, 1.0 is fully opaque.\n\n     Multiplies by {@link PhongMaterial/alphaMap}.\n\n     @property alpha\n     @default 1.0\n     @type Number\n     */\n    set alpha(value) {\n        value = (value !== undefined && value !== null) ? value : 1.0;\n        if (this._state.alpha === value) {\n            return;\n        }\n        this._state.alpha = value;\n        this.glRedraw();\n    }\n\n    get alpha() {\n        return this._state.alpha;\n    }\n\n    /**\n     A factor in range [0..128] that determines the size and sharpness of the specular highlights create by this PhongMaterial.\n\n     Larger values produce smaller, sharper highlights. A value of 0.0 gives very large highlights that are almost never\n     desirable. Try values close to 10 for a larger, fuzzier highlight and values of 100 or more for a small, sharp\n     highlight.\n\n     @property shininess\n     @default 80.0\n     @type Number\n     */\n    set shininess(value) {\n        this._state.shininess = value !== undefined ? value : 80;\n        this.glRedraw();\n    }\n\n    get shininess() {\n        return this._state.shininess;\n    }\n\n    /**\n     The PhongMaterial's line width.\n\n     @property lineWidth\n     @default 1.0\n     @type Number\n     */\n    set lineWidth(value) {\n        this._state.lineWidth = value || 1.0;\n        this.glRedraw();\n    }\n\n    get lineWidth() {\n        return this._state.lineWidth;\n    }\n\n    /**\n     The PhongMaterial's point size.\n\n     @property pointSize\n     @default 1.0\n     @type Number\n     */\n    set pointSize(value) {\n        this._state.pointSize = value || 1.0;\n        this.glRedraw();\n    }\n\n    get pointSize() {\n        return this._state.pointSize;\n    }\n\n    /**\n     Scalar in range 0-1 that controls how much {@link CubeMap\"}}CubeMap{{/crossLink}} is reflected by this PhongMaterial.\n\n     The surface will be non-reflective when this is 0, and completely mirror-like when it is 1.0.\n\n     Multiplies by {@link PhongMaterial/reflectivityMap}.\n\n     @property reflectivity\n     @default 1.0\n     @type Number\n     */\n    set reflectivity(value) {\n        this._state.reflectivity = value !== undefined ? value : 1.0;\n        this.glRedraw();\n    }\n\n    get reflectivity() {\n        return this._state.reflectivity;\n    }\n\n    /**\n     Normal map.\n\n     @property normalMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get normalMap() {\n        return this._normalMap;\n    }\n\n    /**\n     Ambient map.\n\n     Multiplies by {@link PhongMaterial#ambient}.\n\n     @property ambientMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get ambientMap() {\n        return this._ambientMap;\n    }\n\n    /**\n     Diffuse map.\n\n     Multiplies by {@link PhongMaterial/diffuse}.\n\n     @property diffuseMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get diffuseMap() {\n        return this._diffuseMap;\n    }\n\n    /**\n     Specular map.\n\n     Multiplies by {@link PhongMaterial/specular}.\n\n     @property specularMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n\n    get specularMap() {\n        return this._specularMap;\n    }\n\n    /**\n     Emissive map.\n\n     Multiplies by {@link PhongMaterial/emissive}.\n\n     @property emissiveMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get emissiveMap() {\n        return this._emissiveMap;\n    }\n\n    /**\n     Alpha map.\n\n     Multiplies by {@link PhongMaterial/alpha}.\n\n     @property alphaMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get alphaMap() {\n        return this._alphaMap;\n    }\n\n    /**\n     Reflectivity map.\n\n     Multiplies by {@link PhongMaterial/reflectivity}.\n\n     @property reflectivityMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get reflectivityMap() {\n        return this._reflectivityMap;\n    }\n\n    /**\n\n     Occlusion map.\n\n     @property occlusionMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get occlusionMap() {\n        return this._occlusionMap;\n    }\n\n    /**\n     Diffuse Fresnel.\n\n     Applies to {@link PhongMaterial/diffuseFresnel}.\n\n     @property diffuseFresnel\n     @default undefined\n     @type {Fresnel}\n     @final\n     */\n    get diffuseFresnel() {\n        return this._diffuseFresnel;\n    }\n\n    /**\n     Specular Fresnel.\n\n     Applies to {@link PhongMaterial/specular}.\n\n     @property specularFresnel\n     @default undefined\n     @type {Fresnel}\n     @final\n     */\n    get specularFresnel() {\n        return this._specularFresnel;\n    }\n\n    /**\n     Emissive Fresnel.\n\n     Applies to {@link PhongMaterial/emissive}.\n\n     @property emissiveFresnel\n     @default undefined\n     @type {Fresnel}\n     @final\n     */\n    get emissiveFresnel() {\n        return this._emissiveFresnel;\n    }\n\n    /**\n     Alpha Fresnel.\n\n     Applies to {@link PhongMaterial/alpha}.\n\n     @property alphaFresnel\n     @default undefined\n     @type {Fresnel}\n     @final\n     */\n    get alphaFresnel() {\n        return this._alphaFresnel;\n    }\n\n    /**\n     Reflectivity Fresnel.\n\n     Applies to {@link PhongMaterial/reflectivity}.\n\n     @property reflectivityFresnel\n     @default undefined\n     @type {Fresnel}\n     @final\n     */\n    get reflectivityFresnel() {\n        return this._reflectivityFresnel;\n    }\n\n    /**\n     The alpha rendering mode.\n\n     This governs how alpha is treated. Alpha is the combined result of the\n     {@link PhongMaterial/alpha} and\n     {@link PhongMaterial/alphaMap} properties.\n\n     * \"opaque\" - The alpha value is ignored and the rendered output is fully opaque.\n     * \"mask\" - The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value.\n     * \"blend\" - The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator).\n\n     @property alphaMode\n     @default \"opaque\"\n     @type {String}\n     */\n\n    set alphaMode(alphaMode) {\n        alphaMode = alphaMode || \"opaque\";\n        let value = alphaModes[alphaMode];\n        if (value === undefined) {\n            this.error(\"Unsupported value for 'alphaMode': \" + alphaMode + \" - defaulting to 'opaque'\");\n            value = \"opaque\";\n        }\n        if (this._state.alphaMode === value) {\n            return;\n        }\n        this._state.alphaMode = value;\n        this.glRedraw();\n    }\n\n    get alphaMode() {\n        return alphaModeNames[this._state.alphaMode];\n    }\n\n    /**\n     The alpha cutoff value.\n\n     Specifies the cutoff threshold when {@link PhongMaterial/alphaMode}\n     equals \"mask\". If the alpha is greater than or equal to this value then it is rendered as fully\n     opaque, otherwise, it is rendered as fully transparent. A value greater than 1.0 will render the entire\n     material as fully transparent. This value is ignored for other modes.\n\n     Alpha is the combined result of the\n     {@link PhongMaterial/alpha} and\n     {@link PhongMaterial/alphaMap} properties.\n\n     @property alphaCutoff\n     @default 0.5\n     @type {Number}\n     */\n    set alphaCutoff(alphaCutoff) {\n        if (alphaCutoff === null || alphaCutoff === undefined) {\n            alphaCutoff = 0.5;\n        }\n        if (this._state.alphaCutoff === alphaCutoff) {\n            return;\n        }\n        this._state.alphaCutoff = alphaCutoff;\n    }\n\n    get alphaCutoff() {\n        return this._state.alphaCutoff;\n    }\n\n    /**\n     Whether backfaces are visible on attached {@link Mesh}es.\n\n     The backfaces will belong to {@link Geometry} compoents that are also attached to\n     the {@link Mesh}es.\n\n     @property backfaces\n     @default false\n     @type Boolean\n     */\n    set backfaces(value) {\n        value = !!value;\n        if (this._state.backfaces === value) {\n            return;\n        }\n        this._state.backfaces = value;\n        this.glRedraw();\n    }\n\n    get backfaces() {\n        return this._state.backfaces;\n    }\n\n    /**\n     Indicates the winding direction of front faces on attached {@link Mesh}es.\n\n     The faces will belong to {@link Geometry} components that are also attached to\n     the {@link Mesh}es.\n\n     @property frontface\n     @default \"ccw\"\n     @type String\n     */\n    set frontface(value) {\n        value = value !== \"cw\";\n        if (this._state.frontface === value) {\n            return;\n        }\n        this._state.frontface = value;\n        this.glRedraw();\n    }\n\n    get frontface() {\n        return this._state.frontface ? \"ccw\" : \"cw\";\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\nexport {PhongMaterial};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/materials/PhongMaterial.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1773,
    "kind": "variable",
    "name": "alphaModes",
    "memberof": "scene/materials/PhongMaterial.js",
    "static": true,
    "longname": "scene/materials/PhongMaterial.js~alphaModes",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/materials/PhongMaterial.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 162,
    "undocument": true,
    "type": {
      "types": [
        "{\"opaque\": *, \"mask\": number, \"blend\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1774,
    "kind": "variable",
    "name": "alphaModeNames",
    "memberof": "scene/materials/PhongMaterial.js",
    "static": true,
    "longname": "scene/materials/PhongMaterial.js~alphaModeNames",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/materials/PhongMaterial.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 163,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1775,
    "kind": "class",
    "name": "PhongMaterial",
    "memberof": "scene/materials/PhongMaterial.js",
    "static": true,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/materials/PhongMaterial.js",
    "importStyle": "{PhongMaterial}",
    "description": null,
    "lineNumber": 165,
    "undocument": true,
    "interface": false,
    "extends": [
      "scene/materials/Material.js~Material"
    ]
  },
  {
    "__docId__": 1776,
    "kind": "get",
    "name": "type",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 176,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1777,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 180,
    "undocument": true
  },
  {
    "__docId__": 1778,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#_state",
    "access": "private",
    "description": null,
    "lineNumber": 184,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1788,
    "kind": "member",
    "name": "_ambientMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#_ambientMap",
    "access": "private",
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1789,
    "kind": "member",
    "name": "_diffuseMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#_diffuseMap",
    "access": "private",
    "description": null,
    "lineNumber": 216,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1790,
    "kind": "member",
    "name": "_specularMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#_specularMap",
    "access": "private",
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1791,
    "kind": "member",
    "name": "_emissiveMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#_emissiveMap",
    "access": "private",
    "description": null,
    "lineNumber": 222,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1792,
    "kind": "member",
    "name": "_alphaMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#_alphaMap",
    "access": "private",
    "description": null,
    "lineNumber": 225,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1793,
    "kind": "member",
    "name": "_reflectivityMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#_reflectivityMap",
    "access": "private",
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1794,
    "kind": "member",
    "name": "_normalMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#_normalMap",
    "access": "private",
    "description": null,
    "lineNumber": 231,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1795,
    "kind": "member",
    "name": "_occlusionMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#_occlusionMap",
    "access": "private",
    "description": null,
    "lineNumber": 234,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1796,
    "kind": "member",
    "name": "_diffuseFresnel",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#_diffuseFresnel",
    "access": "private",
    "description": null,
    "lineNumber": 237,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1797,
    "kind": "member",
    "name": "_specularFresnel",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#_specularFresnel",
    "access": "private",
    "description": null,
    "lineNumber": 240,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1798,
    "kind": "member",
    "name": "_emissiveFresnel",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#_emissiveFresnel",
    "access": "private",
    "description": null,
    "lineNumber": 243,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1799,
    "kind": "member",
    "name": "_alphaFresnel",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#_alphaFresnel",
    "access": "private",
    "description": null,
    "lineNumber": 246,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1800,
    "kind": "member",
    "name": "_reflectivityFresnel",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#_reflectivityFresnel",
    "access": "private",
    "description": null,
    "lineNumber": 249,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1805,
    "kind": "method",
    "name": "_makeHash",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#_makeHash",
    "access": "private",
    "description": null,
    "lineNumber": 260,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1806,
    "kind": "set",
    "name": "ambient",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#ambient",
    "access": "public",
    "description": "The PhongMaterial's ambient color.",
    "lineNumber": 340,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.3, 0.3, 0.3]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ambient",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1807,
    "kind": "get",
    "name": "ambient",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#ambient",
    "access": "public",
    "description": null,
    "lineNumber": 359,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1808,
    "kind": "set",
    "name": "diffuse",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#diffuse",
    "access": "public",
    "description": "The PhongMaterial's diffuse color.\n\nMultiplies by {@link PhongMaterial/diffuseMap}.",
    "lineNumber": 372,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1.0, 1.0, 1.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "diffuse",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1809,
    "kind": "get",
    "name": "diffuse",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#diffuse",
    "access": "public",
    "description": null,
    "lineNumber": 391,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1810,
    "kind": "set",
    "name": "specular",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#specular",
    "access": "public",
    "description": "The material's specular color.\n\nMultiplies by {@link PhongMaterial/specularMap}.",
    "lineNumber": 404,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1.0, 1.0, 1.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "specular",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1811,
    "kind": "get",
    "name": "specular",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#specular",
    "access": "public",
    "description": null,
    "lineNumber": 423,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1812,
    "kind": "set",
    "name": "emissive",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#emissive",
    "access": "public",
    "description": "The PhongMaterial's emissive color.\n\nMultiplies by {@link PhongMaterial/emissiveMap}.",
    "lineNumber": 436,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.0, 0.0, 0.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "emissive",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1813,
    "kind": "get",
    "name": "emissive",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#emissive",
    "access": "public",
    "description": null,
    "lineNumber": 455,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1814,
    "kind": "set",
    "name": "alpha",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#alpha",
    "access": "public",
    "description": "Factor in the range [0..1] indicating how transparent the PhongMaterial is.\n\nA value of 0.0 indicates fully transparent, 1.0 is fully opaque.\n\nMultiplies by {@link PhongMaterial/alphaMap}.",
    "lineNumber": 470,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1815,
    "kind": "get",
    "name": "alpha",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#alpha",
    "access": "public",
    "description": null,
    "lineNumber": 479,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1816,
    "kind": "set",
    "name": "shininess",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#shininess",
    "access": "public",
    "description": "A factor in range [0..128] that determines the size and sharpness of the specular highlights create by this PhongMaterial.\n\nLarger values produce smaller, sharper highlights. A value of 0.0 gives very large highlights that are almost never\ndesirable. Try values close to 10 for a larger, fuzzier highlight and values of 100 or more for a small, sharp\nhighlight.",
    "lineNumber": 494,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "80.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "shininess",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1817,
    "kind": "get",
    "name": "shininess",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#shininess",
    "access": "public",
    "description": null,
    "lineNumber": 499,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1818,
    "kind": "set",
    "name": "lineWidth",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#lineWidth",
    "access": "public",
    "description": "The PhongMaterial's line width.",
    "lineNumber": 510,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "lineWidth",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1819,
    "kind": "get",
    "name": "lineWidth",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#lineWidth",
    "access": "public",
    "description": null,
    "lineNumber": 515,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1820,
    "kind": "set",
    "name": "pointSize",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#pointSize",
    "access": "public",
    "description": "The PhongMaterial's point size.",
    "lineNumber": 526,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pointSize",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1821,
    "kind": "get",
    "name": "pointSize",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#pointSize",
    "access": "public",
    "description": null,
    "lineNumber": 531,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1822,
    "kind": "set",
    "name": "reflectivity",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#reflectivity",
    "access": "public",
    "description": "Scalar in range 0-1 that controls how much {@link CubeMap\"}}CubeMap{{/crossLink}} is reflected by this PhongMaterial.\n\nThe surface will be non-reflective when this is 0, and completely mirror-like when it is 1.0.\n\nMultiplies by {@link PhongMaterial/reflectivityMap}.",
    "lineNumber": 546,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "reflectivity",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1823,
    "kind": "get",
    "name": "reflectivity",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#reflectivity",
    "access": "public",
    "description": null,
    "lineNumber": 551,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1824,
    "kind": "get",
    "name": "normalMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#normalMap",
    "access": "public",
    "description": "Normal map.",
    "lineNumber": 563,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "normalMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1825,
    "kind": "get",
    "name": "ambientMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#ambientMap",
    "access": "public",
    "description": "Ambient map.\n\nMultiplies by {@link PhongMaterial#ambient}.",
    "lineNumber": 577,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ambientMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1826,
    "kind": "get",
    "name": "diffuseMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#diffuseMap",
    "access": "public",
    "description": "Diffuse map.\n\nMultiplies by {@link PhongMaterial/diffuse}.",
    "lineNumber": 591,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "diffuseMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1827,
    "kind": "get",
    "name": "specularMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#specularMap",
    "access": "public",
    "description": "Specular map.\n\nMultiplies by {@link PhongMaterial/specular}.",
    "lineNumber": 606,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "specularMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1828,
    "kind": "get",
    "name": "emissiveMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#emissiveMap",
    "access": "public",
    "description": "Emissive map.\n\nMultiplies by {@link PhongMaterial/emissive}.",
    "lineNumber": 620,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "emissiveMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1829,
    "kind": "get",
    "name": "alphaMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#alphaMap",
    "access": "public",
    "description": "Alpha map.\n\nMultiplies by {@link PhongMaterial/alpha}.",
    "lineNumber": 634,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alphaMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1830,
    "kind": "get",
    "name": "reflectivityMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#reflectivityMap",
    "access": "public",
    "description": "Reflectivity map.\n\nMultiplies by {@link PhongMaterial/reflectivity}.",
    "lineNumber": 648,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "reflectivityMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1831,
    "kind": "get",
    "name": "occlusionMap",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#occlusionMap",
    "access": "public",
    "description": "\nOcclusion map.",
    "lineNumber": 661,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "occlusionMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1832,
    "kind": "get",
    "name": "diffuseFresnel",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#diffuseFresnel",
    "access": "public",
    "description": "Diffuse Fresnel.\n\nApplies to {@link PhongMaterial/diffuseFresnel}.",
    "lineNumber": 675,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "diffuseFresnel",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Fresnel"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1833,
    "kind": "get",
    "name": "specularFresnel",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#specularFresnel",
    "access": "public",
    "description": "Specular Fresnel.\n\nApplies to {@link PhongMaterial/specular}.",
    "lineNumber": 689,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "specularFresnel",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Fresnel"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1834,
    "kind": "get",
    "name": "emissiveFresnel",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#emissiveFresnel",
    "access": "public",
    "description": "Emissive Fresnel.\n\nApplies to {@link PhongMaterial/emissive}.",
    "lineNumber": 703,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "emissiveFresnel",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Fresnel"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1835,
    "kind": "get",
    "name": "alphaFresnel",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#alphaFresnel",
    "access": "public",
    "description": "Alpha Fresnel.\n\nApplies to {@link PhongMaterial/alpha}.",
    "lineNumber": 717,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alphaFresnel",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Fresnel"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1836,
    "kind": "get",
    "name": "reflectivityFresnel",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#reflectivityFresnel",
    "access": "public",
    "description": "Reflectivity Fresnel.\n\nApplies to {@link PhongMaterial/reflectivity}.",
    "lineNumber": 731,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "reflectivityFresnel",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Fresnel"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1837,
    "kind": "set",
    "name": "alphaMode",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#alphaMode",
    "access": "public",
    "description": "The alpha rendering mode.\n\nThis governs how alpha is treated. Alpha is the combined result of the\n{@link PhongMaterial/alpha} and\n{@link PhongMaterial/alphaMap} properties.\n\n\"opaque\" - The alpha value is ignored and the rendered output is fully opaque.\n\"mask\" - The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value.\n\"blend\" - The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator).",
    "lineNumber": 751,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"opaque\""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alphaMode",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1838,
    "kind": "get",
    "name": "alphaMode",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#alphaMode",
    "access": "public",
    "description": null,
    "lineNumber": 765,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1839,
    "kind": "set",
    "name": "alphaCutoff",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#alphaCutoff",
    "access": "public",
    "description": "The alpha cutoff value.\n\nSpecifies the cutoff threshold when {@link PhongMaterial/alphaMode}\nequals \"mask\". If the alpha is greater than or equal to this value then it is rendered as fully\nopaque, otherwise, it is rendered as fully transparent. A value greater than 1.0 will render the entire\nmaterial as fully transparent. This value is ignored for other modes.\n\nAlpha is the combined result of the\n{@link PhongMaterial/alpha} and\n{@link PhongMaterial/alphaMap} properties.",
    "lineNumber": 785,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0.5"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alphaCutoff",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1840,
    "kind": "get",
    "name": "alphaCutoff",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#alphaCutoff",
    "access": "public",
    "description": null,
    "lineNumber": 795,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1841,
    "kind": "set",
    "name": "backfaces",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#backfaces",
    "access": "public",
    "description": "Whether backfaces are visible on attached {@link Mesh}es.\n\nThe backfaces will belong to {@link Geometry} compoents that are also attached to\nthe {@link Mesh}es.",
    "lineNumber": 809,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "backfaces",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1842,
    "kind": "get",
    "name": "backfaces",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#backfaces",
    "access": "public",
    "description": null,
    "lineNumber": 818,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1843,
    "kind": "set",
    "name": "frontface",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#frontface",
    "access": "public",
    "description": "Indicates the winding direction of front faces on attached {@link Mesh}es.\n\nThe faces will belong to {@link Geometry} components that are also attached to\nthe {@link Mesh}es.",
    "lineNumber": 832,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"ccw\""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "frontface",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1844,
    "kind": "get",
    "name": "frontface",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#frontface",
    "access": "public",
    "description": null,
    "lineNumber": 841,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1845,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/materials/PhongMaterial.js~PhongMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/PhongMaterial.js~PhongMaterial#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 845,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1846,
    "kind": "file",
    "name": "scene/materials/SpecularMaterial.js",
    "content": "import {Material} from './Material.js';\nimport {RenderState} from '../webgl/RenderState.js';\nimport {math} from '../math/math.js';\n\nconst alphaModes = {\"opaque\": 0, \"mask\": 1, \"blend\": 2};\nconst alphaModeNames = [\"opaque\", \"mask\", \"blend\"];\n\n/**\n * @desc Configures the normal rendered appearance of {@link Mesh}es using the physically-accurate *specular-glossiness* shading model.\n *\n * * Useful for insulators, such as wood, ceramics and plastic.\n * * {@link MetallicMaterial} is best for conductive materials, such as metal.\n * * {@link PhongMaterial} is appropriate for non-realistic objects.\n * * {@link LambertMaterial} is appropriate for high-detail models that need to render as efficiently as possible.\n *\n * For an introduction to PBR concepts, try these articles:\n *\n * * Joe Wilson's [Basic Theory of Physically-Based Rendering](https://www.marmoset.co/posts/basic-theory-of-physically-based-rendering/)\n * * Jeff Russel's [Physically-based Rendering, and you can too!](https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/)\n * * Sebastien Legarde's [Adapting a physically-based shading model](http://seblagarde.wordpress.com/tag/physically-based-rendering/)\n *\n * The following table summarizes SpecularMaterial properties:\n *\n * | Property | Type | Range | Default Value | Space | Description |\n * |:--------:|:----:|:-----:|:-------------:|:-----:|:-----------:|\n * | {@link SpecularMaterial#diffuse} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the diffuse color of the material. |\n * | {@link SpecularMaterial#specular} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the specular color of the material. |\n * | {@link SpecularMaterial#glossiness} | Number | [0, 1] | 1 | linear | The glossiness the material. |\n * | {@link SpecularMaterial#specularF0} | Number | [0, 1] | 1 | linear | The specularF0 of the material surface. |\n * | {@link SpecularMaterial#emissive} | Array | [0, 1] for all components | [0,0,0] | linear | The RGB components of the emissive color of the material. |\n * | {@link SpecularMaterial#alpha} | Number | [0, 1] | 1 | linear | The transparency of the material surface (0 fully transparent, 1 fully opaque). |\n * | {@link SpecularMaterial#diffuseMap} | {@link Texture} |  | null | sRGB | Texture RGB components multiplying by {@link SpecularMaterial#diffuse}. If the fourth component (A) is present, it multiplies by {@link SpecularMaterial#alpha}. |\n * | {@link SpecularMaterial#specularMap} | {@link Texture} |  | null | sRGB | Texture RGB components multiplying by {@link SpecularMaterial#specular}. If the fourth component (A) is present, it multiplies by {@link SpecularMaterial#alpha}. |\n * | {@link SpecularMaterial#glossinessMap} | {@link Texture} |  | null | linear | Texture with first component multiplying by {@link SpecularMaterial#glossiness}. |\n * | {@link SpecularMaterial#specularGlossinessMap} | {@link Texture} |  | null | linear | Texture with first three components multiplying by {@link SpecularMaterial#specular} and fourth component multiplying by {@link SpecularMaterial#glossiness}. |\n * | {@link SpecularMaterial#emissiveMap} | {@link Texture} |  | null | linear | Texture with RGB components multiplying by {@link SpecularMaterial#emissive}. |\n * | {@link SpecularMaterial#alphaMap} | {@link Texture} |  | null | linear | Texture with first component multiplying by {@link SpecularMaterial#alpha}. |\n * | {@link SpecularMaterial#occlusionMap} | {@link Texture} |  | null | linear | Ambient occlusion texture multiplying by surface's reflected diffuse and specular light. |\n * | {@link SpecularMaterial#normalMap} | {@link Texture} |  | null | linear | Tangent-space normal map. |\n * | {@link SpecularMaterial#alphaMode} | String | \"opaque\", \"blend\", \"mask\" | \"blend\" |  | Alpha blend mode. |\n * | {@link SpecularMaterial#alphaCutoff} | Number | [0..1] | 0.5 |  | Alpha cutoff value. |\n * | {@link SpecularMaterial#backfaces} | Boolean |  | false |  | Whether to render {@link Geometry} backfaces. |\n * | {@link SpecularMaterial#frontface} | String | \"ccw\", \"cw\" | \"ccw\" |  | The winding order for {@link Geometry} frontfaces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise. |\n *\n * ## Usage\n *\n * ## Usage\n *\n * In the example below we'll create a {@link Mesh} with a {@link TorusGeometry} and a SpecularMaterial.\n *\n * Note that in this example we're providing separate {@link Texture} for the {@link SpecularMaterial#specular} and {@link SpecularMaterial#glossiness}\n * channels, which allows us a little creative flexibility. Then, in the next example further down, we'll combine those channels\n * within the same {@link Texture} for efficiency.\n *\n * ````javascript\n * const myMesh = new Mesh(myViewer.scene,{\n *\n *     geometry: new TorusGeometry(myViewer.scene),\n *\n *      material: new SpecularMaterial(myViewer.scene,{\n *\n *          // Channels with default values, just to show them\n *\n *          diffuse: [1.0, 1.0, 1.0],\n *          specular: [1.0, 1.0, 1.0],\n *          glossiness: 1.0,\n *          emissive: [0.0, 0.0, 0.0]\n *          alpha: 1.0,\n *\n *          // Textures to multiply some of the channels\n *\n *          diffuseMap: new Texture(myViewer.scene, { // RGB components multiply by diffuse\n *              src: \"textures/diffuse.jpg\"\n *          }),\n *          specularMap: new Texture(myViewer.scene, { // RGB component multiplies by specular\n *              src: \"textures/specular.jpg\"\n *          }),\n *          glossinessMap: new Texture(myViewer.scene, { // R component multiplies by glossiness\n *              src: \"textures/glossiness.jpg\"\n *          }),\n *          normalMap: new Texture(myViewer.scene, {\n *              src: \"textures/normals.jpg\"\n *          })\n *      })\n * });\n * ````\n *\n * ## Combining channels within the same textures\n *\n *  In the previous example we provided separate {@link Texture} for the {@link SpecularMaterial#specular} and\n * {@link SpecularMaterial#glossiness} channels, but we can combine those channels into the same {@link Texture} to reduce\n * download time, memory footprint and rendering time (and also for glTF compatibility).\n *\n * Here's our SpecularMaterial again with those channels combined in the {@link SpecularMaterial#specularGlossinessMap}\n * {@link Texture}, where the *RGB* component multiplies by {@link SpecularMaterial#specular} and *A* multiplies by {@link SpecularMaterial#glossiness}.\n *\n * ````javascript\n * const myMesh = new Mesh(myViewer.scene,{\n *\n *     geometry: new TorusGeometry(myViewer.scene),\n *\n *      material: new SpecularMaterial(myViewer.scene,{\n *\n *          // Channels with default values, just to show them\n *\n *          diffuse: [1.0, 1.0, 1.0],\n *          specular: [1.0, 1.0, 1.0],\n *          glossiness: 1.0,\n *          emissive: [0.0, 0.0, 0.0]\n *          alpha: 1.0,\n *\n *          diffuseMap: new Texture(myViewer.scene, {\n *              src: \"textures/diffuse.jpg\"\n *          }),\n *          specularGlossinessMap: new Texture(myViewer.scene, { // RGB multiplies by specular, A by glossiness\n *              src: \"textures/specularGlossiness.jpg\"\n *          }),\n *          normalMap: new Texture(myViewer.scene, {\n *              src: \"textures/normals.jpg\"\n *          })\n *      })\n * });\n * ````\n *\n * Although not shown in this example, we can also texture {@link SpecularMaterial#alpha} with\n * the *A* component of {@link SpecularMaterial#diffuseMap}'s {@link Texture}, if required.\n *\n * ### Alpha Blending\n *\n * Let's make our {@link Mesh} transparent. We'll redefine {@link SpecularMaterial#alpha}\n * and {@link SpecularMaterial#alphaMode}, causing it to blend 50% with the background:\n *\n * ````javascript\n * const myMesh = new Mesh(myViewer.scene,{\n *\n *     geometry: new TorusGeometry(myViewer.scene),\n *\n *      material: new SpecularMaterial(myViewer.scene,{\n *\n *          // Channels with default values, just to show them\n *\n *          diffuse: [1.0, 1.0, 1.0],\n *          specular: [1.0, 1.0, 1.0],\n *          glossiness: 1.0,\n *          emissive: [0.0, 0.0, 0.0]\n *          alpha: 0.5,         // <<----------- Changed\n *          alphaMode: \"blend\", // <<----------- Added\n *\n *          diffuseMap: new Texture(myViewer.scene, {\n *              src: \"textures/diffuse.jpg\"\n *          }),\n *          specularGlossinessMap: new Texture(myViewer.scene, { // RGB multiplies by specular, A by glossiness\n *              src: \"textures/specularGlossiness.jpg\"\n *          }),\n *          normalMap: new Texture(myViewer.scene, {\n *              src: \"textures/normals.jpg\"\n *          })\n *      })\n * });\n * ````\n *\n * ### Alpha Masking\n *\n * Now let's make holes in our {@link Mesh}. We'll give its SpecularMaterial an {@link SpecularMaterial#alphaMap}\n * and configure {@link SpecularMaterial#alpha}, {@link SpecularMaterial#alphaMode},\n * and {@link SpecularMaterial#alphaCutoff} to treat it as an alpha mask:\n *\n * ````javascript\n * const myMesh = new Mesh(myViewer.scene,{\n *\n *     geometry: new TorusGeometry(myViewer.scene),\n *\n *      material: new SpecularMaterial(myViewer.scene, {\n *\n *          // Channels with default values, just to show them\n *\n *          diffuse: [1.0, 1.0, 1.0],\n *          specular: [1.0, 1.0, 1.0],\n *          glossiness: 1.0,\n *          emissive: [0.0, 0.0, 0.0]\n *          alpha: 1.0,         // <<----------- Changed\n *          alphaMode: \"mask\",  // <<----------- Changed\n *          alphaCutoff: 0.2,   // <<----------- Added\n *\n *          alphaMap: new Texture(myViewer.scene, { // <<---------- Added\n *              src: \"textures/diffuse/crossGridColorMap.jpg\"\n *          }),\n *          diffuseMap: new Texture(myViewer.scene, {\n *              src: \"textures/diffuse.jpg\"\n *          }),\n *          specularGlossinessMap: new Texture(myViewer.scene, { // RGB multiplies by specular, A by glossiness\n *              src: \"textures/specularGlossiness.jpg\"\n *          }),\n *          normalMap: new Texture(myViewer.scene, {\n *              src: \"textures/normals.jpg\"\n *          })\n *      })\n * });\n * ````\n */\nclass SpecularMaterial extends Material {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"SpecularMaterial\";\n    }\n\n    /**\n\n     @constructor\n     @extends Material\n\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n\n     @param {*} [cfg] The SpecularMaterial configuration\n\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted.\n\n     @param [cfg.meta=null] {String:Object} Metadata to attach to this SpecularMaterial.\n\n     @param [cfg.diffuse=[1,1,1]] {Float32Array}  RGB diffuse color of this SpecularMaterial. Multiplies by the RGB\n     components of {@link SpecularMaterial#diffuseMap}.\n\n     @param [cfg.diffuseMap=undefined] {Texture} RGBA {@link Texture} containing the diffuse color\n     of this SpecularMaterial, with optional *A* component for alpha. The RGB components multiply by the\n     {@link SpecularMaterial#diffuse} property,\n     while the *A* component, if present, multiplies by the {@link SpecularMaterial#alpha} property.\n\n     @param [cfg.specular=[1,1,1]] {Number} RGB specular color of this SpecularMaterial. Multiplies by the\n     {@link SpecularMaterial#specularMap} and the *RGB* components of\n     {@link SpecularMaterial#specularGlossinessMap}.\n\n     @param [cfg.specularMap=undefined] {Texture} RGB texture containing the specular color of this SpecularMaterial. Multiplies\n     by the {@link SpecularMaterial#specular} property. Must be within the same {@link Scene} as this SpecularMaterial.\n\n     @param [cfg.glossiness=1.0] {Number} Factor in the range [0..1] indicating how glossy this SpecularMaterial is. 0 is\n     no glossiness, 1 is full glossiness. Multiplies by the *R* component of {@link SpecularMaterial#glossinessMap}\n     and the *A* component of {@link SpecularMaterial#specularGlossinessMap}.\n\n     @param [cfg.specularGlossinessMap=undefined] {Texture} RGBA {@link Texture} containing this\n     SpecularMaterial's specular color in its *RGB* component and glossiness in its *A* component. Its *RGB* components multiply by the\n     {@link SpecularMaterial#specular} property, while its *A* component multiplies by the\n     {@link SpecularMaterial#glossiness} property. Must be within the same\n     {@link Scene} as this SpecularMaterial.\n\n     @param [cfg.specularF0=0.0] {Number} Factor in the range 0..1 indicating how reflective this SpecularMaterial is.\n\n     @param [cfg.emissive=[0,0,0]] {Float32Array}  RGB emissive color of this SpecularMaterial. Multiplies by the RGB\n     components of {@link SpecularMaterial#emissiveMap}.\n\n     @param [cfg.emissiveMap=undefined] {Texture} RGB {@link Texture} containing the emissive color of this\n     SpecularMaterial. Multiplies by the {@link SpecularMaterial#emissive} property.\n     Must be within the same {@link Scene} as this SpecularMaterial.\n\n     @param [cfg.occlusionMap=undefined] {Texture} RGB ambient occlusion {@link Texture}. Within shaders,\n     multiplies by the specular and diffuse light reflected by surfaces. Must be within the same {@link Scene}\n     as this SpecularMaterial.\n\n     @param [cfg.normalMap=undefined] {Texture} RGB tangent-space normal {@link Texture}. Must be\n     within the same {@link Scene} as this SpecularMaterial.\n\n     @param [cfg.alpha=1.0] {Number} Factor in the range 0..1 indicating how transparent this SpecularMaterial is.\n     A value of 0.0 indicates fully transparent, 1.0 is fully opaque. Multiplies by the *R* component of\n     {@link SpecularMaterial#alphaMap} and the *A* component, if present, of\n     {@link SpecularMaterial#diffuseMap}.\n\n     @param [cfg.alphaMap=undefined] {Texture} RGB {@link Texture} containing this SpecularMaterial's\n     alpha in its *R* component. The *R* component multiplies by the {@link SpecularMaterial#alpha} property. Must\n     be within the same {@link Scene} as this SpecularMaterial.\n\n     @param [cfg.alphaMode=\"opaque\"] {String} The alpha blend mode - accepted values are \"opaque\", \"blend\" and \"mask\".\n     See the {@link SpecularMaterial#alphaMode} property for more info.\n\n     @param [cfg.alphaCutoff=0.5] {Number} The alpha cutoff value.\n     See the {@link SpecularMaterial#alphaCutoff} property for more info.\n\n     @param [cfg.backfaces=false] {Boolean} Whether to render {@link Geometry} backfaces.\n\n     @param [cfg.frontface=\"ccw\"] {Boolean} The winding order for {@link Geometry} front faces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise.\n\n     @param [cfg.lineWidth=1] {Number} Scalar that controls the width of lines for {@link Geometry} with {@link Geometry/primitive} set to \"lines\".\n     @param [cfg.pointSize=1] {Number} Scalar that controls the size of points for {@link Geometry} with {@link Geometry/primitive} set to \"points\".\n\n     * @param owner\n     * @param cfg\n     */\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({\n            type: \"SpecularMaterial\",\n            diffuse: math.vec3([1.0, 1.0, 1.0]),\n            emissive: math.vec3([0.0, 0.0, 0.0]),\n            specular: math.vec3([1.0, 1.0, 1.0]),\n            glossiness: null,\n            specularF0: null,\n            alpha: null,\n            alphaMode: null,\n            alphaCutoff: null,\n            lineWidth: null,\n            pointSize: null,\n            backfaces: null,\n            frontface: null, // Boolean for speed; true == \"ccw\", false == \"cw\"\n            hash: null\n        });\n\n        this.diffuse = cfg.diffuse;\n        this.specular = cfg.specular;\n        this.glossiness = cfg.glossiness;\n        this.specularF0 = cfg.specularF0;\n        this.emissive = cfg.emissive;\n        this.alpha = cfg.alpha;\n\n        if (cfg.diffuseMap) {\n            this._diffuseMap = this._checkComponent(\"Texture\", cfg.diffuseMap);\n        }\n        if (cfg.emissiveMap) {\n            this._emissiveMap = this._checkComponent(\"Texture\", cfg.emissiveMap);\n        }\n        if (cfg.specularMap) {\n            this._specularMap = this._checkComponent(\"Texture\", cfg.specularMap);\n        }\n        if (cfg.glossinessMap) {\n            this._glossinessMap = this._checkComponent(\"Texture\", cfg.glossinessMap);\n        }\n        if (cfg.specularGlossinessMap) {\n            this._specularGlossinessMap = this._checkComponent(\"Texture\", cfg.specularGlossinessMap);\n        }\n        if (cfg.occlusionMap) {\n            this._occlusionMap = this._checkComponent(\"Texture\", cfg.occlusionMap);\n        }\n        if (cfg.alphaMap) {\n            this._alphaMap = this._checkComponent(\"Texture\", cfg.alphaMap);\n        }\n        if (cfg.normalMap) {\n            this._normalMap = this._checkComponent(\"Texture\", cfg.normalMap);\n        }\n\n        this.alphaMode = cfg.alphaMode;\n        this.alphaCutoff = cfg.alphaCutoff;\n        this.backfaces = cfg.backfaces;\n        this.frontface = cfg.frontface;\n\n        this.lineWidth = cfg.lineWidth;\n        this.pointSize = cfg.pointSize;\n\n        this._makeHash();\n    }\n\n    _makeHash() {\n        const state = this._state;\n        const hash = [\"/spe\"];\n        if (this._diffuseMap) {\n            hash.push(\"/dm\");\n            if (this._diffuseMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n            hash.push(\"/\" + this._diffuseMap.encoding);\n        }\n        if (this._emissiveMap) {\n            hash.push(\"/em\");\n            if (this._emissiveMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._glossinessMap) {\n            hash.push(\"/gm\");\n            if (this._glossinessMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._specularMap) {\n            hash.push(\"/sm\");\n            if (this._specularMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._specularGlossinessMap) {\n            hash.push(\"/sgm\");\n            if (this._specularGlossinessMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._occlusionMap) {\n            hash.push(\"/ocm\");\n            if (this._occlusionMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._normalMap) {\n            hash.push(\"/nm\");\n            if (this._normalMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        if (this._alphaMap) {\n            hash.push(\"/opm\");\n            if (this._alphaMap.hasMatrix) {\n                hash.push(\"/mat\");\n            }\n        }\n        hash.push(\";\");\n        state.hash = hash.join(\"\");\n    }\n\n    /**\n     RGB diffuse color of this SpecularMaterial.\n\n     Multiplies by the *RGB* components of {@link SpecularMaterial#diffuseMap}.\n\n     @property diffuse\n     @default [1.0, 1.0, 1.0]\n     @type Float32Array\n     */\n    set diffuse(value) {\n        let diffuse = this._state.diffuse;\n        if (!diffuse) {\n            diffuse = this._state.diffuse = new Float32Array(3);\n        } else if (value && diffuse[0] === value[0] && diffuse[1] === value[1] && diffuse[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            diffuse[0] = value[0];\n            diffuse[1] = value[1];\n            diffuse[2] = value[2];\n        } else {\n            diffuse[0] = 1;\n            diffuse[1] = 1;\n            diffuse[2] = 1;\n        }\n        this.glRedraw();\n    }\n\n    get diffuse() {\n        return this._state.diffuse;\n    }\n\n    /**\n     RGB {@link Texture} containing the diffuse color of this SpecularMaterial, with optional *A* component for alpha.\n\n     The *RGB* components multiply by the {@link SpecularMaterial#diffuse} property,\n     while the *A* component, if present, multiplies by the {@link SpecularMaterial#alpha} property.\n\n     @property diffuseMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get diffuseMap() {\n        return this._diffuseMap;\n    }\n\n    /**\n     RGB specular color of this SpecularMaterial.\n\n     Multiplies by the {@link SpecularMaterial#specularMap}\n     and the *A* component of {@link SpecularMaterial#specularGlossinessMap}.\n\n     @property specular\n     @default [1.0, 1.0, 1.0]\n     @type Float32Array\n     */\n    set specular(value) {\n        let specular = this._state.specular;\n        if (!specular) {\n            specular = this._state.specular = new Float32Array(3);\n        } else if (value && specular[0] === value[0] && specular[1] === value[1] && specular[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            specular[0] = value[0];\n            specular[1] = value[1];\n            specular[2] = value[2];\n        } else {\n            specular[0] = 1;\n            specular[1] = 1;\n            specular[2] = 1;\n        }\n        this.glRedraw();\n    }\n\n    get specular() {\n        return this._state.specular;\n    }\n\n    /**\n     RGB texture containing the specular color of this SpecularMaterial.\n\n     Multiplies by the {@link SpecularMaterial#specular} property.\n\n     @property specularMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get specularMap() {\n        return this._specularMap;\n    }\n\n    /**\n     RGBA texture containing this SpecularMaterial's specular color in its *RGB* components and glossiness in its *A* component.\n\n     The *RGB* components multiply by the {@link SpecularMaterial#specular} property, while\n     the *A* component multiplies by the {@link SpecularMaterial#glossiness} property.\n\n     @property specularGlossinessMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get specularGlossinessMap() {\n        return this._specularGlossinessMap;\n    }\n\n    /**\n     Factor in the range [0..1] indicating how glossy this SpecularMaterial is.\n\n     0 is no glossiness, 1 is full glossiness.\n\n     Multiplies by the *R* component of {@link SpecularMaterial#glossinessMap}\n     and the *A* component of {@link SpecularMaterial#specularGlossinessMap}.\n\n     @property glossiness\n     @default 1.0\n     @type Number\n     */\n    set glossiness(value) {\n        value = (value !== undefined && value !== null) ? value : 1.0;\n        if (this._state.glossiness === value) {\n            return;\n        }\n        this._state.glossiness = value;\n        this.glRedraw();\n    }\n\n    get glossiness() {\n        return this._state.glossiness;\n    }\n\n    /**\n     RGB texture containing this SpecularMaterial's glossiness in its *R* component.\n\n     The *R* component multiplies by the {@link SpecularMaterial#glossiness} property.\n\n     Must be within the same {@link Scene} as this SpecularMaterial.\n\n     @property glossinessMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get glossinessMap() {\n        return this._glossinessMap;\n    }\n\n    /**\n     Factor in the range [0..1] indicating amount of specular Fresnel.\n\n     @property specularF0\n     @default 0.0\n     @type Number\n     */\n    set specularF0(value) {\n        value = (value !== undefined && value !== null) ? value : 0.0;\n        if (this._state.specularF0 === value) {\n            return;\n        }\n        this._state.specularF0 = value;\n        this.glRedraw();\n    }\n\n    get specularF0() {\n        return this._state.specularF0;\n    }\n\n    /**\n     RGB emissive color of this SpecularMaterial.\n\n     Multiplies by {@link SpecularMaterial#emissiveMap}.\n\n     @property emissive\n     @default [0.0, 0.0, 0.0]\n     @type Float32Array\n     */\n    set emissive(value) {\n        let emissive = this._state.emissive;\n        if (!emissive) {\n            emissive = this._state.emissive = new Float32Array(3);\n        } else if (value && emissive[0] === value[0] && emissive[1] === value[1] && emissive[2] === value[2]) {\n            return;\n        }\n        if (value) {\n            emissive[0] = value[0];\n            emissive[1] = value[1];\n            emissive[2] = value[2];\n        } else {\n            emissive[0] = 0;\n            emissive[1] = 0;\n            emissive[2] = 0;\n        }\n        this.glRedraw();\n    }\n\n    get emissive() {\n        return this._state.emissive;\n    }\n\n    /**\n     RGB texture containing the emissive color of this SpecularMaterial.\n\n     Multiplies by the {@link SpecularMaterial#emissive} property.\n\n     @property emissiveMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get emissiveMap() {\n        return this._emissiveMap;\n    }\n\n    /**\n     Factor in the range [0..1] indicating how transparent this SpecularMaterial is.\n\n     A value of 0.0 is fully transparent, while 1.0 is fully opaque.\n\n     Multiplies by the *R* component of {@link SpecularMaterial#alphaMap} and\n     the *A* component, if present, of {@link SpecularMaterial#diffuseMap}.\n\n     @property alpha\n     @default 1.0\n     @type Number\n     */\n    set alpha(value) {\n        value = (value !== undefined && value !== null) ? value : 1.0;\n        if (this._state.alpha === value) {\n            return;\n        }\n        this._state.alpha = value;\n        this.glRedraw();\n    }\n\n    get alpha() {\n        return this._state.alpha;\n    }\n\n    /**\n     RGB {@link Texture} with alpha in its *R* component.\n\n     The *R* component multiplies by the {@link SpecularMaterial#alpha} property.\n\n     @property alphaMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get alphaMap() {\n        return this._alphaMap;\n    }\n\n    /**\n     RGB tangent-space normal {@link Texture} attached to this SpecularMaterial.\n\n     @property normalMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get normalMap() {\n        return this._normalMap;\n    }\n\n    /**\n     RGB ambient occlusion {@link Texture} attached to this SpecularMaterial.\n\n     Within objectRenderers, multiplies by the specular and diffuse light reflected by surfaces.\n\n     @property occlusionMap\n     @default undefined\n     @type {Texture}\n     @final\n     */\n    get occlusionMap() {\n        return this._occlusionMap;\n    }\n\n    /**\n     The alpha rendering mode.\n\n     This governs how alpha is treated. Alpha is the combined result of the\n     {@link SpecularMaterial#alpha} and\n     {@link SpecularMaterial#alphaMap} properties.\n\n     * \"opaque\" - The alpha value is ignored and the rendered output is fully opaque.\n     * \"mask\" - The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value.\n     * \"blend\" - The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator)\n\n     @property alphaMode\n     @default \"opaque\"\n     @type {String}\n     */\n    set alphaMode(alphaMode) {\n        alphaMode = alphaMode || \"opaque\";\n        let value = alphaModes[alphaMode];\n        if (value === undefined) {\n            this.error(\"Unsupported value for 'alphaMode': \" + alphaMode + \" defaulting to 'opaque'\");\n            value = \"opaque\";\n        }\n        if (this._state.alphaMode === value) {\n            return;\n        }\n        this._state.alphaMode = value;\n        this.glRedraw();\n    }\n\n    get alphaMode() {\n        return alphaModeNames[this._state.alphaMode];\n    }\n\n    /**\n     The alpha cutoff value.\n\n     Specifies the cutoff threshold when {@link SpecularMaterial#alphaMode}\n     equals \"mask\". If the alpha is greater than or equal to this value then it is rendered as fully\n     opaque, otherwise, it is rendered as fully transparent. A value greater than 1.0 will render the entire\n     material as fully transparent. This value is ignored for other modes.\n\n     Alpha is the combined result of the\n     {@link SpecularMaterial#alpha} and\n     {@link SpecularMaterial#alphaMap} properties.\n\n     @property alphaCutoff\n     @default 0.5\n     @type {Number}\n     */\n    set alphaCutoff(alphaCutoff) {\n        if (alphaCutoff === null || alphaCutoff === undefined) {\n            alphaCutoff = 0.5;\n        }\n        if (this._state.alphaCutoff === alphaCutoff) {\n            return;\n        }\n        this._state.alphaCutoff = alphaCutoff;\n    }\n\n    get alphaCutoff() {\n        return this._state.alphaCutoff;\n    }\n\n    /**\n     Whether backfaces are visible on attached {@link Mesh}es.\n\n     The backfaces will belong to {@link Geometry} compoents that are also attached to\n     the {@link Mesh}es.\n\n     @property backfaces\n     @default false\n     @type Boolean\n     */\n    set backfaces(value) {\n        value = !!value;\n        if (this._state.backfaces === value) {\n            return;\n        }\n        this._state.backfaces = value;\n        this.glRedraw();\n    }\n\n    get backfaces() {\n        return this._state.backfaces;\n    }\n\n    /**\n     Indicates the winding direction of front faces on attached {@link Mesh}es.\n\n     The faces will belong to {@link Geometry} components that are also attached to\n     the {@link Mesh}es.\n\n     @property frontface\n     @default \"ccw\"\n     @type String\n     */\n    set frontface(value) {\n        value = value !== \"cw\";\n        if (this._state.frontface === value) {\n            return;\n        }\n        this._state.frontface = value;\n        this.glRedraw();\n    }\n\n    get frontface() {\n        return this._state.frontface ? \"ccw\" : \"cw\";\n    }\n\n    /**\n     The SpecularMaterial's line width.\n\n     @property lineWidth\n     @default 1.0\n     @type Number\n     */\n    set lineWidth(value) {\n        this._state.lineWidth = value || 1.0;\n        this.glRedraw();\n    }\n\n    get lineWidth() {\n        return this._state.lineWidth;\n    }\n\n    /**\n     The SpecularMaterial's point size.\n\n     @property pointSize\n     @default 1\n     @type Number\n     */\n    set pointSize(value) {\n        this._state.pointSize = value || 1;\n        this.glRedraw();\n    }\n\n    get pointSize() {\n        return this._state.pointSize;\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\nexport {SpecularMaterial};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/materials/SpecularMaterial.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1847,
    "kind": "variable",
    "name": "alphaModes",
    "memberof": "scene/materials/SpecularMaterial.js",
    "static": true,
    "longname": "scene/materials/SpecularMaterial.js~alphaModes",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/materials/SpecularMaterial.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "{\"opaque\": *, \"mask\": number, \"blend\": number}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1848,
    "kind": "variable",
    "name": "alphaModeNames",
    "memberof": "scene/materials/SpecularMaterial.js",
    "static": true,
    "longname": "scene/materials/SpecularMaterial.js~alphaModeNames",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/materials/SpecularMaterial.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1849,
    "kind": "class",
    "name": "SpecularMaterial",
    "memberof": "scene/materials/SpecularMaterial.js",
    "static": true,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/materials/SpecularMaterial.js",
    "importStyle": "{SpecularMaterial}",
    "description": "Configures the normal rendered appearance of {@link Mesh}es using the physically-accurate *specular-glossiness* shading model.\n\n* Useful for insulators, such as wood, ceramics and plastic.\n* {@link MetallicMaterial} is best for conductive materials, such as metal.\n* {@link PhongMaterial} is appropriate for non-realistic objects.\n* {@link LambertMaterial} is appropriate for high-detail models that need to render as efficiently as possible.\n\nFor an introduction to PBR concepts, try these articles:\n\n* Joe Wilson's [Basic Theory of Physically-Based Rendering](https://www.marmoset.co/posts/basic-theory-of-physically-based-rendering/)\n* Jeff Russel's [Physically-based Rendering, and you can too!](https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/)\n* Sebastien Legarde's [Adapting a physically-based shading model](http://seblagarde.wordpress.com/tag/physically-based-rendering/)\n\nThe following table summarizes SpecularMaterial properties:\n\n| Property | Type | Range | Default Value | Space | Description |\n|:--------:|:----:|:-----:|:-------------:|:-----:|:-----------:|\n| {@link SpecularMaterial#diffuse} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the diffuse color of the material. |\n| {@link SpecularMaterial#specular} | Array | [0, 1] for all components | [1,1,1,1] | linear | The RGB components of the specular color of the material. |\n| {@link SpecularMaterial#glossiness} | Number | [0, 1] | 1 | linear | The glossiness the material. |\n| {@link SpecularMaterial#specularF0} | Number | [0, 1] | 1 | linear | The specularF0 of the material surface. |\n| {@link SpecularMaterial#emissive} | Array | [0, 1] for all components | [0,0,0] | linear | The RGB components of the emissive color of the material. |\n| {@link SpecularMaterial#alpha} | Number | [0, 1] | 1 | linear | The transparency of the material surface (0 fully transparent, 1 fully opaque). |\n| {@link SpecularMaterial#diffuseMap} | {@link Texture} |  | null | sRGB | Texture RGB components multiplying by {@link SpecularMaterial#diffuse}. If the fourth component (A) is present, it multiplies by {@link SpecularMaterial#alpha}. |\n| {@link SpecularMaterial#specularMap} | {@link Texture} |  | null | sRGB | Texture RGB components multiplying by {@link SpecularMaterial#specular}. If the fourth component (A) is present, it multiplies by {@link SpecularMaterial#alpha}. |\n| {@link SpecularMaterial#glossinessMap} | {@link Texture} |  | null | linear | Texture with first component multiplying by {@link SpecularMaterial#glossiness}. |\n| {@link SpecularMaterial#specularGlossinessMap} | {@link Texture} |  | null | linear | Texture with first three components multiplying by {@link SpecularMaterial#specular} and fourth component multiplying by {@link SpecularMaterial#glossiness}. |\n| {@link SpecularMaterial#emissiveMap} | {@link Texture} |  | null | linear | Texture with RGB components multiplying by {@link SpecularMaterial#emissive}. |\n| {@link SpecularMaterial#alphaMap} | {@link Texture} |  | null | linear | Texture with first component multiplying by {@link SpecularMaterial#alpha}. |\n| {@link SpecularMaterial#occlusionMap} | {@link Texture} |  | null | linear | Ambient occlusion texture multiplying by surface's reflected diffuse and specular light. |\n| {@link SpecularMaterial#normalMap} | {@link Texture} |  | null | linear | Tangent-space normal map. |\n| {@link SpecularMaterial#alphaMode} | String | \"opaque\", \"blend\", \"mask\" | \"blend\" |  | Alpha blend mode. |\n| {@link SpecularMaterial#alphaCutoff} | Number | [0..1] | 0.5 |  | Alpha cutoff value. |\n| {@link SpecularMaterial#backfaces} | Boolean |  | false |  | Whether to render {@link Geometry} backfaces. |\n| {@link SpecularMaterial#frontface} | String | \"ccw\", \"cw\" | \"ccw\" |  | The winding order for {@link Geometry} frontfaces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise. |\n\n## Usage\n\n## Usage\n\nIn the example below we'll create a {@link Mesh} with a {@link TorusGeometry} and a SpecularMaterial.\n\nNote that in this example we're providing separate {@link Texture} for the {@link SpecularMaterial#specular} and {@link SpecularMaterial#glossiness}\nchannels, which allows us a little creative flexibility. Then, in the next example further down, we'll combine those channels\nwithin the same {@link Texture} for efficiency.\n\n````javascript\nconst myMesh = new Mesh(myViewer.scene,{\n\n    geometry: new TorusGeometry(myViewer.scene),\n\n     material: new SpecularMaterial(myViewer.scene,{\n\n         // Channels with default values, just to show them\n\n         diffuse: [1.0, 1.0, 1.0],\n         specular: [1.0, 1.0, 1.0],\n         glossiness: 1.0,\n         emissive: [0.0, 0.0, 0.0]\n         alpha: 1.0,\n\n         // Textures to multiply some of the channels\n\n         diffuseMap: new Texture(myViewer.scene, { // RGB components multiply by diffuse\n             src: \"textures/diffuse.jpg\"\n         }),\n         specularMap: new Texture(myViewer.scene, { // RGB component multiplies by specular\n             src: \"textures/specular.jpg\"\n         }),\n         glossinessMap: new Texture(myViewer.scene, { // R component multiplies by glossiness\n             src: \"textures/glossiness.jpg\"\n         }),\n         normalMap: new Texture(myViewer.scene, {\n             src: \"textures/normals.jpg\"\n         })\n     })\n});\n````\n\n## Combining channels within the same textures\n\n In the previous example we provided separate {@link Texture} for the {@link SpecularMaterial#specular} and\n{@link SpecularMaterial#glossiness} channels, but we can combine those channels into the same {@link Texture} to reduce\ndownload time, memory footprint and rendering time (and also for glTF compatibility).\n\nHere's our SpecularMaterial again with those channels combined in the {@link SpecularMaterial#specularGlossinessMap}\n{@link Texture}, where the *RGB* component multiplies by {@link SpecularMaterial#specular} and *A* multiplies by {@link SpecularMaterial#glossiness}.\n\n````javascript\nconst myMesh = new Mesh(myViewer.scene,{\n\n    geometry: new TorusGeometry(myViewer.scene),\n\n     material: new SpecularMaterial(myViewer.scene,{\n\n         // Channels with default values, just to show them\n\n         diffuse: [1.0, 1.0, 1.0],\n         specular: [1.0, 1.0, 1.0],\n         glossiness: 1.0,\n         emissive: [0.0, 0.0, 0.0]\n         alpha: 1.0,\n\n         diffuseMap: new Texture(myViewer.scene, {\n             src: \"textures/diffuse.jpg\"\n         }),\n         specularGlossinessMap: new Texture(myViewer.scene, { // RGB multiplies by specular, A by glossiness\n             src: \"textures/specularGlossiness.jpg\"\n         }),\n         normalMap: new Texture(myViewer.scene, {\n             src: \"textures/normals.jpg\"\n         })\n     })\n});\n````\n\nAlthough not shown in this example, we can also texture {@link SpecularMaterial#alpha} with\nthe *A* component of {@link SpecularMaterial#diffuseMap}'s {@link Texture}, if required.\n\n### Alpha Blending\n\nLet's make our {@link Mesh} transparent. We'll redefine {@link SpecularMaterial#alpha}\nand {@link SpecularMaterial#alphaMode}, causing it to blend 50% with the background:\n\n````javascript\nconst myMesh = new Mesh(myViewer.scene,{\n\n    geometry: new TorusGeometry(myViewer.scene),\n\n     material: new SpecularMaterial(myViewer.scene,{\n\n         // Channels with default values, just to show them\n\n         diffuse: [1.0, 1.0, 1.0],\n         specular: [1.0, 1.0, 1.0],\n         glossiness: 1.0,\n         emissive: [0.0, 0.0, 0.0]\n         alpha: 0.5,         // <<----------- Changed\n         alphaMode: \"blend\", // <<----------- Added\n\n         diffuseMap: new Texture(myViewer.scene, {\n             src: \"textures/diffuse.jpg\"\n         }),\n         specularGlossinessMap: new Texture(myViewer.scene, { // RGB multiplies by specular, A by glossiness\n             src: \"textures/specularGlossiness.jpg\"\n         }),\n         normalMap: new Texture(myViewer.scene, {\n             src: \"textures/normals.jpg\"\n         })\n     })\n});\n````\n\n### Alpha Masking\n\nNow let's make holes in our {@link Mesh}. We'll give its SpecularMaterial an {@link SpecularMaterial#alphaMap}\nand configure {@link SpecularMaterial#alpha}, {@link SpecularMaterial#alphaMode},\nand {@link SpecularMaterial#alphaCutoff} to treat it as an alpha mask:\n\n````javascript\nconst myMesh = new Mesh(myViewer.scene,{\n\n    geometry: new TorusGeometry(myViewer.scene),\n\n     material: new SpecularMaterial(myViewer.scene, {\n\n         // Channels with default values, just to show them\n\n         diffuse: [1.0, 1.0, 1.0],\n         specular: [1.0, 1.0, 1.0],\n         glossiness: 1.0,\n         emissive: [0.0, 0.0, 0.0]\n         alpha: 1.0,         // <<----------- Changed\n         alphaMode: \"mask\",  // <<----------- Changed\n         alphaCutoff: 0.2,   // <<----------- Added\n\n         alphaMap: new Texture(myViewer.scene, { // <<---------- Added\n             src: \"textures/diffuse/crossGridColorMap.jpg\"\n         }),\n         diffuseMap: new Texture(myViewer.scene, {\n             src: \"textures/diffuse.jpg\"\n         }),\n         specularGlossinessMap: new Texture(myViewer.scene, { // RGB multiplies by specular, A by glossiness\n             src: \"textures/specularGlossiness.jpg\"\n         }),\n         normalMap: new Texture(myViewer.scene, {\n             src: \"textures/normals.jpg\"\n         })\n     })\n});\n````",
    "lineNumber": 201,
    "interface": false,
    "extends": [
      "scene/materials/Material.js~Material"
    ]
  },
  {
    "__docId__": 1850,
    "kind": "get",
    "name": "type",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 212,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1851,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 295,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@extends",
        "tagValue": "Material"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "The SpecularMaterial configuration"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent {@link Scene}, generated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "cfg.meta",
        "description": "{String:Object} Metadata to attach to this SpecularMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,1,1]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "cfg.diffuse",
        "description": "{Float32Array}  RGB diffuse color of this SpecularMaterial. Multiplies by the RGB\ncomponents of {@link SpecularMaterial#diffuseMap}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "cfg.diffuseMap",
        "description": "{Texture} RGBA {@link Texture} containing the diffuse color\nof this SpecularMaterial, with optional *A* component for alpha. The RGB components multiply by the\n{@link SpecularMaterial#diffuse} property,\nwhile the *A* component, if present, multiplies by the {@link SpecularMaterial#alpha} property."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,1,1]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "cfg.specular",
        "description": "{Number} RGB specular color of this SpecularMaterial. Multiplies by the\n{@link SpecularMaterial#specularMap} and the *RGB* components of\n{@link SpecularMaterial#specularGlossinessMap}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "cfg.specularMap",
        "description": "{Texture} RGB texture containing the specular color of this SpecularMaterial. Multiplies\nby the {@link SpecularMaterial#specular} property. Must be within the same {@link Scene} as this SpecularMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "cfg.glossiness",
        "description": "{Number} Factor in the range [0..1] indicating how glossy this SpecularMaterial is. 0 is\nno glossiness, 1 is full glossiness. Multiplies by the *R* component of {@link SpecularMaterial#glossinessMap}\nand the *A* component of {@link SpecularMaterial#specularGlossinessMap}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "cfg.specularGlossinessMap",
        "description": "{Texture} RGBA {@link Texture} containing this\nSpecularMaterial's specular color in its *RGB* component and glossiness in its *A* component. Its *RGB* components multiply by the\n{@link SpecularMaterial#specular} property, while its *A* component multiplies by the\n{@link SpecularMaterial#glossiness} property. Must be within the same\n{@link Scene} as this SpecularMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.0",
        "defaultRaw": 0,
        "name": "cfg.specularF0",
        "description": "{Number} Factor in the range 0..1 indicating how reflective this SpecularMaterial is."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "cfg.emissive",
        "description": "{Float32Array}  RGB emissive color of this SpecularMaterial. Multiplies by the RGB\ncomponents of {@link SpecularMaterial#emissiveMap}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "cfg.emissiveMap",
        "description": "{Texture} RGB {@link Texture} containing the emissive color of this\nSpecularMaterial. Multiplies by the {@link SpecularMaterial#emissive} property.\nMust be within the same {@link Scene} as this SpecularMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "cfg.occlusionMap",
        "description": "{Texture} RGB ambient occlusion {@link Texture}. Within shaders,\nmultiplies by the specular and diffuse light reflected by surfaces. Must be within the same {@link Scene}\nas this SpecularMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "cfg.normalMap",
        "description": "{Texture} RGB tangent-space normal {@link Texture}. Must be\nwithin the same {@link Scene} as this SpecularMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "cfg.alpha",
        "description": "{Number} Factor in the range 0..1 indicating how transparent this SpecularMaterial is.\nA value of 0.0 indicates fully transparent, 1.0 is fully opaque. Multiplies by the *R* component of\n{@link SpecularMaterial#alphaMap} and the *A* component, if present, of\n{@link SpecularMaterial#diffuseMap}."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "undefined",
        "defaultRaw": "undefined",
        "name": "cfg.alphaMap",
        "description": "{Texture} RGB {@link Texture} containing this SpecularMaterial's\nalpha in its *R* component. The *R* component multiplies by the {@link SpecularMaterial#alpha} property. Must\nbe within the same {@link Scene} as this SpecularMaterial."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"opaque\"",
        "defaultRaw": "opaque",
        "name": "cfg.alphaMode",
        "description": "{String} The alpha blend mode - accepted values are \"opaque\", \"blend\" and \"mask\".\nSee the {@link SpecularMaterial#alphaMode} property for more info."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.5",
        "defaultRaw": 0.5,
        "name": "cfg.alphaCutoff",
        "description": "{Number} The alpha cutoff value.\nSee the {@link SpecularMaterial#alphaCutoff} property for more info."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.backfaces",
        "description": "{Boolean} Whether to render {@link Geometry} backfaces."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "\"ccw\"",
        "defaultRaw": "ccw",
        "name": "cfg.frontface",
        "description": "{Boolean} The winding order for {@link Geometry} front faces - \"cw\" for clockwise, or \"ccw\" for counter-clockwise."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.lineWidth",
        "description": "{Number} Scalar that controls the width of lines for {@link Geometry} with {@link Geometry/primitive} set to \"lines\"."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "cfg.pointSize",
        "description": "{Number} Scalar that controls the size of points for {@link Geometry} with {@link Geometry/primitive} set to \"points\"."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": ""
      }
    ]
  },
  {
    "__docId__": 1852,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#_state",
    "access": "private",
    "description": null,
    "lineNumber": 299,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1859,
    "kind": "member",
    "name": "_diffuseMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#_diffuseMap",
    "access": "private",
    "description": null,
    "lineNumber": 324,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1860,
    "kind": "member",
    "name": "_emissiveMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#_emissiveMap",
    "access": "private",
    "description": null,
    "lineNumber": 327,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1861,
    "kind": "member",
    "name": "_specularMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#_specularMap",
    "access": "private",
    "description": null,
    "lineNumber": 330,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1862,
    "kind": "member",
    "name": "_glossinessMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#_glossinessMap",
    "access": "private",
    "description": null,
    "lineNumber": 333,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1863,
    "kind": "member",
    "name": "_specularGlossinessMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#_specularGlossinessMap",
    "access": "private",
    "description": null,
    "lineNumber": 336,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1864,
    "kind": "member",
    "name": "_occlusionMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#_occlusionMap",
    "access": "private",
    "description": null,
    "lineNumber": 339,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1865,
    "kind": "member",
    "name": "_alphaMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#_alphaMap",
    "access": "private",
    "description": null,
    "lineNumber": 342,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1866,
    "kind": "member",
    "name": "_normalMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#_normalMap",
    "access": "private",
    "description": null,
    "lineNumber": 345,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1873,
    "kind": "method",
    "name": "_makeHash",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#_makeHash",
    "access": "private",
    "description": null,
    "lineNumber": 359,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1874,
    "kind": "set",
    "name": "diffuse",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#diffuse",
    "access": "public",
    "description": "RGB diffuse color of this SpecularMaterial.\n\nMultiplies by the *RGB* components of {@link SpecularMaterial#diffuseMap}.",
    "lineNumber": 424,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1.0, 1.0, 1.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "diffuse",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1875,
    "kind": "get",
    "name": "diffuse",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#diffuse",
    "access": "public",
    "description": null,
    "lineNumber": 443,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1876,
    "kind": "get",
    "name": "diffuseMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#diffuseMap",
    "access": "public",
    "description": "RGB {@link Texture} containing the diffuse color of this SpecularMaterial, with optional *A* component for alpha.\n\nThe *RGB* components multiply by the {@link SpecularMaterial#diffuse} property,\nwhile the *A* component, if present, multiplies by the {@link SpecularMaterial#alpha} property.",
    "lineNumber": 458,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "diffuseMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1877,
    "kind": "set",
    "name": "specular",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#specular",
    "access": "public",
    "description": "RGB specular color of this SpecularMaterial.\n\nMultiplies by the {@link SpecularMaterial#specularMap}\nand the *A* component of {@link SpecularMaterial#specularGlossinessMap}.",
    "lineNumber": 472,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1.0, 1.0, 1.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "specular",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1878,
    "kind": "get",
    "name": "specular",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#specular",
    "access": "public",
    "description": null,
    "lineNumber": 491,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1879,
    "kind": "get",
    "name": "specularMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#specularMap",
    "access": "public",
    "description": "RGB texture containing the specular color of this SpecularMaterial.\n\nMultiplies by the {@link SpecularMaterial#specular} property.",
    "lineNumber": 505,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "specularMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1880,
    "kind": "get",
    "name": "specularGlossinessMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#specularGlossinessMap",
    "access": "public",
    "description": "RGBA texture containing this SpecularMaterial's specular color in its *RGB* components and glossiness in its *A* component.\n\nThe *RGB* components multiply by the {@link SpecularMaterial#specular} property, while\nthe *A* component multiplies by the {@link SpecularMaterial#glossiness} property.",
    "lineNumber": 520,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "specularGlossinessMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1881,
    "kind": "set",
    "name": "glossiness",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#glossiness",
    "access": "public",
    "description": "Factor in the range [0..1] indicating how glossy this SpecularMaterial is.\n\n0 is no glossiness, 1 is full glossiness.\n\nMultiplies by the *R* component of {@link SpecularMaterial#glossinessMap}\nand the *A* component of {@link SpecularMaterial#specularGlossinessMap}.",
    "lineNumber": 536,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "glossiness",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1882,
    "kind": "get",
    "name": "glossiness",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#glossiness",
    "access": "public",
    "description": null,
    "lineNumber": 545,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1883,
    "kind": "get",
    "name": "glossinessMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#glossinessMap",
    "access": "public",
    "description": "RGB texture containing this SpecularMaterial's glossiness in its *R* component.\n\nThe *R* component multiplies by the {@link SpecularMaterial#glossiness} property.\n\nMust be within the same {@link Scene} as this SpecularMaterial.",
    "lineNumber": 561,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "glossinessMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1884,
    "kind": "set",
    "name": "specularF0",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#specularF0",
    "access": "public",
    "description": "Factor in the range [0..1] indicating amount of specular Fresnel.",
    "lineNumber": 572,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "specularF0",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1885,
    "kind": "get",
    "name": "specularF0",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#specularF0",
    "access": "public",
    "description": null,
    "lineNumber": 581,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1886,
    "kind": "set",
    "name": "emissive",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#emissive",
    "access": "public",
    "description": "RGB emissive color of this SpecularMaterial.\n\nMultiplies by {@link SpecularMaterial#emissiveMap}.",
    "lineNumber": 594,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.0, 0.0, 0.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "emissive",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1887,
    "kind": "get",
    "name": "emissive",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#emissive",
    "access": "public",
    "description": null,
    "lineNumber": 613,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1888,
    "kind": "get",
    "name": "emissiveMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#emissiveMap",
    "access": "public",
    "description": "RGB texture containing the emissive color of this SpecularMaterial.\n\nMultiplies by the {@link SpecularMaterial#emissive} property.",
    "lineNumber": 627,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "emissiveMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1889,
    "kind": "set",
    "name": "alpha",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#alpha",
    "access": "public",
    "description": "Factor in the range [0..1] indicating how transparent this SpecularMaterial is.\n\nA value of 0.0 is fully transparent, while 1.0 is fully opaque.\n\nMultiplies by the *R* component of {@link SpecularMaterial#alphaMap} and\nthe *A* component, if present, of {@link SpecularMaterial#diffuseMap}.",
    "lineNumber": 643,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alpha",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1890,
    "kind": "get",
    "name": "alpha",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#alpha",
    "access": "public",
    "description": null,
    "lineNumber": 652,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1891,
    "kind": "get",
    "name": "alphaMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#alphaMap",
    "access": "public",
    "description": "RGB {@link Texture} with alpha in its *R* component.\n\nThe *R* component multiplies by the {@link SpecularMaterial#alpha} property.",
    "lineNumber": 666,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alphaMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1892,
    "kind": "get",
    "name": "normalMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#normalMap",
    "access": "public",
    "description": "RGB tangent-space normal {@link Texture} attached to this SpecularMaterial.",
    "lineNumber": 678,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "normalMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1893,
    "kind": "get",
    "name": "occlusionMap",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#occlusionMap",
    "access": "public",
    "description": "RGB ambient occlusion {@link Texture} attached to this SpecularMaterial.\n\nWithin objectRenderers, multiplies by the specular and diffuse light reflected by surfaces.",
    "lineNumber": 692,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "undefined"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "occlusionMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Texture"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1894,
    "kind": "set",
    "name": "alphaMode",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#alphaMode",
    "access": "public",
    "description": "The alpha rendering mode.\n\nThis governs how alpha is treated. Alpha is the combined result of the\n{@link SpecularMaterial#alpha} and\n{@link SpecularMaterial#alphaMap} properties.\n\n\"opaque\" - The alpha value is ignored and the rendered output is fully opaque.\n\"mask\" - The rendered output is either fully opaque or fully transparent depending on the alpha value and the specified alpha cutoff value.\n\"blend\" - The alpha value is used to composite the source and destination areas. The rendered output is combined with the background using the normal painting operation (i.e. the Porter and Duff over operator)",
    "lineNumber": 711,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"opaque\""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alphaMode",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1895,
    "kind": "get",
    "name": "alphaMode",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#alphaMode",
    "access": "public",
    "description": null,
    "lineNumber": 725,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1896,
    "kind": "set",
    "name": "alphaCutoff",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#alphaCutoff",
    "access": "public",
    "description": "The alpha cutoff value.\n\nSpecifies the cutoff threshold when {@link SpecularMaterial#alphaMode}\nequals \"mask\". If the alpha is greater than or equal to this value then it is rendered as fully\nopaque, otherwise, it is rendered as fully transparent. A value greater than 1.0 will render the entire\nmaterial as fully transparent. This value is ignored for other modes.\n\nAlpha is the combined result of the\n{@link SpecularMaterial#alpha} and\n{@link SpecularMaterial#alphaMap} properties.",
    "lineNumber": 745,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0.5"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "alphaCutoff",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1897,
    "kind": "get",
    "name": "alphaCutoff",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#alphaCutoff",
    "access": "public",
    "description": null,
    "lineNumber": 755,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1898,
    "kind": "set",
    "name": "backfaces",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#backfaces",
    "access": "public",
    "description": "Whether backfaces are visible on attached {@link Mesh}es.\n\nThe backfaces will belong to {@link Geometry} compoents that are also attached to\nthe {@link Mesh}es.",
    "lineNumber": 769,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "backfaces",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1899,
    "kind": "get",
    "name": "backfaces",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#backfaces",
    "access": "public",
    "description": null,
    "lineNumber": 778,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1900,
    "kind": "set",
    "name": "frontface",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#frontface",
    "access": "public",
    "description": "Indicates the winding direction of front faces on attached {@link Mesh}es.\n\nThe faces will belong to {@link Geometry} components that are also attached to\nthe {@link Mesh}es.",
    "lineNumber": 792,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"ccw\""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "frontface",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1901,
    "kind": "get",
    "name": "frontface",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#frontface",
    "access": "public",
    "description": null,
    "lineNumber": 801,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1902,
    "kind": "set",
    "name": "lineWidth",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#lineWidth",
    "access": "public",
    "description": "The SpecularMaterial's line width.",
    "lineNumber": 812,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "lineWidth",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1903,
    "kind": "get",
    "name": "lineWidth",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#lineWidth",
    "access": "public",
    "description": null,
    "lineNumber": 817,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1904,
    "kind": "set",
    "name": "pointSize",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#pointSize",
    "access": "public",
    "description": "The SpecularMaterial's point size.",
    "lineNumber": 828,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pointSize",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1905,
    "kind": "get",
    "name": "pointSize",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#pointSize",
    "access": "public",
    "description": null,
    "lineNumber": 833,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1906,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/materials/SpecularMaterial.js~SpecularMaterial",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/SpecularMaterial.js~SpecularMaterial#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 837,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1907,
    "kind": "file",
    "name": "scene/materials/Texture.js",
    "content": "/**\n A **Texture** specifies a texture map.\n\n ## Overview\n\n * Textures are grouped within {@link Material\"}}Materials{{/crossLink}}, which are attached to\n {@link Mesh}es.\n * To create a Texture from an image file, set the Texture's {@link Texture/src}\n property to the image file path.\n * To create a Texture from an HTMLImageElement, set the Texture's {@link Texture/image}\n property to the HTMLImageElement.\n\n ## Examples\n\n * [Textures on MetallicMaterials](../../examples/#materials_metallic_textures)\n * [Textures on SpecularMaterials](../../examples/#materials_specGloss_textures)\n * [Textures on PhongMaterials](../../examples/#materials_phong_textures)\n * [Video texture](../../examples/#materials_phong_textures_video)\n\n ## Usage\n\n In this example we have a Mesh with\n\n * a {@link PhongMaterial} which applies diffuse and specular {@link Texture}, and\n * a {@link TorusGeometry}.\n\n Note that xeokit will ignore the {@link PhongMaterial\"}}PhongMaterial's{{/crossLink}} {@link PhongMaterial/diffuse}\n and {@link PhongMaterial/specular} properties, since we assigned {@link Texture} to the {@link PhongMaterial\"}}PhongMaterial's{{/crossLink}} {@link PhongMaterial/diffuseMap} and\n {@link PhongMaterial/specularMap} properties. The {@link Texture\"}}Textures'{{/crossLink}} pixel\n colors directly provide the diffuse and specular components for each fragment across the {@link Geometry} surface.\n\n ```` javascript\n var mesh = new xeokit.Mesh({\n\n    material: new xeokit.PhongMaterial({\n        ambient: [0.3, 0.3, 0.3],\n        diffuse: [0.5, 0.5, 0.0],   // Ignored, since we have assigned a Texture to diffuseMap, below\n        specular: [1.0, 1.0, 1.0],   // Ignored, since we have assigned a Texture to specularMap, below\n        diffuseMap: new xeokit.Texture({\n            src: \"diffuseMap.jpg\"\n        }),\n        specularMap: new xeokit.Fresnel({\n            src: \"diffuseMap.jpg\"\n        }),\n        shininess: 80, // Default\n        alpha: 1.0 // Default\n    }),\n\n    geometry: new xeokit.TorusGeometry()\n});\n ````\n\n @class Texture\n @module xeokit\n @submodule materials\n @constructor\n @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n @param {*} [cfg] Configs\n @param {String} [cfg.id] Optional ID for this Texture, unique among all components in the parent scene, generated automatically when omitted.\n @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this Texture.\n @param [cfg.src=null] {String} Path to image file to load into this Texture. See the {@link Texture/src} property for more info.\n @param [cfg.image=null] {HTMLImageElement} HTML Image object to load into this Texture. See the {@link Texture/image} property for more info.\n @param [cfg.minFilter=\"linearMipmapLinear\"] {String} How the texture is sampled when a texel covers less than one pixel. See the {@link Texture/minFilter} property for more info.\n @param [cfg.magFilter=\"linear\"] {String} How the texture is sampled when a texel covers more than one pixel. See the {@link Texture/magFilter} property for more info.\n @param [cfg.wrapS=\"repeat\"] {String} Wrap parameter for texture coordinate *S*. See the {@link Texture/wrapS} property for more info.\n @param [cfg.wrapT=\"repeat\"] {String} Wrap parameter for texture coordinate *S*. See the {@link Texture/wrapT} property for more info.\n @param [cfg.flipY=false] {Boolean} Flips this Texture's source data along its vertical axis when true.\n @param [cfg.translate=[0,0]] {Array of Number} 2D translation vector that will be added to texture's *S* and *T* coordinates.\n @param [cfg.scale=[1,1]] {Array of Number} 2D scaling vector that will be applied to texture's *S* and *T* coordinates.\n @param [cfg.rotate=0] {Number} Rotation, in degrees, that will be applied to texture's *S* and *T* coordinates.\n @param [cfg.encoding=\"linear\"] {String} Encoding format.  See the {@link Texture/encoding} property for more info.\n @extends Component\n */\nimport {Component} from '../Component.js';\nimport {RenderState} from '../webgl/RenderState.js';\nimport {Texture2D} from '../webgl/Texture2D.js';\nimport {math} from '../math/math.js';\nimport {stats} from './../stats.js';\n\n\nfunction ensureImageSizePowerOfTwo(image) {\n    if (!isPowerOfTwo(image.width) || !isPowerOfTwo(image.height)) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = nextHighestPowerOfTwo(image.width);\n        canvas.height = nextHighestPowerOfTwo(image.height);\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(image,\n            0, 0, image.width, image.height,\n            0, 0, canvas.width, canvas.height);\n        image = canvas;\n    }\n    return image;\n}\n\nfunction isPowerOfTwo(x) {\n    return (x & (x - 1)) === 0;\n}\n\nfunction nextHighestPowerOfTwo(x) {\n    --x;\n    for (let i = 1; i < 32; i <<= 1) {\n        x = x | x >> i;\n    }\n    return x + 1;\n}\n\nclass Texture extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Texture\";\n    }\n\n    constructor(owner, cfg={}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({\n            texture: new Texture2D(this.scene.canvas.gl),\n            matrix: math.identityMat4(),   // Float32Array\n            hasMatrix: (cfg.translate && (cfg.translate[0] !== 0 || cfg.translate[1] !== 0)) || (!!cfg.rotate) || (cfg.scale && (cfg.scale[0] !== 0 || cfg.scale[1] !== 0)),\n            minFilter: this._checkMinFilter(cfg.minFilter),\n            magFilter: this._checkMagFilter(cfg.magFilter),\n            wrapS: this._checkWrapS(cfg.wrapS),\n            wrapT: this._checkWrapT(cfg.wrapT),\n            flipY: this._checkFlipY(cfg.flipY),\n            encoding: this._checkEncoding(cfg.encoding)\n        });\n\n        // Data source\n\n        this._src = null;\n        this._image = null;\n\n        // Transformation\n\n        this._translate = math.vec2([0, 0]);\n        this._scale = math.vec2([1, 1]);\n        this._rotate = math.vec2([0, 0]);\n\n        this._matrixDirty = false;\n\n        // Transform\n\n        this.translate = cfg.translate;\n        this.scale = cfg.scale;\n        this.rotate = cfg.rotate;\n\n        // Data source\n\n        if (cfg.src) {\n            this.src = cfg.src; // Image file\n        } else if (cfg.image) {\n            this.image = cfg.image; // Image object\n        }\n\n        stats.memory.textures++;\n    }\n\n    _checkMinFilter(value) {\n        value = value || \"linearMipmapLinear\";\n        if (value !== \"linear\" &&\n            value !== \"linearMipmapNearest\" &&\n            value !== \"linearMipmapLinear\" &&\n            value !== \"nearestMipmapLinear\" &&\n            value !== \"nearestMipmapNearest\") {\n            this.error(\"Unsupported value for 'minFilter': '\" + value +\n                \"' - supported values are 'linear', 'linearMipmapNearest', 'nearestMipmapNearest', \" +\n                \"'nearestMipmapLinear' and 'linearMipmapLinear'. Defaulting to 'linearMipmapLinear'.\");\n            value = \"linearMipmapLinear\";\n        }\n        return value;\n    }\n\n    _checkMagFilter(value) {\n        value = value || \"linear\";\n        if (value !== \"linear\" && value !== \"nearest\") {\n            this.error(\"Unsupported value for 'magFilter': '\" + value +\n                \"' - supported values are 'linear' and 'nearest'. Defaulting to 'linear'.\");\n            value = \"linear\";\n        }\n        return value;\n    }\n\n    _checkFilter(value) {\n        value = value || \"linear\";\n        if (value !== \"linear\" && value !== \"nearest\") {\n            this.error(\"Unsupported value for 'magFilter': '\" + value +\n                \"' - supported values are 'linear' and 'nearest'. Defaulting to 'linear'.\");\n            value = \"linear\";\n        }\n        return value;\n    }\n\n    _checkWrapS(value) {\n        value = value || \"repeat\";\n        if (value !== \"clampToEdge\" && value !== \"mirroredRepeat\" && value !== \"repeat\") {\n            this.error(\"Unsupported value for 'wrapS': '\" + value +\n                \"' - supported values are 'clampToEdge', 'mirroredRepeat' and 'repeat'. Defaulting to 'repeat'.\");\n            value = \"repeat\";\n        }\n        return value;\n    }\n\n    _checkWrapT(value) {\n        value = value || \"repeat\";\n        if (value !== \"clampToEdge\" && value !== \"mirroredRepeat\" && value !== \"repeat\") {\n            this.error(\"Unsupported value for 'wrapT': '\" + value +\n                \"' - supported values are 'clampToEdge', 'mirroredRepeat' and 'repeat'. Defaulting to 'repeat'.\");\n            value = \"repeat\";\n        }\n        return value;\n    }\n\n    _checkFlipY(value) {\n        return !!value;\n    }\n\n    _checkEncoding(value) {\n        value = value || \"linear\";\n        if (value !== \"linear\" && value !== \"sRGB\" && value !== \"gamma\") {\n            this.error(\"Unsupported value for 'encoding': '\" + value + \"' - supported values are 'linear', 'sRGB', 'gamma'. Defaulting to 'linear'.\");\n            value = \"linear\";\n        }\n        return value;\n    }\n\n    _webglContextRestored() {\n        this._state.texture = new Texture2D(this.scene.canvas.gl);\n        if (this._image) {\n            this.image = this._image;\n        } else if (this._src) {\n            this.src = this._src;\n        }\n    }\n\n    _update() {\n        const state = this._state;\n        if (this._matrixDirty) {\n            let matrix;\n            let t;\n            if (this._translate[0] !== 0 || this._translate[1] !== 0) {\n                matrix = math.translationMat4v([this._translate[0], this._translate[1], 0], this._state.matrix);\n            }\n            if (this._scale[0] !== 1 || this._scale[1] !== 1) {\n                t = math.scalingMat4v([this._scale[0], this._scale[1], 1]);\n                matrix = matrix ? math.mulMat4(matrix, t) : t;\n            }\n            if (this._rotate !== 0) {\n                t = math.rotationMat4v(this._rotate * 0.0174532925, [0, 0, 1]);\n                matrix = matrix ? math.mulMat4(matrix, t) : t;\n            }\n            if (matrix) {\n                state.matrix = matrix;\n            }\n            this._matrixDirty = false;\n        }\n        this.glRedraw();\n    }\n\n\n    /**\n     Indicates an HTML DOM Image object to source this Texture from.\n\n     Sets the {@link Texture/src} property to null.\n\n     @property image\n     @default null\n     @type {HTMLImageElement}\n     */\n    set image(value) {\n        this._image = ensureImageSizePowerOfTwo(value);\n        this._image.crossOrigin = \"Anonymous\";\n        this._state.texture.setImage(this._image, this._state);\n        this._state.texture.setProps(this._state); // Generate mipmaps\n        this._src = null;\n        this.glRedraw();\n    }\n\n    get image() {\n        return this._image;\n    }\n\n    /**\n     Indicates a path to an image file to source this Texture from.\n\n     Sets the {@link Texture/image} property to null.\n\n     @property src\n     @default null\n     @type String\n     */\n    set src(src) {\n        this.scene.loading++;\n        this.scene.canvas.spinner.processes++;\n        const self = this;\n        let image = new Image();\n        image.onload = function () {\n            image = ensureImageSizePowerOfTwo(image);\n            //self._image = image; // For faster WebGL context restore - memory inefficient?\n            self._state.texture.setImage(image, self._state);\n            self._state.texture.setProps(self._state); // Generate mipmaps\n            self.scene.loading--;\n            self.scene.canvas.spinner.processes--;\n            self.glRedraw();\n        };\n        image.src = src;\n        this._src = src;\n        this._image = null;\n    }\n\n    get src() {\n        return this._src;\n    }\n\n    /**\n     2D translation vector that will be added to this Texture's *S* and *T* coordinates.\n\n     @property translate\n     @default [0, 0]\n     @type Array(Number)\n     */\n    set translate(value) {\n        this._translate.set(value || [0, 0]);\n        this._matrixDirty = true;\n        this._needUpdate();\n    }\n\n    get translate() {\n        return this._translate;\n    }\n\n    /**\n     2D scaling vector that will be applied to this Texture's *S* and *T* coordinates.\n\n     @property scale\n     @default [1, 1]\n     @type Array(Number)\n     */\n    set scale(value) {\n        this._scale.set(value || [1, 1]);\n        this._matrixDirty = true;\n        this._needUpdate();\n    }\n\n    get scale() {\n        return this._scale;\n    }\n\n    /**\n     Rotation, in degrees, that will be applied to this Texture's *S* and *T* coordinates.\n\n     @property rotate\n     @default 0\n     @type Number\n     */\n    set rotate(value) {\n        value = value || 0;\n        if (this._rotate === value) {\n            return;\n        }\n        this._rotate = value;\n        this._matrixDirty = true;\n        this._needUpdate();\n    }\n\n    get rotate() {\n        return this._rotate;\n    }\n\n    /**\n     How this Texture is sampled when a texel covers less than one pixel.\n\n     Options are:\n\n     * **\"nearest\"** - Uses the value of the texture element that is nearest\n     (in Manhattan distance) to the center of the pixel being textured.\n\n     * **\"linear\"** - Uses the weighted average of the four texture elements that are\n     closest to the center of the pixel being textured.\n\n     * **\"nearestMipmapNearest\"** - Chooses the mipmap that most closely matches the\n     size of the pixel being textured and uses the \"nearest\" criterion (the texture\n     element nearest to the center of the pixel) to produce a texture value.\n\n     * **\"linearMipmapNearest\"** - Chooses the mipmap that most closely matches the size of\n     the pixel being textured and uses the \"linear\" criterion (a weighted average of the\n     four texture elements that are closest to the center of the pixel) to produce a\n     texture value.\n\n     * **\"nearestMipmapLinear\"** - Chooses the two mipmaps that most closely\n     match the size of the pixel being textured and uses the \"nearest\" criterion\n     (the texture element nearest to the center of the pixel) to produce a texture\n     value from each mipmap. The final texture value is a weighted average of those two\n     values.\n\n     * **\"linearMipmapLinear\"** - **(default)** - Chooses the two mipmaps that most closely match the size\n     of the pixel being textured and uses the \"linear\" criterion (a weighted average\n     of the four texture elements that are closest to the center of the pixel) to\n     produce a texture value from each mipmap. The final texture value is a weighted\n     average of those two values.\n\n     @property minFilter\n     @default \"linearMipmapLinear\"\n     @type String\n     @final\n     */\n    get minFilter() {\n        return this._state.minFilter;\n    }\n\n    /**\n     How this Texture is sampled when a texel covers more than one pixel.\n\n     Options are:\n\n     * **\"nearest\"** - Uses the value of the texture element that is nearest\n     (in Manhattan distance) to the center of the pixel being textured.\n     * **\"linear\"** - **(default)** - Uses the weighted average of the four texture elements that are\n     closest to the center of the pixel being textured.\n\n     @property magFilter\n     @default \"linear\"\n     @type String\n     @final\n     */\n    get magFilter() {\n        return this._state.magFilter;\n    }\n\n    /**\n     Wrap parameter for this Texture's *S* coordinate.\n\n     Options are:\n\n     * **\"clampToEdge\"** -  causes *S* coordinates to be clamped to the size of the texture.\n     * **\"mirroredRepeat\"** - causes the *S* coordinate to be set to the fractional part of the texture coordinate\n     if the integer part of *S* is even; if the integer part of *S* is odd, then the *S* texture coordinate is\n     set to *1 - frac ⁡ S* , where *frac ⁡ S* represents the fractional part of *S*.\n     * **\"repeat\"** - **(default)** - causes the integer part of the *S* coordinate to be ignored; xeokit uses only the\n     fractional part, thereby creating a repeating pattern.\n\n     @property wrapS\n     @default \"repeat\"\n     @type String\n     @final\n     */\n    get wrapS() {\n        return this._state.wrapS;\n    }\n\n    /**\n     Wrap parameter for this Texture's *T* coordinate.\n\n     Options are:\n\n     * **\"clampToEdge\"** -  Causes *T* coordinates to be clamped to the size of the texture.\n     * **\"mirroredRepeat\"** - Causes the *T* coordinate to be set to the fractional part of the texture coordinate\n     if the integer part of *T* is even; if the integer part of *T* is odd, then the *T* texture coordinate is\n     set to *1 - frac ⁡ S* , where *frac ⁡ S* represents the fractional part of *T*.\n     * **\"repeat\"** - **(default)** - Causes the integer part of the *T* coordinate to be ignored; xeokit uses only the\n     fractional part, thereby creating a repeating pattern.\n\n     @property wrapT\n     @default \"repeat\"\n     @type String\n     @final\n     */\n    get wrapT() {\n        return this._state.wrapT;\n    }\n\n    /**\n     Flips this Texture's source data along its vertical axis when true.\n\n     @property flipY\n     @type Boolean\n     @final\n     */\n    get flipY() {\n        return this._state.flipY;\n    }\n\n    /**\n     The Texture's encoding format.\n\n     @property encoding\n     @type String\n     @final\n     */\n    get encoding() {\n        return this._state.encoding;\n    }\n\n    destroy() {\n        super.destroy();\n        if (this._state.texture) {\n            this._state.texture.destroy();\n        }\n        this._state.destroy();\n        stats.memory.textures--;\n    }\n}\n\nexport {Texture};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/materials/Texture.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1908,
    "kind": "function",
    "name": "ensureImageSizePowerOfTwo",
    "memberof": "scene/materials/Texture.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/materials/Texture.js~ensureImageSizePowerOfTwo",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/materials/Texture.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "image",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1909,
    "kind": "function",
    "name": "isPowerOfTwo",
    "memberof": "scene/materials/Texture.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/materials/Texture.js~isPowerOfTwo",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/materials/Texture.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 95,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1910,
    "kind": "function",
    "name": "nextHighestPowerOfTwo",
    "memberof": "scene/materials/Texture.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/materials/Texture.js~nextHighestPowerOfTwo",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/materials/Texture.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1911,
    "kind": "class",
    "name": "Texture",
    "memberof": "scene/materials/Texture.js",
    "static": true,
    "longname": "scene/materials/Texture.js~Texture",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/materials/Texture.js",
    "importStyle": "{Texture}",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 1912,
    "kind": "get",
    "name": "type",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 118,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1913,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 122,
    "undocument": true
  },
  {
    "__docId__": 1914,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/materials/Texture.js~Texture",
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_state",
    "access": "private",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1915,
    "kind": "member",
    "name": "_src",
    "memberof": "scene/materials/Texture.js~Texture",
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_src",
    "access": "private",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1916,
    "kind": "member",
    "name": "_image",
    "memberof": "scene/materials/Texture.js~Texture",
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_image",
    "access": "private",
    "description": null,
    "lineNumber": 141,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1917,
    "kind": "member",
    "name": "_translate",
    "memberof": "scene/materials/Texture.js~Texture",
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_translate",
    "access": "private",
    "description": null,
    "lineNumber": 145,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1918,
    "kind": "member",
    "name": "_scale",
    "memberof": "scene/materials/Texture.js~Texture",
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_scale",
    "access": "private",
    "description": null,
    "lineNumber": 146,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1919,
    "kind": "member",
    "name": "_rotate",
    "memberof": "scene/materials/Texture.js~Texture",
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_rotate",
    "access": "private",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1920,
    "kind": "member",
    "name": "_matrixDirty",
    "memberof": "scene/materials/Texture.js~Texture",
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_matrixDirty",
    "access": "private",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1926,
    "kind": "method",
    "name": "_checkMinFilter",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_checkMinFilter",
    "access": "private",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1927,
    "kind": "method",
    "name": "_checkMagFilter",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_checkMagFilter",
    "access": "private",
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1928,
    "kind": "method",
    "name": "_checkFilter",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_checkFilter",
    "access": "private",
    "description": null,
    "lineNumber": 193,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1929,
    "kind": "method",
    "name": "_checkWrapS",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_checkWrapS",
    "access": "private",
    "description": null,
    "lineNumber": 203,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1930,
    "kind": "method",
    "name": "_checkWrapT",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_checkWrapT",
    "access": "private",
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1931,
    "kind": "method",
    "name": "_checkFlipY",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_checkFlipY",
    "access": "private",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1932,
    "kind": "method",
    "name": "_checkEncoding",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_checkEncoding",
    "access": "private",
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1933,
    "kind": "method",
    "name": "_webglContextRestored",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_webglContextRestored",
    "access": "private",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1936,
    "kind": "method",
    "name": "_update",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#_update",
    "access": "private",
    "description": null,
    "lineNumber": 245,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1938,
    "kind": "set",
    "name": "image",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#image",
    "access": "public",
    "description": "Indicates an HTML DOM Image object to source this Texture from.\n\nSets the {@link Texture/src} property to null.",
    "lineNumber": 279,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "null"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "image",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "HTMLImageElement"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1941,
    "kind": "get",
    "name": "image",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#image",
    "access": "public",
    "description": null,
    "lineNumber": 288,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1942,
    "kind": "set",
    "name": "src",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#src",
    "access": "public",
    "description": "Indicates a path to an image file to source this Texture from.\n\nSets the {@link Texture/image} property to null.",
    "lineNumber": 301,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "null"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "src",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1945,
    "kind": "get",
    "name": "src",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#src",
    "access": "public",
    "description": null,
    "lineNumber": 320,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1946,
    "kind": "set",
    "name": "translate",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#translate",
    "access": "public",
    "description": "2D translation vector that will be added to this Texture's *S* and *T* coordinates.",
    "lineNumber": 331,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0, 0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "translate",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1948,
    "kind": "get",
    "name": "translate",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#translate",
    "access": "public",
    "description": null,
    "lineNumber": 337,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1949,
    "kind": "set",
    "name": "scale",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#scale",
    "access": "public",
    "description": "2D scaling vector that will be applied to this Texture's *S* and *T* coordinates.",
    "lineNumber": 348,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1, 1]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "scale",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1951,
    "kind": "get",
    "name": "scale",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#scale",
    "access": "public",
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1952,
    "kind": "set",
    "name": "rotate",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#rotate",
    "access": "public",
    "description": "Rotation, in degrees, that will be applied to this Texture's *S* and *T* coordinates.",
    "lineNumber": 365,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rotate",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1955,
    "kind": "get",
    "name": "rotate",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#rotate",
    "access": "public",
    "description": null,
    "lineNumber": 375,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1956,
    "kind": "get",
    "name": "minFilter",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#minFilter",
    "access": "public",
    "description": "How this Texture is sampled when a texel covers less than one pixel.\n\nOptions are:\n\n**\"nearest\"** - Uses the value of the texture element that is nearest\n(in Manhattan distance) to the center of the pixel being textured.\n\n**\"linear\"** - Uses the weighted average of the four texture elements that are\nclosest to the center of the pixel being textured.\n\n**\"nearestMipmapNearest\"** - Chooses the mipmap that most closely matches the\nsize of the pixel being textured and uses the \"nearest\" criterion (the texture\nelement nearest to the center of the pixel) to produce a texture value.\n\n**\"linearMipmapNearest\"** - Chooses the mipmap that most closely matches the size of\nthe pixel being textured and uses the \"linear\" criterion (a weighted average of the\nfour texture elements that are closest to the center of the pixel) to produce a\ntexture value.\n\n**\"nearestMipmapLinear\"** - Chooses the two mipmaps that most closely\nmatch the size of the pixel being textured and uses the \"nearest\" criterion\n(the texture element nearest to the center of the pixel) to produce a texture\nvalue from each mipmap. The final texture value is a weighted average of those two\nvalues.\n\n**\"linearMipmapLinear\"** - **(default)** - Chooses the two mipmaps that most closely match the size\nof the pixel being textured and uses the \"linear\" criterion (a weighted average\nof the four texture elements that are closest to the center of the pixel) to\nproduce a texture value from each mipmap. The final texture value is a weighted\naverage of those two values.",
    "lineNumber": 416,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"linearMipmapLinear\""
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "minFilter",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1957,
    "kind": "get",
    "name": "magFilter",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#magFilter",
    "access": "public",
    "description": "How this Texture is sampled when a texel covers more than one pixel.\n\nOptions are:\n\n**\"nearest\"** - Uses the value of the texture element that is nearest\n(in Manhattan distance) to the center of the pixel being textured.\n**\"linear\"** - **(default)** - Uses the weighted average of the four texture elements that are\nclosest to the center of the pixel being textured.",
    "lineNumber": 435,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"linear\""
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "magFilter",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1958,
    "kind": "get",
    "name": "wrapS",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#wrapS",
    "access": "public",
    "description": "Wrap parameter for this Texture's *S* coordinate.\n\nOptions are:\n\n**\"clampToEdge\"** -  causes *S* coordinates to be clamped to the size of the texture.\n**\"mirroredRepeat\"** - causes the *S* coordinate to be set to the fractional part of the texture coordinate\nif the integer part of *S* is even; if the integer part of *S* is odd, then the *S* texture coordinate is\nset to *1 - frac ⁡ S* , where *frac ⁡ S* represents the fractional part of *S*.\n**\"repeat\"** - **(default)** - causes the integer part of the *S* coordinate to be ignored; xeokit uses only the\nfractional part, thereby creating a repeating pattern.",
    "lineNumber": 456,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"repeat\""
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "wrapS",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1959,
    "kind": "get",
    "name": "wrapT",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#wrapT",
    "access": "public",
    "description": "Wrap parameter for this Texture's *T* coordinate.\n\nOptions are:\n\n**\"clampToEdge\"** -  Causes *T* coordinates to be clamped to the size of the texture.\n**\"mirroredRepeat\"** - Causes the *T* coordinate to be set to the fractional part of the texture coordinate\nif the integer part of *T* is even; if the integer part of *T* is odd, then the *T* texture coordinate is\nset to *1 - frac ⁡ S* , where *frac ⁡ S* represents the fractional part of *T*.\n**\"repeat\"** - **(default)** - Causes the integer part of the *T* coordinate to be ignored; xeokit uses only the\nfractional part, thereby creating a repeating pattern.",
    "lineNumber": 477,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"repeat\""
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "wrapT",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1960,
    "kind": "get",
    "name": "flipY",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#flipY",
    "access": "public",
    "description": "Flips this Texture's source data along its vertical axis when true.",
    "lineNumber": 488,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "flipY",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1961,
    "kind": "get",
    "name": "encoding",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#encoding",
    "access": "public",
    "description": "The Texture's encoding format.",
    "lineNumber": 499,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "encoding",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 1962,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/materials/Texture.js~Texture",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/materials/Texture.js~Texture#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 503,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 1963,
    "kind": "file",
    "name": "scene/math/buildEdges.js",
    "content": "import {math} from '../math/math.js';\n\n/**\n * @private\n */\nvar buildEdgeIndices = (function () {\n\n    const uniquePositions = [];\n    const indicesLookup = [];\n    const indicesReverseLookup = [];\n    const weldedIndices = [];\n\n// TODO: Optimize with caching, but need to cater to both compressed and uncompressed positions\n\n    const faces = [];\n    let numFaces = 0;\n    const compa = new Uint16Array(3);\n    const compb = new Uint16Array(3);\n    const compc = new Uint16Array(3);\n    const a = math.vec3();\n    const b = math.vec3();\n    const c = math.vec3();\n    const cb = math.vec3();\n    const ab = math.vec3();\n    const cross = math.vec3();\n    const normal = math.vec3();\n\n    function weldVertices(positions, indices) {\n        const positionsMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n        let vx;\n        let vy;\n        let vz;\n        let key;\n        const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n        const precision = Math.pow(10, precisionPoints);\n        let i;\n        let len;\n        let lenUniquePositions = 0;\n        for (i = 0, len = positions.length; i < len; i += 3) {\n            vx = positions[i];\n            vy = positions[i + 1];\n            vz = positions[i + 2];\n            key = Math.round(vx * precision) + '_' + Math.round(vy * precision) + '_' + Math.round(vz * precision);\n            if (positionsMap[key] === undefined) {\n                positionsMap[key] = lenUniquePositions / 3;\n                uniquePositions[lenUniquePositions++] = vx;\n                uniquePositions[lenUniquePositions++] = vy;\n                uniquePositions[lenUniquePositions++] = vz;\n            }\n            indicesLookup[i / 3] = positionsMap[key];\n        }\n        for (i = 0, len = indices.length; i < len; i++) {\n            weldedIndices[i] = indicesLookup[indices[i]];\n            indicesReverseLookup[weldedIndices[i]] = indices[i];\n        }\n    }\n\n    function buildFaces(numIndices, positionsDecodeMatrix) {\n        numFaces = 0;\n        for (let i = 0, len = numIndices; i < len; i += 3) {\n            const ia = ((weldedIndices[i]) * 3);\n            const ib = ((weldedIndices[i + 1]) * 3);\n            const ic = ((weldedIndices[i + 2]) * 3);\n            if (positionsDecodeMatrix) {\n                compa[0] = uniquePositions[ia];\n                compa[1] = uniquePositions[ia + 1];\n                compa[2] = uniquePositions[ia + 2];\n                compb[0] = uniquePositions[ib];\n                compb[1] = uniquePositions[ib + 1];\n                compb[2] = uniquePositions[ib + 2];\n                compc[0] = uniquePositions[ic];\n                compc[1] = uniquePositions[ic + 1];\n                compc[2] = uniquePositions[ic + 2];\n                // Decode\n                math.decompressPosition(compa, positionsDecodeMatrix, a);\n                math.decompressPosition(compb, positionsDecodeMatrix, b);\n                math.decompressPosition(compc, positionsDecodeMatrix, c);\n            } else {\n                a[0] = uniquePositions[ia];\n                a[1] = uniquePositions[ia + 1];\n                a[2] = uniquePositions[ia + 2];\n                b[0] = uniquePositions[ib];\n                b[1] = uniquePositions[ib + 1];\n                b[2] = uniquePositions[ib + 2];\n                c[0] = uniquePositions[ic];\n                c[1] = uniquePositions[ic + 1];\n                c[2] = uniquePositions[ic + 2];\n            }\n            math.subVec3(c, b, cb);\n            math.subVec3(a, b, ab);\n            math.cross3Vec3(cb, ab, cross);\n            math.normalizeVec3(cross, normal);\n            const face = faces[numFaces] || (faces[numFaces] = {normal: math.vec3()});\n            face.normal[0] = normal[0];\n            face.normal[1] = normal[1];\n            face.normal[2] = normal[2];\n            numFaces++;\n        }\n    }\n\n    return function (positions, indices, positionsDecodeMatrix, edgeThreshold, combineGeometry = false) {\n        weldVertices(positions, indices);\n        buildFaces(indices.length, positionsDecodeMatrix);\n        const edgeIndices = [];\n        const thresholdDot = Math.cos(math.DEGTORAD * edgeThreshold);\n        const edges = {};\n        let edge1;\n        let edge2;\n        let index1;\n        let index2;\n        let key;\n        let largeIndex = false;\n        let edge;\n        let normal1;\n        let normal2;\n        let dot;\n        let ia;\n        let ib;\n        for (let i = 0, len = indices.length; i < len; i += 3) {\n            const faceIndex = i / 3;\n            for (let j = 0; j < 3; j++) {\n                edge1 = weldedIndices[i + j];\n                edge2 = weldedIndices[i + ((j + 1) % 3)];\n                index1 = Math.min(edge1, edge2);\n                index2 = Math.max(edge1, edge2);\n                key = index1 + \",\" + index2;\n                if (edges[key] === undefined) {\n                    edges[key] = {\n                        index1: index1,\n                        index2: index2,\n                        face1: faceIndex,\n                        face2: undefined\n                    };\n                } else {\n                    edges[key].face2 = faceIndex;\n                }\n            }\n        }\n        for (key in edges) {\n            edge = edges[key];\n            // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n            if (edge.face2 !== undefined) {\n                normal1 = faces[edge.face1].normal;\n                normal2 = faces[edge.face2].normal;\n                dot = math.dotVec3(normal1, normal2);\n                if (dot > thresholdDot) {\n                    continue;\n                }\n            }\n            ia = indicesReverseLookup[edge.index1];\n            ib = indicesReverseLookup[edge.index2];\n            if (!largeIndex && ia > 65535 || ib > 65535) {\n                largeIndex = true;\n            }\n            edgeIndices.push(ia);\n            edgeIndices.push(ib);\n        }\n        return (largeIndex || combineGeometry) ? new Uint32Array(edgeIndices) : new Uint16Array(edgeIndices);\n    };\n})();\n\nexport {buildEdgeIndices};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/math/buildEdges.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1964,
    "kind": "variable",
    "name": "buildEdgeIndices",
    "memberof": "scene/math/buildEdges.js",
    "static": true,
    "longname": "scene/math/buildEdges.js~buildEdgeIndices",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/math/buildEdges.js",
    "importStyle": "{buildEdgeIndices}",
    "description": "",
    "lineNumber": 6,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1965,
    "kind": "file",
    "name": "scene/math/math.js",
    "content": "// Some temporary vars to help avoid garbage collection\n\nconst tempMat1 = new Float32Array(16);\nconst tempMat2 = new Float32Array(16);\nconst tempVec4 = new Float32Array(4);\n\nlet caching = false;\nconst vec3Cache = [];\nlet vec3CacheLen = 0;\n\n/**\n * @private\n * @type {{transformPositions4(*, *, *=): *, transformPositions3(*, *, *=): *, frustumMat4(*, *, *, *, *, *, *=): *, divVec3Scalar(*, *, *=): *[], cartesianToBarycentric: *, faceToVertexNormals(*, *, *=): {positions: Array, normals: *}, b2(*=, *=, *=, *=): *, b3(*=, *=, *=, *=, *=): *, lookAtMat4c(*, *, *, *, *, *, *, *, *): *, mat3ToMat4(*, *=): Float32Array, barycentricToCartesian(*, *, *, *, *=): *, transposeMat4(*, *=): (*|*), transposeMat3(*, *): *, rotateVec3Z(Float32Array, Float32Array, Number, Float32Array): Float32Array, rayTriangleIntersect: *, buildPickTriangles(*, *, *): *, projectVec4(Float32Array, Float32Array): Float32Array, setMat4ToOnes(): *, mulMat4v4(*, *, *=): *, addVec3Scalar(*, Number, *=): *, mulVec4Scalar(*, Number, *=): *, AABB3ToOBB3(*, *=): *, tangentQuadraticBezier3(*, *, *, *, *): *, composeMat4(*=, *=, *=, *=): *, catmullRomInterpolate(*, *, *, *, *): *, getAABB3Center(*, *=): *, getAABB3DiagPoint: *, expandAABB3Point3(*, *): *, MIN_DOUBLE: number, mulMat4Scalar(*, *, *=): *, negateVec4(*, *=): *, rotationTranslationMat4(Float32Array, Float32Array, Float32Array=): Float32Array, getAABB2Center(*, *=): *, collapseAABB3(*=): *, collapseAABB2(*=): *, getSphere3Center(*, *=): *, AABB2(*=): *, AABB3(*=): *, quaternionToMat4(*, *=): *, expandAABB3Points3(*, *): *, expandAABB2Point2(*, *): *, addScalarMat4(*=, *=, *=): *, mat4ToMat3(*, *): Float32Array, identityMat4(*=): *, identityMat3(*=): *, orthoMat4c(*, *, *, *, *, *, *=): *, tangentQuadraticBezier(*, *, *, *): *, addVec4Scalar(*, Number, *=): *, mergeVertices(*, *=, *=, *): {positions: Array, indices: Array}, traceMat4(*): *, divVec4(*, *, *=): *, divVec3(*, *, *=): *, addMat4(*, *, *=): *, dupMat4(*): *, sqLenVec2(*=): *, sqLenVec3(*=): *, sqLenVec4(*=): *, vec3FromMat4Scale: *, canvasPosToLocalRay: *, scalingMat4c: *, divVec4Scalar(*, *, *=): *[], scalingMat4s(*=): *, conjugateQuaternion(*, *=): *, OBB3ToSphere3: *, scalingMat4v(*, *=): *, divScalarVec3(*, *, *=): *[], divScalarVec4(*, *, *=): *[], triangleNormal(*, *, *, *=): *, xyzArrayToObject(*): {x: *, y: *, z: *}, DEGTORAD: number, cacheVec3(*=): *, cacheVec4(*=): *, distVec2: *, distVec3: *, mulVec4(*, *, *=): *, mat4ToEuler(Float32Array, String, Float32Array=): Float32Array, scalingMat3v(*, *=): *, determinantMat4(*): *, octDecodeVec2s(*, *): *, rayPlaneIntersect: *, mat3(*=): Float32Array, decompressPosition(*, *, *): void, setMat4ToZeroes(): *, rotateVec3Y(Float32Array, Float32Array, Number, Float32Array): Float32Array, rotateVec3X(Float32Array, Float32Array, Number, Float32Array): Float32Array, mat4(*=): Float32Array, addVec3(*, *, *=): *, points3ToAABB3(*, *=): *, addVec4(*, *, *=): *, fmod(Number, Number): *, subMat4Scalar(*, *, *=): *, transformVec3(*, *, *=): *, subScalarMat4(*, *, *=): *, transformVec4(*, *, *=): *, inverseMat4(*, *=): *, rotationMat4c(*=, *, *, *, *=): *, addMat4Scalar(*, *, *=): *, vec4(*=): Float32Array, transformOBB3(*, *, *=): *, decompressPositions(*, *, *=): *, clamp(Number, Number, Number): Number, subVec4(*, *, *=): *, mat4ToQuaternion(*, *=): *, vec3(*=): Float32Array, vec2(*=): Float32Array, createUUID: string, inverseQuaternion(*=, *=): *, getAABB3Diag: *, transformPoints3(*, *, *=): *, translationMat3v(*, *=): *, diagonalMat4c(*, *, *, *): *, scaleMat4c(*, *, *, *): *, translationMat4c: *, scaleMat4v(*, *): *, expandAABB2(*, *): *, expandAABB3(*, *): *, barycentricInsideTriangle(*): *, worldRayToLocalRay: *, decompressUV(*, *, *): void, translationMat4v(*, *=): *, OBB3(*=): *, rotationMat4v(*=, *, *=): *, lenVec2(*=): The, lenVec4(*=): The, lenVec3(*=): The, xyzObjectToArray(*, *=): *[], OBB2(*=): *, canvasPosToWorldRay: *, quaternionToEuler: *, diagonalMat4v(*): *, mulQuaternions(*, *, *=): *, mulMat3(*, *, *=): *, diagonalMat4s(*=): *, normalizeVec2(*=, *=): *, frustumMat4v(*, *, *=): *, buildKDTree: *, mulMat4(*, *, *=): *, normalizeVec3(*=, *=): *, normalizeVec4(*=, *=): *[], translationMat4s(*=, *=): *, normalizeQuaternion(*, *=): *, octDecodeVec2(*, *): *, eulerToQuaternion(Float32Array, String, Float32Array=): Float32Array, cross3Vec4(*, *): The, flatten(*): Flattened, cross3Vec3(*, *, *=): The, isIdentityMat4(*): boolean, mulVec3Scalar(*, Number, *=): *, lerpVec3(*, *, *, *, *, *=): *, perspectiveMat4(*, *, *, *, *=): *, buildNormals: *, OLDtranslateMat4c(*, *, *, *): *, decomposeMat4: *, AABB2ToCanvas(*, *, *, *=): *, positions3ToAABB3: *, subMat4(*, *, *=): *, identityQuaternion(*=): *, quaternionToRotationMat4(*, *): *, mat4To3(*): *, unprojectVec3: Float32Array, decompressUVs(*, *, *=): *, vec3PairToQuaternion(*=, *=, *=): *, b3p3(*, *): *, b3p0(*, *): *, b3p2(*, *): *, b3p1(*, *): *, transformPoint4(*, *, *=): *, angleVec3(*=, *=): number, translateMat4v(*, *=): *, vecToArray: *, subScalarVec4(*, Number, *=): *, openCache(): void, buildTangents: *, translateMat4c(*, *, *, *): *, RADTODEG: number, rcpVec3(*=, *=): *[], transformPoint3(*, *, *=): *, subVec3(*, *, *=): *, subVec2(*, *, *=): *, closeCache(): void, points3ToSphere3: *, dotVec2(*, *): The, vec3ApplyQuaternion(*, *, *=): *, tangentSpline(*): *, subVec4Scalar(*, Number, *=): *, dotVec3(*, *): The, dotVec4(*, *): The, m4s(*): *, angleAxisToQuaternion(*, *=): *, MAX_DOUBLE: number, quaternionToAngleAxis(*=, *=): *, OBB3ToAABB2(*, *=): *, b2p1(*, *): *, b2p0(*, *): *, mulVec2Scalar(*, Number, *=): *, OBB3ToAABB3(*, *=): *, negateMat4(*, *=): *, lookAtMat4v(*, *, *, *=): mat4, b2p2(*, *): *}}\n */\nconst math = {\n\n    MAX_DOUBLE: Number.MAX_VALUE,\n    MIN_DOUBLE: Number.MIN_VALUE,\n\n    /**\n     * The number of radiians in a degree (0.0174532925).\n     * @property DEGTORAD\n     * @type {Number}\n     */\n    DEGTORAD: 0.0174532925,\n\n    /**\n     * The number of degrees in a radian.\n     * @property RADTODEG\n     * @type {Number}\n     */\n    RADTODEG: 57.295779513,\n\n    openCache() {\n        caching = true;\n        vec3CacheLen = 0;\n    },\n\n    cacheVec3(value) {\n        return value || (caching ? (vec3Cache[vec3CacheLen++] || (vec3Cache[vec3CacheLen - 1] = new Float32Array(3))) : new Float32Array(3));\n    },\n\n    cacheVec4(value) {\n        return value || (caching ? (vec3Cache[vec4CacheLen++] || (vec3Cache[vec4CacheLen - 1] = new Float32Array(4))) : new Float32Array(4));\n    },\n\n    closeCache() {\n        caching = false;\n    },\n\n    /**\n     * Returns a new, uninitialized two-element vector.\n     * @method vec2\n     * @param [values] Initial values.\n     * @static\n     * @returns {Float32Array}\n     */\n    vec2(values) {\n        return new Float32Array(values || 2);\n    },\n\n    /**\n     * Returns a new, uninitialized three-element vector.\n     * @method vec3\n     * @param [values] Initial values.\n     * @static\n     * @returns {Float32Array}\n     */\n    vec3(values) {\n        return new Float32Array(values || 3);\n    },\n\n    /**\n     * Returns a new, uninitialized four-element vector.\n     * @method vec4\n     * @param [values] Initial values.\n     * @static\n     * @returns {Float32Array}\n     */\n    vec4(values) {\n        return new Float32Array(values || 4);\n    },\n\n    /**\n     * Returns a new, uninitialized 3x3 matrix.\n     * @method mat3\n     * @param [values] Initial values.\n     * @static\n     * @returns {Float32Array}\n     */\n    mat3(values) {\n        return new Float32Array(values || 9);\n    },\n\n    /**\n     * Converts a 3x3 matrix to 4x4\n     * @method mat3ToMat4\n     * @param mat3 3x3 matrix.\n     * @param mat4 4x4 matrix\n     * @static\n     * @returns {Float32Array}\n     */\n    mat3ToMat4(mat3, mat4 = new Float32Array(16)) {\n        mat4[0] = mat3[0];\n        mat4[1] = mat3[1];\n        mat4[2] = mat3[2];\n        mat4[3] = 0;\n        mat4[4] = mat3[3];\n        mat4[5] = mat3[4];\n        mat4[6] = mat3[5];\n        mat4[7] = 0;\n        mat4[8] = mat3[6];\n        mat4[9] = mat3[7];\n        mat4[10] = mat3[8];\n        mat4[11] = 0;\n        mat4[12] = 0;\n        mat4[13] = 0;\n        mat4[14] = 0;\n        mat4[15] = 1;\n        return mat4;\n    },\n\n    /**\n     * Returns a new, uninitialized 4x4 matrix.\n     * @method mat4\n     * @param [values] Initial values.\n     * @static\n     * @returns {Float32Array}\n     */\n    mat4(values) {\n        return new Float32Array(values || 16);\n    },\n\n    /**\n     * Converts a 4x4 matrix to 3x3\n     * @method mat4ToMat3\n     * @param mat4 4x4 matrix.\n     * @param mat3 3x3 matrix\n     * @static\n     * @returns {Float32Array}\n     */\n    mat4ToMat3(mat4, mat3) { // TODO\n        //return new Float32Array(values || 9);\n    },\n\n    /**\n     * Returns a new UUID.\n     * @method createUUID\n     * @static\n     * @return string The new UUID\n     */\n    //createUUID: function () {\n    //    // http://www.broofa.com/Tools/Math.uuid.htm\n    //    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\n    //    var uuid = new Array(36);\n    //    var rnd = 0;\n    //    var r;\n    //    return function () {\n    //        for (var i = 0; i < 36; i++) {\n    //            if (i === 8 || i === 13 || i === 18 || i === 23) {\n    //                uuid[i] = '-';\n    //            } else if (i === 14) {\n    //                uuid[i] = '4';\n    //            } else {\n    //                if (rnd <= 0x02) {\n    //                    rnd = 0x2000000 + ( Math.random() * 0x1000000 ) | 0;\n    //                }\n    //                r = rnd & 0xf;\n    //                rnd = rnd >> 4;\n    //                uuid[i] = chars[( i === 19 ) ? ( r & 0x3 ) | 0x8 : r];\n    //            }\n    //        }\n    //        return uuid.join('');\n    //    };\n    //}(),\n    //\n    createUUID: ((() => {\n        const self = {};\n        const lut = [];\n        for (let i = 0; i < 256; i++) {\n            lut[i] = (i < 16 ? '0' : '') + (i).toString(16);\n        }\n        return () => {\n            const d0 = Math.random() * 0xffffffff | 0;\n            const d1 = Math.random() * 0xffffffff | 0;\n            const d2 = Math.random() * 0xffffffff | 0;\n            const d3 = Math.random() * 0xffffffff | 0;\n            return `${lut[d0 & 0xff] + lut[d0 >> 8 & 0xff] + lut[d0 >> 16 & 0xff] + lut[d0 >> 24 & 0xff]}-${lut[d1 & 0xff]}${lut[d1 >> 8 & 0xff]}-${lut[d1 >> 16 & 0x0f | 0x40]}${lut[d1 >> 24 & 0xff]}-${lut[d2 & 0x3f | 0x80]}${lut[d2 >> 8 & 0xff]}-${lut[d2 >> 16 & 0xff]}${lut[d2 >> 24 & 0xff]}${lut[d3 & 0xff]}${lut[d3 >> 8 & 0xff]}${lut[d3 >> 16 & 0xff]}${lut[d3 >> 24 & 0xff]}`;\n        };\n    }))(),\n\n    /**\n     * Clamps a value to the given range.\n     * @param {Number} value Value to clamp.\n     * @param {Number} min Lower bound.\n     * @param {Number} max Upper bound.\n     * @returns {Number} Clamped result.\n     */\n    clamp(value, min, max) {\n        return Math.max(min, Math.min(max, value));\n    },\n\n    /**\n     * Floating-point modulus\n     * @method fmod\n     * @static\n     * @param {Number} a\n     * @param {Number} b\n     * @returns {*}\n     */\n    fmod(a, b) {\n        if (a < b) {\n            console.error(\"math.fmod : Attempting to find modulus within negative range - would be infinite loop - ignoring\");\n            return a;\n        }\n        while (b <= a) {\n            a -= b;\n        }\n        return a;\n    },\n\n    /**\n     * Negates a four-element vector.\n     * @method negateVec4\n     * @static\n     * @param {Array(Number)} v Vector to negate\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    negateVec4(v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = -v[0];\n        dest[1] = -v[1];\n        dest[2] = -v[2];\n        dest[3] = -v[3];\n        return dest;\n    },\n\n    /**\n     * Adds one four-element vector to another.\n     * @method addVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    addVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] + v[0];\n        dest[1] = u[1] + v[1];\n        dest[2] = u[2] + v[2];\n        dest[3] = u[3] + v[3];\n        return dest;\n    },\n\n    /**\n     * Adds a scalar value to each element of a four-element vector.\n     * @method addVec4Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    addVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] + s;\n        dest[1] = v[1] + s;\n        dest[2] = v[2] + s;\n        dest[3] = v[3] + s;\n        return dest;\n    },\n\n    /**\n     * Adds one three-element vector to another.\n     * @method addVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    addVec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] + v[0];\n        dest[1] = u[1] + v[1];\n        dest[2] = u[2] + v[2];\n        return dest;\n    },\n\n    /**\n     * Adds a scalar value to each element of a three-element vector.\n     * @method addVec4Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    addVec3Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] + s;\n        dest[1] = v[1] + s;\n        dest[2] = v[2] + s;\n        return dest;\n    },\n\n    /**\n     * Subtracts one four-element vector from another.\n     * @method subVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Vector to subtract\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    subVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] - v[0];\n        dest[1] = u[1] - v[1];\n        dest[2] = u[2] - v[2];\n        dest[3] = u[3] - v[3];\n        return dest;\n    },\n\n    /**\n     * Subtracts one three-element vector from another.\n     * @method subVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Vector to subtract\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    subVec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] - v[0];\n        dest[1] = u[1] - v[1];\n        dest[2] = u[2] - v[2];\n        return dest;\n    },\n\n    /**\n     * Subtracts one two-element vector from another.\n     * @method subVec2\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Vector to subtract\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    subVec2(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] - v[0];\n        dest[1] = u[1] - v[1];\n        return dest;\n    },\n\n    /**\n     * Subtracts a scalar value from each element of a four-element vector.\n     * @method subVec4Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    subVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] - s;\n        dest[1] = v[1] - s;\n        dest[2] = v[2] - s;\n        dest[3] = v[3] - s;\n        return dest;\n    },\n\n    /**\n     * Sets each element of a 4-element vector to a scalar value minus the value of that element.\n     * @method subScalarVec4\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    subScalarVec4(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = s - v[0];\n        dest[1] = s - v[1];\n        dest[2] = s - v[2];\n        dest[3] = s - v[3];\n        return dest;\n    },\n\n    /**\n     * Multiplies one three-element vector by another.\n     * @method mulVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    mulVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] * v[0];\n        dest[1] = u[1] * v[1];\n        dest[2] = u[2] * v[2];\n        dest[3] = u[3] * v[3];\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of a four-element vector by a scalar.\n     * @method mulVec34calar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    mulVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] * s;\n        dest[1] = v[1] * s;\n        dest[2] = v[2] * s;\n        dest[3] = v[3] * s;\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of a three-element vector by a scalar.\n     * @method mulVec3Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    mulVec3Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] * s;\n        dest[1] = v[1] * s;\n        dest[2] = v[2] * s;\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of a two-element vector by a scalar.\n     * @method mulVec2Scalar\n     * @static\n     * @param {Array(Number)} v The vector\n     * @param {Number} s The scalar\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, v otherwise\n     */\n    mulVec2Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] * s;\n        dest[1] = v[1] * s;\n        return dest;\n    },\n\n    /**\n     * Divides one three-element vector by another.\n     * @method divVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    divVec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] / v[0];\n        dest[1] = u[1] / v[1];\n        dest[2] = u[2] / v[2];\n        return dest;\n    },\n\n    /**\n     * Divides one four-element vector by another.\n     * @method divVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @param  {Array(Number)} [dest] Destination vector\n     * @return {Array(Number)} dest if specified, u otherwise\n     */\n    divVec4(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        dest[0] = u[0] / v[0];\n        dest[1] = u[1] / v[1];\n        dest[2] = u[2] / v[2];\n        dest[3] = u[3] / v[3];\n        return dest;\n    },\n\n    /**\n     * Divides a scalar by a three-element vector, returning a new vector.\n     * @method divScalarVec3\n     * @static\n     * @param v vec3\n     * @param s scalar\n     * @param dest vec3 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divScalarVec3(s, v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = s / v[0];\n        dest[1] = s / v[1];\n        dest[2] = s / v[2];\n        return dest;\n    },\n\n    /**\n     * Divides a three-element vector by a scalar.\n     * @method divVec3Scalar\n     * @static\n     * @param v vec3\n     * @param s scalar\n     * @param dest vec3 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divVec3Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] / s;\n        dest[1] = v[1] / s;\n        dest[2] = v[2] / s;\n        return dest;\n    },\n\n    /**\n     * Divides a four-element vector by a scalar.\n     * @method divVec4Scalar\n     * @static\n     * @param v vec4\n     * @param s scalar\n     * @param dest vec4 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divVec4Scalar(v, s, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = v[0] / s;\n        dest[1] = v[1] / s;\n        dest[2] = v[2] / s;\n        dest[3] = v[3] / s;\n        return dest;\n    },\n\n\n    /**\n     * Divides a scalar by a four-element vector, returning a new vector.\n     * @method divScalarVec4\n     * @static\n     * @param s scalar\n     * @param v vec4\n     * @param dest vec4 - optional destination\n     * @return [] dest if specified, v otherwise\n     */\n    divScalarVec4(s, v, dest) {\n        if (!dest) {\n            dest = v;\n        }\n        dest[0] = s / v[0];\n        dest[1] = s / v[1];\n        dest[2] = s / v[2];\n        dest[3] = s / v[3];\n        return dest;\n    },\n\n    /**\n     * Returns the dot product of two four-element vectors.\n     * @method dotVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The dot product\n     */\n    dotVec4(u, v) {\n        return (u[0] * v[0] + u[1] * v[1] + u[2] * v[2] + u[3] * v[3]);\n    },\n\n    /**\n     * Returns the cross product of two four-element vectors.\n     * @method cross3Vec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The cross product\n     */\n    cross3Vec4(u, v) {\n        const u0 = u[0];\n        const u1 = u[1];\n        const u2 = u[2];\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        return [\n            u1 * v2 - u2 * v1,\n            u2 * v0 - u0 * v2,\n            u0 * v1 - u1 * v0,\n            0.0];\n    },\n\n    /**\n     * Returns the cross product of two three-element vectors.\n     * @method cross3Vec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The cross product\n     */\n    cross3Vec3(u, v, dest) {\n        if (!dest) {\n            dest = u;\n        }\n        const x = u[0];\n        const y = u[1];\n        const z = u[2];\n        const x2 = v[0];\n        const y2 = v[1];\n        const z2 = v[2];\n        dest[0] = y * z2 - z * y2;\n        dest[1] = z * x2 - x * z2;\n        dest[2] = x * y2 - y * x2;\n        return dest;\n    },\n\n\n    sqLenVec4(v) { // TODO\n        return math.dotVec4(v, v);\n    },\n\n    /**\n     * Returns the length of a four-element vector.\n     * @method lenVec4\n     * @static\n     * @param {Array(Number)} v The vector\n     * @return The length\n     */\n    lenVec4(v) {\n        return Math.sqrt(math.sqLenVec4(v));\n    },\n\n    /**\n     * Returns the dot product of two three-element vectors.\n     * @method dotVec3\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The dot product\n     */\n    dotVec3(u, v) {\n        return (u[0] * v[0] + u[1] * v[1] + u[2] * v[2]);\n    },\n\n    /**\n     * Returns the dot product of two two-element vectors.\n     * @method dotVec4\n     * @static\n     * @param {Array(Number)} u First vector\n     * @param {Array(Number)} v Second vector\n     * @return The dot product\n     */\n    dotVec2(u, v) {\n        return (u[0] * v[0] + u[1] * v[1]);\n    },\n\n\n    sqLenVec3(v) {\n        return math.dotVec3(v, v);\n    },\n\n\n    sqLenVec2(v) {\n        return math.dotVec2(v, v);\n    },\n\n    /**\n     * Returns the length of a three-element vector.\n     * @method lenVec3\n     * @static\n     * @param {Array(Number)} v The vector\n     * @return The length\n     */\n    lenVec3(v) {\n        return Math.sqrt(math.sqLenVec3(v));\n    },\n\n    distVec3: ((() => {\n        const vec = new Float32Array(3);\n        return (v, w) => math.lenVec3(math.subVec3(v, w, vec));\n    }))(),\n\n    /**\n     * Returns the length of a two-element vector.\n     * @method lenVec2\n     * @static\n     * @param {Array(Number)} v The vector\n     * @return The length\n     */\n    lenVec2(v) {\n        return Math.sqrt(math.sqLenVec2(v));\n    },\n\n    distVec2: ((() => {\n        const vec = new Float32Array(2);\n        return (v, w) => math.lenVec2(math.subVec2(v, w, vec));\n    }))(),\n\n    /**\n     * @method rcpVec3\n     * @static\n     * @param v vec3\n     * @param dest vec3 - optional destination\n     * @return [] dest if specified, v otherwise\n     *\n     */\n    rcpVec3(v, dest) {\n        return math.divScalarVec3(1.0, v, dest);\n    },\n\n    /**\n     * Normalizes a four-element vector\n     * @method normalizeVec4\n     * @static\n     * @param v vec4\n     * @param dest vec4 - optional destination\n     * @return [] dest if specified, v otherwise\n     *\n     */\n    normalizeVec4(v, dest) {\n        const f = 1.0 / math.lenVec4(v);\n        return math.mulVec4Scalar(v, f, dest);\n    },\n\n    /**\n     * Normalizes a three-element vector\n     * @method normalizeVec4\n     * @static\n     */\n    normalizeVec3(v, dest) {\n        const f = 1.0 / math.lenVec3(v);\n        return math.mulVec3Scalar(v, f, dest);\n    },\n\n    /**\n     * Normalizes a two-element vector\n     * @method normalizeVec2\n     * @static\n     */\n    normalizeVec2(v, dest) {\n        const f = 1.0 / math.lenVec2(v);\n        return math.mulVec2Scalar(v, f, dest);\n    },\n\n    /**\n     * Gets the angle between two vectors\n     * @method angleVec3\n     * @param v\n     * @param w\n     * @returns {number}\n     */\n    angleVec3(v, w) {\n        let theta = math.dotVec3(v, w) / (Math.sqrt(math.sqLenVec3(v) * math.sqLenVec3(w)));\n        theta = theta < -1 ? -1 : (theta > 1 ? 1 : theta);  // Clamp to handle numerical problems\n        return Math.acos(theta);\n    },\n\n    /**\n     * Creates a three-element vector from the rotation part of a sixteen-element matrix.\n     * @param m\n     * @param dest\n     */\n    vec3FromMat4Scale: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n\n        return (m, dest) => {\n\n            tempVec3[0] = m[0];\n            tempVec3[1] = m[1];\n            tempVec3[2] = m[2];\n\n            dest[0] = math.lenVec3(tempVec3);\n\n            tempVec3[0] = m[4];\n            tempVec3[1] = m[5];\n            tempVec3[2] = m[6];\n\n            dest[1] = math.lenVec3(tempVec3);\n\n            tempVec3[0] = m[8];\n            tempVec3[1] = m[9];\n            tempVec3[2] = m[10];\n\n            dest[2] = math.lenVec3(tempVec3);\n\n            return dest;\n        };\n    }))(),\n\n    /**\n     * Converts an n-element vector to a JSON-serializable\n     * array with values rounded to two decimal places.\n     */\n    vecToArray: ((() => {\n        function trunc(v) {\n            return Math.round(v * 100000) / 100000\n        }\n\n        return v => {\n            v = Array.prototype.slice.call(v);\n            for (let i = 0, len = v.length; i < len; i++) {\n                v[i] = trunc(v[i]);\n            }\n            return v;\n        };\n    }))(),\n\n    /**\n     * Converts a 3-element vector from an array to an object of the form ````{x:999, y:999, z:999}````.\n     * @param arr\n     * @returns {{x: *, y: *, z: *}}\n     */\n    xyzArrayToObject(arr) {\n        return {\"x\": arr[0], \"y\": arr[1], \"z\": arr[2]};\n    },\n\n    /**\n     * Converts a 3-element vector object of the form ````{x:999, y:999, z:999}```` to an array.\n     * @param xyz\n     * @param  [arry]\n     * @returns {*[]}\n     */\n    xyzObjectToArray(xyz, arry) {\n        arry = arry || new Float32Array(3);\n        arry[0] = xyz.x;\n        arry[1] = xyz.y;\n        arry[2] = xyz.z;\n        return arry;\n    },\n\n    /**\n     * Duplicates a 4x4 identity matrix.\n     * @method dupMat4\n     * @static\n     */\n    dupMat4(m) {\n        return m.slice(0, 16);\n    },\n\n    /**\n     * Extracts a 3x3 matrix from a 4x4 matrix.\n     * @method mat4To3\n     * @static\n     */\n    mat4To3(m) {\n        return [\n            m[0], m[1], m[2],\n            m[4], m[5], m[6],\n            m[8], m[9], m[10]\n        ];\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to the given scalar value.\n     * @method m4s\n     * @static\n     */\n    m4s(s) {\n        return [\n            s, s, s, s,\n            s, s, s, s,\n            s, s, s, s,\n            s, s, s, s\n        ];\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to zero.\n     * @method setMat4ToZeroes\n     * @static\n     */\n    setMat4ToZeroes() {\n        return math.m4s(0.0);\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to 1.0.\n     * @method setMat4ToOnes\n     * @static\n     */\n    setMat4ToOnes() {\n        return math.m4s(1.0);\n    },\n\n    /**\n     * Returns a 4x4 matrix with each element set to 1.0.\n     * @method setMat4ToOnes\n     * @static\n     */\n    diagonalMat4v(v) {\n        return new Float32Array([\n            v[0], 0.0, 0.0, 0.0,\n            0.0, v[1], 0.0, 0.0,\n            0.0, 0.0, v[2], 0.0,\n            0.0, 0.0, 0.0, v[3]\n        ]);\n    },\n\n    /**\n     * Returns a 4x4 matrix with diagonal elements set to the given vector.\n     * @method diagonalMat4c\n     * @static\n     */\n    diagonalMat4c(x, y, z, w) {\n        return math.diagonalMat4v([x, y, z, w]);\n    },\n\n    /**\n     * Returns a 4x4 matrix with diagonal elements set to the given scalar.\n     * @method diagonalMat4s\n     * @static\n     */\n    diagonalMat4s(s) {\n        return math.diagonalMat4c(s, s, s, s);\n    },\n\n    /**\n     * Returns a 4x4 identity matrix.\n     * @method identityMat4\n     * @static\n     */\n    identityMat4(mat = new Float32Array(16)) {\n        mat[0] = 1.0;\n        mat[1] = 0.0;\n        mat[2] = 0.0;\n        mat[3] = 0.0;\n\n        mat[4] = 0.0;\n        mat[5] = 1.0;\n        mat[6] = 0.0;\n        mat[7] = 0.0;\n\n        mat[8] = 0.0;\n        mat[9] = 0.0;\n        mat[10] = 1.0;\n        mat[11] = 0.0;\n\n        mat[12] = 0.0;\n        mat[13] = 0.0;\n        mat[14] = 0.0;\n        mat[15] = 1.0;\n\n        return mat;\n    },\n\n    /**\n     * Returns a 3x3 identity matrix.\n     * @method identityMat3\n     * @static\n     */\n    identityMat3(mat = new Float32Array(9)) {\n        mat[0] = 1.0;\n        mat[1] = 0.0;\n        mat[2] = 0.0;\n\n        mat[3] = 0.0;\n        mat[4] = 1.0;\n        mat[5] = 0.0;\n\n        mat[6] = 0.0;\n        mat[7] = 0.0;\n        mat[8] = 1.0;\n\n        return mat;\n    },\n\n    /**\n     * Tests if the given 4x4 matrix is the identity matrix.\n     * @method isIdentityMat4\n     * @static\n     */\n    isIdentityMat4(m) {\n        if (m[0] !== 1.0 || m[1] !== 0.0 || m[2] !== 0.0 || m[3] !== 0.0 ||\n            m[4] !== 0.0 || m[5] !== 1.0 || m[6] !== 0.0 || m[7] !== 0.0 ||\n            m[8] !== 0.0 || m[9] !== 0.0 || m[10] !== 1.0 || m[11] !== 0.0 ||\n            m[12] !== 0.0 || m[13] !== 0.0 || m[14] !== 0.0 || m[15] !== 1.0) {\n            return false;\n        }\n        return true;\n    },\n\n    /**\n     * Negates the given 4x4 matrix.\n     * @method negateMat4\n     * @static\n     */\n    negateMat4(m, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = -m[0];\n        dest[1] = -m[1];\n        dest[2] = -m[2];\n        dest[3] = -m[3];\n        dest[4] = -m[4];\n        dest[5] = -m[5];\n        dest[6] = -m[6];\n        dest[7] = -m[7];\n        dest[8] = -m[8];\n        dest[9] = -m[9];\n        dest[10] = -m[10];\n        dest[11] = -m[11];\n        dest[12] = -m[12];\n        dest[13] = -m[13];\n        dest[14] = -m[14];\n        dest[15] = -m[15];\n        return dest;\n    },\n\n    /**\n     * Adds the given 4x4 matrices together.\n     * @method addMat4\n     * @static\n     */\n    addMat4(a, b, dest) {\n        if (!dest) {\n            dest = a;\n        }\n        dest[0] = a[0] + b[0];\n        dest[1] = a[1] + b[1];\n        dest[2] = a[2] + b[2];\n        dest[3] = a[3] + b[3];\n        dest[4] = a[4] + b[4];\n        dest[5] = a[5] + b[5];\n        dest[6] = a[6] + b[6];\n        dest[7] = a[7] + b[7];\n        dest[8] = a[8] + b[8];\n        dest[9] = a[9] + b[9];\n        dest[10] = a[10] + b[10];\n        dest[11] = a[11] + b[11];\n        dest[12] = a[12] + b[12];\n        dest[13] = a[13] + b[13];\n        dest[14] = a[14] + b[14];\n        dest[15] = a[15] + b[15];\n        return dest;\n    },\n\n    /**\n     * Adds the given scalar to each element of the given 4x4 matrix.\n     * @method addMat4Scalar\n     * @static\n     */\n    addMat4Scalar(m, s, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = m[0] + s;\n        dest[1] = m[1] + s;\n        dest[2] = m[2] + s;\n        dest[3] = m[3] + s;\n        dest[4] = m[4] + s;\n        dest[5] = m[5] + s;\n        dest[6] = m[6] + s;\n        dest[7] = m[7] + s;\n        dest[8] = m[8] + s;\n        dest[9] = m[9] + s;\n        dest[10] = m[10] + s;\n        dest[11] = m[11] + s;\n        dest[12] = m[12] + s;\n        dest[13] = m[13] + s;\n        dest[14] = m[14] + s;\n        dest[15] = m[15] + s;\n        return dest;\n    },\n\n    /**\n     * Adds the given scalar to each element of the given 4x4 matrix.\n     * @method addScalarMat4\n     * @static\n     */\n    addScalarMat4(s, m, dest) {\n        return math.addMat4Scalar(m, s, dest);\n    },\n\n    /**\n     * Subtracts the second 4x4 matrix from the first.\n     * @method subMat4\n     * @static\n     */\n    subMat4(a, b, dest) {\n        if (!dest) {\n            dest = a;\n        }\n        dest[0] = a[0] - b[0];\n        dest[1] = a[1] - b[1];\n        dest[2] = a[2] - b[2];\n        dest[3] = a[3] - b[3];\n        dest[4] = a[4] - b[4];\n        dest[5] = a[5] - b[5];\n        dest[6] = a[6] - b[6];\n        dest[7] = a[7] - b[7];\n        dest[8] = a[8] - b[8];\n        dest[9] = a[9] - b[9];\n        dest[10] = a[10] - b[10];\n        dest[11] = a[11] - b[11];\n        dest[12] = a[12] - b[12];\n        dest[13] = a[13] - b[13];\n        dest[14] = a[14] - b[14];\n        dest[15] = a[15] - b[15];\n        return dest;\n    },\n\n    /**\n     * Subtracts the given scalar from each element of the given 4x4 matrix.\n     * @method subMat4Scalar\n     * @static\n     */\n    subMat4Scalar(m, s, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = m[0] - s;\n        dest[1] = m[1] - s;\n        dest[2] = m[2] - s;\n        dest[3] = m[3] - s;\n        dest[4] = m[4] - s;\n        dest[5] = m[5] - s;\n        dest[6] = m[6] - s;\n        dest[7] = m[7] - s;\n        dest[8] = m[8] - s;\n        dest[9] = m[9] - s;\n        dest[10] = m[10] - s;\n        dest[11] = m[11] - s;\n        dest[12] = m[12] - s;\n        dest[13] = m[13] - s;\n        dest[14] = m[14] - s;\n        dest[15] = m[15] - s;\n        return dest;\n    },\n\n    /**\n     * Subtracts the given scalar from each element of the given 4x4 matrix.\n     * @method subScalarMat4\n     * @static\n     */\n    subScalarMat4(s, m, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = s - m[0];\n        dest[1] = s - m[1];\n        dest[2] = s - m[2];\n        dest[3] = s - m[3];\n        dest[4] = s - m[4];\n        dest[5] = s - m[5];\n        dest[6] = s - m[6];\n        dest[7] = s - m[7];\n        dest[8] = s - m[8];\n        dest[9] = s - m[9];\n        dest[10] = s - m[10];\n        dest[11] = s - m[11];\n        dest[12] = s - m[12];\n        dest[13] = s - m[13];\n        dest[14] = s - m[14];\n        dest[15] = s - m[15];\n        return dest;\n    },\n\n    /**\n     * Multiplies the two given 4x4 matrix by each other.\n     * @method mulMat4\n     * @static\n     */\n    mulMat4(a, b, dest) {\n        if (!dest) {\n            dest = a;\n        }\n\n        // Cache the matrix values (makes for huge speed increases!)\n        const a00 = a[0];\n\n        const a01 = a[1];\n        const a02 = a[2];\n        const a03 = a[3];\n        const a10 = a[4];\n        const a11 = a[5];\n        const a12 = a[6];\n        const a13 = a[7];\n        const a20 = a[8];\n        const a21 = a[9];\n        const a22 = a[10];\n        const a23 = a[11];\n        const a30 = a[12];\n        const a31 = a[13];\n        const a32 = a[14];\n        const a33 = a[15];\n        const b00 = b[0];\n        const b01 = b[1];\n        const b02 = b[2];\n        const b03 = b[3];\n        const b10 = b[4];\n        const b11 = b[5];\n        const b12 = b[6];\n        const b13 = b[7];\n        const b20 = b[8];\n        const b21 = b[9];\n        const b22 = b[10];\n        const b23 = b[11];\n        const b30 = b[12];\n        const b31 = b[13];\n        const b32 = b[14];\n        const b33 = b[15];\n\n        dest[0] = b00 * a00 + b01 * a10 + b02 * a20 + b03 * a30;\n        dest[1] = b00 * a01 + b01 * a11 + b02 * a21 + b03 * a31;\n        dest[2] = b00 * a02 + b01 * a12 + b02 * a22 + b03 * a32;\n        dest[3] = b00 * a03 + b01 * a13 + b02 * a23 + b03 * a33;\n        dest[4] = b10 * a00 + b11 * a10 + b12 * a20 + b13 * a30;\n        dest[5] = b10 * a01 + b11 * a11 + b12 * a21 + b13 * a31;\n        dest[6] = b10 * a02 + b11 * a12 + b12 * a22 + b13 * a32;\n        dest[7] = b10 * a03 + b11 * a13 + b12 * a23 + b13 * a33;\n        dest[8] = b20 * a00 + b21 * a10 + b22 * a20 + b23 * a30;\n        dest[9] = b20 * a01 + b21 * a11 + b22 * a21 + b23 * a31;\n        dest[10] = b20 * a02 + b21 * a12 + b22 * a22 + b23 * a32;\n        dest[11] = b20 * a03 + b21 * a13 + b22 * a23 + b23 * a33;\n        dest[12] = b30 * a00 + b31 * a10 + b32 * a20 + b33 * a30;\n        dest[13] = b30 * a01 + b31 * a11 + b32 * a21 + b33 * a31;\n        dest[14] = b30 * a02 + b31 * a12 + b32 * a22 + b33 * a32;\n        dest[15] = b30 * a03 + b31 * a13 + b32 * a23 + b33 * a33;\n\n        return dest;\n    },\n\n    /**\n     * Multiplies the two given 3x3 matrices by each other.\n     * @method mulMat4\n     * @static\n     */\n    mulMat3(a, b, dest) {\n        if (!dest) {\n            dest = new Float32Array(9);\n        }\n\n        const a11 = a[0];\n        const a12 = a[3];\n        const a13 = a[6];\n        const a21 = a[1];\n        const a22 = a[4];\n        const a23 = a[7];\n        const a31 = a[2];\n        const a32 = a[5];\n        const a33 = a[8];\n        const b11 = b[0];\n        const b12 = b[3];\n        const b13 = b[6];\n        const b21 = b[1];\n        const b22 = b[4];\n        const b23 = b[7];\n        const b31 = b[2];\n        const b32 = b[5];\n        const b33 = b[8];\n\n        dest[0] = a11 * b11 + a12 * b21 + a13 * b31;\n        dest[3] = a11 * b12 + a12 * b22 + a13 * b32;\n        dest[6] = a11 * b13 + a12 * b23 + a13 * b33;\n\n        dest[1] = a21 * b11 + a22 * b21 + a23 * b31;\n        dest[4] = a21 * b12 + a22 * b22 + a23 * b32;\n        dest[7] = a21 * b13 + a22 * b23 + a23 * b33;\n\n        dest[2] = a31 * b11 + a32 * b21 + a33 * b31;\n        dest[5] = a31 * b12 + a32 * b22 + a33 * b32;\n        dest[8] = a31 * b13 + a32 * b23 + a33 * b33;\n\n        return dest;\n    },\n\n    /**\n     * Multiplies each element of the given 4x4 matrix by the given scalar.\n     * @method mulMat4Scalar\n     * @static\n     */\n    mulMat4Scalar(m, s, dest) {\n        if (!dest) {\n            dest = m;\n        }\n        dest[0] = m[0] * s;\n        dest[1] = m[1] * s;\n        dest[2] = m[2] * s;\n        dest[3] = m[3] * s;\n        dest[4] = m[4] * s;\n        dest[5] = m[5] * s;\n        dest[6] = m[6] * s;\n        dest[7] = m[7] * s;\n        dest[8] = m[8] * s;\n        dest[9] = m[9] * s;\n        dest[10] = m[10] * s;\n        dest[11] = m[11] * s;\n        dest[12] = m[12] * s;\n        dest[13] = m[13] * s;\n        dest[14] = m[14] * s;\n        dest[15] = m[15] * s;\n        return dest;\n    },\n\n    /**\n     * Multiplies the given 4x4 matrix by the given four-element vector.\n     * @method mulMat4v4\n     * @static\n     */\n    mulMat4v4(m, v, dest = math.vec4()) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        dest[0] = m[0] * v0 + m[4] * v1 + m[8] * v2 + m[12] * v3;\n        dest[1] = m[1] * v0 + m[5] * v1 + m[9] * v2 + m[13] * v3;\n        dest[2] = m[2] * v0 + m[6] * v1 + m[10] * v2 + m[14] * v3;\n        dest[3] = m[3] * v0 + m[7] * v1 + m[11] * v2 + m[15] * v3;\n        return dest;\n    },\n\n    /**\n     * Transposes the given 4x4 matrix.\n     * @method transposeMat4\n     * @static\n     */\n    transposeMat4(mat, dest) {\n        // If we are transposing ourselves we can skip a few steps but have to cache some values\n        const m4 = mat[4];\n\n        const m14 = mat[14];\n        const m8 = mat[8];\n        const m13 = mat[13];\n        const m12 = mat[12];\n        const m9 = mat[9];\n        if (!dest || mat === dest) {\n            const a01 = mat[1];\n            const a02 = mat[2];\n            const a03 = mat[3];\n            const a12 = mat[6];\n            const a13 = mat[7];\n            const a23 = mat[11];\n            mat[1] = m4;\n            mat[2] = m8;\n            mat[3] = m12;\n            mat[4] = a01;\n            mat[6] = m9;\n            mat[7] = m13;\n            mat[8] = a02;\n            mat[9] = a12;\n            mat[11] = m14;\n            mat[12] = a03;\n            mat[13] = a13;\n            mat[14] = a23;\n            return mat;\n        }\n        dest[0] = mat[0];\n        dest[1] = m4;\n        dest[2] = m8;\n        dest[3] = m12;\n        dest[4] = mat[1];\n        dest[5] = mat[5];\n        dest[6] = m9;\n        dest[7] = m13;\n        dest[8] = mat[2];\n        dest[9] = mat[6];\n        dest[10] = mat[10];\n        dest[11] = m14;\n        dest[12] = mat[3];\n        dest[13] = mat[7];\n        dest[14] = mat[11];\n        dest[15] = mat[15];\n        return dest;\n    },\n\n    /**\n     * Transposes the given 3x3 matrix.\n     *\n     * @method transposeMat3\n     * @static\n     */\n    transposeMat3(mat, dest) {\n        if (dest === mat) {\n            const a01 = mat[1];\n            const a02 = mat[2];\n            const a12 = mat[5];\n            dest[1] = mat[3];\n            dest[2] = mat[6];\n            dest[3] = a01;\n            dest[5] = mat[7];\n            dest[6] = a02;\n            dest[7] = a12;\n        } else {\n            dest[0] = mat[0];\n            dest[1] = mat[3];\n            dest[2] = mat[6];\n            dest[3] = mat[1];\n            dest[4] = mat[4];\n            dest[5] = mat[7];\n            dest[6] = mat[2];\n            dest[7] = mat[5];\n            dest[8] = mat[8];\n        }\n        return dest;\n    },\n\n    /**\n     * Returns the determinant of the given 4x4 matrix.\n     * @method determinantMat4\n     * @static\n     */\n    determinantMat4(mat) {\n        // Cache the matrix values (makes for huge speed increases!)\n        const a00 = mat[0];\n\n        const a01 = mat[1];\n        const a02 = mat[2];\n        const a03 = mat[3];\n        const a10 = mat[4];\n        const a11 = mat[5];\n        const a12 = mat[6];\n        const a13 = mat[7];\n        const a20 = mat[8];\n        const a21 = mat[9];\n        const a22 = mat[10];\n        const a23 = mat[11];\n        const a30 = mat[12];\n        const a31 = mat[13];\n        const a32 = mat[14];\n        const a33 = mat[15];\n        return a30 * a21 * a12 * a03 - a20 * a31 * a12 * a03 - a30 * a11 * a22 * a03 + a10 * a31 * a22 * a03 +\n            a20 * a11 * a32 * a03 - a10 * a21 * a32 * a03 - a30 * a21 * a02 * a13 + a20 * a31 * a02 * a13 +\n            a30 * a01 * a22 * a13 - a00 * a31 * a22 * a13 - a20 * a01 * a32 * a13 + a00 * a21 * a32 * a13 +\n            a30 * a11 * a02 * a23 - a10 * a31 * a02 * a23 - a30 * a01 * a12 * a23 + a00 * a31 * a12 * a23 +\n            a10 * a01 * a32 * a23 - a00 * a11 * a32 * a23 - a20 * a11 * a02 * a33 + a10 * a21 * a02 * a33 +\n            a20 * a01 * a12 * a33 - a00 * a21 * a12 * a33 - a10 * a01 * a22 * a33 + a00 * a11 * a22 * a33;\n    },\n\n    /**\n     * Returns the inverse of the given 4x4 matrix.\n     * @method inverseMat4\n     * @static\n     */\n    inverseMat4(mat, dest) {\n        if (!dest) {\n            dest = mat;\n        }\n\n        // Cache the matrix values (makes for huge speed increases!)\n        const a00 = mat[0];\n\n        const a01 = mat[1];\n        const a02 = mat[2];\n        const a03 = mat[3];\n        const a10 = mat[4];\n        const a11 = mat[5];\n        const a12 = mat[6];\n        const a13 = mat[7];\n        const a20 = mat[8];\n        const a21 = mat[9];\n        const a22 = mat[10];\n        const a23 = mat[11];\n        const a30 = mat[12];\n        const a31 = mat[13];\n        const a32 = mat[14];\n        const a33 = mat[15];\n        const b00 = a00 * a11 - a01 * a10;\n        const b01 = a00 * a12 - a02 * a10;\n        const b02 = a00 * a13 - a03 * a10;\n        const b03 = a01 * a12 - a02 * a11;\n        const b04 = a01 * a13 - a03 * a11;\n        const b05 = a02 * a13 - a03 * a12;\n        const b06 = a20 * a31 - a21 * a30;\n        const b07 = a20 * a32 - a22 * a30;\n        const b08 = a20 * a33 - a23 * a30;\n        const b09 = a21 * a32 - a22 * a31;\n        const b10 = a21 * a33 - a23 * a31;\n        const b11 = a22 * a33 - a23 * a32;\n\n        // Calculate the determinant (inlined to avoid double-caching)\n        const invDet = 1 / (b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06);\n\n        dest[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;\n        dest[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;\n        dest[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;\n        dest[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;\n        dest[4] = (-a10 * b11 + a12 * b08 - a13 * b07) * invDet;\n        dest[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;\n        dest[6] = (-a30 * b05 + a32 * b02 - a33 * b01) * invDet;\n        dest[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;\n        dest[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;\n        dest[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;\n        dest[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;\n        dest[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;\n        dest[12] = (-a10 * b09 + a11 * b07 - a12 * b06) * invDet;\n        dest[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;\n        dest[14] = (-a30 * b03 + a31 * b01 - a32 * b00) * invDet;\n        dest[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;\n\n        return dest;\n    },\n\n    /**\n     * Returns the trace of the given 4x4 matrix.\n     * @method traceMat4\n     * @static\n     */\n    traceMat4(m) {\n        return (m[0] + m[5] + m[10] + m[15]);\n    },\n\n    /**\n     * Returns 4x4 translation matrix.\n     * @method translationMat4\n     * @static\n     */\n    translationMat4v(v, dest) {\n        const m = dest || math.identityMat4();\n        m[12] = v[0];\n        m[13] = v[1];\n        m[14] = v[2];\n        return m;\n    },\n\n    /**\n     * Returns 3x3 translation matrix.\n     * @method translationMat3\n     * @static\n     */\n    translationMat3v(v, dest) {\n        const m = dest || math.identityMat3();\n        m[6] = v[0];\n        m[7] = v[1];\n        return m;\n    },\n\n    /**\n     * Returns 4x4 translation matrix.\n     * @method translationMat4c\n     * @static\n     */\n    translationMat4c: ((() => {\n        const xyz = new Float32Array(3);\n        return (x, y, z, dest) => {\n            xyz[0] = x;\n            xyz[1] = y;\n            xyz[2] = z;\n            return math.translationMat4v(xyz, dest);\n        };\n    }))(),\n\n    /**\n     * Returns 4x4 translation matrix.\n     * @method translationMat4s\n     * @static\n     */\n    translationMat4s(s, dest) {\n        return math.translationMat4c(s, s, s, dest);\n    },\n\n    /**\n     * Efficiently post-concatenates a translation to the given matrix.\n     * @param v\n     * @param m\n     */\n    translateMat4v(xyz, m) {\n        return math.translateMat4c(xyz[0], xyz[1], xyz[2], m);\n    },\n\n    /**\n     * Efficiently post-concatenates a translation to the given matrix.\n     * @param x\n     * @param y\n     * @param z\n     * @param m\n     */\n    OLDtranslateMat4c(x, y, z, m) {\n\n        const m12 = m[12];\n        m[0] += m12 * x;\n        m[4] += m12 * y;\n        m[8] += m12 * z;\n\n        const m13 = m[13];\n        m[1] += m13 * x;\n        m[5] += m13 * y;\n        m[9] += m13 * z;\n\n        const m14 = m[14];\n        m[2] += m14 * x;\n        m[6] += m14 * y;\n        m[10] += m14 * z;\n\n        const m15 = m[15];\n        m[3] += m15 * x;\n        m[7] += m15 * y;\n        m[11] += m15 * z;\n\n        return m;\n    },\n\n    translateMat4c(x, y, z, m) {\n\n        const m3 = m[3];\n        m[0] += m3 * x;\n        m[1] += m3 * y;\n        m[2] += m3 * z;\n\n        const m7 = m[7];\n        m[4] += m7 * x;\n        m[5] += m7 * y;\n        m[6] += m7 * z;\n\n        const m11 = m[11];\n        m[8] += m11 * x;\n        m[9] += m11 * y;\n        m[10] += m11 * z;\n\n        const m15 = m[15];\n        m[12] += m15 * x;\n        m[13] += m15 * y;\n        m[14] += m15 * z;\n\n        return m;\n    },\n    /**\n     * Returns 4x4 rotation matrix.\n     * @method rotationMat4v\n     * @static\n     */\n    rotationMat4v(anglerad, axis, m) {\n        const ax = math.normalizeVec4([axis[0], axis[1], axis[2], 0.0], []);\n        const s = Math.sin(anglerad);\n        const c = Math.cos(anglerad);\n        const q = 1.0 - c;\n\n        const x = ax[0];\n        const y = ax[1];\n        const z = ax[2];\n\n        let xy;\n        let yz;\n        let zx;\n        let xs;\n        let ys;\n        let zs;\n\n        //xx = x * x; used once\n        //yy = y * y; used once\n        //zz = z * z; used once\n        xy = x * y;\n        yz = y * z;\n        zx = z * x;\n        xs = x * s;\n        ys = y * s;\n        zs = z * s;\n\n        m = m || math.mat4();\n\n        m[0] = (q * x * x) + c;\n        m[1] = (q * xy) + zs;\n        m[2] = (q * zx) - ys;\n        m[3] = 0.0;\n\n        m[4] = (q * xy) - zs;\n        m[5] = (q * y * y) + c;\n        m[6] = (q * yz) + xs;\n        m[7] = 0.0;\n\n        m[8] = (q * zx) + ys;\n        m[9] = (q * yz) - xs;\n        m[10] = (q * z * z) + c;\n        m[11] = 0.0;\n\n        m[12] = 0.0;\n        m[13] = 0.0;\n        m[14] = 0.0;\n        m[15] = 1.0;\n\n        return m;\n    },\n\n    /**\n     * Returns 4x4 rotation matrix.\n     * @method rotationMat4c\n     * @static\n     */\n    rotationMat4c(anglerad, x, y, z, mat) {\n        return math.rotationMat4v(anglerad, [x, y, z], mat);\n    },\n\n    /**\n     * Returns 4x4 scale matrix.\n     * @method scalingMat4v\n     * @static\n     */\n    scalingMat4v(v, m = math.identityMat4()) {\n        m[0] = v[0];\n        m[5] = v[1];\n        m[10] = v[2];\n        return m;\n    },\n\n    /**\n     * Returns 3x3 scale matrix.\n     * @method scalingMat3v\n     * @static\n     */\n    scalingMat3v(v, m = math.identityMat3()) {\n        m[0] = v[0];\n        m[4] = v[1];\n        return m;\n    },\n\n    /**\n     * Returns 4x4 scale matrix.\n     * @method scalingMat4c\n     * @static\n     */\n    scalingMat4c: ((() => {\n        const xyz = new Float32Array(3);\n        return (x, y, z, dest) => {\n            xyz[0] = x;\n            xyz[1] = y;\n            xyz[2] = z;\n            return math.scalingMat4v(xyz, dest);\n        };\n    }))(),\n\n    /**\n     * Efficiently post-concatenates a scaling to the given matrix.\n     * @method scaleMat4c\n     * @param x\n     * @param y\n     * @param z\n     * @param m\n     */\n    scaleMat4c(x, y, z, m) {\n\n        m[0] *= x;\n        m[4] *= y;\n        m[8] *= z;\n\n        m[1] *= x;\n        m[5] *= y;\n        m[9] *= z;\n\n        m[2] *= x;\n        m[6] *= y;\n        m[10] *= z;\n\n        m[3] *= x;\n        m[7] *= y;\n        m[11] *= z;\n        return m;\n    },\n\n    /**\n     * Efficiently post-concatenates a scaling to the given matrix.\n     * @method scaleMat4c\n     * @param xyz\n     * @param m\n     */\n    scaleMat4v(xyz, m) {\n\n        const x = xyz[0];\n        const y = xyz[1];\n        const z = xyz[2];\n\n        m[0] *= x;\n        m[4] *= y;\n        m[8] *= z;\n        m[1] *= x;\n        m[5] *= y;\n        m[9] *= z;\n        m[2] *= x;\n        m[6] *= y;\n        m[10] *= z;\n        m[3] *= x;\n        m[7] *= y;\n        m[11] *= z;\n\n        return m;\n    },\n\n    /**\n     * Returns 4x4 scale matrix.\n     * @method scalingMat4s\n     * @static\n     */\n    scalingMat4s(s) {\n        return math.scalingMat4c(s, s, s);\n    },\n\n    /**\n     * Creates a matrix from a quaternion rotation and vector translation\n     *\n     * @param {Float32Array} q Rotation quaternion\n     * @param {Float32Array} v Translation vector\n     * @param {Float32Array} dest Destination matrix\n     * @returns {Float32Array} dest\n     */\n    rotationTranslationMat4(q, v, dest = math.mat4()) {\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n\n        dest[0] = 1 - (yy + zz);\n        dest[1] = xy + wz;\n        dest[2] = xz - wy;\n        dest[3] = 0;\n        dest[4] = xy - wz;\n        dest[5] = 1 - (xx + zz);\n        dest[6] = yz + wx;\n        dest[7] = 0;\n        dest[8] = xz + wy;\n        dest[9] = yz - wx;\n        dest[10] = 1 - (xx + yy);\n        dest[11] = 0;\n        dest[12] = v[0];\n        dest[13] = v[1];\n        dest[14] = v[2];\n        dest[15] = 1;\n\n        return dest;\n    },\n\n    /**\n     * Gets Euler angles from a 4x4 matrix.\n     *\n     * @param {Float32Array} mat The 4x4 matrix.\n     * @param {String} order Desired Euler angle order: \"XYZ\", \"YXZ\", \"ZXY\" etc.\n     * @param {Float32Array} [dest] Destination Euler angles, created by default.\n     * @returns {Float32Array} The Euler angles.\n     */\n    mat4ToEuler(mat, order, dest = math.vec4()) {\n        const clamp = math.clamp;\n\n        // Assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        const m11 = mat[0];\n\n        const m12 = mat[4];\n        const m13 = mat[8];\n        const m21 = mat[1];\n        const m22 = mat[5];\n        const m23 = mat[9];\n        const m31 = mat[2];\n        const m32 = mat[6];\n        const m33 = mat[10];\n\n        if (order === 'XYZ') {\n\n            dest[1] = Math.asin(clamp(m13, -1, 1));\n\n            if (Math.abs(m13) < 0.99999) {\n                dest[0] = Math.atan2(-m23, m33);\n                dest[2] = Math.atan2(-m12, m11);\n            } else {\n                dest[0] = Math.atan2(m32, m22);\n                dest[2] = 0;\n\n            }\n\n        } else if (order === 'YXZ') {\n\n            dest[0] = Math.asin(-clamp(m23, -1, 1));\n\n            if (Math.abs(m23) < 0.99999) {\n                dest[1] = Math.atan2(m13, m33);\n                dest[2] = Math.atan2(m21, m22);\n            } else {\n                dest[1] = Math.atan2(-m31, m11);\n                dest[2] = 0;\n            }\n\n        } else if (order === 'ZXY') {\n\n            dest[0] = Math.asin(clamp(m32, -1, 1));\n\n            if (Math.abs(m32) < 0.99999) {\n                dest[1] = Math.atan2(-m31, m33);\n                dest[2] = Math.atan2(-m12, m22);\n            } else {\n                dest[1] = 0;\n                dest[2] = Math.atan2(m21, m11);\n            }\n\n        } else if (order === 'ZYX') {\n\n            dest[1] = Math.asin(-clamp(m31, -1, 1));\n\n            if (Math.abs(m31) < 0.99999) {\n                dest[0] = Math.atan2(m32, m33);\n                dest[2] = Math.atan2(m21, m11);\n            } else {\n                dest[0] = 0;\n                dest[2] = Math.atan2(-m12, m22);\n            }\n\n        } else if (order === 'YZX') {\n\n            dest[2] = Math.asin(clamp(m21, -1, 1));\n\n            if (Math.abs(m21) < 0.99999) {\n                dest[0] = Math.atan2(-m23, m22);\n                dest[1] = Math.atan2(-m31, m11);\n            } else {\n                dest[0] = 0;\n                dest[1] = Math.atan2(m13, m33);\n            }\n\n        } else if (order === 'XZY') {\n\n            dest[2] = Math.asin(-clamp(m12, -1, 1));\n\n            if (Math.abs(m12) < 0.99999) {\n                dest[0] = Math.atan2(m32, m22);\n                dest[1] = Math.atan2(m13, m11);\n            } else {\n                dest[0] = Math.atan2(-m23, m33);\n                dest[1] = 0;\n            }\n        }\n\n        return dest;\n    },\n\n    composeMat4(position, quaternion, scale, mat = math.mat4()) {\n        math.quaternionToRotationMat4(quaternion, mat);\n        math.scaleMat4v(scale, mat);\n        math.translateMat4v(position, mat);\n\n        return mat;\n    },\n\n    decomposeMat4: (() => {\n\n        const vec = new Float32Array(3);\n        const matrix = new Float32Array(16);\n\n        return function decompose(mat, position, quaternion, scale) {\n\n            vec[0] = mat[0];\n            vec[1] = mat[1];\n            vec[2] = mat[2];\n\n            let sx = math.lenVec3(vec);\n\n            vec[0] = mat[4];\n            vec[1] = mat[5];\n            vec[2] = mat[6];\n\n            const sy = math.lenVec3(vec);\n\n            vec[8] = mat[8];\n            vec[9] = mat[9];\n            vec[10] = mat[10];\n\n            const sz = math.lenVec3(vec);\n\n            // if determine is negative, we need to invert one scale\n            const det = math.determinantMat4(mat);\n\n            if (det < 0) {\n                sx = -sx;\n            }\n\n            position[0] = mat[12];\n            position[1] = mat[13];\n            position[2] = mat[14];\n\n            // scale the rotation part\n            matrix.set(mat);\n\n            const invSX = 1 / sx;\n            const invSY = 1 / sy;\n            const invSZ = 1 / sz;\n\n            matrix[0] *= invSX;\n            matrix[1] *= invSX;\n            matrix[2] *= invSX;\n\n            matrix[4] *= invSY;\n            matrix[5] *= invSY;\n            matrix[6] *= invSY;\n\n            matrix[8] *= invSZ;\n            matrix[9] *= invSZ;\n            matrix[10] *= invSZ;\n\n            math.mat4ToQuaternion(matrix, quaternion);\n\n            scale[0] = sx;\n            scale[1] = sy;\n            scale[2] = sz;\n\n            return this;\n\n        };\n\n    })(),\n\n    /**\n     * Returns a 4x4 'lookat' viewing transform matrix.\n     * @method lookAtMat4v\n     * @param pos vec3 position of the viewer\n     * @param target vec3 point the viewer is looking at\n     * @param up vec3 pointing \"up\"\n     * @param dest mat4 Optional, mat4 matrix will be written into\n     *\n     * @return {mat4} dest if specified, a new mat4 otherwise\n     */\n    lookAtMat4v(pos, target, up, dest) {\n        if (!dest) {\n            dest = math.mat4();\n        }\n\n        const posx = pos[0];\n        const posy = pos[1];\n        const posz = pos[2];\n        const upx = up[0];\n        const upy = up[1];\n        const upz = up[2];\n        const targetx = target[0];\n        const targety = target[1];\n        const targetz = target[2];\n\n        if (posx === targetx && posy === targety && posz === targetz) {\n            return math.identityMat4();\n        }\n\n        let z0;\n        let z1;\n        let z2;\n        let x0;\n        let x1;\n        let x2;\n        let y0;\n        let y1;\n        let y2;\n        let len;\n\n        //vec3.direction(eye, center, z);\n        z0 = posx - targetx;\n        z1 = posy - targety;\n        z2 = posz - targetz;\n\n        // normalize (no check needed for 0 because of early return)\n        len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n\n        //vec3.normalize(vec3.cross(up, z, x));\n        x0 = upy * z2 - upz * z1;\n        x1 = upz * z0 - upx * z2;\n        x2 = upx * z1 - upy * z0;\n        len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n        if (!len) {\n            x0 = 0;\n            x1 = 0;\n            x2 = 0;\n        } else {\n            len = 1 / len;\n            x0 *= len;\n            x1 *= len;\n            x2 *= len;\n        }\n\n        //vec3.normalize(vec3.cross(z, x, y));\n        y0 = z1 * x2 - z2 * x1;\n        y1 = z2 * x0 - z0 * x2;\n        y2 = z0 * x1 - z1 * x0;\n\n        len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n        if (!len) {\n            y0 = 0;\n            y1 = 0;\n            y2 = 0;\n        } else {\n            len = 1 / len;\n            y0 *= len;\n            y1 *= len;\n            y2 *= len;\n        }\n\n        dest[0] = x0;\n        dest[1] = y0;\n        dest[2] = z0;\n        dest[3] = 0;\n        dest[4] = x1;\n        dest[5] = y1;\n        dest[6] = z1;\n        dest[7] = 0;\n        dest[8] = x2;\n        dest[9] = y2;\n        dest[10] = z2;\n        dest[11] = 0;\n        dest[12] = -(x0 * posx + x1 * posy + x2 * posz);\n        dest[13] = -(y0 * posx + y1 * posy + y2 * posz);\n        dest[14] = -(z0 * posx + z1 * posy + z2 * posz);\n        dest[15] = 1;\n\n        return dest;\n    },\n\n    /**\n     * Returns a 4x4 'lookat' viewing transform matrix.\n     * @method lookAtMat4c\n     * @static\n     */\n    lookAtMat4c(posx, posy, posz, targetx, targety, targetz, upx, upy, upz) {\n        return math.lookAtMat4v([posx, posy, posz], [targetx, targety, targetz], [upx, upy, upz], []);\n    },\n\n    /**\n     * Returns a 4x4 orthographic projection matrix.\n     * @method orthoMat4c\n     * @static\n     */\n    orthoMat4c(left, right, bottom, top, near, far, dest) {\n        if (!dest) {\n            dest = math.mat4();\n        }\n        const rl = (right - left);\n        const tb = (top - bottom);\n        const fn = (far - near);\n\n        dest[0] = 2.0 / rl;\n        dest[1] = 0.0;\n        dest[2] = 0.0;\n        dest[3] = 0.0;\n\n        dest[4] = 0.0;\n        dest[5] = 2.0 / tb;\n        dest[6] = 0.0;\n        dest[7] = 0.0;\n\n        dest[8] = 0.0;\n        dest[9] = 0.0;\n        dest[10] = -2.0 / fn;\n        dest[11] = 0.0;\n\n        dest[12] = -(left + right) / rl;\n        dest[13] = -(top + bottom) / tb;\n        dest[14] = -(far + near) / fn;\n        dest[15] = 1.0;\n\n        return dest;\n    },\n\n    /**\n     * Returns a 4x4 perspective projection matrix.\n     * @method frustumMat4v\n     * @static\n     */\n    frustumMat4v(fmin, fmax, m) {\n        if (!m) {\n            m = math.mat4();\n        }\n\n        const fmin4 = [fmin[0], fmin[1], fmin[2], 0.0];\n        const fmax4 = [fmax[0], fmax[1], fmax[2], 0.0];\n\n        math.addVec4(fmax4, fmin4, tempMat1);\n        math.subVec4(fmax4, fmin4, tempMat2);\n\n        const t = 2.0 * fmin4[2];\n\n        const tempMat20 = tempMat2[0];\n        const tempMat21 = tempMat2[1];\n        const tempMat22 = tempMat2[2];\n\n        m[0] = t / tempMat20;\n        m[1] = 0.0;\n        m[2] = 0.0;\n        m[3] = 0.0;\n\n        m[4] = 0.0;\n        m[5] = t / tempMat21;\n        m[6] = 0.0;\n        m[7] = 0.0;\n\n        m[8] = tempMat1[0] / tempMat20;\n        m[9] = tempMat1[1] / tempMat21;\n        m[10] = -tempMat1[2] / tempMat22;\n        m[11] = -1.0;\n\n        m[12] = 0.0;\n        m[13] = 0.0;\n        m[14] = -t * fmax4[2] / tempMat22;\n        m[15] = 0.0;\n\n        return m;\n    },\n\n    /**\n     * Returns a 4x4 perspective projection matrix.\n     * @method frustumMat4v\n     * @static\n     */\n    frustumMat4(left, right, bottom, top, near, far, dest) {\n        if (!dest) {\n            dest = math.mat4();\n        }\n        const rl = (right - left);\n        const tb = (top - bottom);\n        const fn = (far - near);\n        dest[0] = (near * 2) / rl;\n        dest[1] = 0;\n        dest[2] = 0;\n        dest[3] = 0;\n        dest[4] = 0;\n        dest[5] = (near * 2) / tb;\n        dest[6] = 0;\n        dest[7] = 0;\n        dest[8] = (right + left) / rl;\n        dest[9] = (top + bottom) / tb;\n        dest[10] = -(far + near) / fn;\n        dest[11] = -1;\n        dest[12] = 0;\n        dest[13] = 0;\n        dest[14] = -(far * near * 2) / fn;\n        dest[15] = 0;\n        return dest;\n    },\n\n    /**\n     * Returns a 4x4 perspective projection matrix.\n     * @method perspectiveMat4v\n     * @static\n     */\n    perspectiveMat4(fovyrad, aspectratio, znear, zfar, m) {\n        const pmin = [];\n        const pmax = [];\n\n        pmin[2] = znear;\n        pmax[2] = zfar;\n\n        pmax[1] = pmin[2] * Math.tan(fovyrad / 2.0);\n        pmin[1] = -pmax[1];\n\n        pmax[0] = pmax[1] * aspectratio;\n        pmin[0] = -pmax[0];\n\n        return math.frustumMat4v(pmin, pmax, m);\n    },\n\n    /**\n     * Transforms a three-element position by a 4x4 matrix.\n     * @method transformPoint3\n     * @static\n     */\n    transformPoint3(m, p, dest = math.vec3()) {\n\n        const x = p[0];\n        const y = p[1];\n        const z = p[2];\n\n        dest[0] = (m[0] * x) + (m[4] * y) + (m[8] * z) + m[12];\n        dest[1] = (m[1] * x) + (m[5] * y) + (m[9] * z) + m[13];\n        dest[2] = (m[2] * x) + (m[6] * y) + (m[10] * z) + m[14];\n\n        return dest;\n    },\n\n    /**\n     * Transforms a homogeneous coordinate by a 4x4 matrix.\n     * @method transformPoint3\n     * @static\n     */\n    transformPoint4(m, v, dest = math.vec4()) {\n        dest[0] = m[0] * v[0] + m[4] * v[1] + m[8] * v[2] + m[12] * v[3];\n        dest[1] = m[1] * v[0] + m[5] * v[1] + m[9] * v[2] + m[13] * v[3];\n        dest[2] = m[2] * v[0] + m[6] * v[1] + m[10] * v[2] + m[14] * v[3];\n        dest[3] = m[3] * v[0] + m[7] * v[1] + m[11] * v[2] + m[15] * v[3];\n\n        return dest;\n    },\n\n\n    /**\n     * Transforms an array of three-element positions by a 4x4 matrix.\n     * @method transformPoints3\n     * @static\n     */\n    transformPoints3(m, points, points2) {\n        const result = points2 || [];\n        const len = points.length;\n        let p0;\n        let p1;\n        let p2;\n        let pi;\n\n        // cache values\n        const m0 = m[0];\n\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        let r;\n\n        for (let i = 0; i < len; ++i) {\n\n            // cache values\n            pi = points[i];\n\n            p0 = pi[0];\n            p1 = pi[1];\n            p2 = pi[2];\n\n            r = result[i] || (result[i] = [0, 0, 0]);\n\n            r[0] = (m0 * p0) + (m4 * p1) + (m8 * p2) + m12;\n            r[1] = (m1 * p0) + (m5 * p1) + (m9 * p2) + m13;\n            r[2] = (m2 * p0) + (m6 * p1) + (m10 * p2) + m14;\n            r[3] = (m3 * p0) + (m7 * p1) + (m11 * p2) + m15;\n        }\n\n        result.length = len;\n\n        return result;\n    },\n\n    /**\n     * Transforms an array of positions by a 4x4 matrix.\n     * @method transformPositions3\n     * @static\n     */\n    transformPositions3(m, p, p2 = p) {\n        let i;\n        const len = p.length;\n\n        let x;\n        let y;\n        let z;\n\n        const m0 = m[0];\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        for (i = 0; i < len; i += 3) {\n\n            x = p[i + 0];\n            y = p[i + 1];\n            z = p[i + 2];\n\n            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;\n            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;\n            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;\n            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;\n        }\n\n        return p2;\n    },\n\n    /**\n     * Transforms an array of positions by a 4x4 matrix.\n     * @method transformPositions4\n     * @static\n     */\n    transformPositions4(m, p, p2 = p) {\n        let i;\n        const len = p.length;\n\n        let x;\n        let y;\n        let z;\n\n        const m0 = m[0];\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        for (i = 0; i < len; i += 4) {\n\n            x = p[i + 0];\n            y = p[i + 1];\n            z = p[i + 2];\n\n            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;\n            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;\n            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;\n            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;\n        }\n\n        return p2;\n    },\n\n    /**\n     * Transforms a three-element vector by a 4x4 matrix.\n     * @method transformVec3\n     * @static\n     */\n    transformVec3(m, v, dest) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        dest = dest || this.vec3();\n        dest[0] = (m[0] * v0) + (m[4] * v1) + (m[8] * v2);\n        dest[1] = (m[1] * v0) + (m[5] * v1) + (m[9] * v2);\n        dest[2] = (m[2] * v0) + (m[6] * v1) + (m[10] * v2);\n        return dest;\n    },\n\n    /**\n     * Transforms a four-element vector by a 4x4 matrix.\n     * @method transformVec4\n     * @static\n     */\n    transformVec4(m, v, dest) {\n        const v0 = v[0];\n        const v1 = v[1];\n        const v2 = v[2];\n        const v3 = v[3];\n        dest = dest || math.vec4();\n        dest[0] = m[0] * v0 + m[4] * v1 + m[8] * v2 + m[12] * v3;\n        dest[1] = m[1] * v0 + m[5] * v1 + m[9] * v2 + m[13] * v3;\n        dest[2] = m[2] * v0 + m[6] * v1 + m[10] * v2 + m[14] * v3;\n        dest[3] = m[3] * v0 + m[7] * v1 + m[11] * v2 + m[15] * v3;\n        return dest;\n    },\n\n    /**\n     * Rotate a 3D vector around the x-axis\n     *\n     * @method rotateVec3X\n     * @param {Float32Array} a The vec3 point to rotate\n     * @param {Float32Array} b The origin of the rotation\n     * @param {Number} c The angle of rotation\n     * @param {Float32Array} dest The receiving vec3\n     * @returns {Float32Array} dest\n     * @static\n     */\n    rotateVec3X(a, b, c, dest) {\n        const p = [];\n        const r = [];\n\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n\n        //perform rotation\n        r[0] = p[0];\n        r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);\n        r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);\n\n        //translate to correct position\n        dest[0] = r[0] + b[0];\n        dest[1] = r[1] + b[1];\n        dest[2] = r[2] + b[2];\n\n        return dest;\n    },\n\n    /**\n     * Rotate a 3D vector around the y-axis\n     *\n     * @method rotateVec3Y\n     * @param {Float32Array} a The vec3 point to rotate\n     * @param {Float32Array} b The origin of the rotation\n     * @param {Number} c The angle of rotation\n     * @param {Float32Array} dest The receiving vec3\n     * @returns {Float32Array} dest\n     * @static\n     */\n    rotateVec3Y(a, b, c, dest) {\n        const p = [];\n        const r = [];\n\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n\n        //perform rotation\n        r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);\n        r[1] = p[1];\n        r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);\n\n        //translate to correct position\n        dest[0] = r[0] + b[0];\n        dest[1] = r[1] + b[1];\n        dest[2] = r[2] + b[2];\n\n        return dest;\n    },\n\n    /**\n     * Rotate a 3D vector around the z-axis\n     *\n     * @method rotateVec3Z\n     * @param {Float32Array} a The vec3 point to rotate\n     * @param {Float32Array} b The origin of the rotation\n     * @param {Number} c The angle of rotation\n     * @param {Float32Array} dest The receiving vec3\n     * @returns {Float32Array} dest\n     * @static\n     */\n    rotateVec3Z(a, b, c, dest) {\n        const p = [];\n        const r = [];\n\n        //Translate point to the origin\n        p[0] = a[0] - b[0];\n        p[1] = a[1] - b[1];\n        p[2] = a[2] - b[2];\n\n        //perform rotation\n        r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);\n        r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);\n        r[2] = p[2];\n\n        //translate to correct position\n        dest[0] = r[0] + b[0];\n        dest[1] = r[1] + b[1];\n        dest[2] = r[2] + b[2];\n\n        return dest;\n    },\n\n    /**\n     * Transforms a four-element vector by a 4x4 projection matrix.\n     *\n     * @method projectVec4\n     * @param {Float32Array} p 3D View-space coordinate\n     * @param {Float32Array} q 2D Projected coordinate\n     * @returns {Float32Array} 2D Projected coordinate\n     * @static\n     */\n    projectVec4(p, q) {\n        const f = 1.0 / p[3];\n        q = q || math.vec2();\n        q[0] = v[0] * f;\n        q[1] = v[1] * f;\n        return q;\n    },\n\n    /**\n     * Unprojects a three-element vector.\n     *\n     * @method unprojectVec3\n     * @param {Float32Array} p 3D Projected coordinate\n     * @param {Float32Array} viewMat View matrix\n     * @returns {Float32Array} projMat Projection matrix\n     * @static\n     */\n    unprojectVec3: ((() => {\n        const mat = new Float32Array(16);\n        const mat2 = new Float32Array(16);\n        const mat3 = new Float32Array(16);\n        return function (p, viewMat, projMat, q) {\n            return this.transformVec3(this.mulMat4(this.inverseMat4(viewMat, mat), this.inverseMat4(projMat, mat2), mat3), p, q)\n        };\n    }))(),\n\n    /**\n     * Linearly interpolates between two 3D vectors.\n     * @method lerpVec3\n     * @static\n     */\n    lerpVec3(t, t1, t2, p1, p2, dest) {\n        const result = dest || math.vec3();\n        const f = (t - t1) / (t2 - t1);\n        result[0] = p1[0] + (f * (p2[0] - p1[0]));\n        result[1] = p1[1] + (f * (p2[1] - p1[1]));\n        result[2] = p1[2] + (f * (p2[2] - p1[2]));\n        return result;\n    },\n\n\n    /**\n     * Flattens a two-dimensional array into a one-dimensional array.\n     *\n     * @method flatten\n     * @static\n     * @param {Array of Arrays} a A 2D array\n     * @returns Flattened 1D array\n     */\n    flatten(a) {\n\n        const result = [];\n\n        let i;\n        let leni;\n        let j;\n        let lenj;\n        let item;\n\n        for (i = 0, leni = a.length; i < leni; i++) {\n            item = a[i];\n            for (j = 0, lenj = item.length; j < lenj; j++) {\n                result.push(item[j]);\n            }\n        }\n\n        return result;\n    },\n\n\n    identityQuaternion(dest = math.vec4()) {\n        dest[0] = 0.0;\n        dest[1] = 0.0;\n        dest[2] = 0.0;\n        dest[3] = 1.0;\n        return dest;\n    },\n\n    /**\n     * Initializes a quaternion from Euler angles.\n     *\n     * @param {Float32Array} euler The Euler angles.\n     * @param {String} order Euler angle order: \"XYZ\", \"YXZ\", \"ZXY\" etc.\n     * @param {Float32Array} [dest] Destination quaternion, created by default.\n     * @returns {Float32Array} The quaternion.\n     */\n    eulerToQuaternion(euler, order, dest = math.vec4()) {\n        // http://www.mathworks.com/matlabcentral/fileexchange/\n        // \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\n        //\tcontent/SpinCalc.m\n\n        const a = (euler[0] * math.DEGTORAD) / 2;\n        const b = (euler[1] * math.DEGTORAD) / 2;\n        const c = (euler[2] * math.DEGTORAD) / 2;\n\n        const c1 = Math.cos(a);\n        const c2 = Math.cos(b);\n        const c3 = Math.cos(c);\n        const s1 = Math.sin(a);\n        const s2 = Math.sin(b);\n        const s3 = Math.sin(c);\n\n        if (order === 'XYZ') {\n\n            dest[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if (order === 'YXZ') {\n\n            dest[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 + s1 * s2 * s3;\n\n        } else if (order === 'ZXY') {\n\n            dest[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if (order === 'ZYX') {\n\n            dest[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 + s1 * s2 * s3;\n\n        } else if (order === 'YZX') {\n\n            dest[0] = s1 * c2 * c3 + c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 + s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 - s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 - s1 * s2 * s3;\n\n        } else if (order === 'XZY') {\n\n            dest[0] = s1 * c2 * c3 - c1 * s2 * s3;\n            dest[1] = c1 * s2 * c3 - s1 * c2 * s3;\n            dest[2] = c1 * c2 * s3 + s1 * s2 * c3;\n            dest[3] = c1 * c2 * c3 + s1 * s2 * s3;\n        }\n\n        return dest;\n    },\n\n    mat4ToQuaternion(m, dest = math.vec4()) {\n        // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n\n        // Assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n\n        const m11 = m[0];\n        const m12 = m[4];\n        const m13 = m[8];\n        const m21 = m[1];\n        const m22 = m[5];\n        const m23 = m[9];\n        const m31 = m[2];\n        const m32 = m[6];\n        const m33 = m[10];\n        let s;\n\n        const trace = m11 + m22 + m33;\n\n        if (trace > 0) {\n\n            s = 0.5 / Math.sqrt(trace + 1.0);\n\n            dest[3] = 0.25 / s;\n            dest[0] = (m32 - m23) * s;\n            dest[1] = (m13 - m31) * s;\n            dest[2] = (m21 - m12) * s;\n\n        } else if (m11 > m22 && m11 > m33) {\n\n            s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33);\n\n            dest[3] = (m32 - m23) / s;\n            dest[0] = 0.25 * s;\n            dest[1] = (m12 + m21) / s;\n            dest[2] = (m13 + m31) / s;\n\n        } else if (m22 > m33) {\n\n            s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33);\n\n            dest[3] = (m13 - m31) / s;\n            dest[0] = (m12 + m21) / s;\n            dest[1] = 0.25 * s;\n            dest[2] = (m23 + m32) / s;\n\n        } else {\n\n            s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22);\n\n            dest[3] = (m21 - m12) / s;\n            dest[0] = (m13 + m31) / s;\n            dest[1] = (m23 + m32) / s;\n            dest[2] = 0.25 * s;\n        }\n\n        return dest;\n    },\n\n    vec3PairToQuaternion(u, v, dest = math.vec4()) {\n        const norm_u_norm_v = Math.sqrt(math.dotVec3(u, u) * math.dotVec3(v, v));\n        let real_part = norm_u_norm_v + math.dotVec3(u, v);\n\n        if (real_part < 0.00000001 * norm_u_norm_v) {\n\n            // If u and v are exactly opposite, rotate 180 degrees\n            // around an arbitrary orthogonal axis. Axis normalisation\n            // can happen later, when we normalise the quaternion.\n\n            real_part = 0.0;\n\n            if (Math.abs(u[0]) > Math.abs(u[2])) {\n\n                dest[0] = -u[1];\n                dest[1] = u[0];\n                dest[2] = 0;\n\n            } else {\n                dest[0] = 0;\n                dest[1] = -u[2];\n                dest[2] = u[1]\n            }\n\n        } else {\n\n            // Otherwise, build quaternion the standard way.\n            math.cross3Vec3(u, v, dest);\n        }\n\n        dest[3] = real_part;\n\n        return math.normalizeQuaternion(dest);\n    },\n\n    angleAxisToQuaternion(angleAxis, dest = math.vec4()) {\n        const halfAngle = angleAxis[3] / 2.0;\n        const fsin = Math.sin(halfAngle);\n        dest[0] = fsin * angleAxis[0];\n        dest[1] = fsin * angleAxis[1];\n        dest[2] = fsin * angleAxis[2];\n        dest[3] = Math.cos(halfAngle);\n        return dest;\n    },\n\n    quaternionToEuler: ((() => {\n        const mat = new Float32Array(16);\n        return (q, order, dest) => {\n            dest = dest || math.vec3();\n            math.quaternionToRotationMat4(q, mat);\n            math.mat4ToEuler(mat, order, dest);\n            return dest;\n        };\n    }))(),\n\n    mulQuaternions(p, q, dest = math.vec4()) {\n        const p0 = p[0];\n        const p1 = p[1];\n        const p2 = p[2];\n        const p3 = p[3];\n        const q0 = q[0];\n        const q1 = q[1];\n        const q2 = q[2];\n        const q3 = q[3];\n        dest[0] = p3 * q0 + p0 * q3 + p1 * q2 - p2 * q1;\n        dest[1] = p3 * q1 + p1 * q3 + p2 * q0 - p0 * q2;\n        dest[2] = p3 * q2 + p2 * q3 + p0 * q1 - p1 * q0;\n        dest[3] = p3 * q3 - p0 * q0 - p1 * q1 - p2 * q2;\n        return dest;\n    },\n\n    vec3ApplyQuaternion(q, vec, dest = math.vec3()) {\n        const x = vec[0];\n        const y = vec[1];\n        const z = vec[2];\n\n        const qx = q[0];\n        const qy = q[1];\n        const qz = q[2];\n        const qw = q[3];\n\n        // calculate quat * vector\n\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n\n        // calculate result * inverse quat\n\n        dest[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        dest[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        dest[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n        return dest;\n    },\n\n    quaternionToMat4(q, dest) {\n\n        dest = math.identityMat4(dest);\n\n        const q0 = q[0];  //x\n        const q1 = q[1];  //y\n        const q2 = q[2];  //z\n        const q3 = q[3];  //w\n\n        const tx = 2.0 * q0;\n        const ty = 2.0 * q1;\n        const tz = 2.0 * q2;\n\n        const twx = tx * q3;\n        const twy = ty * q3;\n        const twz = tz * q3;\n\n        const txx = tx * q0;\n        const txy = ty * q0;\n        const txz = tz * q0;\n\n        const tyy = ty * q1;\n        const tyz = tz * q1;\n        const tzz = tz * q2;\n\n        dest[0] = 1.0 - (tyy + tzz);\n        dest[1] = txy + twz;\n        dest[2] = txz - twy;\n\n        dest[4] = txy - twz;\n        dest[5] = 1.0 - (txx + tzz);\n        dest[6] = tyz + twx;\n\n        dest[8] = txz + twy;\n        dest[9] = tyz - twx;\n\n        dest[10] = 1.0 - (txx + tyy);\n\n        return dest;\n    },\n\n    quaternionToRotationMat4(q, m) {\n        const x = q[0];\n        const y = q[1];\n        const z = q[2];\n        const w = q[3];\n\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n\n        m[0] = 1 - (yy + zz);\n        m[4] = xy - wz;\n        m[8] = xz + wy;\n\n        m[1] = xy + wz;\n        m[5] = 1 - (xx + zz);\n        m[9] = yz - wx;\n\n        m[2] = xz - wy;\n        m[6] = yz + wx;\n        m[10] = 1 - (xx + yy);\n\n        // last column\n        m[3] = 0;\n        m[7] = 0;\n        m[11] = 0;\n\n        // bottom row\n        m[12] = 0;\n        m[13] = 0;\n        m[14] = 0;\n        m[15] = 1;\n\n        return m;\n    },\n\n    normalizeQuaternion(q, dest = q) {\n        const len = math.lenVec4([q[0], q[1], q[2], q[3]]);\n        dest[0] = q[0] / len;\n        dest[1] = q[1] / len;\n        dest[2] = q[2] / len;\n        dest[3] = q[3] / len;\n        return dest;\n    },\n\n    conjugateQuaternion(q, dest = q) {\n        dest[0] = -q[0];\n        dest[1] = -q[1];\n        dest[2] = -q[2];\n        dest[3] = q[3];\n        return dest;\n    },\n\n    inverseQuaternion(q, dest) {\n        return math.normalizeQuaternion(math.conjugateQuaternion(q, dest));\n    },\n\n    quaternionToAngleAxis(q, angleAxis = math.vec4()) {\n        q = math.normalizeQuaternion(q, tempVec4);\n        const q3 = q[3];\n        const angle = 2 * Math.acos(q3);\n        const s = Math.sqrt(1 - q3 * q3);\n        if (s < 0.001) { // test to avoid divide by zero, s is always positive due to sqrt\n            angleAxis[0] = q[0];\n            angleAxis[1] = q[1];\n            angleAxis[2] = q[2];\n        } else {\n            angleAxis[0] = q[0] / s;\n            angleAxis[1] = q[1] / s;\n            angleAxis[2] = q[2] / s;\n        }\n        angleAxis[3] = angle; // * 57.295779579;\n        return angleAxis;\n    },\n\n    decompressPosition(position, decodeMatrix, dest) {\n        dest[0] = position[0] * decodeMatrix[0] + decodeMatrix[12];\n        dest[1] = position[1] * decodeMatrix[5] + decodeMatrix[13];\n        dest[2] = position[2] * decodeMatrix[10] + decodeMatrix[14];\n    },\n\n    decompressPositions(positions, decodeMatrix, dest = new Float32Array(positions.length)) {\n        for (let i = 0, len = positions.length; i < len; i += 3) {\n            dest[i + 0] = positions[i + 0] * decodeMatrix[0] + decodeMatrix[12];\n            dest[i + 1] = positions[i + 1] * decodeMatrix[5] + decodeMatrix[13];\n            dest[i + 2] = positions[i + 2] * decodeMatrix[10] + decodeMatrix[14];\n        }\n        return dest;\n    },\n\n    decompressUV(uv, decodeMatrix, dest) {\n        dest[0] = uv[0] * decodeMatrix[0] + decodeMatrix[6];\n        dest[1] = uv[1] * decodeMatrix[4] + decodeMatrix[7];\n    },\n\n    decompressUVs(uvs, decodeMatrix, dest = new Float32Array(uvs.length)) {\n        for (let i = 0, len = uvs.length; i < len; i += 3) {\n            dest[i + 0] = uvs[i + 0] * decodeMatrix[0] + decodeMatrix[6];\n            dest[i + 1] = uvs[i + 1] * decodeMatrix[4] + decodeMatrix[7];\n        }\n        return dest;\n    },\n\n    octDecodeVec2(oct, result) {\n        let x = oct[0];\n        let y = oct[1];\n        x = (2 * x + 1) / 255;\n        y = (2 * y + 1) / 255;\n        const z = 1 - Math.abs(x) - Math.abs(y);\n        if (z < 0) {\n            x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n            y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n        }\n        const length = Math.sqrt(x * x + y * y + z * z);\n        result[0] = x / length;\n        result[1] = y / length;\n        result[2] = z / length;\n        return result;\n    },\n\n    octDecodeVec2s(octs, result) {\n        for (let i = 0, j = 0, len = octs.length; i < len; i += 2) {\n            let x = octs[i + 0];\n            let y = octs[i + 1];\n            x = (2 * x + 1) / 255;\n            y = (2 * y + 1) / 255;\n            const z = 1 - Math.abs(x) - Math.abs(y);\n            if (z < 0) {\n                x = (1 - Math.abs(y)) * (x >= 0 ? 1 : -1);\n                y = (1 - Math.abs(x)) * (y >= 0 ? 1 : -1);\n            }\n            const length = Math.sqrt(x * x + y * y + z * z);\n            result[j + 0] = x / length;\n            result[j + 1] = y / length;\n            result[j + 2] = z / length;\n            j += 3;\n        }\n        return result;\n    },\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Boundaries\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Returns a new, uninitialized 3D axis-aligned bounding box.\n     *\n     * @private\n     */\n    AABB3(values) {\n        return new Float32Array(values || 6);\n    },\n\n    /**\n     * Returns a new, uninitialized 2D axis-aligned bounding box.\n     *\n     * @private\n     */\n    AABB2(values) {\n        return new Float32Array(values || 4);\n    },\n\n    /**\n     * Returns a new, uninitialized 3D oriented bounding box (OBB).\n     *\n     * @private\n     */\n    OBB3(values) {\n        return new Float32Array(values || 32);\n    },\n\n    /**\n     * Returns a new, uninitialized 2D oriented bounding box (OBB).\n     *\n     * @private\n     */\n    OBB2(values) {\n        return new Float32Array(values || 16);\n    },\n\n\n    /**\n     * Transforms an OBB3 by a 4x4 matrix.\n     *\n     * @private\n     */\n    transformOBB3(m, p, p2 = p) {\n        let i;\n        const len = p.length;\n\n        let x;\n        let y;\n        let z;\n\n        const m0 = m[0];\n        const m1 = m[1];\n        const m2 = m[2];\n        const m3 = m[3];\n        const m4 = m[4];\n        const m5 = m[5];\n        const m6 = m[6];\n        const m7 = m[7];\n        const m8 = m[8];\n        const m9 = m[9];\n        const m10 = m[10];\n        const m11 = m[11];\n        const m12 = m[12];\n        const m13 = m[13];\n        const m14 = m[14];\n        const m15 = m[15];\n\n        for (i = 0; i < len; i += 4) {\n\n            x = p[i + 0];\n            y = p[i + 1];\n            z = p[i + 2];\n\n            p2[i + 0] = (m0 * x) + (m4 * y) + (m8 * z) + m12;\n            p2[i + 1] = (m1 * x) + (m5 * y) + (m9 * z) + m13;\n            p2[i + 2] = (m2 * x) + (m6 * y) + (m10 * z) + m14;\n            p2[i + 3] = (m3 * x) + (m7 * y) + (m11 * z) + m15;\n        }\n\n        return p2;\n    },\n\n    /**\n     * Gets the diagonal size of an AABB3 given as minima and maxima.\n     *\n     * @private\n     */\n    getAABB3Diag: ((() => {\n\n        const min = new Float32Array(3);\n        const max = new Float32Array(3);\n        const tempVec3 = new Float32Array(3);\n\n        return aabb => {\n\n            min[0] = aabb[0];\n            min[1] = aabb[1];\n            min[2] = aabb[2];\n\n            max[0] = aabb[3];\n            max[1] = aabb[4];\n            max[2] = aabb[5];\n\n            math.subVec3(max, min, tempVec3);\n\n            return Math.abs(math.lenVec3(tempVec3));\n        };\n    }))(),\n\n    /**\n     * Get a diagonal boundary size that is symmetrical about the given point.\n     *\n     * @private\n     */\n    getAABB3DiagPoint: ((() => {\n\n        const min = new Float32Array(3);\n        const max = new Float32Array(3);\n        const tempVec3 = new Float32Array(3);\n\n        return (aabb, p) => {\n\n            min[0] = aabb[0];\n            min[1] = aabb[1];\n            min[2] = aabb[2];\n\n            max[0] = aabb[3];\n            max[1] = aabb[4];\n            max[2] = aabb[5];\n\n            const diagVec = math.subVec3(max, min, tempVec3);\n\n            const xneg = p[0] - aabb[0];\n            const xpos = aabb[3] - p[0];\n            const yneg = p[1] - aabb[1];\n            const ypos = aabb[4] - p[1];\n            const zneg = p[2] - aabb[2];\n            const zpos = aabb[5] - p[2];\n\n            diagVec[0] += (xneg > xpos) ? xneg : xpos;\n            diagVec[1] += (yneg > ypos) ? yneg : ypos;\n            diagVec[2] += (zneg > zpos) ? zneg : zpos;\n\n            return Math.abs(math.lenVec3(diagVec));\n        };\n    }))(),\n\n    /**\n     * Gets the center of an AABB.\n     *\n     * @private\n     */\n    getAABB3Center(aabb, dest) {\n        const r = dest || math.vec3();\n\n        r[0] = (aabb[0] + aabb[3]) / 2;\n        r[1] = (aabb[1] + aabb[4]) / 2;\n        r[2] = (aabb[2] + aabb[5]) / 2;\n\n        return r;\n    },\n\n    /**\n     * Gets the center of a 2D AABB.\n     *\n     * @private\n     */\n    getAABB2Center(aabb, dest) {\n        const r = dest || math.vec2();\n\n        r[0] = (aabb[2] + aabb[0]) / 2;\n        r[1] = (aabb[3] + aabb[1]) / 2;\n\n        return r;\n    },\n\n    /**\n     * Collapses a 3D axis-aligned boundary, ready to expand to fit 3D points.\n     * Creates new AABB if none supplied.\n     *\n     * @private\n     */\n    collapseAABB3(aabb = math.AABB3()) {\n        aabb[0] = math.MAX_DOUBLE;\n        aabb[1] = math.MAX_DOUBLE;\n        aabb[2] = math.MAX_DOUBLE;\n        aabb[3] = -math.MAX_DOUBLE;\n        aabb[4] = -math.MAX_DOUBLE;\n        aabb[5] = -math.MAX_DOUBLE;\n\n        return aabb;\n    },\n\n    /**\n     * Converts an axis-aligned 3D boundary into an oriented boundary consisting of\n     * an array of eight 3D positions, one for each corner of the boundary.\n     *\n     * @private\n     */\n    AABB3ToOBB3(aabb, obb = math.OBB3()) {\n        obb[0] = aabb[0];\n        obb[1] = aabb[1];\n        obb[2] = aabb[2];\n        obb[3] = 1;\n\n        obb[4] = aabb[3];\n        obb[5] = aabb[1];\n        obb[6] = aabb[2];\n        obb[7] = 1;\n\n        obb[8] = aabb[3];\n        obb[9] = aabb[4];\n        obb[10] = aabb[2];\n        obb[11] = 1;\n\n        obb[12] = aabb[0];\n        obb[13] = aabb[4];\n        obb[14] = aabb[2];\n        obb[15] = 1;\n\n        obb[16] = aabb[0];\n        obb[17] = aabb[1];\n        obb[18] = aabb[5];\n        obb[19] = 1;\n\n        obb[20] = aabb[3];\n        obb[21] = aabb[1];\n        obb[22] = aabb[5];\n        obb[23] = 1;\n\n        obb[24] = aabb[3];\n        obb[25] = aabb[4];\n        obb[26] = aabb[5];\n        obb[27] = 1;\n\n        obb[28] = aabb[0];\n        obb[29] = aabb[4];\n        obb[30] = aabb[5];\n        obb[31] = 1;\n\n        return obb;\n    },\n\n    /**\n     * Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.\n     *\n     * @private\n     */\n    positions3ToAABB3: ((() => {\n\n        const p = new Float32Array(3);\n\n        return (positions, aabb, positionsDecodeMatrix) => {\n            aabb = aabb || math.AABB3();\n\n            let xmin = math.MAX_DOUBLE;\n            let ymin = math.MAX_DOUBLE;\n            let zmin = math.MAX_DOUBLE;\n            let xmax = -math.MAX_DOUBLE;\n            let ymax = -math.MAX_DOUBLE;\n            let zmax = -math.MAX_DOUBLE;\n\n            let x;\n            let y;\n            let z;\n\n            for (let i = 0, len = positions.length; i < len; i += 3) {\n\n                if (positionsDecodeMatrix) {\n\n                    p[0] = positions[i + 0];\n                    p[1] = positions[i + 1];\n                    p[2] = positions[i + 2];\n\n                    math.decompressPosition(p, positionsDecodeMatrix, p);\n\n                    x = p[0];\n                    y = p[1];\n                    z = p[2];\n\n                } else {\n                    x = positions[i + 0];\n                    y = positions[i + 1];\n                    z = positions[i + 2];\n                }\n\n                if (x < xmin) {\n                    xmin = x;\n                }\n\n                if (y < ymin) {\n                    ymin = y;\n                }\n\n                if (z < zmin) {\n                    zmin = z;\n                }\n\n                if (x > xmax) {\n                    xmax = x;\n                }\n\n                if (y > ymax) {\n                    ymax = y;\n                }\n\n                if (z > zmax) {\n                    zmax = z;\n                }\n            }\n\n            aabb[0] = xmin;\n            aabb[1] = ymin;\n            aabb[2] = zmin;\n            aabb[3] = xmax;\n            aabb[4] = ymax;\n            aabb[5] = zmax;\n\n            return aabb;\n        };\n    }))(),\n\n    /**\n     * Finds the minimum axis-aligned 3D boundary enclosing the homogeneous 3D points (x,y,z,w) given in a flattened array.\n     *\n     * @private\n     */\n    OBB3ToAABB3(obb, aabb = math.AABB3()) {\n        let xmin = math.MAX_DOUBLE;\n        let ymin = math.MAX_DOUBLE;\n        let zmin = math.MAX_DOUBLE;\n        let xmax = -math.MAX_DOUBLE;\n        let ymax = -math.MAX_DOUBLE;\n        let zmax = -math.MAX_DOUBLE;\n\n        let x;\n        let y;\n        let z;\n\n        for (let i = 0, len = obb.length; i < len; i += 4) {\n\n            x = obb[i + 0];\n            y = obb[i + 1];\n            z = obb[i + 2];\n\n            if (x < xmin) {\n                xmin = x;\n            }\n\n            if (y < ymin) {\n                ymin = y;\n            }\n\n            if (z < zmin) {\n                zmin = z;\n            }\n\n            if (x > xmax) {\n                xmax = x;\n            }\n\n            if (y > ymax) {\n                ymax = y;\n            }\n\n            if (z > zmax) {\n                zmax = z;\n            }\n        }\n\n        aabb[0] = xmin;\n        aabb[1] = ymin;\n        aabb[2] = zmin;\n        aabb[3] = xmax;\n        aabb[4] = ymax;\n        aabb[5] = zmax;\n\n        return aabb;\n    },\n\n    /**\n     * Finds the minimum axis-aligned 3D boundary enclosing the given 3D points.\n     *\n     * @private\n     */\n    points3ToAABB3(points, aabb = math.AABB3()) {\n        let xmin = math.MAX_DOUBLE;\n        let ymin = math.MAX_DOUBLE;\n        let zmin = math.MAX_DOUBLE;\n        let xmax = -math.MAX_DOUBLE;\n        let ymax = -math.MAX_DOUBLE;\n        let zmax = -math.MAX_DOUBLE;\n\n        let x;\n        let y;\n        let z;\n\n        for (let i = 0, len = points.length; i < len; i++) {\n\n            x = points[i][0];\n            y = points[i][1];\n            z = points[i][2];\n\n            if (x < xmin) {\n                xmin = x;\n            }\n\n            if (y < ymin) {\n                ymin = y;\n            }\n\n            if (z < zmin) {\n                zmin = z;\n            }\n\n            if (x > xmax) {\n                xmax = x;\n            }\n\n            if (y > ymax) {\n                ymax = y;\n            }\n\n            if (z > zmax) {\n                zmax = z;\n            }\n        }\n\n        aabb[0] = xmin;\n        aabb[1] = ymin;\n        aabb[2] = zmin;\n        aabb[3] = xmax;\n        aabb[4] = ymax;\n        aabb[5] = zmax;\n\n        return aabb;\n    },\n\n    /**\n     * Finds the minimum boundary sphere enclosing the given 3D points.\n     *\n     * @private\n     */\n    points3ToSphere3: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n\n        return (points, sphere) => {\n\n            sphere = sphere || math.vec4();\n\n            let x = 0;\n            let y = 0;\n            let z = 0;\n\n            let i;\n            const numPoints = points.length;\n\n            for (i = 0; i < numPoints; i++) {\n                x += points[i][0];\n                y += points[i][1];\n                z += points[i][2];\n            }\n\n            sphere[0] = x / numPoints;\n            sphere[1] = y / numPoints;\n            sphere[2] = z / numPoints;\n\n            let radius = 0;\n            let dist;\n\n            for (i = 0; i < numPoints; i++) {\n\n                dist = Math.abs(math.lenVec3(math.subVec3(points[i], sphere, tempVec3)));\n\n                if (dist > radius) {\n                    radius = dist;\n                }\n            }\n\n            sphere[3] = radius;\n\n            return sphere;\n        };\n    }))(),\n\n    /**\n     * Finds the minimum boundary sphere enclosing the given 3D points.\n     *\n     * @private\n     */\n    OBB3ToSphere3: ((() => {\n\n        const point = new Float32Array(3);\n        const tempVec3 = new Float32Array(3);\n\n        return (points, sphere) => {\n\n            sphere = sphere || math.vec4();\n\n            let x = 0;\n            let y = 0;\n            let z = 0;\n\n            let i;\n            const lenPoints = points.length;\n            const numPoints = lenPoints / 4;\n\n            for (i = 0; i < lenPoints; i += 4) {\n                x += points[i + 0];\n                y += points[i + 1];\n                z += points[i + 2];\n            }\n\n            sphere[0] = x / numPoints;\n            sphere[1] = y / numPoints;\n            sphere[2] = z / numPoints;\n\n            let radius = 0;\n            let dist;\n\n            for (i = 0; i < lenPoints; i += 4) {\n\n                point[0] = points[i + 0];\n                point[1] = points[i + 1];\n                point[2] = points[i + 2];\n\n                dist = Math.abs(math.lenVec3(math.subVec3(point, sphere, tempVec3)));\n\n                if (dist > radius) {\n                    radius = dist;\n                }\n            }\n\n            sphere[3] = radius;\n\n            return sphere;\n        };\n    }))(),\n\n    /**\n     * Gets the center of a bounding sphere.\n     *\n     * @private\n     */\n    getSphere3Center(sphere, dest = math.vec3()) {\n        dest[0] = sphere[0];\n        dest[1] = sphere[1];\n        dest[2] = sphere[2];\n\n        return dest;\n    },\n\n    /**\n     * Expands the first axis-aligned 3D boundary to enclose the second, if required.\n     *\n     * @private\n     */\n    expandAABB3(aabb1, aabb2) {\n\n        if (aabb1[0] > aabb2[0]) {\n            aabb1[0] = aabb2[0];\n        }\n\n        if (aabb1[1] > aabb2[1]) {\n            aabb1[1] = aabb2[1];\n        }\n\n        if (aabb1[2] > aabb2[2]) {\n            aabb1[2] = aabb2[2];\n        }\n\n        if (aabb1[3] < aabb2[3]) {\n            aabb1[3] = aabb2[3];\n        }\n\n        if (aabb1[4] < aabb2[4]) {\n            aabb1[4] = aabb2[4];\n        }\n\n        if (aabb1[5] < aabb2[5]) {\n            aabb1[5] = aabb2[5];\n        }\n\n        return aabb1;\n    },\n\n    /**\n     * Expands an axis-aligned 3D boundary to enclose the given point, if needed.\n     *\n     * @private\n     */\n    expandAABB3Point3(aabb, p) {\n\n        if (aabb[0] > p[0]) {\n            aabb[0] = p[0];\n        }\n\n        if (aabb[1] > p[1]) {\n            aabb[1] = p[1];\n        }\n\n        if (aabb[2] > p[2]) {\n            aabb[2] = p[2];\n        }\n\n        if (aabb[3] < p[0]) {\n            aabb[3] = p[0];\n        }\n\n        if (aabb[4] < p[1]) {\n            aabb[4] = p[1];\n        }\n\n        if (aabb[5] < p[2]) {\n            aabb[5] = p[2];\n        }\n\n        return aabb;\n    },\n\n    /**\n     * Expands an axis-aligned 3D boundary to enclose the given points, if needed.\n     *\n     * @private\n     */\n    expandAABB3Points3(aabb, positions) {\n        var x;\n        var y;\n        var z;\n        for (var i = 0, len = positions.length; i < len; i+=3) {\n            x = positions[i];\n            y = positions[i + 1];\n            z = positions[i + 2];\n            if (aabb[0] > x) {\n                aabb[0] = x;\n            }\n            if (aabb[1] > y) {\n                aabb[1] = y;\n            }\n            if (aabb[2] > z) {\n                aabb[2] = z;\n            }\n            if (aabb[3] < x) {\n                aabb[3] = x;\n            }\n            if (aabb[4] < y) {\n                aabb[4] = y;\n            }\n            if (aabb[5] < z) {\n                aabb[5] = z;\n            }\n        }\n        return aabb;\n    },\n\n    /**\n     * Collapses a 2D axis-aligned boundary, ready to expand to fit 2D points.\n     * Creates new AABB if none supplied.\n     *\n     * @private\n     */\n    collapseAABB2(aabb = math.AABB2()) {\n        aabb[0] = math.MAX_DOUBLE;\n        aabb[1] = math.MAX_DOUBLE;\n        aabb[2] = -math.MAX_DOUBLE;\n        aabb[3] = -math.MAX_DOUBLE;\n\n        return aabb;\n    },\n\n    /**\n     * Finds the minimum 2D projected axis-aligned boundary enclosing the given 3D points.\n     *\n     * @private\n     */\n    OBB3ToAABB2(points, aabb = math.AABB2()) {\n        let xmin = math.MAX_DOUBLE;\n        let ymin = math.MAX_DOUBLE;\n        let xmax = -math.MAX_DOUBLE;\n        let ymax = -math.MAX_DOUBLE;\n\n        let x;\n        let y;\n        let w;\n        let f;\n\n        for (let i = 0, len = points.length; i < len; i += 4) {\n\n            x = points[i + 0];\n            y = points[i + 1];\n            w = points[i + 3] || 1.0;\n\n            f = 1.0 / w;\n\n            x *= f;\n            y *= f;\n\n            if (x < xmin) {\n                xmin = x;\n            }\n\n            if (y < ymin) {\n                ymin = y;\n            }\n\n            if (x > xmax) {\n                xmax = x;\n            }\n\n            if (y > ymax) {\n                ymax = y;\n            }\n        }\n\n        aabb[0] = xmin;\n        aabb[1] = ymin;\n        aabb[2] = xmax;\n        aabb[3] = ymax;\n\n        return aabb;\n    },\n\n    /**\n     * Expands the first axis-aligned 2D boundary to enclose the second, if required.\n     *\n     * @private\n     */\n    expandAABB2(aabb1, aabb2) {\n\n        if (aabb1[0] > aabb2[0]) {\n            aabb1[0] = aabb2[0];\n        }\n\n        if (aabb1[1] > aabb2[1]) {\n            aabb1[1] = aabb2[1];\n        }\n\n        if (aabb1[2] < aabb2[2]) {\n            aabb1[2] = aabb2[2];\n        }\n\n        if (aabb1[3] < aabb2[3]) {\n            aabb1[3] = aabb2[3];\n        }\n\n        return aabb1;\n    },\n\n    /**\n     * Expands an axis-aligned 2D boundary to enclose the given point, if required.\n     *\n     * @private\n     */\n    expandAABB2Point2(aabb, p) {\n\n        if (aabb[0] > p[0]) {\n            aabb[0] = p[0];\n        }\n\n        if (aabb[1] > p[1]) {\n            aabb[1] = p[1];\n        }\n\n        if (aabb[2] < p[0]) {\n            aabb[2] = p[0];\n        }\n\n        if (aabb[3] < p[1]) {\n            aabb[3] = p[1];\n        }\n\n        return aabb;\n    },\n\n    AABB2ToCanvas(aabb, canvasWidth, canvasHeight, aabb2 = aabb) {\n        const xmin = (aabb[0] + 1.0) * 0.5;\n        const ymin = (aabb[1] + 1.0) * 0.5;\n        const xmax = (aabb[2] + 1.0) * 0.5;\n        const ymax = (aabb[3] + 1.0) * 0.5;\n\n        aabb2[0] = Math.floor(xmin * canvasWidth);\n        aabb2[1] = canvasHeight - Math.floor(ymax * canvasHeight);\n        aabb2[2] = Math.floor(xmax * canvasWidth);\n        aabb2[3] = canvasHeight - Math.floor(ymin * canvasHeight);\n\n        return aabb2;\n    },\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Curves\n    //------------------------------------------------------------------------------------------------------------------\n\n    tangentQuadraticBezier(t, p0, p1, p2) {\n        return 2 * (1 - t) * (p1 - p0) + 2 * t * (p2 - p1);\n    },\n\n    tangentQuadraticBezier3(t, p0, p1, p2, p3) {\n        return -3 * p0 * (1 - t) * (1 - t) +\n            3 * p1 * (1 - t) * (1 - t) - 6 * t * p1 * (1 - t) +\n            6 * t * p2 * (1 - t) - 3 * t * t * p2 +\n            3 * t * t * p3;\n    },\n\n    tangentSpline(t) {\n        const h00 = 6 * t * t - 6 * t;\n        const h10 = 3 * t * t - 4 * t + 1;\n        const h01 = -6 * t * t + 6 * t;\n        const h11 = 3 * t * t - 2 * t;\n        return h00 + h10 + h01 + h11;\n    },\n\n    catmullRomInterpolate(p0, p1, p2, p3, t) {\n        const v0 = (p2 - p0) * 0.5;\n        const v1 = (p3 - p1) * 0.5;\n        const t2 = t * t;\n        const t3 = t * t2;\n        return (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n    },\n\n// Bezier Curve formulii from http://en.wikipedia.org/wiki/B%C3%A9zier_curve\n\n// Quad Bezier Functions\n\n    b2p0(t, p) {\n        const k = 1 - t;\n        return k * k * p;\n\n    },\n\n    b2p1(t, p) {\n        return 2 * (1 - t) * t * p;\n    },\n\n    b2p2(t, p) {\n        return t * t * p;\n    },\n\n    b2(t, p0, p1, p2) {\n        return this.b2p0(t, p0) + this.b2p1(t, p1) + this.b2p2(t, p2);\n    },\n\n// Cubic Bezier Functions\n\n    b3p0(t, p) {\n        const k = 1 - t;\n        return k * k * k * p;\n    },\n\n    b3p1(t, p) {\n        const k = 1 - t;\n        return 3 * k * k * t * p;\n    },\n\n    b3p2(t, p) {\n        const k = 1 - t;\n        return 3 * k * t * t * p;\n    },\n\n    b3p3(t, p) {\n        return t * t * t * p;\n    },\n\n    b3(t, p0, p1, p2, p3) {\n        return this.b3p0(t, p0) + this.b3p1(t, p1) + this.b3p2(t, p2) + this.b3p3(t, p3);\n    },\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Geometry\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     * Calculates the normal vector of a triangle.\n     *\n     * @private\n     */\n    triangleNormal(a, b, c, normal = math.vec3()) {\n        const p1x = b[0] - a[0];\n        const p1y = b[1] - a[1];\n        const p1z = b[2] - a[2];\n\n        const p2x = c[0] - a[0];\n        const p2y = c[1] - a[1];\n        const p2z = c[2] - a[2];\n\n        const p3x = p1y * p2z - p1z * p2y;\n        const p3y = p1z * p2x - p1x * p2z;\n        const p3z = p1x * p2y - p1y * p2x;\n\n        const mag = Math.sqrt(p3x * p3x + p3y * p3y + p3z * p3z);\n        if (mag === 0) {\n            normal[0] = 0;\n            normal[1] = 0;\n            normal[2] = 0;\n        } else {\n            normal[0] = p3x / mag;\n            normal[1] = p3y / mag;\n            normal[2] = p3z / mag;\n        }\n\n        return normal\n    },\n\n    /**\n     * Finds the intersection of a 3D ray with a 3D triangle.\n     *\n     * @private\n     */\n    rayTriangleIntersect: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n        const tempVec3b = new Float32Array(3);\n        const tempVec3c = new Float32Array(3);\n        const tempVec3d = new Float32Array(3);\n        const tempVec3e = new Float32Array(3);\n\n        return (origin, dir, a, b, c, isect) => {\n\n            isect = isect || math.vec3();\n\n            const EPSILON = 0.000001;\n\n            const edge1 = math.subVec3(b, a, tempVec3);\n            const edge2 = math.subVec3(c, a, tempVec3b);\n\n            const pvec = math.cross3Vec3(dir, edge2, tempVec3c);\n            const det = math.dotVec3(edge1, pvec);\n            if (det < EPSILON) {\n                return null;\n            }\n\n            const tvec = math.subVec3(origin, a, tempVec3d);\n            const u = math.dotVec3(tvec, pvec);\n            if (u < 0 || u > det) {\n                return null;\n            }\n\n            const qvec = math.cross3Vec3(tvec, edge1, tempVec3e);\n            const v = math.dotVec3(dir, qvec);\n            if (v < 0 || u + v > det) {\n                return null;\n            }\n\n            const t = math.dotVec3(edge2, qvec) / det;\n            isect[0] = origin[0] + t * dir[0];\n            isect[1] = origin[1] + t * dir[1];\n            isect[2] = origin[2] + t * dir[2];\n\n            return isect;\n        };\n    }))(),\n\n    /**\n     * Finds the intersection of a 3D ray with a plane defined by 3 points.\n     *\n     * @private\n     */\n    rayPlaneIntersect: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n        const tempVec3b = new Float32Array(3);\n        const tempVec3c = new Float32Array(3);\n        const tempVec3d = new Float32Array(3);\n\n        return (origin, dir, a, b, c, isect) => {\n\n            isect = isect || math.vec3();\n\n            dir = math.normalizeVec3(dir, tempVec3);\n\n            const edge1 = math.subVec3(b, a, tempVec3b);\n            const edge2 = math.subVec3(c, a, tempVec3c);\n\n            const n = math.cross3Vec3(edge1, edge2, tempVec3d);\n            math.normalizeVec3(n, n);\n\n            const d = -math.dotVec3(a, n);\n\n            const t = -(math.dotVec3(origin, n) + d) / math.dotVec3(dir, n);\n\n            isect[0] = origin[0] + t * dir[0];\n            isect[1] = origin[1] + t * dir[1];\n            isect[2] = origin[2] + t * dir[2];\n\n            return isect;\n        };\n    }))(),\n\n    /**\n     * Gets barycentric coordinates from cartesian coordinates within a triangle.\n     * Gets barycentric coordinates from cartesian coordinates within a triangle.\n     *\n     * @private\n     */\n    cartesianToBarycentric: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n        const tempVec3b = new Float32Array(3);\n        const tempVec3c = new Float32Array(3);\n\n        return (cartesian, a, b, c, dest) => {\n\n            const v0 = math.subVec3(c, a, tempVec3);\n            const v1 = math.subVec3(b, a, tempVec3b);\n            const v2 = math.subVec3(cartesian, a, tempVec3c);\n\n            const dot00 = math.dotVec3(v0, v0);\n            const dot01 = math.dotVec3(v0, v1);\n            const dot02 = math.dotVec3(v0, v2);\n            const dot11 = math.dotVec3(v1, v1);\n            const dot12 = math.dotVec3(v1, v2);\n\n            const denom = (dot00 * dot11 - dot01 * dot01);\n\n            // Colinear or singular triangle\n\n            if (denom === 0) {\n\n                // Arbitrary location outside of triangle\n\n                return null;\n            }\n\n            const invDenom = 1 / denom;\n\n            const u = (dot11 * dot02 - dot01 * dot12) * invDenom;\n            const v = (dot00 * dot12 - dot01 * dot02) * invDenom;\n\n            dest[0] = 1 - u - v;\n            dest[1] = v;\n            dest[2] = u;\n\n            return dest;\n        };\n    }))(),\n\n    /**\n     * Returns true if the given barycentric coordinates are within their triangle.\n     *\n     * @private\n     */\n    barycentricInsideTriangle(bary) {\n\n        const v = bary[1];\n        const u = bary[2];\n\n        return (u >= 0) && (v >= 0) && (u + v < 1);\n    },\n\n    /**\n     * Gets cartesian coordinates from barycentric coordinates within a triangle.\n     *\n     * @private\n     */\n    barycentricToCartesian(bary, a, b, c, cartesian = math.vec3()) {\n        const u = bary[0];\n        const v = bary[1];\n        const w = bary[2];\n\n        cartesian[0] = a[0] * u + b[0] * v + c[0] * w;\n        cartesian[1] = a[1] * u + b[1] * v + c[1] * w;\n        cartesian[2] = a[2] * u + b[2] * v + c[2] * w;\n\n        return cartesian;\n    },\n\n\n    /**\n     * Given geometry defined as an array of positions, optional normals, option uv and an array of indices, returns\n     * modified arrays that have duplicate vertices removed.\n     *\n     * Note: does not work well when co-incident vertices have same positions but different normals and UVs.\n     *\n     * @param positions\n     * @param normals\n     * @param uv\n     * @param indices\n     * @returns {{positions: Array, indices: Array}}\n     * @private\n     */\n    mergeVertices(positions, normals, uv, indices) {\n        const positionsMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n        const indicesLookup = [];\n        const uniquePositions = [];\n        const uniqueNormals = normals ? [] : null;\n        const uniqueUV = uv ? [] : null;\n        const indices2 = [];\n        let vx;\n        let vy;\n        let vz;\n        let key;\n        const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n        const precision = 10 ** precisionPoints;\n        let i;\n        let len;\n        let uvi = 0;\n        for (i = 0, len = positions.length; i < len; i += 3) {\n            vx = positions[i];\n            vy = positions[i + 1];\n            vz = positions[i + 2];\n            key = `${Math.round(vx * precision)}_${Math.round(vy * precision)}_${Math.round(vz * precision)}`;\n            if (positionsMap[key] === undefined) {\n                positionsMap[key] = uniquePositions.length / 3;\n                uniquePositions.push(vx);\n                uniquePositions.push(vy);\n                uniquePositions.push(vz);\n                if (normals) {\n                    uniqueNormals.push(normals[i]);\n                    uniqueNormals.push(normals[i + 1]);\n                    uniqueNormals.push(normals[i + 2]);\n                }\n                if (uv) {\n                    uniqueUV.push(uv[uvi]);\n                    uniqueUV.push(uv[uvi + 1]);\n                }\n            }\n            indicesLookup[i / 3] = positionsMap[key];\n            uvi += 2;\n        }\n        for (i = 0, len = indices.length; i < len; i++) {\n            indices2[i] = indicesLookup[indices[i]];\n        }\n        const result = {\n            positions: uniquePositions,\n            indices: indices2\n        };\n        if (uniqueNormals) {\n            result.normals = uniqueNormals;\n        }\n        if (uniqueUV) {\n            result.uv = uniqueUV;\n\n        }\n        return result;\n    },\n\n    /**\n     * Builds normal vectors from positions and indices.\n     *\n     * @private\n     */\n    buildNormals: ((() => {\n\n        const a = new Float32Array(3);\n        const b = new Float32Array(3);\n        const c = new Float32Array(3);\n        const ab = new Float32Array(3);\n        const ac = new Float32Array(3);\n        const crossVec = new Float32Array(3);\n\n        return (positions, indices, normals) => {\n\n            let i;\n            let len;\n            const nvecs = new Array(positions.length / 3);\n            let j0;\n            let j1;\n            let j2;\n\n            for (i = 0, len = indices.length; i < len; i += 3) {\n\n                j0 = indices[i];\n                j1 = indices[i + 1];\n                j2 = indices[i + 2];\n\n                a[0] = positions[j0 * 3];\n                a[1] = positions[j0 * 3 + 1];\n                a[2] = positions[j0 * 3 + 2];\n\n                b[0] = positions[j1 * 3];\n                b[1] = positions[j1 * 3 + 1];\n                b[2] = positions[j1 * 3 + 2];\n\n                c[0] = positions[j2 * 3];\n                c[1] = positions[j2 * 3 + 1];\n                c[2] = positions[j2 * 3 + 2];\n\n                math.subVec3(b, a, ab);\n                math.subVec3(c, a, ac);\n\n                const normVec = new Float32Array(3);\n\n                math.normalizeVec3(math.cross3Vec3(ab, ac, crossVec), normVec);\n\n                if (!nvecs[j0]) {\n                    nvecs[j0] = [];\n                }\n                if (!nvecs[j1]) {\n                    nvecs[j1] = [];\n                }\n                if (!nvecs[j2]) {\n                    nvecs[j2] = [];\n                }\n\n                nvecs[j0].push(normVec);\n                nvecs[j1].push(normVec);\n                nvecs[j2].push(normVec);\n            }\n\n            normals = (normals && normals.length === positions.length) ? normals : new Float32Array(positions.length);\n\n            let count;\n            let x;\n            let y;\n            let z;\n\n            for (i = 0, len = nvecs.length; i < len; i++) {  // Now go through and average out everything\n\n                count = nvecs[i].length;\n\n                x = 0;\n                y = 0;\n                z = 0;\n\n                for (let j = 0; j < count; j++) {\n                    x += nvecs[i][j][0];\n                    y += nvecs[i][j][1];\n                    z += nvecs[i][j][2];\n                }\n\n                normals[i * 3] = (x / count);\n                normals[i * 3 + 1] = (y / count);\n                normals[i * 3 + 2] = (z / count);\n            }\n\n            return normals;\n        };\n    }))(),\n\n    /**\n     * Builds vertex tangent vectors from positions, UVs and indices.\n     *\n     * @private\n     */\n    buildTangents: ((() => {\n\n        const tempVec3 = new Float32Array(3);\n        const tempVec3b = new Float32Array(3);\n        const tempVec3c = new Float32Array(3);\n        const tempVec3d = new Float32Array(3);\n        const tempVec3e = new Float32Array(3);\n        const tempVec3f = new Float32Array(3);\n        const tempVec3g = new Float32Array(3);\n\n        return (positions, indices, uv) => {\n\n            const tangents = new Float32Array(positions.length);\n\n            // The vertex arrays needs to be calculated\n            // before the calculation of the tangents\n\n            for (let location = 0; location < indices.length; location += 3) {\n\n                // Recontructing each vertex and UV coordinate into the respective vectors\n\n                let index = indices[location];\n\n                const v0 = positions.subarray(index * 3, index * 3 + 3);\n                const uv0 = uv.subarray(index * 2, index * 2 + 2);\n\n                index = indices[location + 1];\n\n                const v1 = positions.subarray(index * 3, index * 3 + 3);\n                const uv1 = uv.subarray(index * 2, index * 2 + 2);\n\n                index = indices[location + 2];\n\n                const v2 = positions.subarray(index * 3, index * 3 + 3);\n                const uv2 = uv.subarray(index * 2, index * 2 + 2);\n\n                const deltaPos1 = math.subVec3(v1, v0, tempVec3);\n                const deltaPos2 = math.subVec3(v2, v0, tempVec3b);\n\n                const deltaUV1 = math.subVec2(uv1, uv0, tempVec3c);\n                const deltaUV2 = math.subVec2(uv2, uv0, tempVec3d);\n\n                const r = 1 / ((deltaUV1[0] * deltaUV2[1]) - (deltaUV1[1] * deltaUV2[0]));\n\n                const tangent = math.mulVec3Scalar(\n                    math.subVec3(\n                        math.mulVec3Scalar(deltaPos1, deltaUV2[1], tempVec3e),\n                        math.mulVec3Scalar(deltaPos2, deltaUV1[1], tempVec3f),\n                        tempVec3g\n                    ),\n                    r,\n                    tempVec3f\n                );\n\n                // Average the value of the vectors\n\n                let addTo;\n\n                for (let v = 0; v < 3; v++) {\n                    addTo = indices[location + v] * 3;\n                    tangents[addTo] += tangent[0];\n                    tangents[addTo + 1] += tangent[1];\n                    tangents[addTo + 2] += tangent[2];\n                }\n            }\n\n            return tangents;\n        };\n    }))(),\n\n    /**\n     * Builds vertex and index arrays needed by color-indexed triangle picking.\n     *\n     * @private\n     */\n    buildPickTriangles(positions, indices, compressGeometry) {\n\n        const numIndices = indices.length;\n        const pickPositions = compressGeometry ? new Uint16Array(numIndices * 9) : new Float32Array(numIndices * 9);\n        const pickColors = new Uint8Array(numIndices * 12);\n        let primIndex = 0;\n        let vi;// Positions array index\n        let pvi = 0;// Picking positions array index\n        let pci = 0; // Picking color array index\n\n        // Triangle indices\n        let i;\n        let r;\n        let g;\n        let b;\n        let a;\n\n        for (let location = 0; location < numIndices; location += 3) {\n\n            // Primitive-indexed triangle pick color\n\n            a = (primIndex >> 24 & 0xFF);\n            b = (primIndex >> 16 & 0xFF);\n            g = (primIndex >> 8 & 0xFF);\n            r = (primIndex & 0xFF);\n\n            // A\n\n            i = indices[location];\n            vi = i * 3;\n\n            pickPositions[pvi++] = positions[vi];\n            pickPositions[pvi++] = positions[vi + 1];\n            pickPositions[pvi++] = positions[vi + 2];\n\n            pickColors[pci++] = r;\n            pickColors[pci++] = g;\n            pickColors[pci++] = b;\n            pickColors[pci++] = a;\n\n            // B\n\n            i = indices[location + 1];\n            vi = i * 3;\n\n            pickPositions[pvi++] = positions[vi];\n            pickPositions[pvi++] = positions[vi + 1];\n            pickPositions[pvi++] = positions[vi + 2];\n\n            pickColors[pci++] = r;\n            pickColors[pci++] = g;\n            pickColors[pci++] = b;\n            pickColors[pci++] = a;\n\n            // C\n\n            i = indices[location + 2];\n            vi = i * 3;\n\n            pickPositions[pvi++] = positions[vi];\n            pickPositions[pvi++] = positions[vi + 1];\n            pickPositions[pvi++] = positions[vi + 2];\n\n            pickColors[pci++] = r;\n            pickColors[pci++] = g;\n            pickColors[pci++] = b;\n            pickColors[pci++] = a;\n\n            primIndex++;\n        }\n\n        return {\n            positions: pickPositions,\n            colors: pickColors\n        };\n    },\n\n    /**\n     * Converts surface-perpendicular face normals to vertex normals. Assumes that the mesh contains disjoint triangles\n     * that don't share vertex array elements. Works by finding groups of vertices that have the same location and\n     * averaging their normal vectors.\n     *\n     * @returns {{positions: Array, normals: *}}\n     */\n    faceToVertexNormals(positions, normals, options = {}) {\n        const smoothNormalsAngleThreshold = options.smoothNormalsAngleThreshold || 20;\n        const vertexMap = {};\n        const vertexNormals = [];\n        const vertexNormalAccum = {};\n        let acc;\n        let vx;\n        let vy;\n        let vz;\n        let key;\n        const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n        const precision = 10 ** precisionPoints;\n        let posi;\n        let i;\n        let j;\n        let len;\n        let a;\n        let b;\n        let c;\n\n        for (i = 0, len = positions.length; i < len; i += 3) {\n\n            posi = i / 3;\n\n            vx = positions[i];\n            vy = positions[i + 1];\n            vz = positions[i + 2];\n\n            key = `${Math.round(vx * precision)}_${Math.round(vy * precision)}_${Math.round(vz * precision)}`;\n\n            if (vertexMap[key] === undefined) {\n                vertexMap[key] = [posi];\n            } else {\n                vertexMap[key].push(posi);\n            }\n\n            const normal = math.normalizeVec3([normals[i], normals[i + 1], normals[i + 2]]);\n\n            vertexNormals[posi] = normal;\n\n            acc = math.vec4([normal[0], normal[1], normal[2], 1]);\n\n            vertexNormalAccum[posi] = acc;\n        }\n\n        for (key in vertexMap) {\n\n            if (vertexMap.hasOwnProperty(key)) {\n\n                const vertices = vertexMap[key];\n                const numVerts = vertices.length;\n\n                for (i = 0; i < numVerts; i++) {\n\n                    const ii = vertices[i];\n\n                    acc = vertexNormalAccum[ii];\n\n                    for (j = 0; j < numVerts; j++) {\n\n                        if (i === j) {\n                            continue;\n                        }\n\n                        const jj = vertices[j];\n\n                        a = vertexNormals[ii];\n                        b = vertexNormals[jj];\n\n                        const angle = Math.abs(math.angleVec3(a, b) / math.DEGTORAD);\n\n                        if (angle < smoothNormalsAngleThreshold) {\n\n                            acc[0] += b[0];\n                            acc[1] += b[1];\n                            acc[2] += b[2];\n                            acc[3] += 1.0;\n                        }\n                    }\n                }\n            }\n        }\n\n        for (i = 0, len = normals.length; i < len; i += 3) {\n\n            acc = vertexNormalAccum[i / 3];\n\n            normals[i + 0] = acc[0] / acc[3];\n            normals[i + 1] = acc[1] / acc[3];\n            normals[i + 2] = acc[2] / acc[3];\n\n        }\n    },\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Ray casting\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     Transforms a Canvas-space position into a World-space ray, in the context of a Camera.\n     @method canvasPosToWorldRay\n     @static\n     @param {Camera} camera The Camera.\n     @param {Float32Array} canvasPos The Canvas-space position.\n     @param {Float32Array} worldRayOrigin The World-space ray origin.\n     @param {Float32Array} worldRayDir The World-space ray direction.\n     */\n    canvasPosToWorldRay: ((() => {\n\n        const tempMat4b = new Float32Array(16);\n        const tempMat4c = new Float32Array(16);\n        const tempVec4a = new Float32Array(4);\n        const tempVec4b = new Float32Array(4);\n        const tempVec4c = new Float32Array(4);\n        const tempVec4d = new Float32Array(4);\n\n        return (camera, canvasPos, worldRayOrigin, worldRayDir) => {\n\n            const canvas = camera.scene.canvas.canvas;\n\n            const viewMat = camera.viewMatrix;\n            const projMat = camera.projection === \"ortho\" ? camera.ortho.matrix : camera.perspective.matrix;\n\n            const pvMat = math.mulMat4(projMat, viewMat, tempMat4b);\n            const pvMatInverse = math.inverseMat4(pvMat, tempMat4c);\n\n            // Calculate clip space coordinates, which will be in range\n            // of x=[-1..1] and y=[-1..1], with y=(+1) at top\n\n            const canvasWidth = canvas.width;\n            const canvasHeight = canvas.height;\n\n            const clipX = (canvasPos[0] - canvasWidth / 2) / (canvasWidth / 2);  // Calculate clip space coordinates\n            const clipY = -(canvasPos[1] - canvasHeight / 2) / (canvasHeight / 2);\n\n            tempVec4a[0] = clipX;\n            tempVec4a[1] = clipY;\n            tempVec4a[2] = -1;\n            tempVec4a[3] = 1;\n\n            math.transformVec4(pvMatInverse, tempVec4a, tempVec4b);\n            math.mulVec4Scalar(tempVec4b, 1 / tempVec4b[3]);\n\n            tempVec4c[0] = clipX;\n            tempVec4c[1] = clipY;\n            tempVec4c[2] = 1;\n            tempVec4c[3] = 1;\n\n            math.transformVec4(pvMatInverse, tempVec4c, tempVec4d);\n            math.mulVec4Scalar(tempVec4d, 1 / tempVec4d[3]);\n\n            worldRayOrigin[0] = tempVec4d[0];\n            worldRayOrigin[1] = tempVec4d[1];\n            worldRayOrigin[2] = tempVec4d[2];\n\n            math.subVec3(tempVec4d, tempVec4b, worldRayDir);\n\n            math.normalizeVec3(worldRayDir);\n        };\n    }))(),\n\n    /**\n     Transforms a Canvas-space position to a Mesh's Local-space coordinate system, in the context of a Camera.\n     @method canvasPosToLocalRay\n     @static\n     @param {Camera} camera The Camera.\n     @param {Mesh} mesh The Mesh.\n     @param {Float32Array} canvasPos The Canvas-space position.\n     @param {Float32Array} localRayOrigin The Local-space ray origin.\n     @param {Float32Array} localRayDir The Local-space ray direction.\n     */\n    canvasPosToLocalRay: ((() => {\n\n        const worldRayOrigin = new Float32Array(3);\n        const worldRayDir = new Float32Array(3);\n\n        return (camera, worldMatrix, canvasPos, localRayOrigin, localRayDir) => {\n            math.canvasPosToWorldRay(camera, canvasPos, worldRayOrigin, worldRayDir);\n            math.worldRayToLocalRay(worldMatrix, worldRayOrigin, worldRayDir, localRayOrigin, localRayDir);\n        };\n    }))(),\n\n    /**\n     Transforms a ray from World-space to a Mesh's Local-space coordinate system.\n     @method worldRayToLocalRay\n     @static\n     @param {Float32Array} worldMatrix The World transform matrix\n     @param {Float32Array} worldRayOrigin The World-space ray origin.\n     @param {Float32Array} worldRayDir The World-space ray direction.\n     @param {Float32Array} localRayOrigin The Local-space ray origin.\n     @param {Float32Array} localRayDir The Local-space ray direction.\n     */\n    worldRayToLocalRay: ((() => {\n\n        const tempMat4 = new Float32Array(16);\n        const tempVec4a = new Float32Array(4);\n        const tempVec4b = new Float32Array(4);\n\n        return (worldMatrix, worldRayOrigin, worldRayDir, localRayOrigin, localRayDir) => {\n\n            const modelMatInverse = math.inverseMat4(worldMatrix, tempMat4);\n\n            tempVec4a[0] = worldRayOrigin[0];\n            tempVec4a[1] = worldRayOrigin[1];\n            tempVec4a[2] = worldRayOrigin[2];\n            tempVec4a[3] = 1;\n\n            math.transformVec4(modelMatInverse, tempVec4a, tempVec4b);\n\n            localRayOrigin[0] = tempVec4b[0];\n            localRayOrigin[1] = tempVec4b[1];\n            localRayOrigin[2] = tempVec4b[2];\n\n            math.transformVec3(modelMatInverse, worldRayDir, localRayDir);\n        };\n    }))(),\n\n    buildKDTree: ((() => {\n\n        const KD_TREE_MAX_DEPTH = 10;\n        const KD_TREE_MIN_TRIANGLES = 20;\n\n        const dimLength = new Float32Array();\n\n        function buildNode(triangles, indices, positions, depth) {\n            const aabb = new Float32Array(6);\n\n            const node = {\n                triangles: null,\n                left: null,\n                right: null,\n                leaf: false,\n                splitDim: 0,\n                aabb\n            };\n\n            aabb[0] = aabb[1] = aabb[2] = Number.POSITIVE_INFINITY;\n            aabb[3] = aabb[4] = aabb[5] = Number.NEGATIVE_INFINITY;\n\n            let t;\n            let i;\n            let len;\n\n            for (t = 0, len = triangles.length; t < len; ++t) {\n                var ii = triangles[t] * 3;\n                for (let j = 0; j < 3; ++j) {\n                    const pi = indices[ii + j] * 3;\n                    if (positions[pi] < aabb[0]) {\n                        aabb[0] = positions[pi]\n                    }\n                    if (positions[pi] > aabb[3]) {\n                        aabb[3] = positions[pi]\n                    }\n                    if (positions[pi + 1] < aabb[1]) {\n                        aabb[1] = positions[pi + 1]\n                    }\n                    if (positions[pi + 1] > aabb[4]) {\n                        aabb[4] = positions[pi + 1]\n                    }\n                    if (positions[pi + 2] < aabb[2]) {\n                        aabb[2] = positions[pi + 2]\n                    }\n                    if (positions[pi + 2] > aabb[5]) {\n                        aabb[5] = positions[pi + 2]\n                    }\n                }\n            }\n\n            if (triangles.length < KD_TREE_MIN_TRIANGLES || depth > KD_TREE_MAX_DEPTH) {\n                node.triangles = triangles;\n                node.leaf = true;\n                return node;\n            }\n\n            dimLength[0] = aabb[3] - aabb[0];\n            dimLength[1] = aabb[4] - aabb[1];\n            dimLength[2] = aabb[5] - aabb[2];\n\n            let dim = 0;\n\n            if (dimLength[1] > dimLength[dim]) {\n                dim = 1;\n            }\n\n            if (dimLength[2] > dimLength[dim]) {\n                dim = 2;\n            }\n\n            node.splitDim = dim;\n\n            const mid = (aabb[dim] + aabb[dim + 3]) / 2;\n            const left = new Array(triangles.length);\n            let numLeft = 0;\n            const right = new Array(triangles.length);\n            let numRight = 0;\n\n            for (t = 0, len = triangles.length; t < len; ++t) {\n\n                var ii = triangles[t] * 3;\n                const i0 = indices[ii];\n                const i1 = indices[ii + 1];\n                const i2 = indices[ii + 2];\n\n                const pi0 = i0 * 3;\n                const pi1 = i1 * 3;\n                const pi2 = i2 * 3;\n\n                if (positions[pi0 + dim] <= mid || positions[pi1 + dim] <= mid || positions[pi2 + dim] <= mid) {\n                    left[numLeft++] = triangles[t];\n                } else {\n                    right[numRight++] = triangles[t];\n                }\n            }\n\n            left.length = numLeft;\n            right.length = numRight;\n\n            node.left = buildNode(left, indices, positions, depth + 1);\n            node.right = buildNode(right, indices, positions, depth + 1);\n\n            return node;\n        }\n\n        return (indices, positions) => {\n            const numTris = indices.length / 3;\n            const triangles = new Array(numTris);\n            for (let i = 0; i < numTris; ++i) {\n                triangles[i] = i;\n            }\n            return buildNode(triangles, indices, positions, 0);\n        };\n    }))()\n};\n\nmath.buildEdgeIndices = (function () {\n\n    const uniquePositions = [];\n    const indicesLookup = [];\n    const indicesReverseLookup = [];\n    const weldedIndices = [];\n\n    // TODO: Optimize with caching, but need to cater to both compressed and uncompressed positions\n\n    const faces = [];\n    let numFaces = 0;\n    const compa = new Uint16Array(3);\n    const compb = new Uint16Array(3);\n    const compc = new Uint16Array(3);\n    const a = math.vec3();\n    const b = math.vec3();\n    const c = math.vec3();\n    const cb = math.vec3();\n    const ab = math.vec3();\n    const cross = math.vec3();\n    const normal = math.vec3();\n\n    function weldVertices(positions, indices) {\n        const positionsMap = {}; // Hashmap for looking up vertices by position coordinates (and making sure they are unique)\n        let vx;\n        let vy;\n        let vz;\n        let key;\n        const precisionPoints = 4; // number of decimal points, e.g. 4 for epsilon of 0.0001\n        const precision = Math.pow(10, precisionPoints);\n        let i;\n        let len;\n        let lenUniquePositions = 0;\n        for (i = 0, len = positions.length; i < len; i += 3) {\n            vx = positions[i];\n            vy = positions[i + 1];\n            vz = positions[i + 2];\n            key = Math.round(vx * precision) + '_' + Math.round(vy * precision) + '_' + Math.round(vz * precision);\n            if (positionsMap[key] === undefined) {\n                positionsMap[key] = lenUniquePositions / 3;\n                uniquePositions[lenUniquePositions++] = vx;\n                uniquePositions[lenUniquePositions++] = vy;\n                uniquePositions[lenUniquePositions++] = vz;\n            }\n            indicesLookup[i / 3] = positionsMap[key];\n        }\n        for (i = 0, len = indices.length; i < len; i++) {\n            weldedIndices[i] = indicesLookup[indices[i]];\n            indicesReverseLookup[weldedIndices[i]] = indices[i];\n        }\n    }\n\n    function buildFaces(numIndices, positionsDecodeMatrix) {\n        numFaces = 0;\n        for (let i = 0, len = numIndices; i < len; i += 3) {\n            const ia = ((weldedIndices[i]) * 3);\n            const ib = ((weldedIndices[i + 1]) * 3);\n            const ic = ((weldedIndices[i + 2]) * 3);\n            if (positionsDecodeMatrix) {\n                compa[0] = uniquePositions[ia];\n                compa[1] = uniquePositions[ia + 1];\n                compa[2] = uniquePositions[ia + 2];\n                compb[0] = uniquePositions[ib];\n                compb[1] = uniquePositions[ib + 1];\n                compb[2] = uniquePositions[ib + 2];\n                compc[0] = uniquePositions[ic];\n                compc[1] = uniquePositions[ic + 1];\n                compc[2] = uniquePositions[ic + 2];\n                // Decode\n                math.decompressPosition(compa, positionsDecodeMatrix, a);\n                math.decompressPosition(compb, positionsDecodeMatrix, b);\n                math.decompressPosition(compc, positionsDecodeMatrix, c);\n            } else {\n                a[0] = uniquePositions[ia];\n                a[1] = uniquePositions[ia + 1];\n                a[2] = uniquePositions[ia + 2];\n                b[0] = uniquePositions[ib];\n                b[1] = uniquePositions[ib + 1];\n                b[2] = uniquePositions[ib + 2];\n                c[0] = uniquePositions[ic];\n                c[1] = uniquePositions[ic + 1];\n                c[2] = uniquePositions[ic + 2];\n            }\n            math.subVec3(c, b, cb);\n            math.subVec3(a, b, ab);\n            math.cross3Vec3(cb, ab, cross);\n            math.normalizeVec3(cross, normal);\n            const face = faces[numFaces] || (faces[numFaces] = {normal: math.vec3()});\n            face.normal[0] = normal[0];\n            face.normal[1] = normal[1];\n            face.normal[2] = normal[2];\n            numFaces++;\n        }\n    }\n\n    return function (positions, indices, positionsDecodeMatrix, edgeThreshold, combineGeometry = false) {\n        weldVertices(positions, indices);\n        buildFaces(indices.length, positionsDecodeMatrix);\n        const edgeIndices = [];\n        const thresholdDot = Math.cos(math.DEGTORAD * edgeThreshold);\n        const edges = {};\n        let edge1;\n        let edge2;\n        let index1;\n        let index2;\n        let key;\n        let largeIndex = false;\n        let edge;\n        let normal1;\n        let normal2;\n        let dot;\n        let ia;\n        let ib;\n        for (let i = 0, len = indices.length; i < len; i += 3) {\n            const faceIndex = i / 3;\n            for (let j = 0; j < 3; j++) {\n                edge1 = weldedIndices[i + j];\n                edge2 = weldedIndices[i + ((j + 1) % 3)];\n                index1 = Math.min(edge1, edge2);\n                index2 = Math.max(edge1, edge2);\n                key = index1 + \",\" + index2;\n                if (edges[key] === undefined) {\n                    edges[key] = {\n                        index1: index1,\n                        index2: index2,\n                        face1: faceIndex,\n                        face2: undefined\n                    };\n                } else {\n                    edges[key].face2 = faceIndex;\n                }\n            }\n        }\n        for (key in edges) {\n            edge = edges[key];\n            // an edge is only rendered if the angle (in degrees) between the face normals of the adjoining faces exceeds this value. default = 1 degree.\n            if (edge.face2 !== undefined) {\n                normal1 = faces[edge.face1].normal;\n                normal2 = faces[edge.face2].normal;\n                dot = math.dotVec3(normal1, normal2);\n                if (dot > thresholdDot) {\n                    continue;\n                }\n            }\n            ia = indicesReverseLookup[edge.index1];\n            ib = indicesReverseLookup[edge.index2];\n            if (!largeIndex && ia > 65535 || ib > 65535) {\n                largeIndex = true;\n            }\n            edgeIndices.push(ia);\n            edgeIndices.push(ib);\n        }\n        return (largeIndex || combineGeometry) ? new Uint32Array(edgeIndices) : new Uint16Array(edgeIndices);\n    };\n})();\n\nexport {math};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/math/math.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1966,
    "kind": "variable",
    "name": "tempMat1",
    "memberof": "scene/math/math.js",
    "static": true,
    "longname": "scene/math/math.js~tempMat1",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/math/math.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1967,
    "kind": "variable",
    "name": "tempMat2",
    "memberof": "scene/math/math.js",
    "static": true,
    "longname": "scene/math/math.js~tempMat2",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/math/math.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1968,
    "kind": "variable",
    "name": "tempVec4",
    "memberof": "scene/math/math.js",
    "static": true,
    "longname": "scene/math/math.js~tempVec4",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/math/math.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1969,
    "kind": "variable",
    "name": "caching",
    "memberof": "scene/math/math.js",
    "static": true,
    "longname": "scene/math/math.js~caching",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/math/math.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1970,
    "kind": "variable",
    "name": "vec3Cache",
    "memberof": "scene/math/math.js",
    "static": true,
    "longname": "scene/math/math.js~vec3Cache",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/math/math.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*[]"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1971,
    "kind": "variable",
    "name": "vec3CacheLen",
    "memberof": "scene/math/math.js",
    "static": true,
    "longname": "scene/math/math.js~vec3CacheLen",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/math/math.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1972,
    "kind": "variable",
    "name": "math",
    "memberof": "scene/math/math.js",
    "static": true,
    "longname": "scene/math/math.js~math",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/math/math.js",
    "importStyle": "{math}",
    "description": "",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "{transformPositions4(*, *, *=): *, transformPositions3(*, *, *=): *, frustumMat4(*, *, *, *, *, *, *=): *, divVec3Scalar(*, *, *=): *[], cartesianToBarycentric: *, faceToVertexNormals(*, *, *=): {positions: Array, normals: *}, b2(*=, *=, *=, *=): *, b3(*=, *=, *=, *=, *=): *, lookAtMat4c(*, *, *, *, *, *, *, *, *): *, mat3ToMat4(*, *=): Float32Array, barycentricToCartesian(*, *, *, *, *=): *, transposeMat4(*, *=): (*|*), transposeMat3(*, *): *, rotateVec3Z(Float32Array, Float32Array, Number, Float32Array): Float32Array, rayTriangleIntersect: *, buildPickTriangles(*, *, *): *, projectVec4(Float32Array, Float32Array): Float32Array, setMat4ToOnes(): *, mulMat4v4(*, *, *=): *, addVec3Scalar(*, Number, *=): *, mulVec4Scalar(*, Number, *=): *, AABB3ToOBB3(*, *=): *, tangentQuadraticBezier3(*, *, *, *, *): *, composeMat4(*=, *=, *=, *=): *, catmullRomInterpolate(*, *, *, *, *): *, getAABB3Center(*, *=): *, getAABB3DiagPoint: *, expandAABB3Point3(*, *): *, MIN_DOUBLE: number, mulMat4Scalar(*, *, *=): *, negateVec4(*, *=): *, rotationTranslationMat4(Float32Array, Float32Array, Float32Array=): Float32Array, getAABB2Center(*, *=): *, collapseAABB3(*=): *, collapseAABB2(*=): *, getSphere3Center(*, *=): *, AABB2(*=): *, AABB3(*=): *, quaternionToMat4(*, *=): *, expandAABB3Points3(*, *): *, expandAABB2Point2(*, *): *, addScalarMat4(*=, *=, *=): *, mat4ToMat3(*, *): Float32Array, identityMat4(*=): *, identityMat3(*=): *, orthoMat4c(*, *, *, *, *, *, *=): *, tangentQuadraticBezier(*, *, *, *): *, addVec4Scalar(*, Number, *=): *, mergeVertices(*, *=, *=, *): {positions: Array, indices: Array}, traceMat4(*): *, divVec4(*, *, *=): *, divVec3(*, *, *=): *, addMat4(*, *, *=): *, dupMat4(*): *, sqLenVec2(*=): *, sqLenVec3(*=): *, sqLenVec4(*=): *, vec3FromMat4Scale: *, canvasPosToLocalRay: *, scalingMat4c: *, divVec4Scalar(*, *, *=): *[], scalingMat4s(*=): *, conjugateQuaternion(*, *=): *, OBB3ToSphere3: *, scalingMat4v(*, *=): *, divScalarVec3(*, *, *=): *[], divScalarVec4(*, *, *=): *[], triangleNormal(*, *, *, *=): *, xyzArrayToObject(*): {x: *, y: *, z: *}, DEGTORAD: number, cacheVec3(*=): *, cacheVec4(*=): *, distVec2: *, distVec3: *, mulVec4(*, *, *=): *, mat4ToEuler(Float32Array, String, Float32Array=): Float32Array, scalingMat3v(*, *=): *, determinantMat4(*): *, octDecodeVec2s(*, *): *, rayPlaneIntersect: *, mat3(*=): Float32Array, decompressPosition(*, *, *): void, setMat4ToZeroes(): *, rotateVec3Y(Float32Array, Float32Array, Number, Float32Array): Float32Array, rotateVec3X(Float32Array, Float32Array, Number, Float32Array): Float32Array, mat4(*=): Float32Array, addVec3(*, *, *=): *, points3ToAABB3(*, *=): *, addVec4(*, *, *=): *, fmod(Number, Number): *, subMat4Scalar(*, *, *=): *, transformVec3(*, *, *=): *, subScalarMat4(*, *, *=): *, transformVec4(*, *, *=): *, inverseMat4(*, *=): *, rotationMat4c(*=, *, *, *, *=): *, addMat4Scalar(*, *, *=): *, vec4(*=): Float32Array, transformOBB3(*, *, *=): *, decompressPositions(*, *, *=): *, clamp(Number, Number, Number): Number, subVec4(*, *, *=): *, mat4ToQuaternion(*, *=): *, vec3(*=): Float32Array, vec2(*=): Float32Array, createUUID: string, inverseQuaternion(*=, *=): *, getAABB3Diag: *, transformPoints3(*, *, *=): *, translationMat3v(*, *=): *, diagonalMat4c(*, *, *, *): *, scaleMat4c(*, *, *, *): *, translationMat4c: *, scaleMat4v(*, *): *, expandAABB2(*, *): *, expandAABB3(*, *): *, barycentricInsideTriangle(*): *, worldRayToLocalRay: *, decompressUV(*, *, *): void, translationMat4v(*, *=): *, OBB3(*=): *, rotationMat4v(*=, *, *=): *, lenVec2(*=): The, lenVec4(*=): The, lenVec3(*=): The, xyzObjectToArray(*, *=): *[], OBB2(*=): *, canvasPosToWorldRay: *, quaternionToEuler: *, diagonalMat4v(*): *, mulQuaternions(*, *, *=): *, mulMat3(*, *, *=): *, diagonalMat4s(*=): *, normalizeVec2(*=, *=): *, frustumMat4v(*, *, *=): *, buildKDTree: *, mulMat4(*, *, *=): *, normalizeVec3(*=, *=): *, normalizeVec4(*=, *=): *[], translationMat4s(*=, *=): *, normalizeQuaternion(*, *=): *, octDecodeVec2(*, *): *, eulerToQuaternion(Float32Array, String, Float32Array=): Float32Array, cross3Vec4(*, *): The, flatten(*): Flattened, cross3Vec3(*, *, *=): The, isIdentityMat4(*): boolean, mulVec3Scalar(*, Number, *=): *, lerpVec3(*, *, *, *, *, *=): *, perspectiveMat4(*, *, *, *, *=): *, buildNormals: *, OLDtranslateMat4c(*, *, *, *): *, decomposeMat4: *, AABB2ToCanvas(*, *, *, *=): *, positions3ToAABB3: *, subMat4(*, *, *=): *, identityQuaternion(*=): *, quaternionToRotationMat4(*, *): *, mat4To3(*): *, unprojectVec3: Float32Array, decompressUVs(*, *, *=): *, vec3PairToQuaternion(*=, *=, *=): *, b3p3(*, *): *, b3p0(*, *): *, b3p2(*, *): *, b3p1(*, *): *, transformPoint4(*, *, *=): *, angleVec3(*=, *=): number, translateMat4v(*, *=): *, vecToArray: *, subScalarVec4(*, Number, *=): *, openCache(): void, buildTangents: *, translateMat4c(*, *, *, *): *, RADTODEG: number, rcpVec3(*=, *=): *[], transformPoint3(*, *, *=): *, subVec3(*, *, *=): *, subVec2(*, *, *=): *, closeCache(): void, points3ToSphere3: *, dotVec2(*, *): The, vec3ApplyQuaternion(*, *, *=): *, tangentSpline(*): *, subVec4Scalar(*, Number, *=): *, dotVec3(*, *): The, dotVec4(*, *): The, m4s(*): *, angleAxisToQuaternion(*, *=): *, MAX_DOUBLE: number, quaternionToAngleAxis(*=, *=): *, OBB3ToAABB2(*, *=): *, b2p1(*, *): *, b2p0(*, *): *, mulVec2Scalar(*, Number, *=): *, OBB3ToAABB3(*, *=): *, negateMat4(*, *=): *, lookAtMat4v(*, *, *, *=): mat4, b2p2(*, *): *}"
      ],
      "spread": false,
      "description": null
    },
    "ignore": true
  },
  {
    "__docId__": 1973,
    "kind": "file",
    "name": "scene/mesh/Mesh.js",
    "content": "/**\n\n */\n\n/**\n Fired when this Mesh is picked via a call to {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.\n\n The event parameters will be the hit result returned by the {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}} method.\n @event picked\n */\nimport {math} from '../math/math.js';\nimport {Component} from './../Component.js';\nimport {RenderState} from '../webgl/RenderState.js';\nimport {DrawRenderer} from \"./draw/DrawRenderer.js\";\nimport {EmphasisFillRenderer} from \"./emphasis/EmphasisFillRenderer.js\";\nimport {EmphasisEdgesRenderer} from \"./emphasis/EmphasisEdgesRenderer.js\";\nimport {PickMeshRenderer} from \"./pick/PickMeshRenderer.js\";\nimport {PickVertexRenderer} from \"./pick/PickVertexRenderer.js\";\nimport {PickTriangleRenderer} from \"./pick/PickTriangleRenderer.js\";\n\nconst obb = math.OBB3();\nconst angleAxis = new Float32Array(4);\nconst q1 = new Float32Array(4);\nconst q2 = new Float32Array(4);\nconst xAxis = new Float32Array([1, 0, 0]);\nconst yAxis = new Float32Array([0, 1, 0]);\nconst zAxis = new Float32Array([0, 0, 1]);\n\nconst veca = new Float32Array(3);\nconst vecb = new Float32Array(3);\n\nconst identityMat = math.identityMat4();\n\n\nconst getPickResult = (function () {\n\n    // Cached vars to avoid garbage collection\n\n    const localRayOrigin = math.vec3();\n    const localRayDir = math.vec3();\n    const positionA = math.vec3();\n    const positionB = math.vec3();\n    const positionC = math.vec3();\n    const triangleVertices = math.vec3();\n    const position = math.vec4();\n    const worldPos = math.vec3();\n    const viewPos = math.vec3();\n    const bary = math.vec3();\n    const normalA = math.vec3();\n    const normalB = math.vec3();\n    const normalC = math.vec3();\n    const uva = math.vec3();\n    const uvb = math.vec3();\n    const uvc = math.vec3();\n    const tempVec4a = math.vec4();\n    const tempVec4b = math.vec4();\n    const tempVec4c = math.vec4();\n    const tempVec3 = math.vec3();\n    const tempVec3b = math.vec3();\n    const tempVec3c = math.vec3();\n    const tempVec3d = math.vec3();\n    const tempVec3e = math.vec3();\n    const tempVec3f = math.vec3();\n    const tempVec3g = math.vec3();\n    const tempVec3h = math.vec3();\n    const tempVec3i = math.vec3();\n    const tempVec3j = math.vec3();\n    const tempVec3k = math.vec3();\n\n    return function (mesh, pickResult) {\n\n        var primIndex = pickResult.primIndex;\n\n        if (primIndex !== undefined && primIndex !== null && primIndex > -1) {\n\n            const geometry = mesh.geometry._state;\n            const scene = mesh.scene;\n            const camera = scene.camera;\n\n            if (geometry.primitiveName === \"triangles\") {\n\n                // Triangle picked; this only happens when the\n                // Mesh has a Geometry that has primitives of type \"triangle\"\n\n                pickResult.primitive = \"triangle\";\n\n                // Get the World-space positions of the triangle's vertices\n\n                const i = primIndex; // Indicates the first triangle index in the indices array\n\n                const indices = geometry.indices; // Indices into geometry arrays, not into shared VertexBufs\n                const positions = geometry.positions;\n\n                let ia3;\n                let ib3;\n                let ic3;\n\n                if (indices) {\n\n                    var ia = indices[i + 0];\n                    var ib = indices[i + 1];\n                    var ic = indices[i + 2];\n\n                    triangleVertices[0] = ia;\n                    triangleVertices[1] = ib;\n                    triangleVertices[2] = ic;\n\n                    pickResult.indices = triangleVertices;\n\n                    ia3 = ia * 3;\n                    ib3 = ib * 3;\n                    ic3 = ic * 3;\n\n                } else {\n\n                    ia3 = i * 3;\n                    ib3 = ia3 + 3;\n                    ic3 = ib3 + 3;\n                }\n\n                positionA[0] = positions[ia3 + 0];\n                positionA[1] = positions[ia3 + 1];\n                positionA[2] = positions[ia3 + 2];\n\n                positionB[0] = positions[ib3 + 0];\n                positionB[1] = positions[ib3 + 1];\n                positionB[2] = positions[ib3 + 2];\n\n                positionC[0] = positions[ic3 + 0];\n                positionC[1] = positions[ic3 + 1];\n                positionC[2] = positions[ic3 + 2];\n\n                if (geometry.compressGeometry) {\n\n                    // Decompress vertex positions\n\n                    const positionsDecodeMatrix = geometry.positionsDecodeMatrix;\n                    if (positionsDecodeMatrix) {\n                        math.decompressPosition(positionA, positionsDecodeMatrix, positionA);\n                        math.decompressPosition(positionB, positionsDecodeMatrix, positionB);\n                        math.decompressPosition(positionC, positionsDecodeMatrix, positionC);\n                    }\n                }\n\n                // Attempt to ray-pick the triangle in local space\n\n                let canvasPos;\n\n                if (pickResult.canvasPos) {\n                    canvasPos = pickResult.canvasPos;\n                    math.canvasPosToLocalRay(camera, mesh.worldMatrix, canvasPos, localRayOrigin, localRayDir);\n\n                } else if (pickResult.origin && pickResult.direction) {\n                    math.worldRayToLocalRay(mesh.worldMatrix, pickResult.origin, pickResult.direction, localRayOrigin, localRayDir);\n                }\n\n                math.normalizeVec3(localRayDir);\n                math.rayPlaneIntersect(localRayOrigin, localRayDir, positionA, positionB, positionC, position);\n\n                // Get Local-space cartesian coordinates of the ray-triangle intersection\n\n                pickResult.localPos = position;\n                pickResult.position = position;\n\n                // Get interpolated World-space coordinates\n\n                // Need to transform homogeneous coords\n\n                tempVec4a[0] = position[0];\n                tempVec4a[1] = position[1];\n                tempVec4a[2] = position[2];\n                tempVec4a[3] = 1;\n\n                // Get World-space cartesian coordinates of the ray-triangle intersection\n\n                math.transformVec4(mesh.worldMatrix, tempVec4a, tempVec4b);\n\n                worldPos[0] = tempVec4b[0];\n                worldPos[1] = tempVec4b[1];\n                worldPos[2] = tempVec4b[2];\n\n                pickResult.worldPos = worldPos;\n\n                // Get View-space cartesian coordinates of the ray-triangle intersection\n\n                math.transformVec4(camera.matrix, tempVec4b, tempVec4c);\n\n                viewPos[0] = tempVec4c[0];\n                viewPos[1] = tempVec4c[1];\n                viewPos[2] = tempVec4c[2];\n\n                pickResult.viewPos = viewPos;\n\n                // Get barycentric coordinates of the ray-triangle intersection\n\n                math.cartesianToBarycentric(position, positionA, positionB, positionC, bary);\n\n                pickResult.bary = bary;\n\n                // Get interpolated normal vector\n\n                const normals = geometry.normals;\n\n                if (normals) {\n\n                    if (geometry.compressGeometry) {\n\n                        // Decompress vertex normals\n\n                        const ia2 = ia * 2;\n                        const ib2 = ib * 2;\n                        const ic2 = ic * 2;\n\n                        math.octDecodeVec2(normals.subarray(ia2, ia2 + 2), normalA);\n                        math.octDecodeVec2(normals.subarray(ib2, ib2 + 2), normalB);\n                        math.octDecodeVec2(normals.subarray(ic2, ic2 + 2), normalC);\n\n                    } else {\n\n                        normalA[0] = normals[ia3];\n                        normalA[1] = normals[ia3 + 1];\n                        normalA[2] = normals[ia3 + 2];\n\n                        normalB[0] = normals[ib3];\n                        normalB[1] = normals[ib3 + 1];\n                        normalB[2] = normals[ib3 + 2];\n\n                        normalC[0] = normals[ic3];\n                        normalC[1] = normals[ic3 + 1];\n                        normalC[2] = normals[ic3 + 2];\n                    }\n\n                    const normal = math.addVec3(math.addVec3(\n                        math.mulVec3Scalar(normalA, bary[0], tempVec3),\n                        math.mulVec3Scalar(normalB, bary[1], tempVec3b), tempVec3c),\n                        math.mulVec3Scalar(normalC, bary[2], tempVec3d), tempVec3e);\n\n                    pickResult.normal = math.transformVec3(mesh.worldNormalMatrix, normal, tempVec3f);\n                }\n\n                // Get interpolated UV coordinates\n\n                const uvs = geometry.uv;\n\n                if (uvs) {\n\n                    uva[0] = uvs[(ia * 2)];\n                    uva[1] = uvs[(ia * 2) + 1];\n\n                    uvb[0] = uvs[(ib * 2)];\n                    uvb[1] = uvs[(ib * 2) + 1];\n\n                    uvc[0] = uvs[(ic * 2)];\n                    uvc[1] = uvs[(ic * 2) + 1];\n\n                    if (geometry.compressGeometry) {\n\n                        // Decompress vertex UVs\n\n                        const uvDecodeMatrix = geometry.uvDecodeMatrix;\n                        if (uvDecodeMatrix) {\n                            math.decompressUV(uva, uvDecodeMatrix, uva);\n                            math.decompressUV(uvb, uvDecodeMatrix, uvb);\n                            math.decompressUV(uvc, uvDecodeMatrix, uvc);\n                        }\n                    }\n\n                    pickResult.uv = math.addVec3(\n                        math.addVec3(\n                            math.mulVec2Scalar(uva, bary[0], tempVec3g),\n                            math.mulVec2Scalar(uvb, bary[1], tempVec3h), tempVec3i),\n                        math.mulVec2Scalar(uvc, bary[2], tempVec3j), tempVec3k);\n                }\n            }\n        }\n    }\n})();\n\nclass Mesh extends Component {\n\n    /**\n     * @private\n     */\n    get type() {\n        return \"Mesh\";\n    }\n\n    /**\n     @private\n     */\n    get isMesh() {\n        return true;\n    }\n\n    /**\n     @private\n     */\n    get isDrawable() {\n        return true;\n    }\n\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({ // NOTE: Renderer gets modeling and normal matrices from xeokit.Object#matrix and xeokit.Object.#normalMatrix\n            visible: true,\n            culled: false,\n            pickable: null,\n            clippable: null,\n            collidable: null,\n            castShadow: null,\n            receiveShadow: null,\n            outlined: null,\n            ghosted: false,\n            highlighted: false,\n            selected: false,\n            edges: false,\n            stationary: !!cfg.stationary,\n            billboard: this._checkBillboard(cfg.billboard),\n            layer: null,\n            colorize: null,\n            pickID: this.scene._renderer.getPickID(this), // TODO: somehow puch this down into xeokit framework?\n            drawHash: \"\",\n            pickHash: \"\"\n        });\n\n        this._drawRenderer = null;\n        this._shadowRenderer = null;\n        this._emphasisFillRenderer = null;\n        this._emphasisEdgesRenderer = null;\n        this._pickMeshRenderer = null;\n        this._pickTriangleRenderer = null;\n\n        this._worldPositions = null;\n        this._worldPositionsDirty = true;\n        this._geometry = cfg.geometry ? this._checkComponent(\"Geometry\", cfg.geometry) : this.scene.geometry;\n        this._vertexBufs = this._geometry._getVertexBufs();\n        this._material = cfg.material ? this._checkComponent2([\"PhongMaterial\", \"MetallicMaterial\", \"SpecularMaterial\", \"LambertMaterial\"], cfg.material) : this.scene.material;\n        this._ghostMaterial = cfg.ghostMaterial ? this._checkComponent(\"EmphasisMaterial\", cfg.ghostMaterial) : this.scene.ghostMaterial;\n        this._outlineMaterial = cfg.outlineMaterial ? this._checkComponent(\"EmphasisMaterial\", cfg.outlineMaterial) : this.scene.outlineMaterial;\n        this._highlightMaterial = cfg.highlightMaterial ? this._checkComponent(\"EmphasisMaterial\", cfg.highlightMaterial) : this.scene.highlightMaterial;\n        this._selectedMaterial = cfg.selectedMaterial ? this._checkComponent(\"EmphasisMaterial\", cfg.selectedMaterial) : this.scene.selectedMaterial;\n        this._edgeMaterial = cfg.edgeMaterial ? this._checkComponent(\"EdgeMaterial\", cfg.edgeMaterial) : this.scene.edgeMaterial;\n\n        this._parent = null;\n\n        this._aabb = null;\n        this._aabbDirty = true;\n        this.scene._aabbDirty = true;\n\n        this._scale = math.vec3();\n        this._quaternion = math.identityQuaternion();\n        this._rotation = math.vec3();\n        this._position = math.vec3();\n\n        this._worldMatrix = math.identityMat4();\n        this._worldNormalMatrix = math.identityMat4();\n\n        this._localMatrixDirty = true;\n        this._worldMatrixDirty = true;\n        this._worldNormalMatrixDirty = true;\n\n        if (cfg.matrix) {\n            this.matrix = cfg.matrix;\n        } else {\n            this.scale = cfg.scale;\n            this.position = cfg.position;\n            if (cfg.quaternion) {\n            } else {\n                this.rotation = cfg.rotation;\n            }\n        }\n\n        if (cfg.objectId) {\n            this._objectId = cfg.objectId;\n            this.scene._registerObject(this); // Must assign type before setting properties\n        }\n\n        if (cfg.modelId) {\n            this._modelId = cfg.modelId;\n            this.scene._registerModel(this);\n        }\n\n        this.visible = cfg.visible;\n        this.culled = cfg.culled;\n        this.pickable = cfg.pickable;\n        this.clippable = cfg.clippable;\n        this.collidable = cfg.collidable;\n        this.castShadow = cfg.castShadow;\n        this.receiveShadow = cfg.receiveShadow;\n        this.outlined = cfg.outlined;\n        this.ghosted = cfg.ghosted;\n        this.highlighted = cfg.highlighted;\n        this.selected = cfg.selected;\n        this.edges = cfg.edges;\n        this.aabbVisible = cfg.aabbVisible;\n        this.layer = cfg.layer;\n        this.colorize = cfg.colorize;\n        this.opacity = cfg.opacity;\n\n        if (cfg.parentId) {\n            const parentNode = this.scene.components[cfg.parentId];\n            if (!parentNode) {\n                this.error(\"Parent not found: '\" + cfg.parentId + \"'\");\n            } else if (!parentNode.isNode) {\n                this.error(\"Parent is not a Node: '\" + cfg.parentId + \"'\");\n            } else {\n                parentNode.addChild(this);\n            }\n        } else if (cfg.parent) {\n            if (!cfg.parent.isNode) {\n                this.error(\"Parent is not a Node\");\n            }\n            cfg.parent.addChild(this);\n        }\n\n        this.compile();\n    }\n\n    /**\n     Optional ID to identify this Mesh as an {@link Object}.\n\n     @property objectId\n     @default null\n     @type String\n     @final\n     */\n    get objectId() {\n        return this._objectId;\n    }\n\n    /**\n     Optional ID to identify this Mesh as a {@link Model}.\n\n     @property modelId\n     @default null\n     @type String\n     @final\n     */\n    get modelId() {\n        return this._modelId;\n    }\n\n    _checkBillboard(value) {\n        value = value || \"none\";\n        if (value !== \"spherical\" && value !== \"cylindrical\" && value !== \"none\") {\n            this.error(\"Unsupported value for 'billboard': \" + value + \" - accepted values are \" +\n                \"'spherical', 'cylindrical' and 'none' - defaulting to 'none'.\");\n            value = \"none\";\n        }\n        return value;\n    }\n\n    /**\n     * Called by xeokit to compile shaders for this Mesh.\n     * @public\n     */\n    compile() {\n        var drawHash = this._makeDrawHash();\n        if (this._state.drawHash !== drawHash) {\n            this._state.drawHash = drawHash;\n            this._putDrawRenderers();\n            this._drawRenderer = DrawRenderer.get(this);\n            // this._shadowRenderer = ShadowRenderer.get(this);\n            this._emphasisFillRenderer = EmphasisFillRenderer.get(this);\n            this._emphasisEdgesRenderer = EmphasisEdgesRenderer.get(this);\n        }\n        var pickHash = this._makePickHash();\n        if (this._state.pickHash !== pickHash) {\n            this._state.pickHash = pickHash;\n            this._putPickRenderers();\n            this._pickMeshRenderer = PickMeshRenderer.get(this);\n        }\n    }\n\n    _setLocalMatrixDirty() {\n        this._localMatrixDirty = true;\n        this._setWorldMatrixDirty();\n    }\n\n    _setWorldMatrixDirty() {\n        this._worldMatrixDirty = true;\n        this._worldNormalMatrixDirty = true;\n    }\n\n    _buildWorldMatrix() {\n        const localMatrix = this.matrix;\n        if (!this._parent) {\n            for (let i = 0, len = localMatrix.length; i < len; i++) {\n                this._worldMatrix[i] = localMatrix[i];\n            }\n        } else {\n            math.mulMat4(this._parent.worldMatrix, localMatrix, this._worldMatrix);\n        }\n        this._worldMatrixDirty = false;\n    }\n\n    _buildWorldNormalMatrix() {\n        if (this._worldMatrixDirty) {\n            this._buildWorldMatrix();\n        }\n        if (!this._worldNormalMatrix) {\n            this._worldNormalMatrix = math.mat4();\n        }\n        // Note: order of inverse and transpose doesn't matter\n        math.transposeMat4(this._worldMatrix, this._worldNormalMatrix);\n        math.inverseMat4(this._worldNormalMatrix);\n        this._worldNormalMatrixDirty = false;\n    }\n\n    _setAABBDirty() {\n        if (this.collidable) {\n            for (let object = this; object; object = object._parent) {\n                object._aabbDirty = true;\n                object.fire(\"boundary\", true);\n            }\n        }\n    }\n\n    _updateAABB() {\n        this.scene._aabbDirty = true;\n        if (!this._aabb) {\n            this._aabb = math.AABB3();\n        }\n        this._buildAABB(this.worldMatrix, this._aabb); // Mesh or BigModel\n        this._aabbDirty = false;\n    }\n\n    _webglContextRestored() {\n        if (this._drawRenderer) {\n            this._drawRenderer.webglContextRestored();\n        }\n        if (this._shadowRenderer) {\n            this._shadowRenderer.webglContextRestored();\n        }\n        if (this._emphasisFillRenderer) {\n            this._emphasisFillRenderer.webglContextRestored();\n        }\n        if (this._emphasisEdgesRenderer) {\n            this._emphasisEdgesRenderer.webglContextRestored();\n        }\n        if (this._pickMeshRenderer) {\n            this._pickMeshRenderer.webglContextRestored();\n        }\n        if (this._pickTriangleRenderer) {\n            this._pickMeshRenderer.webglContextRestored();\n        }\n    }\n\n    _makeDrawHash() {\n        const scene = this.scene;\n        const drawHash = [\n            scene.canvas.canvas.id,\n            (scene.gammaInput ? \"gi;\" : \";\") + (scene.gammaOutput ? \"go\" : \"\"),\n            scene._lightsState.getHash(),\n            scene._clipsState.getHash(),\n        ];\n        const state = this._state;\n        if (state.stationary) {\n            drawHash.push(\"/s\");\n        }\n        if (state.billboard === \"none\") {\n            drawHash.push(\"/n\");\n        } else if (state.billboard === \"spherical\") {\n            drawHash.push(\"/s\");\n        } else if (state.billboard === \"cylindrical\") {\n            drawHash.push(\"/c\");\n        }\n        if (state.receiveShadow) {\n            drawHash.push(\"/rs\");\n        }\n        drawHash.push(\";\");\n        return drawHash.join(\"\");\n    }\n\n    _makePickHash() {\n        const pickHash = [];\n        const state = this._state;\n        if (state.stationary) {\n            pickHash.push(\"/s\");\n        }\n        if (state.billboard === \"none\") {\n            pickHash.push(\"/n\");\n        } else if (state.billboard === \"spherical\") {\n            pickHash.push(\"/s\");\n        } else if (state.billboard === \"cylindrical\") {\n            pickHash.push(\"/c\");\n        }\n        if (state.receiveShadow) {\n            pickHash.push(\"/rs\");\n        }\n        pickHash.push(\";\");\n        return pickHash.join(\"\");\n    }\n\n    _buildAABB(worldMatrix, aabb) {\n        math.transformOBB3(worldMatrix, this._geometry.obb, obb);\n        math.OBB3ToAABB3(obb, aabb);\n    }\n\n    /**\n     World-space 3D vertex positions.\n\n     These are internally generated on-demand and cached. To free the cached\n     vertex World positions when you're done with them, set this property to null or undefined.\n\n     @property worldPositions\n     @type Float32Array\n     @final\n     */\n    get worldPositions() {\n        if (this._worldPositionsDirty) {\n            const positions = this._geometry.positions;\n            if (!this._worldPositions) {\n                this._worldPositions = new Float32Array(positions.length);\n            }\n            math.transformPositions3(this.worldMatrix, positions, this._worldPositions);\n            this._worldPositionsDirty = false;\n        }\n        return this._worldPositions;\n    }\n\n    set worldPositions(value) {\n        if (value = undefined || value === null) {\n            this._worldPositions = null; // Release memory\n            this._worldPositionsDirty = true;\n        }\n    }\n\n    /**\n     Defines the shape of this Mesh.\n\n     @property geometry\n     @type Geometry\n     @final\n     */\n    get geometry() {\n        return this._geometry;\n    }\n\n    /**\n     Defines appearance when rendering normally, ie. when not ghosted, highlighted or selected.\n\n     @property material\n     @type Material\n     @final\n     */\n    get material() {\n        return this._material;\n    }\n\n    /**\n     Defines surface appearance when ghosted.\n\n     @property ghostMaterial\n     @type EmphasisMaterial\n     @final\n     */\n    get ghostMaterial() {\n        return this._ghostMaterial;\n    }\n\n    /**\n     Defines surface appearance when highlighted.\n\n     @property highlightMaterial\n     @type EmphasisMaterial\n     @final\n     */\n    get highlightMaterial() {\n        return this._highlightMaterial;\n    }\n\n    /**\n     Defines surface appearance when selected.\n\n     @property selectedMaterial\n     @type EmphasisMaterial\n     */\n    get selectedMaterial() {\n        return this._selectedMaterial;\n    }\n\n    /**\n     Defines surface appearance when edges are shown.\n\n     @property edgeMaterial\n     @type EdgeMaterial\n     */\n    get edgeMaterial() {\n        return this._edgeMaterial;\n    }\n\n    /**\n     Defines surface appearance when outlined.\n\n     @property outlineMaterial\n     @type OutlineMaterial\n     */\n    get outlineMaterial() {\n        return this._outlineMaterial;\n    }\n\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Transform properties\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     Local translation.\n\n     @property position\n     @default [0,0,0]\n     @type {Float32Array}\n     */\n    set position(value) {\n        this._position.set(value || [0, 0, 0]);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    get position() {\n        return this._position;\n    }\n\n    /**\n     Local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n\n     @property rotation\n     @default [0,0,0]\n     @type {Float32Array}\n     */\n    set rotation(value) {\n        this._rotation.set(value || [0, 0, 0]);\n        math.eulerToQuaternion(this._rotation, \"XYZ\", this._quaternion);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    get rotation() {\n        return this._rotation;\n    }\n\n    /**\n     Local rotation quaternion.\n\n     @property quaternion\n     @default [0,0,0, 1]\n     @type {Float32Array}\n     */\n    set quaternion(value) {\n        this._quaternion.set(value || [0, 0, 0, 1]);\n        math.quaternionToEuler(this._quaternion, \"XYZ\", this._rotation);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    get quaternion() {\n        return this._quaternion;\n    }\n\n    /**\n     Local scale.\n\n     @property scale\n     @default [1,1,1]\n     @type {Float32Array}\n     */\n    set scale(value) {\n        this._scale.set(value || [1, 1, 1]);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    get scale() {\n        return this._scale;\n    }\n\n    /**\n     * Local matrix.\n     *\n     * @property matrix\n     * @default [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n     * @type {Float32Array}\n     */\n    set matrix(value) {\n        if (!this.__localMatrix) {\n            this.__localMatrix = math.identityMat4();\n        }\n        this.__localMatrix.set(value || identityMat);\n        math.decomposeMat4(this.__localMatrix, this._position, this._quaternion, this._scale);\n        this._localMatrixDirty = false;\n        this._setWorldMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    get matrix() {\n        if (this._localMatrixDirty) {\n            if (!this.__localMatrix) {\n                this.__localMatrix = math.identityMat4();\n            }\n            math.composeMat4(this._position, this._quaternion, this._scale, this.__localMatrix);\n            this._localMatrixDirty = false;\n        }\n        return this.__localMatrix;\n    }\n\n    /**\n     * The World matrix.\n     *\n     * @property worldMatrix\n     * @type {Float32Array}\n     */\n    get worldMatrix() {\n        if (this._worldMatrixDirty) {\n            this._buildWorldMatrix();\n        }\n        return this._worldMatrix;\n    }\n\n    /**\n     * This World normal matrix.\n     *\n     * @property worldNormalMatrix\n     * @default [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n     * @type {Float32Array}\n     */\n    get worldNormalMatrix() {\n        if (this._worldNormalMatrixDirty) {\n            this._buildWorldNormalMatrix();\n        }\n        return this._worldNormalMatrix;\n    }\n\n\n    /**\n     Rotates about the given local axis by the given increment.\n\n     @method rotate\n     @param {Float32Array} axis Local axis about which to rotate.\n     @param {Number} angle Angle increment in degrees.\n     */\n    rotate(axis, angle) {\n        angleAxis[0] = axis[0];\n        angleAxis[1] = axis[1];\n        angleAxis[2] = axis[2];\n        angleAxis[3] = angle * math.DEGTORAD;\n        math.angleAxisToQuaternion(angleAxis, q1);\n        math.mulQuaternions(this.quaternion, q1, q2);\n        this.quaternion = q2;\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n        return this;\n    }\n\n    /**\n     Rotates about the given World-space axis by the given increment.\n\n     @method rotate\n     @param {Float32Array} axis Local axis about which to rotate.\n     @param {Number} angle Angle increment in degrees.\n     */\n    rotateOnWorldAxis(axis, angle) {\n        angleAxis[0] = axis[0];\n        angleAxis[1] = axis[1];\n        angleAxis[2] = axis[2];\n        angleAxis[3] = angle * math.DEGTORAD;\n        math.angleAxisToQuaternion(angleAxis, q1);\n        math.mulQuaternions(q1, this.quaternion, q1);\n        //this.quaternion.premultiply(q1);\n        return this;\n    }\n\n    /**\n     Rotates about the local X-axis by the given increment.\n\n     @method rotateX\n     @param {Number} angle Angle increment in degrees.\n     */\n    rotateX(angle) {\n        return this.rotate(xAxis, angle);\n    }\n\n    /**\n     Rotates about the local Y-axis by the given increment.\n\n     @method rotateY\n     @param {Number} angle Angle increment in degrees.\n     */\n    rotateY(angle) {\n        return this.rotate(yAxis, angle);\n    }\n\n    /**\n     Rotates about the local Z-axis by the given increment.\n\n     @method rotateZ\n     @param {Number} angle Angle increment in degrees.\n     */\n    rotateZ(angle) {\n        return this.rotate(zAxis, angle);\n    }\n\n    /**\n     Translates along local space vector by the given increment.\n\n     @method translate\n     @param {Float32Array} axis Normalized local space 3D vector along which to translate.\n     @param {Number} distance Distance to translate along  the vector.\n     */\n    translate(axis, distance) {\n        math.vec3ApplyQuaternion(this.quaternion, axis, veca);\n        math.mulVec3Scalar(veca, distance, vecb);\n        math.addVec3(this.position, vecb, this.position);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n        return this;\n    }\n\n    /**\n     Translates along the local X-axis by the given increment.\n\n     @method translateX\n     @param {Number} distance Distance to translate along  the X-axis.\n     */\n    translateX(distance) {\n        return this.translate(xAxis, distance);\n    }\n\n    /**\n     * Translates along the local Y-axis by the given increment.\n     *\n     * @method translateX\n     * @param {Number} distance Distance to translate along  the Y-axis.\n     */\n    translateY(distance) {\n        return this.translate(yAxis, distance);\n    }\n\n    /**\n     Translates along the local Z-axis by the given increment.\n\n     @method translateX\n     @param {Number} distance Distance to translate along  the Z-axis.\n     */\n    translateZ(distance) {\n        return this.translate(zAxis, distance);\n    }\n\n    /**\n     Optional ID to identify this Node as an {@link Object}.\n\n     @property objectId\n     @default null\n     @type String\n     @final\n     */\n    get objectId() {\n        return this._objectId;\n    }\n\n    /**\n     Optional ID to identify this Mesh as a {@link Model}.\n\n     @property modelId\n     @default null\n     @type String\n     @final\n     */\n    get modelId() {\n        return this._modelId;\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Boundary properties\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     World-space 3D axis-aligned bounding box (AABB).\n\n     Represented by a six-element Float32Array containing the min/max extents of the\n     axis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.\n\n     @property aabb\n     @final\n     @type {Float32Array}\n     */\n    get aabb() {\n        if (this._aabbDirty) {\n            this._updateAABB();\n        }\n        return this._aabb;\n    }\n\n    /**\n     World-space 3D center.\n\n     @property center\n     @final\n     @type {Float32Array}\n     */\n    get center() {\n        if (this._aabbDirty) {\n            this._updateAABB();\n        }\n        return this._aabbCenter;\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Rendering states\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     Indicates if visible.\n\n     The Mesh is only rendered when {@link Mesh#visible} is true and\n     {@link Mesh#culled} is false.\n\n     Each visible Mesh is registered in the {@link Scene}'s\n     {@link Scene/visibleObjects} map when its {@link Mesh#objectId}\n     is set to a value.\n\n     @property visible\n     @default true\n     @type Boolean\n     */\n    set visible(visible) {\n        visible = visible !== false;\n        this._state.visible = visible;\n        if (this._objectId) {\n            this.scene._objectVisibilityUpdated(this, visible);\n        }\n        this.glRedraw();\n    }\n\n    get visible() {\n        return this._state.visible;\n    }\n\n    /**\n     Indicates if ghosted.\n\n     The ghosted appearance is configured by {@link Mesh#ghostMaterial:property\"}}ghostMaterial{{/crossLink}}.\n\n     Each ghosted Mesh is registered in its {@link Scene}'s\n     {@link Scene/ghostedObjects} map when its {@link Mesh#objectId}\n     is set to a value.\n\n     @property ghosted\n     @default false\n     @type Boolean\n     */\n    set ghosted(ghosted) {\n        ghosted = !!ghosted;\n        if (this._state.ghosted === ghosted) {\n            return;\n        }\n        this._state.ghosted = ghosted;\n        if (this._objectId) {\n            this.scene._objectGhostedUpdated(this, ghosted);\n        }\n        this.glRedraw();\n    }\n\n    get ghosted() {\n        return this._state.ghosted;\n    }\n\n    /**\n     Indicates if highlighted.\n\n     The highlight appearance is configured by {@link Mesh#highlightMaterial:property\"}}highlightMaterial{{/crossLink}}.\n\n     Each highlighted Mesh is registered in its {@link Scene}'s\n     {@link Scene/highlightedObjects} map when its {@link Mesh#objectId}\n     is set to a value.\n\n     @property highlighted\n     @default false\n     @type Boolean\n     */\n    set highlighted(highlighted) {\n        highlighted = !!highlighted;\n        if (highlighted === this._state.highlighted) {\n            return;\n        }\n        this._state.highlighted = highlighted;\n        if (this._objectId) {\n            this.scene._objectHighlightedUpdated(this, highlighted);\n        }\n        this.glRedraw();\n    }\n\n    get highlighted() {\n        return this._state.highlighted;\n    }\n\n    /**\n     Indicates if selected.\n\n     The selected appearance is configured by {@link Mesh#selectedMaterial:property\"}}selectedMaterial{{/crossLink}}.\n\n     Each selected Mesh is registered in its {@link Scene}'s\n     {@link Scene/selectedObjects} map when its {@link Mesh#objectId}\n     is set to a value.\n\n     @property selected\n     @default false\n     @type Boolean\n     */\n    set selected(selected) {\n        selected = !!selected;\n        if (selected === this._state.selected) {\n            return;\n        }\n        this._state.selected = selected;\n        if (this._objectId) {\n            this.scene._objectSelectedUpdated(this, selected);\n        }\n        this.glRedraw();\n    }\n\n    get selected() {\n        return this._state.selected;\n    }\n\n    /**\n     Indicates if edges are shown.\n\n     The edges appearance is configured by {@link Mesh#edgeMaterial:property\"}}edgeMaterial{{/crossLink}}.\n\n     @property edges\n     @default false\n     @type Boolean\n     */\n    set edges(edges) {\n        edges = !!edges;\n        if (edges === this._state.edges) {\n            return;\n        }\n        this._state.edges = edges;\n        this.glRedraw();\n    }\n\n    get edges() {\n        return this._state.edges;\n    }\n\n    /**\n     Indicates if culled from view.\n\n     The Mesh is only rendered when {@link Mesh#visible} is true and\n     {@link Mesh#culled} is false.\n\n     @property culled\n     @default false\n     @type Boolean\n     */\n    set culled(value) {\n        this._state.culled = !!value;\n        this.glRedraw();\n    }\n\n    get culled() {\n        return this._state.culled;\n    }\n\n    /**\n     Indicates if pickable.\n\n     When false, the Mesh will never be picked by calls to the {@link Scene/pick:method\"}}Scene pick(){{/crossLink}} method, and picking will happen as \"through\" the Mesh, to attempt to pick whatever lies on the other side of it.\n\n     @property pickable\n     @default true\n     @type Boolean\n     */\n    set pickable(value) {\n        value = value !== false;\n        if (this._state.pickable === value) {\n            return;\n        }\n        this._state.pickable = value;\n        // No need to trigger a render;\n        // state is only used when picking\n    }\n\n    get pickable() {\n        return this._state.pickable;\n    }\n\n    /**\n     Indicates if clippable.\n\n     When false, the {@link Scene}'s {@link Clips} will have no effect on the Mesh.\n\n     @property clippable\n     @default true\n     @type Boolean\n     */\n    set clippable(value) {\n        value = value !== false;\n        if (this._state.clippable === value) {\n            return;\n        }\n        this._state.clippable = value;\n        this.glRedraw();\n        if (this._state.castShadow) {\n            this.glRedraw();\n        }\n    }\n\n    get clippable() {\n        return this._state.clippable;\n    }\n\n    /**\n     Indicates if included in boundary calculations.\n\n     When false, this Mesh will not be included in the bounding boxes provided by parent components.\n\n     @property collidable\n     @default true\n     @type Boolean\n     */\n    set collidable(value) {\n        value = value !== false;\n        if (value === this._state.collidable) {\n            return;\n        }\n        this._state.collidable = value;\n    }\n\n    get collidable() {\n        return this._state.collidable;\n    }\n\n    /**\n     Indicates if casting shadows.\n\n     @property castShadow\n     @default true\n     @type Boolean\n     */\n    set castShadow(value) {\n        value = value !== false;\n        if (value === this._state.castShadow) {\n            return;\n        }\n        this._state.castShadow = value;\n        this.glRedraw();\n    }\n\n    get castShadow() {\n        return this._state.castShadow;\n    }\n\n    /**\n     Indicates if receiving shadows.\n\n     @property receiveShadow\n     @default true\n     @type Boolean\n     */\n    set receiveShadow(value) {\n        this._state.receiveShadow = false; // Disables shadows for now\n        // value = value !== false;\n        // if (value === this._state.receiveShadow) {\n        //     return;\n        // }\n        // this._state.receiveShadow = value;\n        // this._state.hash = value ? \"/mod/rs;\" : \"/mod;\";\n        // this.fire(\"dirty\", this); // Now need to (re)compile objectRenderers to include/exclude shadow mapping\n    }\n\n    get receiveShadow() {\n        return this._state.receiveShadow;\n    }\n\n    /**\n     Indicates if rendered with an outline.\n\n     The outline appearance is configured by {@link Mesh#outlineMaterial:property\"}}outlineMaterial{{/crossLink}}.\n\n     @property outlined\n     @default false\n     @type Boolean\n     */\n    set outlined(value) {\n        value = !!value;\n        if (value === this._state.outlined) {\n            return;\n        }\n        this._state.outlined = value;\n        this.glRedraw();\n    }\n\n    get outlined() {\n        return this._state.outlined;\n    }\n\n    /**\n     RGB colorize color, multiplies by the rendered fragment colors.\n\n     @property colorize\n     @default [1.0, 1.0, 1.0]\n     @type Float32Array\n     */\n    set colorize(value) {\n        let colorize = this._state.colorize;\n        if (!colorize) {\n            colorize = this._state.colorize = new Float32Array(4);\n            colorize[3] = 1;\n        }\n        if (value) {\n            colorize[0] = value[0];\n            colorize[1] = value[1];\n            colorize[2] = value[2];\n        } else {\n            colorize[0] = 1;\n            colorize[1] = 1;\n            colorize[2] = 1;\n        }\n        this.glRedraw();\n    }\n\n    get colorize() {\n        return this._state.colorize;\n    }\n\n    /**\n     Opacity factor, multiplies by the rendered fragment alpha.\n\n     This is a factor in range ````[0..1]````.\n\n     @property opacity\n     @default 1.0\n     @type Number\n     */\n    set opacity(opacity) {\n        let colorize = this._state.colorize;\n        if (!colorize) {\n            colorize = this._state.colorize = new Float32Array(4);\n            colorize[0] = 1;\n            colorize[1] = 1;\n            colorize[2] = 1;\n        }\n        colorize[3] = opacity !== null && opacity !== undefined ? opacity : 1.0;\n        this.glRedraw();\n    }\n\n    get opacity() {\n        return this._state.colorize[3];\n    }\n\n    /**\n     Returns whether or not this Mesh is transparent.\n     @returns {boolean}\n     */\n    get transparent() {\n        return this._material.alphaMode === 2 /* blend */ || this._state.colorize[3] < 1\n    }\n\n    /**\n     The rendering order.\n\n     This can be set on multiple transparent Meshes, to make them render in a specific order\n     for correct alpha blending.\n\n     @property layer\n     @default 0\n     @type Number\n     */\n    set layer(value) {\n        // TODO: Only accept rendering layer in range [0...MAX_layer]\n        value = value || 0;\n        value = Math.round(value);\n        if (value === this._state.layer) {\n            return;\n        }\n        this._state.layer = value;\n        this._renderer.needStateSort();\n    }\n\n    get layer() {\n        return this._state.layer;\n    }\n\n    /**\n     Indicates if the position is stationary.\n\n     When true, will disable the effect of {@link Lookat\"}}view transform{{/crossLink}}\n     translations for this Mesh, while still allowing it to rotate. This is useful for skybox Meshes.\n\n     @property stationary\n     @default false\n     @type Boolean\n     @final\n     */\n    get stationary() {\n        return this._state.stationary;\n    }\n\n    /**\n     Indicates the billboarding behaviour.\n\n     Options are:\n\n     * **\"none\"** -  **(default)** - No billboarding.\n     * **\"spherical\"** - Mesh is billboarded to face the viewpoint, rotating both vertically and horizontally.\n     * **\"cylindrical\"** - Mesh is billboarded to face the viewpoint, rotating only about its vertically\n     axis. Use this mode for things like trees on a landscape.\n\n     @property billboard\n     @default \"none\"\n     @type String\n     @final\n     */\n    get billboard() {\n        return this._state.billboard;\n    }\n\n    /**\n     Property with final value ````true```` to indicate that xeokit should render this Mesh Drawable in sorted order, relative to\n     other Mesh Drawables of the same class.\n\n     The sort order is determined by the Mesh's {@link Mesh#stateSortCompare:methd\"}}Mesh#stateSortCompare(){{/crossLink}} method.\n\n     Sorting is essential for rendering performance, so that xeokit is able to avoid applying runs of the same state changes\n     to the GPU, ie. can collapse them.\n\n     @property isStateSortable\n     @returns {boolean}\n     */\n    get isStateSortable() {\n        return true;\n    }\n\n    /**\n     Comparison function used by the renderer to determine the order in which xeokit should render the Mesh,\n     relative to to other Meshes.\n\n     The renderer requires this because Mesh defines\n     {@link Mesh#isStateSortable:property\"}}Drawable#isStateSortable{{/crossLink}}, which returns true.\n\n     Sorting is essential for rendering performance, so that xeokit is able to avoid needlessly applying runs of the same\n     rendering state changes to the GPU, ie. can collapse them.\n\n     @method stateSortCompare\n     @param {Mesh} mesh1\n     @param {Mesh} mesh2\n     @returns {number}\n     */\n    stateSortCompare(mesh1, mesh2) {\n        return (mesh1._state.layer - mesh2._state.layer)\n            || (mesh1._drawRenderer.id - mesh2._drawRenderer.id) // Program state\n            || (mesh1._material._state.id - mesh2._material._state.id) // Material state\n            || (mesh1._vertexBufs.id - mesh2._vertexBufs.id)  // Shared vertex bufs\n            || (mesh1._geometry._state.id - mesh2._geometry._state.id); // Geometry state\n    }\n\n    /**\n     *  Called by xeokit, when about to render this Mesh Drawable, to get flags indicating what rendering effects to apply for it.\n     *\n     * @method getRenderFlags\n     * @param {RenderFlags} renderFlags Returns the rendering flags.\n     */\n    getRenderFlags(renderFlags) {\n\n        renderFlags.reset();\n\n        const state = this._state;\n\n        if (state.ghosted) {\n            const ghostMaterial = this._ghostMaterial._state;\n            if (ghostMaterial.fill) {\n                if (ghostMaterial.fillAlpha < 1.0) {\n                    renderFlags.ghostedFillTransparent = true;\n                } else {\n                    renderFlags.ghostedFillOpaque = true;\n                }\n            }\n            if (ghostMaterial.edges) {\n                if (ghostMaterial.edgeAlpha < 1.0) {\n                    renderFlags.ghostedEdgesTransparent = true;\n                } else {\n                    renderFlags.ghostedEdgesOpaque = true;\n                }\n            }\n        } else {\n            const normalMaterial = this._material._state;\n            if (normalMaterial.alpha < 1.0 || state.colorize[3] < 1.0) {\n                renderFlags.normalFillTransparent = true;\n            } else {\n                renderFlags.normalFillOpaque = true;\n            }\n            if (state.edges) {\n                const edgeMaterial = this._edgeMaterial._state;\n                if (edgeMaterial.alpha < 1.0) {\n                    renderFlags.normalEdgesTransparent = true;\n                } else {\n                    renderFlags.normalEdgesOpaque = true;\n                }\n            }\n            if (state.selected) {\n                const selectedMaterial = this._selectedMaterial._state;\n                if (selectedMaterial.fill) {\n                    if (selectedMaterial.fillAlpha < 1.0) {\n                        renderFlags.selectedFillTransparent = true;\n                    } else {\n                        renderFlags.selectedFillOpaque = true;\n                    }\n                }\n                if (selectedMaterial.edges) {\n                    if (selectedMaterial.edgeAlpha < 1.0) {\n                        renderFlags.selectedEdgesTransparent = true;\n                    } else {\n                        renderFlags.selectedEdgesOpaque = true;\n                    }\n                }\n            } else if (state.highlighted) {\n                const highlightMaterial = this._highlightMaterial._state;\n                if (highlightMaterial.fill) {\n                    if (highlightMaterial.fillAlpha < 1.0) {\n                        renderFlags.highlightedFillTransparent = true;\n                    } else {\n                        renderFlags.highlightedFillOpaque = true;\n                    }\n                }\n                if (highlightMaterial.edges) {\n                    if (highlightMaterial.edgeAlpha < 1.0) {\n                        renderFlags.highlightedEdgesTransparent = true;\n                    } else {\n                        renderFlags.highlightedEdgesOpaque = true;\n                    }\n                }\n            }\n        }\n    }\n\n    //-- NORMAL --------------------------------------------------------------------------------------------------------\n\n    drawNormalFillOpaque(frameCtx) {\n        if (this._drawRenderer || (this._drawRenderer = DrawRenderer.get(this))) {\n            this._drawRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    drawNormalEdgesOpaque(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = EmphasisEdgesRenderer.get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 3); // 3 == edges\n        }\n    }\n\n    drawNormalFillTransparent(frameCtx) {\n        if (this._drawRenderer || (this._drawRenderer = DrawRenderer.get(this))) {\n            this._drawRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    drawNormalEdgesTransparent(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = EmphasisEdgesRenderer.get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 3); // 3 == edges\n        }\n    }\n\n    //-- GHOSTED--------------------------------------------------------------------------------------------------------\n\n    drawGhostedFillOpaque(frameCtx) {\n        if (this._emphasisFillRenderer || (this._emphasisFillRenderer = EmphasisFillRenderer.get(this))) {\n            this._emphasisFillRenderer.drawMesh(frameCtx, this, 0); // 0 == ghost\n        }\n    }\n\n    drawGhostedEdgesOpaque(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = EmphasisEdgesRenderer.get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 0); // 0 == ghost\n        }\n    }\n\n    drawGhostedFillTransparent(frameCtx) {\n        if (this._emphasisFillRenderer || (this._emphasisFillRenderer = EmphasisFillRenderer.get(this))) {\n            this._emphasisFillRenderer.drawMesh(frameCtx, this, 0); // 0 == ghost\n        }\n    }\n\n    drawGhostedEdgesTransparent(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = EmphasisEdgesRenderer.get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 0); // 0 == ghost\n        }\n    }\n\n    //-- HIGHLIGHTED ---------------------------------------------------------------------------------------------------\n\n    drawHighlightedFillOpaque(frameCtx) {\n        if (this._emphasisFillRenderer || (this._emphasisFillRenderer = EmphasisFillRenderer.get(this))) {\n            this._emphasisFillRenderer.drawMesh(frameCtx, this, 1); // 1 == highlight\n        }\n    }\n\n    drawHighlightedEdgesOpaque(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = EmphasisEdgesRenderer.get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 1); // 1 == highlight\n        }\n    }\n\n    drawHighlightedFillTransparent(frameCtx) {\n        if (this._emphasisFillRenderer || (this._emphasisFillRenderer = EmphasisFillRenderer.get(this))) {\n            this._emphasisFillRenderer.drawMesh(frameCtx, this, 1); // 1 == highlight\n        }\n    }\n\n    drawHighlightedEdgesTransparent(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = EmphasisEdgesRenderer.get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 1); // 1 == highlight\n        }\n    }\n\n    //-- SELECTED ------------------------------------------------------------------------------------------------------\n\n    drawSelectedFillOpaque(frameCtx) {\n        if (this._emphasisFillRenderer || (this._emphasisFillRenderer = EmphasisFillRenderer.get(this))) {\n            this._emphasisFillRenderer.drawMesh(frameCtx, this, 2); // 2 == selected\n        }\n    }\n\n    drawSelectedEdgesOpaque(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = EmphasisEdgesRenderer.get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 2); // 2 == selected\n        }\n    }\n\n    drawSelectedFillTransparent(frameCtx) {\n        if (this._emphasisFillRenderer || (this._emphasisFillRenderer = EmphasisFillRenderer.get(this))) {\n            this._emphasisFillRenderer.drawMesh(frameCtx, this, 2); // 2 == selected\n        }\n    }\n\n    drawSelectedEdgesTransparent(frameCtx) {\n        if (this._emphasisEdgesRenderer || (this._emphasisEdgesRenderer = EmphasisEdgesRenderer.get(this))) {\n            this._emphasisEdgesRenderer.drawMesh(frameCtx, this, 2); // 2 == selected\n        }\n    }\n\n    //---- PICKING ----------------------------------------------------------------------------------------------------\n\n    drawPickMesh(frameCtx) {\n        if (this._pickMeshRenderer || (this._pickMeshRenderer = PickMeshRenderer.get(this))) {\n            this._pickMeshRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    drawPickTriangles(frameCtx) {\n        if (this._pickTriangleRenderer || (this._pickTriangleRenderer = PickTriangleRenderer.get(this))) {\n            this._pickTriangleRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    drawPickVertices(frameCtx) {\n        if (this._pickVertexRenderer || (this._pickVertexRenderer = PickVertexRenderer.get(this))) {\n            this._pickVertexRenderer.drawMesh(frameCtx, this);\n        }\n    }\n\n    /**\n     Given a {@link PickResult} that contains a\n     {@link PickResult/primIndex}, which indicates that a primitive was picked\n     on the Mesh, then add more information to the PickResult about the picked position on the surface of the Mesh.\n\n     This method is part of the {@link Drawable} contract, and is documented here for reference\n     in case you're plugging your own Drawable components into xeokit.\n\n     Architecturally, this delegates collection of that Drawable-specific info to the Drawable, allowing it to\n     provide whatever info it's able to.\n\n     @method getPickResult\n     @param {PickResult} pickResult The PickResult to augment with pick intersection information specific to this Mesh.\n     @param [pickResult.primIndex] Index of the primitive that was picked on this Mesh. Essential for obtaining the intersection information.\n     @param [pickResult.canvasPos] Canvas coordinates, provided when picking through the Canvas.\n     @param [pickResult.origin] World-space 3D ray origin, when ray picking.\n     @param [pickResult.direction] World-space 3D ray direction, provided when ray picking.\n     */\n    getPickResult(pickResult) {\n        getPickResult(this, pickResult);\n    }\n\n    _putDrawRenderers() {\n        if (this._drawRenderer) {\n            this._drawRenderer.put();\n            this._drawRenderer = null;\n        }\n        if (this._shadowRenderer) {\n            this._shadowRenderer.put();\n            this._shadowRenderer = null;\n        }\n        if (this._emphasisFillRenderer) {\n            this._emphasisFillRenderer.put();\n            this._emphasisFillRenderer = null;\n        }\n        if (this._emphasisEdgesRenderer) {\n            this._emphasisEdgesRenderer.put();\n            this._emphasisEdgesRenderer = null;\n        }\n        if (this._outlineRenderer) {\n            this._outlineRenderer.put();\n            this._outlineRenderer = null;\n        }\n    }\n\n    _putPickRenderers() {\n        if (this._pickMeshRenderer) {\n            this._pickMeshRenderer.put();\n            this._pickMeshRenderer = null;\n        }\n        if (this._pickTriangleRenderer) {\n            this._pickTriangleRenderer.put();\n            this._pickTriangleRenderer = null;\n        }\n        if (this._pickVertexRenderer) {\n            this._pickVertexRenderer.put();\n            this._pickVertexRenderer = null;\n        }\n    }\n\n    /**\n     * @method destroy\n     */\n    destroy() {\n        super.destroy(); // xeokit.Object\n        this._putDrawRenderers();\n        this._putPickRenderers();\n        this.scene._renderer.putPickID(this._state.pickID); // TODO: somehow puch this down into xeokit framework?\n        this.glRedraw();\n    }\n}\n\nexport {Mesh};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/Mesh.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1974,
    "kind": "variable",
    "name": "obb",
    "memberof": "scene/mesh/Mesh.js",
    "static": true,
    "longname": "scene/mesh/Mesh.js~obb",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/Mesh.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1975,
    "kind": "variable",
    "name": "angleAxis",
    "memberof": "scene/mesh/Mesh.js",
    "static": true,
    "longname": "scene/mesh/Mesh.js~angleAxis",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/Mesh.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1976,
    "kind": "variable",
    "name": "q1",
    "memberof": "scene/mesh/Mesh.js",
    "static": true,
    "longname": "scene/mesh/Mesh.js~q1",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/Mesh.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1977,
    "kind": "variable",
    "name": "q2",
    "memberof": "scene/mesh/Mesh.js",
    "static": true,
    "longname": "scene/mesh/Mesh.js~q2",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/Mesh.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1978,
    "kind": "variable",
    "name": "xAxis",
    "memberof": "scene/mesh/Mesh.js",
    "static": true,
    "longname": "scene/mesh/Mesh.js~xAxis",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/Mesh.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1979,
    "kind": "variable",
    "name": "yAxis",
    "memberof": "scene/mesh/Mesh.js",
    "static": true,
    "longname": "scene/mesh/Mesh.js~yAxis",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/Mesh.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1980,
    "kind": "variable",
    "name": "zAxis",
    "memberof": "scene/mesh/Mesh.js",
    "static": true,
    "longname": "scene/mesh/Mesh.js~zAxis",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/Mesh.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1981,
    "kind": "variable",
    "name": "veca",
    "memberof": "scene/mesh/Mesh.js",
    "static": true,
    "longname": "scene/mesh/Mesh.js~veca",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/Mesh.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 29,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1982,
    "kind": "variable",
    "name": "vecb",
    "memberof": "scene/mesh/Mesh.js",
    "static": true,
    "longname": "scene/mesh/Mesh.js~vecb",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/Mesh.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 30,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1983,
    "kind": "variable",
    "name": "identityMat",
    "memberof": "scene/mesh/Mesh.js",
    "static": true,
    "longname": "scene/mesh/Mesh.js~identityMat",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/Mesh.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1984,
    "kind": "variable",
    "name": "getPickResult",
    "memberof": "scene/mesh/Mesh.js",
    "static": true,
    "longname": "scene/mesh/Mesh.js~getPickResult",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/Mesh.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 1985,
    "kind": "class",
    "name": "Mesh",
    "memberof": "scene/mesh/Mesh.js",
    "static": true,
    "longname": "scene/mesh/Mesh.js~Mesh",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/Mesh.js",
    "importStyle": "{Mesh}",
    "description": null,
    "lineNumber": 279,
    "undocument": true,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 1986,
    "kind": "get",
    "name": "type",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#type",
    "access": "private",
    "description": "",
    "lineNumber": 284,
    "ignore": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 1987,
    "kind": "get",
    "name": "isMesh",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#isMesh",
    "access": "private",
    "description": "",
    "lineNumber": 291,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1988,
    "kind": "get",
    "name": "isDrawable",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#isDrawable",
    "access": "private",
    "description": "",
    "lineNumber": 298,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1989,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 302,
    "undocument": true
  },
  {
    "__docId__": 1990,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_state",
    "access": "private",
    "description": null,
    "lineNumber": 306,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1991,
    "kind": "member",
    "name": "_drawRenderer",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_drawRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 328,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1992,
    "kind": "member",
    "name": "_shadowRenderer",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_shadowRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 329,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1993,
    "kind": "member",
    "name": "_emphasisFillRenderer",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_emphasisFillRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 330,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1994,
    "kind": "member",
    "name": "_emphasisEdgesRenderer",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_emphasisEdgesRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 331,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1995,
    "kind": "member",
    "name": "_pickMeshRenderer",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_pickMeshRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 332,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1996,
    "kind": "member",
    "name": "_pickTriangleRenderer",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_pickTriangleRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 333,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1997,
    "kind": "member",
    "name": "_worldPositions",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_worldPositions",
    "access": "private",
    "description": null,
    "lineNumber": 335,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 1998,
    "kind": "member",
    "name": "_worldPositionsDirty",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_worldPositionsDirty",
    "access": "private",
    "description": null,
    "lineNumber": 336,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 1999,
    "kind": "member",
    "name": "_geometry",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_geometry",
    "access": "private",
    "description": null,
    "lineNumber": 337,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2000,
    "kind": "member",
    "name": "_vertexBufs",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_vertexBufs",
    "access": "private",
    "description": null,
    "lineNumber": 338,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2001,
    "kind": "member",
    "name": "_material",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_material",
    "access": "private",
    "description": null,
    "lineNumber": 339,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2002,
    "kind": "member",
    "name": "_ghostMaterial",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_ghostMaterial",
    "access": "private",
    "description": null,
    "lineNumber": 340,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2003,
    "kind": "member",
    "name": "_outlineMaterial",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_outlineMaterial",
    "access": "private",
    "description": null,
    "lineNumber": 341,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2004,
    "kind": "member",
    "name": "_highlightMaterial",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_highlightMaterial",
    "access": "private",
    "description": null,
    "lineNumber": 342,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2005,
    "kind": "member",
    "name": "_selectedMaterial",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_selectedMaterial",
    "access": "private",
    "description": null,
    "lineNumber": 343,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2006,
    "kind": "member",
    "name": "_edgeMaterial",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_edgeMaterial",
    "access": "private",
    "description": null,
    "lineNumber": 344,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2007,
    "kind": "member",
    "name": "_parent",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_parent",
    "access": "private",
    "description": null,
    "lineNumber": 346,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2008,
    "kind": "member",
    "name": "_aabb",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_aabb",
    "access": "private",
    "description": null,
    "lineNumber": 348,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2009,
    "kind": "member",
    "name": "_aabbDirty",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_aabbDirty",
    "access": "private",
    "description": null,
    "lineNumber": 349,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2010,
    "kind": "member",
    "name": "_scale",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_scale",
    "access": "private",
    "description": null,
    "lineNumber": 352,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2011,
    "kind": "member",
    "name": "_quaternion",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_quaternion",
    "access": "private",
    "description": null,
    "lineNumber": 353,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2012,
    "kind": "member",
    "name": "_rotation",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_rotation",
    "access": "private",
    "description": null,
    "lineNumber": 354,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2013,
    "kind": "member",
    "name": "_position",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_position",
    "access": "private",
    "description": null,
    "lineNumber": 355,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2014,
    "kind": "member",
    "name": "_worldMatrix",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_worldMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 357,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2015,
    "kind": "member",
    "name": "_worldNormalMatrix",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_worldNormalMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 358,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2016,
    "kind": "member",
    "name": "_localMatrixDirty",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_localMatrixDirty",
    "access": "private",
    "description": null,
    "lineNumber": 360,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2017,
    "kind": "member",
    "name": "_worldMatrixDirty",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_worldMatrixDirty",
    "access": "private",
    "description": null,
    "lineNumber": 361,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2018,
    "kind": "member",
    "name": "_worldNormalMatrixDirty",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_worldNormalMatrixDirty",
    "access": "private",
    "description": null,
    "lineNumber": 362,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2023,
    "kind": "member",
    "name": "_objectId",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_objectId",
    "access": "private",
    "description": null,
    "lineNumber": 376,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2024,
    "kind": "member",
    "name": "_modelId",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_modelId",
    "access": "private",
    "description": null,
    "lineNumber": 381,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2037,
    "kind": "member",
    "name": "aabbVisible",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#aabbVisible",
    "access": "public",
    "description": null,
    "lineNumber": 397,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2041,
    "kind": "get",
    "name": "objectId",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#objectId",
    "access": "public",
    "description": "Optional ID to identify this Mesh as an {@link Object}.",
    "lineNumber": 429,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "null"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2042,
    "kind": "get",
    "name": "modelId",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#modelId",
    "access": "public",
    "description": "Optional ID to identify this Mesh as a {@link Model}.",
    "lineNumber": 441,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "null"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2043,
    "kind": "method",
    "name": "_checkBillboard",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_checkBillboard",
    "access": "private",
    "description": null,
    "lineNumber": 445,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2044,
    "kind": "method",
    "name": "compile",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#compile",
    "access": "public",
    "description": "Called by xeokit to compile shaders for this Mesh.",
    "lineNumber": 459,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2049,
    "kind": "method",
    "name": "_setLocalMatrixDirty",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_setLocalMatrixDirty",
    "access": "private",
    "description": null,
    "lineNumber": 477,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2051,
    "kind": "method",
    "name": "_setWorldMatrixDirty",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_setWorldMatrixDirty",
    "access": "private",
    "description": null,
    "lineNumber": 482,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2054,
    "kind": "method",
    "name": "_buildWorldMatrix",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_buildWorldMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 487,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2056,
    "kind": "method",
    "name": "_buildWorldNormalMatrix",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_buildWorldNormalMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 499,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2059,
    "kind": "method",
    "name": "_setAABBDirty",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_setAABBDirty",
    "access": "private",
    "description": null,
    "lineNumber": 512,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2060,
    "kind": "method",
    "name": "_updateAABB",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_updateAABB",
    "access": "private",
    "description": null,
    "lineNumber": 521,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2063,
    "kind": "method",
    "name": "_webglContextRestored",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_webglContextRestored",
    "access": "private",
    "description": null,
    "lineNumber": 530,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2064,
    "kind": "method",
    "name": "_makeDrawHash",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_makeDrawHash",
    "access": "private",
    "description": null,
    "lineNumber": 551,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2065,
    "kind": "method",
    "name": "_makePickHash",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_makePickHash",
    "access": "private",
    "description": null,
    "lineNumber": 577,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2066,
    "kind": "method",
    "name": "_buildAABB",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_buildAABB",
    "access": "private",
    "description": null,
    "lineNumber": 597,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "worldMatrix",
        "types": [
          "*"
        ]
      },
      {
        "name": "aabb",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2067,
    "kind": "get",
    "name": "worldPositions",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#worldPositions",
    "access": "public",
    "description": "World-space 3D vertex positions.\n\nThese are internally generated on-demand and cached. To free the cached\nvertex World positions when you're done with them, set this property to null or undefined.",
    "lineNumber": 612,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "worldPositions",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2070,
    "kind": "set",
    "name": "worldPositions",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#worldPositions",
    "access": "public",
    "description": null,
    "lineNumber": 624,
    "undocument": true
  },
  {
    "__docId__": 2073,
    "kind": "get",
    "name": "geometry",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#geometry",
    "access": "public",
    "description": "Defines the shape of this Mesh.",
    "lineNumber": 638,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "geometry",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2074,
    "kind": "get",
    "name": "material",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#material",
    "access": "public",
    "description": "Defines appearance when rendering normally, ie. when not ghosted, highlighted or selected.",
    "lineNumber": 649,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "material",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2075,
    "kind": "get",
    "name": "ghostMaterial",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#ghostMaterial",
    "access": "public",
    "description": "Defines surface appearance when ghosted.",
    "lineNumber": 660,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghostMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2076,
    "kind": "get",
    "name": "highlightMaterial",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#highlightMaterial",
    "access": "public",
    "description": "Defines surface appearance when highlighted.",
    "lineNumber": 671,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2077,
    "kind": "get",
    "name": "selectedMaterial",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#selectedMaterial",
    "access": "public",
    "description": "Defines surface appearance when selected.",
    "lineNumber": 681,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2078,
    "kind": "get",
    "name": "edgeMaterial",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#edgeMaterial",
    "access": "public",
    "description": "Defines surface appearance when edges are shown.",
    "lineNumber": 691,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2079,
    "kind": "get",
    "name": "outlineMaterial",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#outlineMaterial",
    "access": "public",
    "description": "Defines surface appearance when outlined.",
    "lineNumber": 701,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outlineMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2080,
    "kind": "set",
    "name": "position",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#position",
    "access": "public",
    "description": "Local translation.",
    "lineNumber": 717,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0,0,0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2081,
    "kind": "get",
    "name": "position",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#position",
    "access": "public",
    "description": null,
    "lineNumber": 724,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2082,
    "kind": "set",
    "name": "rotation",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#rotation",
    "access": "public",
    "description": "Local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.",
    "lineNumber": 735,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0,0,0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rotation",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2083,
    "kind": "get",
    "name": "rotation",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#rotation",
    "access": "public",
    "description": null,
    "lineNumber": 743,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2084,
    "kind": "set",
    "name": "quaternion",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#quaternion",
    "access": "public",
    "description": "Local rotation quaternion.",
    "lineNumber": 754,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0,0,0, 1]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "quaternion",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2085,
    "kind": "get",
    "name": "quaternion",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#quaternion",
    "access": "public",
    "description": null,
    "lineNumber": 762,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2086,
    "kind": "set",
    "name": "scale",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#scale",
    "access": "public",
    "description": "Local scale.",
    "lineNumber": 773,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1,1,1]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "scale",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2087,
    "kind": "get",
    "name": "scale",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#scale",
    "access": "public",
    "description": null,
    "lineNumber": 780,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2088,
    "kind": "set",
    "name": "matrix",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#matrix",
    "access": "public",
    "description": "Local matrix.",
    "lineNumber": 791,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2089,
    "kind": "member",
    "name": "__localMatrix",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#__localMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 793,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2091,
    "kind": "get",
    "name": "matrix",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#matrix",
    "access": "public",
    "description": null,
    "lineNumber": 803,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2094,
    "kind": "get",
    "name": "worldMatrix",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#worldMatrix",
    "access": "public",
    "description": "The World matrix.",
    "lineNumber": 820,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "worldMatrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2095,
    "kind": "get",
    "name": "worldNormalMatrix",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#worldNormalMatrix",
    "access": "public",
    "description": "This World normal matrix.",
    "lineNumber": 834,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "worldNormalMatrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2096,
    "kind": "method",
    "name": "rotate",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#rotate",
    "access": "public",
    "description": "Rotates about the given local axis by the given increment.",
    "lineNumber": 849,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "rotate"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "axis",
        "description": "Local axis about which to rotate."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle increment in degrees."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2098,
    "kind": "method",
    "name": "rotateOnWorldAxis",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#rotateOnWorldAxis",
    "access": "public",
    "description": "Rotates about the given World-space axis by the given increment.",
    "lineNumber": 870,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "rotate"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "axis",
        "description": "Local axis about which to rotate."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle increment in degrees."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2099,
    "kind": "method",
    "name": "rotateX",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#rotateX",
    "access": "public",
    "description": "Rotates about the local X-axis by the given increment.",
    "lineNumber": 887,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "rotateX"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle increment in degrees."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2100,
    "kind": "method",
    "name": "rotateY",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#rotateY",
    "access": "public",
    "description": "Rotates about the local Y-axis by the given increment.",
    "lineNumber": 897,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "rotateY"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle increment in degrees."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2101,
    "kind": "method",
    "name": "rotateZ",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#rotateZ",
    "access": "public",
    "description": "Rotates about the local Z-axis by the given increment.",
    "lineNumber": 907,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "rotateZ"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle increment in degrees."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2102,
    "kind": "method",
    "name": "translate",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#translate",
    "access": "public",
    "description": "Translates along local space vector by the given increment.",
    "lineNumber": 918,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "translate"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "axis",
        "description": "Normalized local space 3D vector along which to translate."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "distance",
        "description": "Distance to translate along  the vector."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2103,
    "kind": "method",
    "name": "translateX",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#translateX",
    "access": "public",
    "description": "Translates along the local X-axis by the given increment.",
    "lineNumber": 934,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "translateX"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "distance",
        "description": "Distance to translate along  the X-axis."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2104,
    "kind": "method",
    "name": "translateY",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#translateY",
    "access": "public",
    "description": "Translates along the local Y-axis by the given increment.",
    "lineNumber": 944,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "translateX"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "distance",
        "description": "Distance to translate along  the Y-axis."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2105,
    "kind": "method",
    "name": "translateZ",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#translateZ",
    "access": "public",
    "description": "Translates along the local Z-axis by the given increment.",
    "lineNumber": 954,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "translateX"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "distance",
        "description": "Distance to translate along  the Z-axis."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2106,
    "kind": "get",
    "name": "objectId",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#objectId",
    "access": "public",
    "description": "Optional ID to identify this Node as an {@link Object}.",
    "lineNumber": 966,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "null"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2107,
    "kind": "get",
    "name": "modelId",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#modelId",
    "access": "public",
    "description": "Optional ID to identify this Mesh as a {@link Model}.",
    "lineNumber": 978,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "null"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2108,
    "kind": "get",
    "name": "aabb",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#aabb",
    "access": "public",
    "description": "World-space 3D axis-aligned bounding box (AABB).\n\nRepresented by a six-element Float32Array containing the min/max extents of the\naxis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.",
    "lineNumber": 996,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "aabb",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2109,
    "kind": "get",
    "name": "center",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#center",
    "access": "public",
    "description": "World-space 3D center.",
    "lineNumber": 1010,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "center",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2110,
    "kind": "set",
    "name": "visible",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#visible",
    "access": "public",
    "description": "Indicates if visible.\n\nThe Mesh is only rendered when {@link Mesh#visible} is true and\n{@link Mesh#culled} is false.\n\nEach visible Mesh is registered in the {@link Scene}'s\n{@link Scene/visibleObjects} map when its {@link Mesh#objectId}\nis set to a value.",
    "lineNumber": 1035,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "visible",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2111,
    "kind": "get",
    "name": "visible",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#visible",
    "access": "public",
    "description": null,
    "lineNumber": 1044,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2112,
    "kind": "set",
    "name": "ghosted",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#ghosted",
    "access": "public",
    "description": "Indicates if ghosted.\n\nThe ghosted appearance is configured by {@link Mesh#ghostMaterial:property\"}}ghostMaterial{{/crossLink}}.\n\nEach ghosted Mesh is registered in its {@link Scene}'s\n{@link Scene/ghostedObjects} map when its {@link Mesh#objectId}\nis set to a value.",
    "lineNumber": 1061,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghosted",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2113,
    "kind": "get",
    "name": "ghosted",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#ghosted",
    "access": "public",
    "description": null,
    "lineNumber": 1073,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2114,
    "kind": "set",
    "name": "highlighted",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#highlighted",
    "access": "public",
    "description": "Indicates if highlighted.\n\nThe highlight appearance is configured by {@link Mesh#highlightMaterial:property\"}}highlightMaterial{{/crossLink}}.\n\nEach highlighted Mesh is registered in its {@link Scene}'s\n{@link Scene/highlightedObjects} map when its {@link Mesh#objectId}\nis set to a value.",
    "lineNumber": 1090,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlighted",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2115,
    "kind": "get",
    "name": "highlighted",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#highlighted",
    "access": "public",
    "description": null,
    "lineNumber": 1102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2116,
    "kind": "set",
    "name": "selected",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#selected",
    "access": "public",
    "description": "Indicates if selected.\n\nThe selected appearance is configured by {@link Mesh#selectedMaterial:property\"}}selectedMaterial{{/crossLink}}.\n\nEach selected Mesh is registered in its {@link Scene}'s\n{@link Scene/selectedObjects} map when its {@link Mesh#objectId}\nis set to a value.",
    "lineNumber": 1119,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selected",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2117,
    "kind": "get",
    "name": "selected",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#selected",
    "access": "public",
    "description": null,
    "lineNumber": 1131,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2118,
    "kind": "set",
    "name": "edges",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#edges",
    "access": "public",
    "description": "Indicates if edges are shown.\n\nThe edges appearance is configured by {@link Mesh#edgeMaterial:property\"}}edgeMaterial{{/crossLink}}.",
    "lineNumber": 1144,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edges",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2119,
    "kind": "get",
    "name": "edges",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#edges",
    "access": "public",
    "description": null,
    "lineNumber": 1153,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2120,
    "kind": "set",
    "name": "culled",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#culled",
    "access": "public",
    "description": "Indicates if culled from view.\n\nThe Mesh is only rendered when {@link Mesh#visible} is true and\n{@link Mesh#culled} is false.",
    "lineNumber": 1167,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "culled",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2121,
    "kind": "get",
    "name": "culled",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#culled",
    "access": "public",
    "description": null,
    "lineNumber": 1172,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2122,
    "kind": "set",
    "name": "pickable",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#pickable",
    "access": "public",
    "description": "Indicates if pickable.\n\nWhen false, the Mesh will never be picked by calls to the {@link Scene/pick:method\"}}Scene pick(){{/crossLink}} method, and picking will happen as \"through\" the Mesh, to attempt to pick whatever lies on the other side of it.",
    "lineNumber": 1185,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pickable",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2123,
    "kind": "get",
    "name": "pickable",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#pickable",
    "access": "public",
    "description": null,
    "lineNumber": 1195,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2124,
    "kind": "set",
    "name": "clippable",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#clippable",
    "access": "public",
    "description": "Indicates if clippable.\n\nWhen false, the {@link Scene}'s {@link Clips} will have no effect on the Mesh.",
    "lineNumber": 1208,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "clippable",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2125,
    "kind": "get",
    "name": "clippable",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#clippable",
    "access": "public",
    "description": null,
    "lineNumber": 1220,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2126,
    "kind": "set",
    "name": "collidable",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#collidable",
    "access": "public",
    "description": "Indicates if included in boundary calculations.\n\nWhen false, this Mesh will not be included in the bounding boxes provided by parent components.",
    "lineNumber": 1233,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "collidable",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2127,
    "kind": "get",
    "name": "collidable",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#collidable",
    "access": "public",
    "description": null,
    "lineNumber": 1241,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2128,
    "kind": "set",
    "name": "castShadow",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#castShadow",
    "access": "public",
    "description": "Indicates if casting shadows.",
    "lineNumber": 1252,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "castShadow",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2129,
    "kind": "get",
    "name": "castShadow",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#castShadow",
    "access": "public",
    "description": null,
    "lineNumber": 1261,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2130,
    "kind": "set",
    "name": "receiveShadow",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#receiveShadow",
    "access": "public",
    "description": "Indicates if receiving shadows.",
    "lineNumber": 1272,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "receiveShadow",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2131,
    "kind": "get",
    "name": "receiveShadow",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#receiveShadow",
    "access": "public",
    "description": null,
    "lineNumber": 1283,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2132,
    "kind": "set",
    "name": "outlined",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#outlined",
    "access": "public",
    "description": "Indicates if rendered with an outline.\n\nThe outline appearance is configured by {@link Mesh#outlineMaterial:property\"}}outlineMaterial{{/crossLink}}.",
    "lineNumber": 1296,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outlined",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2133,
    "kind": "get",
    "name": "outlined",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#outlined",
    "access": "public",
    "description": null,
    "lineNumber": 1305,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2134,
    "kind": "set",
    "name": "colorize",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#colorize",
    "access": "public",
    "description": "RGB colorize color, multiplies by the rendered fragment colors.",
    "lineNumber": 1316,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1.0, 1.0, 1.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "colorize",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2135,
    "kind": "get",
    "name": "colorize",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#colorize",
    "access": "public",
    "description": null,
    "lineNumber": 1334,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2136,
    "kind": "set",
    "name": "opacity",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#opacity",
    "access": "public",
    "description": "Opacity factor, multiplies by the rendered fragment alpha.\n\nThis is a factor in range ````[0..1]````.",
    "lineNumber": 1347,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "opacity",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2137,
    "kind": "get",
    "name": "opacity",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#opacity",
    "access": "public",
    "description": null,
    "lineNumber": 1359,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2138,
    "kind": "get",
    "name": "transparent",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#transparent",
    "access": "public",
    "description": "Returns whether or not this Mesh is transparent.",
    "lineNumber": 1367,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2139,
    "kind": "set",
    "name": "layer",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#layer",
    "access": "public",
    "description": "The rendering order.\n\nThis can be set on multiple transparent Meshes, to make them render in a specific order\nfor correct alpha blending.",
    "lineNumber": 1381,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "layer",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2140,
    "kind": "get",
    "name": "layer",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#layer",
    "access": "public",
    "description": null,
    "lineNumber": 1392,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2141,
    "kind": "get",
    "name": "stationary",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#stationary",
    "access": "public",
    "description": "Indicates if the position is stationary.\n\nWhen true, will disable the effect of {@link Lookat\"}}view transform{{/crossLink}}\ntranslations for this Mesh, while still allowing it to rotate. This is useful for skybox Meshes.",
    "lineNumber": 1407,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "stationary",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2142,
    "kind": "get",
    "name": "billboard",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#billboard",
    "access": "public",
    "description": "Indicates the billboarding behaviour.\n\nOptions are:\n\n**\"none\"** -  **(default)** - No billboarding.\n**\"spherical\"** - Mesh is billboarded to face the viewpoint, rotating both vertically and horizontally.\n**\"cylindrical\"** - Mesh is billboarded to face the viewpoint, rotating only about its vertically\naxis. Use this mode for things like trees on a landscape.",
    "lineNumber": 1426,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "\"none\""
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "billboard",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2143,
    "kind": "get",
    "name": "isStateSortable",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#isStateSortable",
    "access": "public",
    "description": "Property with final value ````true```` to indicate that xeokit should render this Mesh Drawable in sorted order, relative to\nother Mesh Drawables of the same class.\n\nThe sort order is determined by the Mesh's {@link Mesh#stateSortCompare:methd\"}}Mesh#stateSortCompare(){{/crossLink}} method.\n\nSorting is essential for rendering performance, so that xeokit is able to avoid applying runs of the same state changes\nto the GPU, ie. can collapse them.",
    "lineNumber": 1442,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "isStateSortable",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2144,
    "kind": "method",
    "name": "stateSortCompare",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#stateSortCompare",
    "access": "public",
    "description": "Comparison function used by the renderer to determine the order in which xeokit should render the Mesh,\nrelative to to other Meshes.\n\nThe renderer requires this because Mesh defines\n{@link Mesh#isStateSortable:property\"}}Drawable#isStateSortable{{/crossLink}}, which returns true.\n\nSorting is essential for rendering performance, so that xeokit is able to avoid needlessly applying runs of the same\nrendering state changes to the GPU, ie. can collapse them.",
    "lineNumber": 1461,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "stateSortCompare"
      },
      {
        "tagName": "@returns",
        "tagValue": "{number}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Mesh"
        ],
        "spread": false,
        "optional": false,
        "name": "mesh1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Mesh"
        ],
        "spread": false,
        "optional": false,
        "name": "mesh2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2145,
    "kind": "method",
    "name": "getRenderFlags",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#getRenderFlags",
    "access": "public",
    "description": " Called by xeokit, when about to render this Mesh Drawable, to get flags indicating what rendering effects to apply for it.",
    "lineNumber": 1475,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getRenderFlags"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "RenderFlags"
        ],
        "spread": false,
        "optional": false,
        "name": "renderFlags",
        "description": "Returns the rendering flags."
      }
    ],
    "return": null
  },
  {
    "__docId__": 2146,
    "kind": "method",
    "name": "drawNormalFillOpaque",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawNormalFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1550,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2147,
    "kind": "method",
    "name": "drawNormalEdgesOpaque",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawNormalEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1556,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2148,
    "kind": "method",
    "name": "drawNormalFillTransparent",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawNormalFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1562,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2149,
    "kind": "method",
    "name": "drawNormalEdgesTransparent",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawNormalEdgesTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1568,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2150,
    "kind": "method",
    "name": "drawGhostedFillOpaque",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawGhostedFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1576,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2151,
    "kind": "method",
    "name": "drawGhostedEdgesOpaque",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawGhostedEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1582,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2152,
    "kind": "method",
    "name": "drawGhostedFillTransparent",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawGhostedFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1588,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2153,
    "kind": "method",
    "name": "drawGhostedEdgesTransparent",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawGhostedEdgesTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1594,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2154,
    "kind": "method",
    "name": "drawHighlightedFillOpaque",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawHighlightedFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1602,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2155,
    "kind": "method",
    "name": "drawHighlightedEdgesOpaque",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawHighlightedEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1608,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2156,
    "kind": "method",
    "name": "drawHighlightedFillTransparent",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawHighlightedFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1614,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2157,
    "kind": "method",
    "name": "drawHighlightedEdgesTransparent",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawHighlightedEdgesTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1620,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2158,
    "kind": "method",
    "name": "drawSelectedFillOpaque",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawSelectedFillOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1628,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2159,
    "kind": "method",
    "name": "drawSelectedEdgesOpaque",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawSelectedEdgesOpaque",
    "access": "public",
    "description": null,
    "lineNumber": 1634,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2160,
    "kind": "method",
    "name": "drawSelectedFillTransparent",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawSelectedFillTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1640,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2161,
    "kind": "method",
    "name": "drawSelectedEdgesTransparent",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawSelectedEdgesTransparent",
    "access": "public",
    "description": null,
    "lineNumber": 1646,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2162,
    "kind": "method",
    "name": "drawPickMesh",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawPickMesh",
    "access": "public",
    "description": null,
    "lineNumber": 1654,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2163,
    "kind": "method",
    "name": "drawPickTriangles",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawPickTriangles",
    "access": "public",
    "description": null,
    "lineNumber": 1660,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2164,
    "kind": "method",
    "name": "drawPickVertices",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#drawPickVertices",
    "access": "public",
    "description": null,
    "lineNumber": 1666,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2165,
    "kind": "method",
    "name": "getPickResult",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#getPickResult",
    "access": "public",
    "description": "Given a {@link PickResult} that contains a\n{@link PickResult/primIndex}, which indicates that a primitive was picked\non the Mesh, then add more information to the PickResult about the picked position on the surface of the Mesh.\n\nThis method is part of the {@link Drawable} contract, and is documented here for reference\nin case you're plugging your own Drawable components into xeokit.\n\nArchitecturally, this delegates collection of that Drawable-specific info to the Drawable, allowing it to\nprovide whatever info it's able to.",
    "lineNumber": 1690,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getPickResult"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "PickResult"
        ],
        "spread": false,
        "optional": false,
        "name": "pickResult",
        "description": "The PickResult to augment with pick intersection information specific to this Mesh."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "pickResult.primIndex",
        "description": "Index of the primitive that was picked on this Mesh. Essential for obtaining the intersection information."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "pickResult.canvasPos",
        "description": "Canvas coordinates, provided when picking through the Canvas."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "pickResult.origin",
        "description": "World-space 3D ray origin, when ray picking."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "pickResult.direction",
        "description": "World-space 3D ray direction, provided when ray picking."
      }
    ],
    "return": null
  },
  {
    "__docId__": 2166,
    "kind": "method",
    "name": "_putDrawRenderers",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_putDrawRenderers",
    "access": "private",
    "description": null,
    "lineNumber": 1694,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2171,
    "kind": "member",
    "name": "_outlineRenderer",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_outlineRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 1713,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2172,
    "kind": "method",
    "name": "_putPickRenderers",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_putPickRenderers",
    "access": "private",
    "description": null,
    "lineNumber": 1717,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2175,
    "kind": "member",
    "name": "_pickVertexRenderer",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#_pickVertexRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 1728,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2176,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/mesh/Mesh.js~Mesh",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/Mesh.js~Mesh#destroy",
    "access": "public",
    "description": "",
    "lineNumber": 1735,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "destroy"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 2177,
    "kind": "file",
    "name": "scene/mesh/draw/DrawRenderer.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\nimport {Map} from \"../../utils/Map.js\";\nimport {DrawShaderSource} from \"./DrawShaderSource.js\";\nimport {Program} from \"../../webgl/Program.js\";\nimport {stats} from './../../stats.js';\nimport {WEBGL_INFO} from './../../webglInfo.js';\n\nconst ids = new Map({});\n\n/**\n * @private\n */\nconst DrawRenderer = function (hash, mesh) {\n    this.id = ids.addItem({});\n    this._hash = hash;\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._shaderSource = new DrawShaderSource(mesh);\n    this._allocate(mesh);\n};\n\nconst drawRenderers = {};\n\nDrawRenderer.get = function (mesh) {\n    const scene = mesh.scene;\n    const hash = [\n        scene.canvas.canvas.id,\n        (scene.gammaInput ? \"gi;\" : \";\") + (scene.gammaOutput ? \"go\" : \"\"),\n        scene._lightsState.getHash(),\n        scene._clipsState.getHash(),\n        mesh._geometry._state.hash,\n        mesh._material._state.hash,\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = drawRenderers[hash];\n    if (!renderer) {\n        renderer = new DrawRenderer(hash, mesh);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        drawRenderers[hash] = renderer;\n        stats.memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nDrawRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete drawRenderers[this._hash];\n        stats.memory.programs--;\n    }\n};\n\nDrawRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nDrawRenderer.prototype.drawMesh = function (frame, mesh) {\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n    const maxTextureUnits = WEBGL_INFO.MAX_TEXTURE_UNITS;\n    const scene = mesh.scene;\n    const material = mesh._material;\n    const gl = scene.canvas.gl;\n    const program = this._program;\n    const meshState = mesh._state;\n    const materialState = mesh._material._state;\n    const geometryState = mesh._geometry._state;\n\n    if (frame.lastProgramId !== this._program.id) {\n        frame.lastProgramId = this._program.id;\n        this._bindProgram(frame);\n    }\n\n    if (materialState.id !== this._lastMaterialId) {\n\n        frame.textureUnit = this._baseTextureUnit;\n\n        const backfaces = materialState.backfaces;\n        if (frame.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frame.backfaces = backfaces;\n        }\n\n        const frontface = materialState.frontface;\n        if (frame.frontface !== frontface) {\n            if (frontface) {\n                gl.frontFace(gl.CCW);\n            } else {\n                gl.frontFace(gl.CW);\n            }\n            frame.frontface = frontface;\n        }\n\n        if (frame.lineWidth !== materialState.lineWidth) {\n            gl.lineWidth(materialState.lineWidth);\n            frame.lineWidth = materialState.lineWidth;\n        }\n\n        if (this._uPointSize) {\n            gl.uniform1f(this._uPointSize, materialState.pointSize);\n        }\n\n        switch (materialState.type) {\n            case \"LambertMaterial\":\n                if (this._uMaterialAmbient) {\n                    gl.uniform3fv(this._uMaterialAmbient, materialState.ambient);\n                }\n                if (this._uMaterialColor) {\n                    gl.uniform4f(this._uMaterialColor, materialState.color[0], materialState.color[1], materialState.color[2], materialState.alpha);\n                }\n                if (this._uMaterialEmissive) {\n                    gl.uniform3fv(this._uMaterialEmissive, materialState.emissive);\n                }\n                break;\n\n            case \"PhongMaterial\":\n                if (this._uMaterialShininess) {\n                    gl.uniform1f(this._uMaterialShininess, materialState.shininess);\n                }\n                if (this._uMaterialAmbient) {\n                    gl.uniform3fv(this._uMaterialAmbient, materialState.ambient);\n                }\n                if (this._uMaterialDiffuse) {\n                    gl.uniform3fv(this._uMaterialDiffuse, materialState.diffuse);\n                }\n                if (this._uMaterialSpecular) {\n                    gl.uniform3fv(this._uMaterialSpecular, materialState.specular);\n                }\n                if (this._uMaterialEmissive) {\n                    gl.uniform3fv(this._uMaterialEmissive, materialState.emissive);\n                }\n                if (this._uAlphaModeCutoff) {\n                    gl.uniform4f(\n                        this._uAlphaModeCutoff,\n                        1.0 * materialState.alpha,\n                        materialState.alphaMode === 1 ? 1.0 : 0.0,\n                        materialState.alphaCutoff,\n                        0);\n                }\n                if (material._ambientMap && material._ambientMap._state.texture && this._uMaterialAmbientMap) {\n                    program.bindTexture(this._uMaterialAmbientMap, material._ambientMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uMaterialAmbientMapMatrix) {\n                        gl.uniformMatrix4fv(this._uMaterialAmbientMapMatrix, false, material._ambientMap._state.matrix);\n                    }\n                }\n                if (material._diffuseMap && material._diffuseMap._state.texture && this._uDiffuseMap) {\n                    program.bindTexture(this._uDiffuseMap, material._diffuseMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uDiffuseMapMatrix) {\n                        gl.uniformMatrix4fv(this._uDiffuseMapMatrix, false, material._diffuseMap._state.matrix);\n                    }\n                }\n                if (material._specularMap && material._specularMap._state.texture && this._uSpecularMap) {\n                    program.bindTexture(this._uSpecularMap, material._specularMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uSpecularMapMatrix) {\n                        gl.uniformMatrix4fv(this._uSpecularMapMatrix, false, material._specularMap._state.matrix);\n                    }\n                }\n                if (material._emissiveMap && material._emissiveMap._state.texture && this._uEmissiveMap) {\n                    program.bindTexture(this._uEmissiveMap, material._emissiveMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uEmissiveMapMatrix) {\n                        gl.uniformMatrix4fv(this._uEmissiveMapMatrix, false, material._emissiveMap._state.matrix);\n                    }\n                }\n                if (material._alphaMap && material._alphaMap._state.texture && this._uAlphaMap) {\n                    program.bindTexture(this._uAlphaMap, material._alphaMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uAlphaMapMatrix) {\n                        gl.uniformMatrix4fv(this._uAlphaMapMatrix, false, material._alphaMap._state.matrix);\n                    }\n                }\n                if (material._reflectivityMap && material._reflectivityMap._state.texture && this._uReflectivityMap) {\n                    program.bindTexture(this._uReflectivityMap, material._reflectivityMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    if (this._uReflectivityMapMatrix) {\n                        gl.uniformMatrix4fv(this._uReflectivityMapMatrix, false, material._reflectivityMap._state.matrix);\n                    }\n                }\n                if (material._normalMap && material._normalMap._state.texture && this._uNormalMap) {\n                    program.bindTexture(this._uNormalMap, material._normalMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uNormalMapMatrix) {\n                        gl.uniformMatrix4fv(this._uNormalMapMatrix, false, material._normalMap._state.matrix);\n                    }\n                }\n                if (material._occlusionMap && material._occlusionMap._state.texture && this._uOcclusionMap) {\n                    program.bindTexture(this._uOcclusionMap, material._occlusionMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uOcclusionMapMatrix) {\n                        gl.uniformMatrix4fv(this._uOcclusionMapMatrix, false, material._occlusionMap._state.matrix);\n                    }\n                }\n                if (material._diffuseFresnel) {\n                    if (this._uDiffuseFresnelEdgeBias) {\n                        gl.uniform1f(this._uDiffuseFresnelEdgeBias, material._diffuseFresnel.edgeBias);\n                    }\n                    if (this._uDiffuseFresnelCenterBias) {\n                        gl.uniform1f(this._uDiffuseFresnelCenterBias, material._diffuseFresnel.centerBias);\n                    }\n                    if (this._uDiffuseFresnelEdgeColor) {\n                        gl.uniform3fv(this._uDiffuseFresnelEdgeColor, material._diffuseFresnel.edgeColor);\n                    }\n                    if (this._uDiffuseFresnelCenterColor) {\n                        gl.uniform3fv(this._uDiffuseFresnelCenterColor, material._diffuseFresnel.centerColor);\n                    }\n                    if (this._uDiffuseFresnelPower) {\n                        gl.uniform1f(this._uDiffuseFresnelPower, material._diffuseFresnel.power);\n                    }\n                }\n                if (material._specularFresnel) {\n                    if (this._uSpecularFresnelEdgeBias) {\n                        gl.uniform1f(this._uSpecularFresnelEdgeBias, material._specularFresnel.edgeBias);\n                    }\n                    if (this._uSpecularFresnelCenterBias) {\n                        gl.uniform1f(this._uSpecularFresnelCenterBias, material._specularFresnel.centerBias);\n                    }\n                    if (this._uSpecularFresnelEdgeColor) {\n                        gl.uniform3fv(this._uSpecularFresnelEdgeColor, material._specularFresnel.edgeColor);\n                    }\n                    if (this._uSpecularFresnelCenterColor) {\n                        gl.uniform3fv(this._uSpecularFresnelCenterColor, material._specularFresnel.centerColor);\n                    }\n                    if (this._uSpecularFresnelPower) {\n                        gl.uniform1f(this._uSpecularFresnelPower, material._specularFresnel.power);\n                    }\n                }\n                if (material._alphaFresnel) {\n                    if (this._uAlphaFresnelEdgeBias) {\n                        gl.uniform1f(this._uAlphaFresnelEdgeBias, material._alphaFresnel.edgeBias);\n                    }\n                    if (this._uAlphaFresnelCenterBias) {\n                        gl.uniform1f(this._uAlphaFresnelCenterBias, material._alphaFresnel.centerBias);\n                    }\n                    if (this._uAlphaFresnelEdgeColor) {\n                        gl.uniform3fv(this._uAlphaFresnelEdgeColor, material._alphaFresnel.edgeColor);\n                    }\n                    if (this._uAlphaFresnelCenterColor) {\n                        gl.uniform3fv(this._uAlphaFresnelCenterColor, material._alphaFresnel.centerColor);\n                    }\n                    if (this._uAlphaFresnelPower) {\n                        gl.uniform1f(this._uAlphaFresnelPower, material._alphaFresnel.power);\n                    }\n                }\n                if (material._reflectivityFresnel) {\n                    if (this._uReflectivityFresnelEdgeBias) {\n                        gl.uniform1f(this._uReflectivityFresnelEdgeBias, material._reflectivityFresnel.edgeBias);\n                    }\n                    if (this._uReflectivityFresnelCenterBias) {\n                        gl.uniform1f(this._uReflectivityFresnelCenterBias, material._reflectivityFresnel.centerBias);\n                    }\n                    if (this._uReflectivityFresnelEdgeColor) {\n                        gl.uniform3fv(this._uReflectivityFresnelEdgeColor, material._reflectivityFresnel.edgeColor);\n                    }\n                    if (this._uReflectivityFresnelCenterColor) {\n                        gl.uniform3fv(this._uReflectivityFresnelCenterColor, material._reflectivityFresnel.centerColor);\n                    }\n                    if (this._uReflectivityFresnelPower) {\n                        gl.uniform1f(this._uReflectivityFresnelPower, material._reflectivityFresnel.power);\n                    }\n                }\n                if (material._emissiveFresnel) {\n                    if (this._uEmissiveFresnelEdgeBias) {\n                        gl.uniform1f(this._uEmissiveFresnelEdgeBias, material._emissiveFresnel.edgeBias);\n                    }\n                    if (this._uEmissiveFresnelCenterBias) {\n                        gl.uniform1f(this._uEmissiveFresnelCenterBias, material._emissiveFresnel.centerBias);\n                    }\n                    if (this._uEmissiveFresnelEdgeColor) {\n                        gl.uniform3fv(this._uEmissiveFresnelEdgeColor, material._emissiveFresnel.edgeColor);\n                    }\n                    if (this._uEmissiveFresnelCenterColor) {\n                        gl.uniform3fv(this._uEmissiveFresnelCenterColor, material._emissiveFresnel.centerColor);\n                    }\n                    if (this._uEmissiveFresnelPower) {\n                        gl.uniform1f(this._uEmissiveFresnelPower, material._emissiveFresnel.power);\n                    }\n                }\n                break;\n\n            case \"MetallicMaterial\":\n                if (this._uBaseColor) {\n                    gl.uniform3fv(this._uBaseColor, materialState.baseColor);\n                }\n                if (this._uMaterialMetallic) {\n                    gl.uniform1f(this._uMaterialMetallic, materialState.metallic);\n                }\n                if (this._uMaterialRoughness) {\n                    gl.uniform1f(this._uMaterialRoughness, materialState.roughness);\n                }\n                if (this._uMaterialSpecularF0) {\n                    gl.uniform1f(this._uMaterialSpecularF0, materialState.specularF0);\n                }\n                if (this._uMaterialEmissive) {\n                    gl.uniform3fv(this._uMaterialEmissive, materialState.emissive);\n                }\n                if (this._uAlphaModeCutoff) {\n                    gl.uniform4f(\n                        this._uAlphaModeCutoff,\n                        1.0 * materialState.alpha,\n                        materialState.alphaMode === 1 ? 1.0 : 0.0,\n                        materialState.alphaCutoff,\n                        0.0);\n                }\n                const baseColorMap = material._baseColorMap;\n                if (baseColorMap && baseColorMap._state.texture && this._uBaseColorMap) {\n                    program.bindTexture(this._uBaseColorMap, baseColorMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uBaseColorMapMatrix) {\n                        gl.uniformMatrix4fv(this._uBaseColorMapMatrix, false, baseColorMap._state.matrix);\n                    }\n                }\n                const metallicMap = material._metallicMap;\n                if (metallicMap && metallicMap._state.texture && this._uMetallicMap) {\n                    program.bindTexture(this._uMetallicMap, metallicMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uMetallicMapMatrix) {\n                        gl.uniformMatrix4fv(this._uMetallicMapMatrix, false, metallicMap._state.matrix);\n                    }\n                }\n                const roughnessMap = material._roughnessMap;\n                if (roughnessMap && roughnessMap._state.texture && this._uRoughnessMap) {\n                    program.bindTexture(this._uRoughnessMap, roughnessMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uRoughnessMapMatrix) {\n                        gl.uniformMatrix4fv(this._uRoughnessMapMatrix, false, roughnessMap._state.matrix);\n                    }\n                }\n                const metallicRoughnessMap = material._metallicRoughnessMap;\n                if (metallicRoughnessMap && metallicRoughnessMap._state.texture && this._uMetallicRoughnessMap) {\n                    program.bindTexture(this._uMetallicRoughnessMap, metallicRoughnessMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uMetallicRoughnessMapMatrix) {\n                        gl.uniformMatrix4fv(this._uMetallicRoughnessMapMatrix, false, metallicRoughnessMap._state.matrix);\n                    }\n                }\n                var emissiveMap = material._emissiveMap;\n                if (emissiveMap && emissiveMap._state.texture && this._uEmissiveMap) {\n                    program.bindTexture(this._uEmissiveMap, emissiveMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uEmissiveMapMatrix) {\n                        gl.uniformMatrix4fv(this._uEmissiveMapMatrix, false, emissiveMap._state.matrix);\n                    }\n                }\n                var occlusionMap = material._occlusionMap;\n                if (occlusionMap && material._occlusionMap._state.texture && this._uOcclusionMap) {\n                    program.bindTexture(this._uOcclusionMap, occlusionMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uOcclusionMapMatrix) {\n                        gl.uniformMatrix4fv(this._uOcclusionMapMatrix, false, occlusionMap._state.matrix);\n                    }\n                }\n                var alphaMap = material._alphaMap;\n                if (alphaMap && alphaMap._state.texture && this._uAlphaMap) {\n                    program.bindTexture(this._uAlphaMap, alphaMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uAlphaMapMatrix) {\n                        gl.uniformMatrix4fv(this._uAlphaMapMatrix, false, alphaMap._state.matrix);\n                    }\n                }\n                var normalMap = material._normalMap;\n                if (normalMap && normalMap._state.texture && this._uNormalMap) {\n                    program.bindTexture(this._uNormalMap, normalMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uNormalMapMatrix) {\n                        gl.uniformMatrix4fv(this._uNormalMapMatrix, false, normalMap._state.matrix);\n                    }\n                }\n                break;\n\n            case \"SpecularMaterial\":\n                if (this._uMaterialDiffuse) {\n                    gl.uniform3fv(this._uMaterialDiffuse, materialState.diffuse);\n                }\n                if (this._uMaterialSpecular) {\n                    gl.uniform3fv(this._uMaterialSpecular, materialState.specular);\n                }\n                if (this._uMaterialGlossiness) {\n                    gl.uniform1f(this._uMaterialGlossiness, materialState.glossiness);\n                }\n                if (this._uMaterialReflectivity) {\n                    gl.uniform1f(this._uMaterialReflectivity, materialState.reflectivity);\n                }\n                if (this._uMaterialEmissive) {\n                    gl.uniform3fv(this._uMaterialEmissive, materialState.emissive);\n                }\n                if (this._uAlphaModeCutoff) {\n                    gl.uniform4f(\n                        this._uAlphaModeCutoff,\n                        1.0 * materialState.alpha,\n                        materialState.alphaMode === 1 ? 1.0 : 0.0,\n                        materialState.alphaCutoff,\n                        0.0);\n                }\n                const diffuseMap = material._diffuseMap;\n                if (diffuseMap && diffuseMap._state.texture && this._uDiffuseMap) {\n                    program.bindTexture(this._uDiffuseMap, diffuseMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uDiffuseMapMatrix) {\n                        gl.uniformMatrix4fv(this._uDiffuseMapMatrix, false, diffuseMap._state.matrix);\n                    }\n                }\n                const specularMap = material._specularMap;\n                if (specularMap && specularMap._state.texture && this._uSpecularMap) {\n                    program.bindTexture(this._uSpecularMap, specularMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uSpecularMapMatrix) {\n                        gl.uniformMatrix4fv(this._uSpecularMapMatrix, false, specularMap._state.matrix);\n                    }\n                }\n                const glossinessMap = material._glossinessMap;\n                if (glossinessMap && glossinessMap._state.texture && this._uGlossinessMap) {\n                    program.bindTexture(this._uGlossinessMap, glossinessMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uGlossinessMapMatrix) {\n                        gl.uniformMatrix4fv(this._uGlossinessMapMatrix, false, glossinessMap._state.matrix);\n                    }\n                }\n                const specularGlossinessMap = material._specularGlossinessMap;\n                if (specularGlossinessMap && specularGlossinessMap._state.texture && this._uSpecularGlossinessMap) {\n                    program.bindTexture(this._uSpecularGlossinessMap, specularGlossinessMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uSpecularGlossinessMapMatrix) {\n                        gl.uniformMatrix4fv(this._uSpecularGlossinessMapMatrix, false, specularGlossinessMap._state.matrix);\n                    }\n                }\n                var emissiveMap = material._emissiveMap;\n                if (emissiveMap && emissiveMap._state.texture && this._uEmissiveMap) {\n                    program.bindTexture(this._uEmissiveMap, emissiveMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uEmissiveMapMatrix) {\n                        gl.uniformMatrix4fv(this._uEmissiveMapMatrix, false, emissiveMap._state.matrix);\n                    }\n                }\n                var occlusionMap = material._occlusionMap;\n                if (occlusionMap && occlusionMap._state.texture && this._uOcclusionMap) {\n                    program.bindTexture(this._uOcclusionMap, occlusionMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uOcclusionMapMatrix) {\n                        gl.uniformMatrix4fv(this._uOcclusionMapMatrix, false, occlusionMap._state.matrix);\n                    }\n                }\n                var alphaMap = material._alphaMap;\n                if (alphaMap && alphaMap._state.texture && this._uAlphaMap) {\n                    program.bindTexture(this._uAlphaMap, alphaMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uAlphaMapMatrix) {\n                        gl.uniformMatrix4fv(this._uAlphaMapMatrix, false, alphaMap._state.matrix);\n                    }\n                }\n                var normalMap = material._normalMap;\n                if (normalMap && normalMap._state.texture && this._uNormalMap) {\n                    program.bindTexture(this._uNormalMap, normalMap._state.texture, frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                    if (this._uNormalMapMatrix) {\n                        gl.uniformMatrix4fv(this._uNormalMapMatrix, false, normalMap._state.matrix);\n                    }\n                }\n                break;\n        }\n        this._lastMaterialId = materialState.id;\n    }\n\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n    if (this._uModelNormalMatrix) {\n        gl.uniformMatrix4fv(this._uModelNormalMatrix, gl.FALSE, mesh.worldNormalMatrix);\n    }\n\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, meshState.clippable);\n    }\n\n    if (this._uColorize) {\n        const colorize = meshState.colorize;\n        const lastColorize = this._lastColorize;\n        if (lastColorize[0] !== colorize[0] ||\n            lastColorize[1] !== colorize[1] ||\n            lastColorize[2] !== colorize[2] ||\n            lastColorize[3] !== colorize[3]) {\n            gl.uniform4fv(this._uColorize, colorize);\n            lastColorize[0] = colorize[0];\n            lastColorize[1] = colorize[1];\n            lastColorize[2] = colorize[2];\n            lastColorize[3] = colorize[3];\n        }\n    }\n\n    if (geometryState.combineGeometry) {\n        const vertexBufs = mesh._geometry._getVertexBufs();\n        if (vertexBufs.id !== this._lastVertexBufsId) {\n            if (vertexBufs.positionsBuf && this._aPosition) {\n                this._aPosition.bindArrayBuffer(vertexBufs.positionsBuf);\n                frame.bindArray++;\n            }\n            if (vertexBufs.normalsBuf && this._aNormal) {\n                this._aNormal.bindArrayBuffer(vertexBufs.normalsBuf);\n                frame.bindArray++;\n            }\n            if (vertexBufs.uvBuf && this._aUV) {\n                this._aUV.bindArrayBuffer(vertexBufs.uvBuf);\n                frame.bindArray++;\n            }\n            if (vertexBufs.colorsBuf && this._aColor) {\n                this._aColor.bindArrayBuffer(vertexBufs.colorsBuf);\n                frame.bindArray++;\n            }\n            if (vertexBufs.flagsBuf && this._aFlags) {\n                this._aFlags.bindArrayBuffer(vertexBufs.flagsBuf);\n                frame.bindArray++;\n            }\n            this._lastVertexBufsId = vertexBufs.id;\n        }\n    }\n\n    // Bind VBOs\n\n    if (geometryState.id !== this._lastGeometryId) {\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        }\n        if (this._uUVDecodeMatrix) {\n            gl.uniformMatrix3fv(this._uUVDecodeMatrix, false, geometryState.uvDecodeMatrix);\n        }\n        if (geometryState.combineGeometry) { // VBOs were bound by the VertexBufs logic above\n            if (geometryState.indicesBufCombined) {\n                geometryState.indicesBufCombined.bind();\n                frame.bindArray++;\n            }\n        } else {\n            if (this._aPosition) {\n                this._aPosition.bindArrayBuffer(geometryState.positionsBuf);\n                frame.bindArray++;\n            }\n            if (this._aNormal) {\n                this._aNormal.bindArrayBuffer(geometryState.normalsBuf);\n                frame.bindArray++;\n            }\n            if (this._aUV) {\n                this._aUV.bindArrayBuffer(geometryState.uvBuf);\n                frame.bindArray++;\n            }\n            if (this._aColor) {\n                this._aColor.bindArrayBuffer(geometryState.colorsBuf);\n                frame.bindArray++;\n            }\n            if (this._aFlags) {\n                this._aFlags.bindArrayBuffer(geometryState.flagsBuf);\n                frame.bindArray++;\n            }\n            if (geometryState.indicesBuf) {\n                geometryState.indicesBuf.bind();\n                frame.bindArray++;\n                // gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n                // frame.drawElements++;\n            } else if (geometryState.positions) {\n                // gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n                //  frame.drawArrays++;\n            }\n        }\n        this._lastGeometryId = geometryState.id;\n    }\n\n    // Draw (indices bound in prev step)\n\n    if (geometryState.combineGeometry) {\n        if (geometryState.indicesBufCombined) { // Geometry indices into portion of uber-array\n            gl.drawElements(geometryState.primitive, geometryState.indicesBufCombined.numItems, geometryState.indicesBufCombined.itemType, 0);\n            frame.drawElements++;\n        } else {\n            // TODO: drawArrays() with VertexBufs positions\n        }\n    } else {\n        if (geometryState.indicesBuf) {\n            gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n            frame.drawElements++;\n        } else if (geometryState.positions) {\n            gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n            frame.drawArrays++;\n        }\n    }\n};\n\nDrawRenderer.prototype._allocate = function (mesh) {\n    const gl = mesh.scene.canvas.gl;\n    const material = mesh._material;\n    const lightsState = mesh.scene._lightsState;\n    const clipsState = mesh.scene._clipsState;\n    const materialState = mesh._material._state;\n    this._program = new Program(gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uUVDecodeMatrix = program.getLocation(\"uvDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uModelNormalMatrix = program.getLocation(\"modelNormalMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uViewNormalMatrix = program.getLocation(\"viewNormalMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uGammaFactor = program.getLocation(\"gammaFactor\");\n    this._uLightAmbient = [];\n    this._uLightColor = [];\n    this._uLightDir = [];\n    this._uLightPos = [];\n    this._uLightAttenuation = [];\n    this._uShadowViewMatrix = [];\n    this._uShadowProjMatrix = [];\n\n    const lights = lightsState.lights;\n    let light;\n\n    for (var i = 0, len = lights.length; i < len; i++) {\n        light = lights[i];\n        switch (light.type) {\n\n            case \"ambient\":\n                this._uLightAmbient[i] = program.getLocation(\"lightAmbient\");\n                break;\n\n            case \"dir\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = null;\n                this._uLightDir[i] = program.getLocation(\"lightDir\" + i);\n                break;\n\n            case \"point\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = program.getLocation(\"lightPos\" + i);\n                this._uLightDir[i] = null;\n                this._uLightAttenuation[i] = program.getLocation(\"lightAttenuation\" + i);\n                break;\n\n            case \"spot\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = program.getLocation(\"lightPos\" + i);\n                this._uLightDir[i] = program.getLocation(\"lightDir\" + i);\n                this._uLightAttenuation[i] = program.getLocation(\"lightAttenuation\" + i);\n                break;\n        }\n\n        if (light.castShadow) {\n            this._uShadowViewMatrix[i] = program.getLocation(\"shadowViewMatrix\" + i);\n            this._uShadowProjMatrix[i] = program.getLocation(\"shadowProjMatrix\" + i);\n        }\n    }\n\n    if (lightsState.lightMaps.length > 0) {\n        this._uLightMap = \"lightMap\";\n    }\n\n    if (lightsState.reflectionMaps.length > 0) {\n        this._uReflectionMap = \"reflectionMap\";\n    }\n\n    this._uClips = [];\n    const clips = clipsState.clips;\n    for (var i = 0, len = clips.length; i < len; i++) {\n        this._uClips.push({\n            active: program.getLocation(\"clipActive\" + i),\n            pos: program.getLocation(\"clipPos\" + i),\n            dir: program.getLocation(\"clipDir\" + i)\n        });\n    }\n\n    this._uPointSize = program.getLocation(\"pointSize\");\n\n    switch (materialState.type) {\n        case \"LambertMaterial\":\n            this._uMaterialColor = program.getLocation(\"materialColor\");\n            this._uMaterialEmissive = program.getLocation(\"materialEmissive\");\n            this._uAlphaModeCutoff = program.getLocation(\"materialAlphaModeCutoff\");\n            break;\n\n        case \"PhongMaterial\":\n            this._uMaterialAmbient = program.getLocation(\"materialAmbient\");\n            this._uMaterialDiffuse = program.getLocation(\"materialDiffuse\");\n            this._uMaterialSpecular = program.getLocation(\"materialSpecular\");\n            this._uMaterialEmissive = program.getLocation(\"materialEmissive\");\n            this._uAlphaModeCutoff = program.getLocation(\"materialAlphaModeCutoff\");\n            this._uMaterialShininess = program.getLocation(\"materialShininess\");\n            if (material._ambientMap) {\n                this._uMaterialAmbientMap = \"ambientMap\";\n                this._uMaterialAmbientMapMatrix = program.getLocation(\"ambientMapMatrix\");\n            }\n            if (material._diffuseMap) {\n                this._uDiffuseMap = \"diffuseMap\";\n                this._uDiffuseMapMatrix = program.getLocation(\"diffuseMapMatrix\");\n            }\n            if (material._specularMap) {\n                this._uSpecularMap = \"specularMap\";\n                this._uSpecularMapMatrix = program.getLocation(\"specularMapMatrix\");\n            }\n            if (material._emissiveMap) {\n                this._uEmissiveMap = \"emissiveMap\";\n                this._uEmissiveMapMatrix = program.getLocation(\"emissiveMapMatrix\");\n            }\n            if (material._alphaMap) {\n                this._uAlphaMap = \"alphaMap\";\n                this._uAlphaMapMatrix = program.getLocation(\"alphaMapMatrix\");\n            }\n            if (material._reflectivityMap) {\n                this._uReflectivityMap = \"reflectivityMap\";\n                this._uReflectivityMapMatrix = program.getLocation(\"reflectivityMapMatrix\");\n            }\n            if (material._normalMap) {\n                this._uNormalMap = \"normalMap\";\n                this._uNormalMapMatrix = program.getLocation(\"normalMapMatrix\");\n            }\n            if (material._occlusionMap) {\n                this._uOcclusionMap = \"occlusionMap\";\n                this._uOcclusionMapMatrix = program.getLocation(\"occlusionMapMatrix\");\n            }\n            if (material._diffuseFresnel) {\n                this._uDiffuseFresnelEdgeBias = program.getLocation(\"diffuseFresnelEdgeBias\");\n                this._uDiffuseFresnelCenterBias = program.getLocation(\"diffuseFresnelCenterBias\");\n                this._uDiffuseFresnelEdgeColor = program.getLocation(\"diffuseFresnelEdgeColor\");\n                this._uDiffuseFresnelCenterColor = program.getLocation(\"diffuseFresnelCenterColor\");\n                this._uDiffuseFresnelPower = program.getLocation(\"diffuseFresnelPower\");\n            }\n            if (material._specularFresnel) {\n                this._uSpecularFresnelEdgeBias = program.getLocation(\"specularFresnelEdgeBias\");\n                this._uSpecularFresnelCenterBias = program.getLocation(\"specularFresnelCenterBias\");\n                this._uSpecularFresnelEdgeColor = program.getLocation(\"specularFresnelEdgeColor\");\n                this._uSpecularFresnelCenterColor = program.getLocation(\"specularFresnelCenterColor\");\n                this._uSpecularFresnelPower = program.getLocation(\"specularFresnelPower\");\n            }\n            if (material._alphaFresnel) {\n                this._uAlphaFresnelEdgeBias = program.getLocation(\"alphaFresnelEdgeBias\");\n                this._uAlphaFresnelCenterBias = program.getLocation(\"alphaFresnelCenterBias\");\n                this._uAlphaFresnelEdgeColor = program.getLocation(\"alphaFresnelEdgeColor\");\n                this._uAlphaFresnelCenterColor = program.getLocation(\"alphaFresnelCenterColor\");\n                this._uAlphaFresnelPower = program.getLocation(\"alphaFresnelPower\");\n            }\n            if (material._reflectivityFresnel) {\n                this._uReflectivityFresnelEdgeBias = program.getLocation(\"reflectivityFresnelEdgeBias\");\n                this._uReflectivityFresnelCenterBias = program.getLocation(\"reflectivityFresnelCenterBias\");\n                this._uReflectivityFresnelEdgeColor = program.getLocation(\"reflectivityFresnelEdgeColor\");\n                this._uReflectivityFresnelCenterColor = program.getLocation(\"reflectivityFresnelCenterColor\");\n                this._uReflectivityFresnelPower = program.getLocation(\"reflectivityFresnelPower\");\n            }\n            if (material._emissiveFresnel) {\n                this._uEmissiveFresnelEdgeBias = program.getLocation(\"emissiveFresnelEdgeBias\");\n                this._uEmissiveFresnelCenterBias = program.getLocation(\"emissiveFresnelCenterBias\");\n                this._uEmissiveFresnelEdgeColor = program.getLocation(\"emissiveFresnelEdgeColor\");\n                this._uEmissiveFresnelCenterColor = program.getLocation(\"emissiveFresnelCenterColor\");\n                this._uEmissiveFresnelPower = program.getLocation(\"emissiveFresnelPower\");\n            }\n            break;\n\n        case \"MetallicMaterial\":\n            this._uBaseColor = program.getLocation(\"materialBaseColor\");\n            this._uMaterialMetallic = program.getLocation(\"materialMetallic\");\n            this._uMaterialRoughness = program.getLocation(\"materialRoughness\");\n            this._uMaterialSpecularF0 = program.getLocation(\"materialSpecularF0\");\n            this._uMaterialEmissive = program.getLocation(\"materialEmissive\");\n            this._uAlphaModeCutoff = program.getLocation(\"materialAlphaModeCutoff\");\n            if (material._baseColorMap) {\n                this._uBaseColorMap = \"baseColorMap\";\n                this._uBaseColorMapMatrix = program.getLocation(\"baseColorMapMatrix\");\n            }\n            if (material._metallicMap) {\n                this._uMetallicMap = \"metallicMap\";\n                this._uMetallicMapMatrix = program.getLocation(\"metallicMapMatrix\");\n            }\n            if (material._roughnessMap) {\n                this._uRoughnessMap = \"roughnessMap\";\n                this._uRoughnessMapMatrix = program.getLocation(\"roughnessMapMatrix\");\n            }\n            if (material._metallicRoughnessMap) {\n                this._uMetallicRoughnessMap = \"metallicRoughnessMap\";\n                this._uMetallicRoughnessMapMatrix = program.getLocation(\"metallicRoughnessMapMatrix\");\n            }\n            if (material._emissiveMap) {\n                this._uEmissiveMap = \"emissiveMap\";\n                this._uEmissiveMapMatrix = program.getLocation(\"emissiveMapMatrix\");\n            }\n            if (material._occlusionMap) {\n                this._uOcclusionMap = \"occlusionMap\";\n                this._uOcclusionMapMatrix = program.getLocation(\"occlusionMapMatrix\");\n            }\n            if (material._alphaMap) {\n                this._uAlphaMap = \"alphaMap\";\n                this._uAlphaMapMatrix = program.getLocation(\"alphaMapMatrix\");\n            }\n            if (material._normalMap) {\n                this._uNormalMap = \"normalMap\";\n                this._uNormalMapMatrix = program.getLocation(\"normalMapMatrix\");\n            }\n            break;\n\n        case \"SpecularMaterial\":\n            this._uMaterialDiffuse = program.getLocation(\"materialDiffuse\");\n            this._uMaterialSpecular = program.getLocation(\"materialSpecular\");\n            this._uMaterialGlossiness = program.getLocation(\"materialGlossiness\");\n            this._uMaterialReflectivity = program.getLocation(\"reflectivityFresnel\");\n            this._uMaterialEmissive = program.getLocation(\"materialEmissive\");\n            this._uAlphaModeCutoff = program.getLocation(\"materialAlphaModeCutoff\");\n            if (material._diffuseMap) {\n                this._uDiffuseMap = \"diffuseMap\";\n                this._uDiffuseMapMatrix = program.getLocation(\"diffuseMapMatrix\");\n            }\n            if (material._specularMap) {\n                this._uSpecularMap = \"specularMap\";\n                this._uSpecularMapMatrix = program.getLocation(\"specularMapMatrix\");\n            }\n            if (material._glossinessMap) {\n                this._uGlossinessMap = \"glossinessMap\";\n                this._uGlossinessMapMatrix = program.getLocation(\"glossinessMapMatrix\");\n            }\n            if (material._specularGlossinessMap) {\n                this._uSpecularGlossinessMap = \"materialSpecularGlossinessMap\";\n                this._uSpecularGlossinessMapMatrix = program.getLocation(\"materialSpecularGlossinessMapMatrix\");\n            }\n            if (material._emissiveMap) {\n                this._uEmissiveMap = \"emissiveMap\";\n                this._uEmissiveMapMatrix = program.getLocation(\"emissiveMapMatrix\");\n            }\n            if (material._occlusionMap) {\n                this._uOcclusionMap = \"occlusionMap\";\n                this._uOcclusionMapMatrix = program.getLocation(\"occlusionMapMatrix\");\n            }\n            if (material._alphaMap) {\n                this._uAlphaMap = \"alphaMap\";\n                this._uAlphaMapMatrix = program.getLocation(\"alphaMapMatrix\");\n            }\n            if (material._normalMap) {\n                this._uNormalMap = \"normalMap\";\n                this._uNormalMapMatrix = program.getLocation(\"normalMapMatrix\");\n            }\n            break;\n    }\n\n    this._aPosition = program.getAttribute(\"position\");\n    this._aNormal = program.getAttribute(\"normal\");\n    this._aUV = program.getAttribute(\"uv\");\n    this._aColor = program.getAttribute(\"color\");\n    this._aFlags = program.getAttribute(\"flags\");\n\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uColorize = program.getLocation(\"colorize\");\n\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n\n    this._lastColorize = new Float32Array(4);\n\n    this._baseTextureUnit = 0;\n\n};\n\nDrawRenderer.prototype._bindProgram = function (frame) {\n\n    const maxTextureUnits = WEBGL_INFO.MAX_TEXTURE_UNITS;\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const lightsState = scene._lightsState;\n    const clipsState = scene._clipsState;\n    const lights = lightsState.lights;\n    let light;\n\n    const program = this._program;\n\n    program.bind();\n\n    frame.useProgram++;\n    frame.textureUnit = 0;\n\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n\n    this._lastColorize[0] = -1;\n    this._lastColorize[1] = -1;\n    this._lastColorize[2] = -1;\n    this._lastColorize[3] = -1;\n\n    const camera = scene.camera;\n    const cameraState = camera._state;\n\n    gl.uniformMatrix4fv(this._uViewMatrix, false, cameraState.matrix);\n    gl.uniformMatrix4fv(this._uViewNormalMatrix, false, cameraState.normalMatrix);\n    gl.uniformMatrix4fv(this._uProjMatrix, false, camera._project._state.matrix);\n\n    for (var i = 0, len = lightsState.lights.length; i < len; i++) {\n\n        light = lightsState.lights[i];\n\n        if (this._uLightAmbient[i]) {\n            gl.uniform4f(this._uLightAmbient[i], light.color[0], light.color[1], light.color[2], light.intensity);\n\n        } else {\n\n            if (this._uLightColor[i]) {\n                gl.uniform4f(this._uLightColor[i], light.color[0], light.color[1], light.color[2], light.intensity);\n            }\n\n            if (this._uLightPos[i]) {\n                gl.uniform3fv(this._uLightPos[i], light.pos);\n                if (this._uLightAttenuation[i]) {\n                    gl.uniform1f(this._uLightAttenuation[i], light.attenuation);\n                }\n            }\n\n            if (this._uLightDir[i]) {\n                gl.uniform3fv(this._uLightDir[i], light.dir);\n            }\n\n            if (light.castShadow) {\n                if (this._uShadowViewMatrix[i]) {\n                    gl.uniformMatrix4fv(this._uShadowViewMatrix[i], false, light.getShadowViewMatrix());\n                }\n                if (this._uShadowProjMatrix[i]) {\n                    gl.uniformMatrix4fv(this._uShadowProjMatrix[i], false, light.getShadowProjMatrix());\n                }\n                const shadowRenderBuf = light.getShadowRenderBuf();\n                if (shadowRenderBuf) {\n                    program.bindTexture(\"shadowMap\" + i, shadowRenderBuf.getTexture(), frame.textureUnit);\n                    frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n                    frame.bindTexture++;\n                }\n            }\n        }\n    }\n\n    if (lightsState.lightMaps.length > 0 && lightsState.lightMaps[0].texture && this._uLightMap) {\n        program.bindTexture(this._uLightMap, lightsState.lightMaps[0].texture, frame.textureUnit);\n        frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n        frame.bindTexture++;\n    }\n\n    if (lightsState.reflectionMaps.length > 0 && lightsState.reflectionMaps[0].texture && this._uReflectionMap) {\n        program.bindTexture(this._uReflectionMap, lightsState.reflectionMaps[0].texture, frame.textureUnit);\n        frame.textureUnit = (frame.textureUnit + 1) % maxTextureUnits;\n        frame.bindTexture++;\n    }\n\n    if (clipsState.clips.length > 0) {\n        const clips = scene._clipsState.clips;\n        let clipUniforms;\n        let uClipActive;\n        let clip;\n        let uClipPos;\n        let uClipDir;\n        for (var i = 0, len = this._uClips.length; i < len; i++) {\n            clipUniforms = this._uClips[i];\n            uClipActive = clipUniforms.active;\n            clip = clips[i];\n            if (uClipActive) {\n                gl.uniform1i(uClipActive, clip.active);\n            }\n            uClipPos = clipUniforms.pos;\n            if (uClipPos) {\n                gl.uniform3fv(clipUniforms.pos, clip.pos);\n            }\n            uClipDir = clipUniforms.dir;\n            if (uClipDir) {\n                gl.uniform3fv(clipUniforms.dir, clip.dir);\n            }\n        }\n    }\n\n    if (this._uGammaFactor) {\n        gl.uniform1f(this._uGammaFactor, scene.gammaFactor);\n    }\n\n    this._baseTextureUnit = frame.textureUnit;\n};\n\nexport {DrawRenderer};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/draw/DrawRenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2178,
    "kind": "variable",
    "name": "ids",
    "memberof": "scene/mesh/draw/DrawRenderer.js",
    "static": true,
    "longname": "scene/mesh/draw/DrawRenderer.js~ids",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "scene/utils/Map.js~Map"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2179,
    "kind": "variable",
    "name": "drawRenderers",
    "memberof": "scene/mesh/draw/DrawRenderer.js",
    "static": true,
    "longname": "scene/mesh/draw/DrawRenderer.js~drawRenderers",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2180,
    "kind": "function",
    "name": "get",
    "memberof": "scene/mesh/draw/DrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawRenderer.js~get",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2181,
    "kind": "function",
    "name": "put",
    "memberof": "scene/mesh/draw/DrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawRenderer.js~put",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2182,
    "kind": "function",
    "name": "webglContextRestored",
    "memberof": "scene/mesh/draw/DrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawRenderer.js~webglContextRestored",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 63,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2183,
    "kind": "function",
    "name": "drawMesh",
    "memberof": "scene/mesh/draw/DrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawRenderer.js~drawMesh",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2184,
    "kind": "function",
    "name": "_allocate",
    "memberof": "scene/mesh/draw/DrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawRenderer.js~_allocate",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 623,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2185,
    "kind": "function",
    "name": "_bindProgram",
    "memberof": "scene/mesh/draw/DrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawRenderer.js~_bindProgram",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 894,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2186,
    "kind": "function",
    "name": "DrawRenderer",
    "memberof": "scene/mesh/draw/DrawRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawRenderer.js~DrawRenderer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawRenderer.js",
    "importStyle": "{DrawRenderer}",
    "description": "",
    "lineNumber": 16,
    "ignore": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2187,
    "kind": "file",
    "name": "scene/mesh/draw/DrawShaderSource.js",
    "content": "/**\n * @private\n */\nconst DrawShaderSource = function (mesh) {\n    if (mesh._material._state.type === \"LambertMaterial\") {\n        this.vertex = buildVertexLambert(mesh);\n        this.fragment = buildFragmentLambert(mesh);\n    } else {\n        this.vertex = buildVertexDraw(mesh);\n        this.fragment = buildFragmentDraw(mesh);\n    }\n};\n\nconst TEXTURE_DECODE_FUNCS = {\n    \"linear\": \"linearToLinear\",\n    \"sRGB\": \"sRGBToLinear\",\n    \"gamma\": \"gammaToLinear\"\n};\n\nfunction receivesShadow(mesh) {\n    if (!mesh.receiveShadow) {\n        return false;\n    }\n    const lights = mesh.scene._lightsState.lights;\n    if (!lights || lights.length === 0) {\n        return false;\n    }\n    for (let i = 0, len = lights.length; i < len; i++) {\n        if (lights[i].castShadow) {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction hasTextures(mesh) {\n    if (!mesh._geometry._state.uv) {\n        return false;\n    }\n    const material = mesh._material;\n    return !!(material._ambientMap ||\n        material._occlusionMap ||\n        material._baseColorMap ||\n        material._diffuseMap ||\n        material._alphaMap ||\n        material._specularMap ||\n        material._glossinessMap ||\n        material._specularGlossinessMap ||\n        material._emissiveMap ||\n        material._metallicMap ||\n        material._roughnessMap ||\n        material._metallicRoughnessMap ||\n        material._reflectivityMap ||\n        material._normalMap);\n}\n\nfunction hasNormals(mesh) {\n    const primitive = mesh._geometry._state.primitiveName;\n    if ((mesh._geometry._state.autoVertexNormals || mesh._geometry._state.normals) && (primitive === \"triangles\" || primitive === \"triangle-strip\" || primitive === \"triangle-fan\")) {\n        return true;\n    }\n    return false;\n}\n\nfunction getFragmentFloatPrecision(gl) {\n    if (!gl.getShaderPrecisionFormat) {\n        return \"mediump\";\n    }\n    if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n        return \"highp\";\n    }\n    if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n        return \"mediump\";\n    }\n    return \"lowp\";\n}\n\nfunction buildVertexLambert(mesh) {\n    const clipsState = mesh.scene._clipsState;\n    const lightsState = mesh.scene._lightsState;\n    const geometryState = mesh._geometry._state;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const clipping = clipsState.clips.length > 0;\n    const quantizedGeometry = !!geometryState.compressGeometry;\n    let i;\n    let len;\n    let light;\n    const src = [];\n    src.push(\"// Lambertian drawing vertex shader\");\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform vec4 colorize;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"uniform vec4 lightAmbient;\");\n    src.push(\"uniform vec4 materialColor;\");\n    if (geometryState.normals) {\n        src.push(\"attribute vec3 normal;\");\n        src.push(\"uniform mat4 modelNormalMatrix;\");\n        src.push(\"uniform mat4 viewNormalMatrix;\");\n        for (i = 0, len = lightsState.lights.length; i < len; i++) {\n            light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            src.push(\"uniform vec4 lightColor\" + i + \";\");\n            if (light.type === \"dir\") {\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (light.type === \"point\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            }\n            if (light.type === \"spot\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n        }\n        if (quantizedGeometry) {\n            src.push(\"vec3 octDecode(vec2 oct) {\");\n            src.push(\"    vec3 v = vec3(oct.xy, 1.0 - abs(oct.x) - abs(oct.y));\");\n            src.push(\"    if (v.z < 0.0) {\");\n            src.push(\"        v.xy = (1.0 - abs(v.yx)) * vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);\");\n            src.push(\"    }\");\n            src.push(\"    return normalize(v);\");\n            src.push(\"}\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"uniform float pointSize;\");\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    if (geometryState.normals) {\n        if (quantizedGeometry) {\n            src.push(\"vec4 localNormal = vec4(octDecode(normal.xy), 0.0); \");\n        } else {\n            src.push(\"vec4 localNormal = vec4(normal, 0.0); \");\n        }\n        src.push(\"mat4 modelNormalMatrix2 = modelNormalMatrix;\");\n        src.push(\"mat4 viewNormalMatrix2 = viewNormalMatrix;\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n        src.push(\"billboard(modelViewMatrix);\");\n        if (geometryState.normals) {\n            src.push(\"mat4 modelViewNormalMatrix =  viewNormalMatrix2 * modelNormalMatrix2;\");\n            src.push(\"billboard(modelNormalMatrix2);\");\n            src.push(\"billboard(viewNormalMatrix2);\");\n            src.push(\"billboard(modelViewNormalMatrix);\");\n        }\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"vec4 viewPosition = modelViewMatrix * localPosition;\");\n    } else {\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"vec4 viewPosition  = viewMatrix2 * worldPosition; \");\n    }\n    if (geometryState.normals) {\n        src.push(\"vec3 viewNormal = normalize((viewNormalMatrix2 * modelNormalMatrix2 * localNormal).xyz);\");\n    }\n    src.push(\"vec3 reflectedColor = vec3(0.0, 0.0, 0.0);\");\n    src.push(\"vec3 viewLightDir = vec3(0.0, 0.0, -1.0);\");\n    src.push(\"float lambertian = 1.0;\");\n    if (geometryState.normals) {\n        for (i = 0, len = lightsState.lights.length; i < len; i++) {\n            light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix2 * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n                }\n            } else if (light.type === \"point\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightPos\" + i + \" - viewPosition.xyz);\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix2 * vec4(lightPos\" + i + \", 0.0)).xyz);\");\n                }\n            } else if (light.type === \"spot\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix2 * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n                }\n            } else {\n                continue;\n            }\n            src.push(\"lambertian = max(dot(-viewNormal, viewLightDir), 0.0);\");\n            src.push(\"reflectedColor += lambertian * (lightColor\" + i + \".rgb * lightColor\" + i + \".a);\");\n        }\n    }\n    //src.push(\"vColor = vec4((reflectedColor * materialColor) + (lightAmbient.rgb * lightAmbient.a), 1.0) * colorize;\");\n    src.push(\"vColor = vec4((reflectedColor * materialColor.rgb), materialColor.a) * colorize;\"); // TODO: How to have ambient bright enough for canvas BG but not too bright for scene?\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"gl_PointSize = pointSize;\");\n    }\n    src.push(\"   gl_Position = projMatrix * viewPosition;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragmentLambert(mesh) {\n    const scene = mesh.scene;\n    const clipsState = scene._clipsState;\n    const materialState = mesh._material._state;\n    const geometryState = mesh._geometry._state;\n    let i;\n    let len;\n    const clipping = clipsState.clips.length > 0;\n    const solid = false && materialState.backfaces;\n    const gammaOutput = scene.gammaOutput; // If set, then it expects that all textures and colors need to be outputted in premultiplied gamma. Default is false.\n    const src = [];\n    src.push(\"// Lambertian drawing fragment shader\");\n    src.push(\"precision lowp float;\");\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (i = 0, len = clipsState.clips.length; i < len; i++) {\n            src.push(\"uniform bool clipActive\" + i + \";\");\n            src.push(\"uniform vec3 clipPos\" + i + \";\");\n            src.push(\"uniform vec3 clipDir\" + i + \";\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (gammaOutput) {\n        src.push(\"uniform float gammaFactor;\");\n        src.push(\"    vec4 linearToGamma( in vec4 value, in float gammaFactor ) {\");\n        src.push(\"    return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (i = 0, len = clipsState.clips.length; i < len; i++) {\n            src.push(\"if (clipActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-clipDir\" + i + \".xyz, vWorldPosition.xyz - clipPos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        if (solid) {\n            src.push(\"  if (gl_FrontFacing == false) {\");\n            src.push(\"     gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\");\n            src.push(\"     return;\");\n            src.push(\"  }\");\n        }\n        src.push(\"}\");\n    }\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"vec2 cxy = 2.0 * gl_PointCoord - 1.0;\");\n        src.push(\"float r = dot(cxy, cxy);\");\n        src.push(\"if (r > 1.0) {\");\n        src.push(\"   discard;\");\n        src.push(\"}\");\n\n    }\n    if (gammaOutput) {\n        src.push(\"gl_FragColor = linearToGamma(vColor, gammaFactor);\");\n    } else {\n        src.push(\"gl_FragColor = vColor;\");\n    }\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildVertexDraw(mesh) {\n    const scene = mesh.scene;\n    const material = mesh._material;\n    const meshState = mesh._state;\n    const clipsState = scene._clipsState;\n    const geometryState = mesh._geometry._state;\n    const lightsState = scene._lightsState;\n    let i;\n    let len;\n    let light;\n    const billboard = meshState.billboard;\n    const stationary = meshState.stationary;\n    const texturing = hasTextures(mesh);\n    const normals = hasNormals(mesh);\n    const clipping = clipsState.clips.length > 0;\n    const receiveShadow = receivesShadow(mesh);\n    const quantizedGeometry = !!geometryState.compressGeometry;\n    const src = [];\n    if (normals && material._normalMap) {\n        src.push(\"#extension GL_OES_standard_derivatives : enable\");\n    }\n    src.push(\"// Drawing vertex shader\");\n    src.push(\"attribute  vec3 position;\");\n\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    src.push(\"uniform  mat4 modelMatrix;\");\n    src.push(\"uniform  mat4 viewMatrix;\");\n    src.push(\"uniform  mat4 projMatrix;\");\n    src.push(\"varying  vec3 vViewPosition;\");\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    if (lightsState.lightMaps.length > 0) {\n        src.push(\"varying    vec3 vWorldNormal;\");\n    }\n    if (normals) {\n        src.push(\"attribute  vec3 normal;\");\n        src.push(\"uniform    mat4 modelNormalMatrix;\");\n        src.push(\"uniform    mat4 viewNormalMatrix;\");\n        src.push(\"varying    vec3 vViewNormal;\");\n        for (i = 0, len = lightsState.lights.length; i < len; i++) {\n            light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\") {\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (light.type === \"point\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            }\n            if (light.type === \"spot\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (!(light.type === \"dir\" && light.space === \"view\")) {\n                src.push(\"varying vec4 vViewLightReverseDirAndDist\" + i + \";\");\n            }\n        }\n        if (quantizedGeometry) {\n            src.push(\"vec3 octDecode(vec2 oct) {\");\n            src.push(\"    vec3 v = vec3(oct.xy, 1.0 - abs(oct.x) - abs(oct.y));\");\n            src.push(\"    if (v.z < 0.0) {\");\n            src.push(\"        v.xy = (1.0 - abs(v.yx)) * vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);\");\n            src.push(\"    }\");\n            src.push(\"    return normalize(v);\");\n            src.push(\"}\");\n        }\n    }\n    if (texturing) {\n        src.push(\"attribute vec2 uv;\");\n        src.push(\"varying vec2 vUV;\");\n        if (quantizedGeometry) {\n            src.push(\"uniform mat3 uvDecodeMatrix;\")\n        }\n    }\n    if (geometryState.colors) {\n        src.push(\"attribute vec4 color;\");\n        src.push(\"varying vec4 vColor;\");\n    }\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"uniform float pointSize;\");\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    if (receiveShadow) {\n        src.push(\"const mat4 texUnitConverter = mat4(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0);\");\n        for (i = 0, len = lightsState.lights.length; i < len; i++) { // Light sources\n            if (lightsState.lights[i].castShadow) {\n                src.push(\"uniform mat4 shadowViewMatrix\" + i + \";\");\n                src.push(\"uniform mat4 shadowProjMatrix\" + i + \";\");\n                src.push(\"varying vec4 vShadowPosFromLight\" + i + \";\");\n            }\n        }\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    if (normals) {\n        if (quantizedGeometry) {\n            src.push(\"vec4 localNormal = vec4(octDecode(normal.xy), 0.0); \");\n        } else {\n            src.push(\"vec4 localNormal = vec4(normal, 0.0); \");\n        }\n        src.push(\"mat4 modelNormalMatrix2    = modelNormalMatrix;\");\n        src.push(\"mat4 viewNormalMatrix2     = viewNormalMatrix;\");\n    }\n    src.push(\"mat4 viewMatrix2           = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2          = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n        src.push(\"billboard(modelViewMatrix);\");\n        if (normals) {\n            src.push(\"mat4 modelViewNormalMatrix =  viewNormalMatrix2 * modelNormalMatrix2;\");\n            src.push(\"billboard(modelNormalMatrix2);\");\n            src.push(\"billboard(viewNormalMatrix2);\");\n            src.push(\"billboard(modelViewNormalMatrix);\");\n        }\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"vec4 viewPosition = modelViewMatrix * localPosition;\");\n    } else {\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"vec4 viewPosition  = viewMatrix2 * worldPosition; \");\n    }\n    if (normals) {\n        src.push(\"vec3 worldNormal = (modelNormalMatrix2 * localNormal).xyz; \");\n        if (lightsState.lightMaps.length > 0) {\n            src.push(\"vWorldNormal = worldNormal;\");\n        }\n        src.push(\"vViewNormal = normalize((viewNormalMatrix2 * vec4(worldNormal, 1.0)).xyz);\");\n        src.push(\"vec3 tmpVec3;\");\n        src.push(\"float lightDist;\");\n        for (i = 0, len = lightsState.lights.length; i < len; i++) { // Lights\n            light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\") {\n                if (light.space === \"world\") {\n                    src.push(\"tmpVec3 = vec3(viewMatrix2 * vec4(lightDir\" + i + \", 0.0) ).xyz;\");\n                    src.push(\"vViewLightReverseDirAndDist\" + i + \" = vec4(-tmpVec3, 0.0);\");\n                }\n            }\n            if (light.type === \"point\") {\n                if (light.space === \"world\") {\n                    src.push(\"tmpVec3 = (viewMatrix2 * vec4(lightPos\" + i + \", 1.0)).xyz - viewPosition.xyz;\");\n                    src.push(\"lightDist = abs(length(tmpVec3));\");\n                } else {\n                    src.push(\"tmpVec3 = lightPos\" + i + \".xyz - viewPosition.xyz;\");\n                    src.push(\"lightDist = abs(length(tmpVec3));\");\n                }\n                src.push(\"vViewLightReverseDirAndDist\" + i + \" = vec4(tmpVec3, lightDist);\");\n            }\n        }\n    }\n    if (texturing) {\n        if (quantizedGeometry) {\n            src.push(\"vUV = (uvDecodeMatrix * vec3(uv, 1.0)).xy;\");\n        } else {\n            src.push(\"vUV = uv;\");\n        }\n    }\n    if (geometryState.colors) {\n        src.push(\"vColor = color;\");\n    }\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"gl_PointSize = pointSize;\");\n    }\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    src.push(\"   vViewPosition = viewPosition.xyz;\");\n    src.push(\"   gl_Position = projMatrix * viewPosition;\");\n    src.push(\"const mat4 texUnitConverter = mat4(0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.5, 0.5, 0.5, 1.0);\");\n    if (receiveShadow) {\n        src.push(\"vec4 tempx; \");\n        for (i = 0, len = lightsState.lights.length; i < len; i++) { // Light sources\n            if (lightsState.lights[i].castShadow) {\n                src.push(\"vShadowPosFromLight\" + i + \" = texUnitConverter * shadowProjMatrix\" + i + \" * (shadowViewMatrix\" + i + \" * worldPosition); \");\n            }\n        }\n    }\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragmentDraw(mesh) {\n\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    const material = mesh._material;\n    const geometryState = mesh._geometry._state;\n    const clipsState = mesh.scene._clipsState;\n    const lightsState = mesh.scene._lightsState;\n    const materialState = mesh._material._state;\n    const clipping = clipsState.clips.length > 0;\n    const normals = hasNormals(mesh);\n    const uvs = geometryState.uv;\n    const solid = false && materialState.backfaces;\n    const phongMaterial = (materialState.type === \"PhongMaterial\");\n    const metallicMaterial = (materialState.type === \"MetallicMaterial\");\n    const specularMaterial = (materialState.type === \"SpecularMaterial\");\n    const receiveShadow = receivesShadow(mesh);\n    const gammaInput = scene.gammaInput; // If set, then it expects that all textures and colors are premultiplied gamma. Default is false.\n    const gammaOutput = scene.gammaOutput; // If set, then it expects that all textures and colors need to be outputted in premultiplied gamma. Default is false.\n    var i;\n    let len;\n    let light;\n    const src = [];\n\n    src.push(\"// Drawing fragment shader\");\n\n    if (normals && material._normalMap) {\n        src.push(\"#extension GL_OES_standard_derivatives : enable\");\n    }\n\n    src.push(\"precision \" + getFragmentFloatPrecision(gl) + \" float;\");\n\n    if (receiveShadow) {\n        src.push(\"float unpackDepth (vec4 color) {\");\n        src.push(\"  const vec4 bitShift = vec4(1.0, 1.0/256.0, 1.0/(256.0 * 256.0), 1.0/(256.0*256.0*256.0));\");\n        src.push(\"  return dot(color, bitShift);\");\n        src.push(\"}\");\n    }\n\n    //--------------------------------------------------------------------------------\n    // GAMMA CORRECTION\n    //--------------------------------------------------------------------------------\n\n    src.push(\"uniform float gammaFactor;\");\n    src.push(\"vec4 linearToLinear( in vec4 value ) {\");\n    src.push(\"  return value;\");\n    src.push(\"}\");\n    src.push(\"vec4 sRGBToLinear( in vec4 value ) {\");\n    src.push(\"  return vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.w );\");\n    src.push(\"}\");\n    src.push(\"vec4 gammaToLinear( in vec4 value) {\");\n    src.push(\"  return vec4( pow( value.xyz, vec3( gammaFactor ) ), value.w );\");\n    src.push(\"}\");\n    if (gammaOutput) {\n        src.push(\"vec4 linearToGamma( in vec4 value, in float gammaFactor ) {\");\n        src.push(\"  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\");\n        src.push(\"}\");\n    }\n\n    //--------------------------------------------------------------------------------\n    // USER CLIP PLANES\n    //--------------------------------------------------------------------------------\n\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"uniform bool clipActive\" + i + \";\");\n            src.push(\"uniform vec3 clipPos\" + i + \";\");\n            src.push(\"uniform vec3 clipDir\" + i + \";\");\n        }\n    }\n\n    if (normals) {\n\n        //--------------------------------------------------------------------------------\n        // LIGHT AND REFLECTION MAP INPUTS\n        // Define here so available globally to shader functions\n        //--------------------------------------------------------------------------------\n\n        if (lightsState.lightMaps.length > 0) {\n            src.push(\"uniform samplerCube lightMap;\");\n            src.push(\"uniform mat4 viewNormalMatrix;\");\n        }\n        if (lightsState.reflectionMaps.length > 0) {\n            src.push(\"uniform samplerCube reflectionMap;\");\n        }\n        if (lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0) {\n            src.push(\"uniform mat4 viewMatrix;\");\n        }\n\n        //--------------------------------------------------------------------------------\n        // SHADING FUNCTIONS\n        //--------------------------------------------------------------------------------\n\n        // CONSTANT DEFINITIONS\n\n        src.push(\"#define PI 3.14159265359\");\n        src.push(\"#define RECIPROCAL_PI 0.31830988618\");\n        src.push(\"#define RECIPROCAL_PI2 0.15915494\");\n        src.push(\"#define EPSILON 1e-6\");\n\n        src.push(\"#define saturate(a) clamp( a, 0.0, 1.0 )\");\n\n        // UTILITY DEFINITIONS\n\n        src.push(\"vec3 inverseTransformDirection(in vec3 dir, in mat4 matrix) {\");\n        src.push(\"   return normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\");\n        src.push(\"}\");\n\n        // STRUCTURES\n\n        src.push(\"struct IncidentLight {\");\n        src.push(\"   vec3 color;\");\n        src.push(\"   vec3 direction;\");\n        src.push(\"};\");\n\n        src.push(\"struct ReflectedLight {\");\n        src.push(\"   vec3 diffuse;\");\n        src.push(\"   vec3 specular;\");\n        src.push(\"};\");\n\n        src.push(\"struct Geometry {\");\n        src.push(\"   vec3 position;\");\n        src.push(\"   vec3 viewNormal;\");\n        src.push(\"   vec3 worldNormal;\");\n        src.push(\"   vec3 viewEyeDir;\");\n        src.push(\"};\");\n\n        src.push(\"struct Material {\");\n        src.push(\"   vec3    diffuseColor;\");\n        src.push(\"   float   specularRoughness;\");\n        src.push(\"   vec3    specularColor;\");\n        src.push(\"   float   shine;\"); // Only used for Phong\n        src.push(\"};\");\n\n        // COMMON UTILS\n\n        if (phongMaterial) {\n\n            if (lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0) {\n\n                src.push(\"void computePhongLightMapping(const in Geometry geometry, const in Material material, inout ReflectedLight reflectedLight) {\");\n                if (lightsState.lightMaps.length > 0) {\n                    src.push(\"   vec3 irradiance = \" + TEXTURE_DECODE_FUNCS[lightsState.lightMaps[0].encoding] + \"(textureCube(lightMap, geometry.worldNormal)).rgb;\");\n                    src.push(\"   irradiance *= PI;\");\n                    src.push(\"   vec3 diffuseBRDFContrib = (RECIPROCAL_PI * material.diffuseColor);\");\n                    src.push(\"   reflectedLight.diffuse += irradiance * diffuseBRDFContrib;\");\n                }\n                if (lightsState.reflectionMaps.length > 0) {\n                    src.push(\"   vec3 reflectVec             = reflect(-geometry.viewEyeDir, geometry.viewNormal);\");\n                    src.push(\"   vec3 radiance               = textureCube(reflectionMap, reflectVec).rgb * 0.2;\");\n                    //      src.push(\"   radiance *= PI;\");\n                    src.push(\"   reflectedLight.specular     += radiance;\");\n                }\n                src.push(\"}\");\n            }\n\n            src.push(\"void computePhongLighting(const in IncidentLight directLight, const in Geometry geometry, const in Material material, inout ReflectedLight reflectedLight) {\");\n            src.push(\"   float dotNL     = saturate(dot(geometry.viewNormal, directLight.direction));\");\n            src.push(\"   vec3 irradiance = dotNL * directLight.color * PI;\");\n            src.push(\"   reflectedLight.diffuse  += irradiance * (RECIPROCAL_PI * material.diffuseColor);\");\n            src.push(\"   reflectedLight.specular += directLight.color * material.specularColor * pow(max(dot(reflect(-directLight.direction, -geometry.viewNormal), geometry.viewEyeDir), 0.0), material.shine);\");\n            src.push(\"}\");\n        }\n\n        if (metallicMaterial || specularMaterial) {\n\n            // IRRADIANCE EVALUATION\n\n            src.push(\"float GGXRoughnessToBlinnExponent(const in float ggxRoughness) {\");\n            src.push(\"   float r = ggxRoughness + 0.0001;\");\n            src.push(\"   return (2.0 / (r * r) - 2.0);\");\n            src.push(\"}\");\n\n            src.push(\"float getSpecularMIPLevel(const in float blinnShininessExponent, const in int maxMIPLevel) {\");\n            src.push(\"   float maxMIPLevelScalar = float( maxMIPLevel );\");\n            src.push(\"   float desiredMIPLevel = maxMIPLevelScalar - 0.79248 - 0.5 * log2( ( blinnShininessExponent * blinnShininessExponent ) + 1.0 );\");\n            src.push(\"   return clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\");\n            src.push(\"}\");\n\n            if (lightsState.reflectionMaps.length > 0) {\n                src.push(\"vec3 getLightProbeIndirectRadiance(const in vec3 reflectVec, const in float blinnShininessExponent, const in int maxMIPLevel) {\");\n                src.push(\"   float mipLevel = 0.5 * getSpecularMIPLevel(blinnShininessExponent, maxMIPLevel);\"); //TODO: a random factor - fix this\n                src.push(\"   vec3 envMapColor = \" + TEXTURE_DECODE_FUNCS[lightsState.reflectionMaps[0].encoding] + \"(textureCube(reflectionMap, reflectVec, mipLevel)).rgb;\");\n                src.push(\"  return envMapColor;\");\n                src.push(\"}\");\n            }\n\n            // SPECULAR BRDF EVALUATION\n\n            src.push(\"vec3 F_Schlick(const in vec3 specularColor, const in float dotLH) {\");\n            src.push(\"   float fresnel = exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\");\n            src.push(\"   return ( 1.0 - specularColor ) * fresnel + specularColor;\");\n            src.push(\"}\");\n\n            src.push(\"float G_GGX_Smith(const in float alpha, const in float dotNL, const in float dotNV) {\");\n            src.push(\"   float a2 = ( alpha * alpha );\");\n            src.push(\"   float gl = dotNL + sqrt( a2 + ( 1.0 - a2 ) * ( dotNL * dotNL ) );\");\n            src.push(\"   float gv = dotNV + sqrt( a2 + ( 1.0 - a2 ) * ( dotNV * dotNV ) );\");\n            src.push(\"   return 1.0 / ( gl * gv );\");\n            src.push(\"}\");\n\n            src.push(\"float G_GGX_SmithCorrelated(const in float alpha, const in float dotNL, const in float dotNV) {\");\n            src.push(\"   float a2 = ( alpha * alpha );\");\n            src.push(\"   float gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * ( dotNV * dotNV ) );\");\n            src.push(\"   float gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * ( dotNL * dotNL ) );\");\n            src.push(\"   return 0.5 / max( gv + gl, EPSILON );\");\n            src.push(\"}\");\n\n            src.push(\"float D_GGX(const in float alpha, const in float dotNH) {\");\n            src.push(\"   float a2 = ( alpha * alpha );\");\n            src.push(\"   float denom = ( dotNH * dotNH) * ( a2 - 1.0 ) + 1.0;\");\n            src.push(\"   return RECIPROCAL_PI * a2 / ( denom * denom);\");\n            src.push(\"}\");\n\n            src.push(\"vec3 BRDF_Specular_GGX(const in IncidentLight incidentLight, const in Geometry geometry, const in vec3 specularColor, const in float roughness) {\");\n            src.push(\"   float alpha = ( roughness * roughness );\");\n            src.push(\"   vec3 halfDir = normalize( incidentLight.direction + geometry.viewEyeDir );\");\n            src.push(\"   float dotNL = saturate( dot( geometry.viewNormal, incidentLight.direction ) );\");\n            src.push(\"   float dotNV = saturate( dot( geometry.viewNormal, geometry.viewEyeDir ) );\");\n            src.push(\"   float dotNH = saturate( dot( geometry.viewNormal, halfDir ) );\");\n            src.push(\"   float dotLH = saturate( dot( incidentLight.direction, halfDir ) );\");\n            src.push(\"   vec3  F = F_Schlick( specularColor, dotLH );\");\n            src.push(\"   float G = G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\");\n            src.push(\"   float D = D_GGX( alpha, dotNH );\");\n            src.push(\"   return F * (G * D);\");\n            src.push(\"}\");\n\n            src.push(\"vec3 BRDF_Specular_GGX_Environment(const in Geometry geometry, const in vec3 specularColor, const in float roughness) {\");\n            src.push(\"   float dotNV = saturate(dot(geometry.viewNormal, geometry.viewEyeDir));\");\n            src.push(\"   const vec4 c0 = vec4( -1, -0.0275, -0.572,  0.022);\");\n            src.push(\"   const vec4 c1 = vec4(  1,  0.0425,   1.04, -0.04);\");\n            src.push(\"   vec4 r = roughness * c0 + c1;\");\n            src.push(\"   float a004 = min(r.x * r.x, exp2(-9.28 * dotNV)) * r.x + r.y;\");\n            src.push(\"   vec2 AB    = vec2(-1.04, 1.04) * a004 + r.zw;\");\n            src.push(\"   return specularColor * AB.x + AB.y;\");\n            src.push(\"}\");\n\n            if (lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0) {\n\n                src.push(\"void computePBRLightMapping(const in Geometry geometry, const in Material material, inout ReflectedLight reflectedLight) {\");\n                if (lightsState.lightMaps.length > 0) {\n                    src.push(\"   vec3 irradiance = sRGBToLinear(textureCube(lightMap, geometry.worldNormal)).rgb;\");\n                    src.push(\"   irradiance *= PI;\");\n                    src.push(\"   vec3 diffuseBRDFContrib = (RECIPROCAL_PI * material.diffuseColor);\");\n                    src.push(\"   reflectedLight.diffuse += irradiance * diffuseBRDFContrib;\");\n                    //   src.push(\"   reflectedLight.diffuse = vec3(1.0, 0.0, 0.0);\");\n                }\n                if (lightsState.reflectionMaps.length > 0) {\n                    src.push(\"   vec3 reflectVec             = reflect(-geometry.viewEyeDir, geometry.viewNormal);\");\n                    src.push(\"   reflectVec                  = inverseTransformDirection(reflectVec, viewMatrix);\");\n                    src.push(\"   float blinnExpFromRoughness = GGXRoughnessToBlinnExponent(material.specularRoughness);\");\n                    src.push(\"   vec3 radiance               = getLightProbeIndirectRadiance(reflectVec, blinnExpFromRoughness, 8);\");\n                    src.push(\"   vec3 specularBRDFContrib    = BRDF_Specular_GGX_Environment(geometry, material.specularColor, material.specularRoughness);\");\n                    src.push(\"   reflectedLight.specular     += radiance * specularBRDFContrib;\");\n                }\n                src.push(\"}\");\n            }\n\n            // MAIN LIGHTING COMPUTATION FUNCTION\n\n            src.push(\"void computePBRLighting(const in IncidentLight incidentLight, const in Geometry geometry, const in Material material, inout ReflectedLight reflectedLight) {\");\n            src.push(\"   float dotNL     = saturate(dot(geometry.viewNormal, incidentLight.direction));\");\n            src.push(\"   vec3 irradiance = dotNL * incidentLight.color * PI;\");\n            src.push(\"   reflectedLight.diffuse  += irradiance * (RECIPROCAL_PI * material.diffuseColor);\");\n            src.push(\"   reflectedLight.specular += irradiance * BRDF_Specular_GGX(incidentLight, geometry, material.specularColor, material.specularRoughness);\");\n            src.push(\"}\");\n\n        } // (metallicMaterial || specularMaterial)\n\n    } // geometry.normals\n\n    //--------------------------------------------------------------------------------\n    // GEOMETRY INPUTS\n    //--------------------------------------------------------------------------------\n\n    src.push(\"varying vec3 vViewPosition;\");\n\n    if (geometryState.colors) {\n        src.push(\"varying vec4 vColor;\");\n    }\n\n    if (uvs &&\n        ((normals && material._normalMap)\n            || material._ambientMap\n            || material._baseColorMap\n            || material._diffuseMap\n            || material._emissiveMap\n            || material._metallicMap\n            || material._roughnessMap\n            || material._metallicRoughnessMap\n            || material._specularMap\n            || material._glossinessMap\n            || material._specularGlossinessMap\n            || material._occlusionMap\n            || material._alphaMap)) {\n        src.push(\"varying vec2 vUV;\");\n    }\n\n    if (normals) {\n        if (lightsState.lightMaps.length > 0) {\n            src.push(\"varying vec3 vWorldNormal;\");\n        }\n        src.push(\"varying vec3 vViewNormal;\");\n    }\n\n    //--------------------------------------------------------------------------------\n    // MATERIAL CHANNEL INPUTS\n    //--------------------------------------------------------------------------------\n\n    if (materialState.ambient) {\n        src.push(\"uniform vec3 materialAmbient;\");\n    }\n    if (materialState.baseColor) {\n        src.push(\"uniform vec3 materialBaseColor;\");\n    }\n    if (materialState.alpha !== undefined && materialState.alpha !== null) {\n        src.push(\"uniform vec4 materialAlphaModeCutoff;\"); // [alpha, alphaMode, alphaCutoff]\n    }\n    if (materialState.emissive) {\n        src.push(\"uniform vec3 materialEmissive;\");\n    }\n    if (materialState.diffuse) {\n        src.push(\"uniform vec3 materialDiffuse;\");\n    }\n    if (materialState.glossiness !== undefined && materialState.glossiness !== null) {\n        src.push(\"uniform float materialGlossiness;\");\n    }\n    if (materialState.shininess !== undefined && materialState.shininess !== null) {\n        src.push(\"uniform float materialShininess;\");  // Phong channel\n    }\n    if (materialState.specular) {\n        src.push(\"uniform vec3 materialSpecular;\");\n    }\n    if (materialState.metallic !== undefined && materialState.metallic !== null) {\n        src.push(\"uniform float materialMetallic;\");\n    }\n    if (materialState.roughness !== undefined && materialState.roughness !== null) {\n        src.push(\"uniform float materialRoughness;\");\n    }\n    if (materialState.specularF0 !== undefined && materialState.specularF0 !== null) {\n        src.push(\"uniform float materialSpecularF0;\");\n    }\n\n    //--------------------------------------------------------------------------------\n    // MATERIAL TEXTURE INPUTS\n    //--------------------------------------------------------------------------------\n\n    if (uvs && material._ambientMap) {\n        src.push(\"uniform sampler2D ambientMap;\");\n        if (material._ambientMap._state.matrix) {\n            src.push(\"uniform mat4 ambientMapMatrix;\");\n        }\n    }\n    if (uvs && material._baseColorMap) {\n        src.push(\"uniform sampler2D baseColorMap;\");\n        if (material._baseColorMap._state.matrix) {\n            src.push(\"uniform mat4 baseColorMapMatrix;\");\n        }\n    }\n    if (uvs && material._diffuseMap) {\n        src.push(\"uniform sampler2D diffuseMap;\");\n        if (material._diffuseMap._state.matrix) {\n            src.push(\"uniform mat4 diffuseMapMatrix;\");\n        }\n    }\n    if (uvs && material._emissiveMap) {\n        src.push(\"uniform sampler2D emissiveMap;\");\n        if (material._emissiveMap._state.matrix) {\n            src.push(\"uniform mat4 emissiveMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._metallicMap) {\n        src.push(\"uniform sampler2D metallicMap;\");\n        if (material._metallicMap._state.matrix) {\n            src.push(\"uniform mat4 metallicMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._roughnessMap) {\n        src.push(\"uniform sampler2D roughnessMap;\");\n        if (material._roughnessMap._state.matrix) {\n            src.push(\"uniform mat4 roughnessMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._metallicRoughnessMap) {\n        src.push(\"uniform sampler2D metallicRoughnessMap;\");\n        if (material._metallicRoughnessMap._state.matrix) {\n            src.push(\"uniform mat4 metallicRoughnessMapMatrix;\");\n        }\n    }\n    if (normals && material._normalMap) {\n        src.push(\"uniform sampler2D normalMap;\");\n        if (material._normalMap._state.matrix) {\n            src.push(\"uniform mat4 normalMapMatrix;\");\n        }\n        src.push(\"vec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\");\n        src.push(\"      vec3 q0 = vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\");\n        src.push(\"      vec3 q1 = vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\");\n        src.push(\"      vec2 st0 = dFdx( uv.st );\");\n        src.push(\"      vec2 st1 = dFdy( uv.st );\");\n        src.push(\"      vec3 S = normalize( q0 * st1.t - q1 * st0.t );\");\n        src.push(\"      vec3 T = normalize( -q0 * st1.s + q1 * st0.s );\");\n        src.push(\"      vec3 N = normalize( surf_norm );\");\n        src.push(\"      vec3 mapN = texture2D( normalMap, uv ).xyz * 2.0 - 1.0;\");\n        src.push(\"      mat3 tsn = mat3( S, T, N );\");\n        //     src.push(\"      mapN *= 3.0;\");\n        src.push(\"      return normalize( tsn * mapN );\");\n        src.push(\"}\");\n    }\n    if (uvs && material._occlusionMap) {\n        src.push(\"uniform sampler2D occlusionMap;\");\n        if (material._occlusionMap._state.matrix) {\n            src.push(\"uniform mat4 occlusionMapMatrix;\");\n        }\n    }\n    if (uvs && material._alphaMap) {\n        src.push(\"uniform sampler2D alphaMap;\");\n        if (material._alphaMap._state.matrix) {\n            src.push(\"uniform mat4 alphaMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._specularMap) {\n        src.push(\"uniform sampler2D specularMap;\");\n        if (material._specularMap._state.matrix) {\n            src.push(\"uniform mat4 specularMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._glossinessMap) {\n        src.push(\"uniform sampler2D glossinessMap;\");\n        if (material._glossinessMap._state.matrix) {\n            src.push(\"uniform mat4 glossinessMapMatrix;\");\n        }\n    }\n    if (normals && uvs && material._specularGlossinessMap) {\n        src.push(\"uniform sampler2D materialSpecularGlossinessMap;\");\n        if (material._specularGlossinessMap._state.matrix) {\n            src.push(\"uniform mat4 materialSpecularGlossinessMapMatrix;\");\n        }\n    }\n\n    //--------------------------------------------------------------------------------\n    // MATERIAL FRESNEL INPUTS\n    //--------------------------------------------------------------------------------\n\n    if (normals && (material._diffuseFresnel ||\n        material._specularFresnel ||\n        material._alphaFresnel ||\n        material._emissiveFresnel ||\n        material._reflectivityFresnel)) {\n        src.push(\"float fresnel(vec3 eyeDir, vec3 normal, float edgeBias, float centerBias, float power) {\");\n        src.push(\"    float fr = abs(dot(eyeDir, normal));\");\n        src.push(\"    float finalFr = clamp((fr - edgeBias) / (centerBias - edgeBias), 0.0, 1.0);\");\n        src.push(\"    return pow(finalFr, power);\");\n        src.push(\"}\");\n        if (material._diffuseFresnel) {\n            src.push(\"uniform float  diffuseFresnelCenterBias;\");\n            src.push(\"uniform float  diffuseFresnelEdgeBias;\");\n            src.push(\"uniform float  diffuseFresnelPower;\");\n            src.push(\"uniform vec3   diffuseFresnelCenterColor;\");\n            src.push(\"uniform vec3   diffuseFresnelEdgeColor;\");\n        }\n        if (material._specularFresnel) {\n            src.push(\"uniform float  specularFresnelCenterBias;\");\n            src.push(\"uniform float  specularFresnelEdgeBias;\");\n            src.push(\"uniform float  specularFresnelPower;\");\n            src.push(\"uniform vec3   specularFresnelCenterColor;\");\n            src.push(\"uniform vec3   specularFresnelEdgeColor;\");\n        }\n        if (material._alphaFresnel) {\n            src.push(\"uniform float  alphaFresnelCenterBias;\");\n            src.push(\"uniform float  alphaFresnelEdgeBias;\");\n            src.push(\"uniform float  alphaFresnelPower;\");\n            src.push(\"uniform vec3   alphaFresnelCenterColor;\");\n            src.push(\"uniform vec3   alphaFresnelEdgeColor;\");\n        }\n        if (material._reflectivityFresnel) {\n            src.push(\"uniform float  materialSpecularF0FresnelCenterBias;\");\n            src.push(\"uniform float  materialSpecularF0FresnelEdgeBias;\");\n            src.push(\"uniform float  materialSpecularF0FresnelPower;\");\n            src.push(\"uniform vec3   materialSpecularF0FresnelCenterColor;\");\n            src.push(\"uniform vec3   materialSpecularF0FresnelEdgeColor;\");\n        }\n        if (material._emissiveFresnel) {\n            src.push(\"uniform float  emissiveFresnelCenterBias;\");\n            src.push(\"uniform float  emissiveFresnelEdgeBias;\");\n            src.push(\"uniform float  emissiveFresnelPower;\");\n            src.push(\"uniform vec3   emissiveFresnelCenterColor;\");\n            src.push(\"uniform vec3   emissiveFresnelEdgeColor;\");\n        }\n    }\n\n    //--------------------------------------------------------------------------------\n    // LIGHT SOURCES\n    //--------------------------------------------------------------------------------\n\n    src.push(\"uniform vec4   lightAmbient;\");\n\n    if (normals) {\n        for (i = 0, len = lightsState.lights.length; i < len; i++) { // Light sources\n            light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            src.push(\"uniform vec4 lightColor\" + i + \";\");\n            if (light.type === \"point\") {\n                src.push(\"uniform vec3 lightAttenuation\" + i + \";\");\n            }\n            if (light.type === \"dir\" && light.space === \"view\") {\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (light.type === \"point\" && light.space === \"view\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            } else {\n                src.push(\"varying vec4 vViewLightReverseDirAndDist\" + i + \";\");\n            }\n        }\n    }\n\n    if (receiveShadow) {\n\n        // Variance castShadow mapping filter\n\n        // src.push(\"float linstep(float low, float high, float v){\");\n        // src.push(\"      return clamp((v-low)/(high-low), 0.0, 1.0);\");\n        // src.push(\"}\");\n        //\n        // src.push(\"float VSM(sampler2D depths, vec2 uv, float compare){\");\n        // src.push(\"      vec2 moments = texture2D(depths, uv).xy;\");\n        // src.push(\"      float p = smoothstep(compare-0.02, compare, moments.x);\");\n        // src.push(\"      float variance = max(moments.y - moments.x*moments.x, -0.001);\");\n        // src.push(\"      float d = compare - moments.x;\");\n        // src.push(\"      float p_max = linstep(0.2, 1.0, variance / (variance + d*d));\");\n        // src.push(\"      return clamp(max(p, p_max), 0.0, 1.0);\");\n        // src.push(\"}\");\n\n        for (i = 0, len = lightsState.lights.length; i < len; i++) { // Light sources\n            if (lightsState.lights[i].castShadow) {\n                src.push(\"varying vec4 vShadowPosFromLight\" + i + \";\");\n                src.push(\"uniform sampler2D shadowMap\" + i + \";\");\n            }\n        }\n    }\n\n    src.push(\"uniform vec4 colorize;\");\n\n    //================================================================================\n    // MAIN\n    //================================================================================\n\n    src.push(\"void main(void) {\");\n\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"if (clipActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-clipDir\" + i + \".xyz, vWorldPosition.xyz - clipPos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        if (solid) {\n            src.push(\"  if (gl_FrontFacing == false) {\");\n            src.push(\"     gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\");\n            src.push(\"     return;\");\n            src.push(\"  }\");\n        }\n        src.push(\"}\");\n    }\n\n    if (geometryState.primitiveName === \"points\") {\n        src.push(\"vec2 cxy = 2.0 * gl_PointCoord - 1.0;\");\n        src.push(\"float r = dot(cxy, cxy);\");\n        src.push(\"if (r > 1.0) {\");\n        src.push(\"   discard;\");\n        src.push(\"}\");\n    }\n\n    src.push(\"float occlusion = 1.0;\");\n\n    if (materialState.ambient) {\n        src.push(\"vec3 ambientColor = materialAmbient;\");\n    } else {\n        src.push(\"vec3 ambientColor = vec3(1.0, 1.0, 1.0);\");\n    }\n\n    if (materialState.diffuse) {\n        src.push(\"vec3 diffuseColor = materialDiffuse;\");\n    } else if (materialState.baseColor) {\n        src.push(\"vec3 diffuseColor = materialBaseColor;\");\n    } else {\n        src.push(\"vec3 diffuseColor = vec3(1.0, 1.0, 1.0);\");\n    }\n\n    if (geometryState.colors) {\n        src.push(\"diffuseColor *= vColor.rgb;\");\n    }\n\n    if (materialState.emissive) {\n        src.push(\"vec3 emissiveColor = materialEmissive;\"); // Emissive default is (0,0,0), so initializing here\n    } else {\n        src.push(\"vec3  emissiveColor = vec3(0.0, 0.0, 0.0);\");\n    }\n\n    if (materialState.specular) {\n        src.push(\"vec3 specular = materialSpecular;\");\n    } else {\n        src.push(\"vec3 specular = vec3(1.0, 1.0, 1.0);\");\n    }\n\n    if (materialState.alpha !== undefined) {\n        src.push(\"float alpha = materialAlphaModeCutoff[0];\");\n    } else {\n        src.push(\"float alpha = 1.0;\");\n    }\n\n    if (geometryState.colors) {\n        src.push(\"alpha *= vColor.a;\");\n    }\n\n    if (materialState.glossiness !== undefined) {\n        src.push(\"float glossiness = materialGlossiness;\");\n    } else {\n        src.push(\"float glossiness = 1.0;\");\n    }\n\n    if (materialState.metallic !== undefined) {\n        src.push(\"float metallic = materialMetallic;\");\n    } else {\n        src.push(\"float metallic = 1.0;\");\n    }\n\n    if (materialState.roughness !== undefined) {\n        src.push(\"float roughness = materialRoughness;\");\n    } else {\n        src.push(\"float roughness = 1.0;\");\n    }\n\n    if (materialState.specularF0 !== undefined) {\n        src.push(\"float specularF0 = materialSpecularF0;\");\n    } else {\n        src.push(\"float specularF0 = 1.0;\");\n    }\n\n    //--------------------------------------------------------------------------------\n    // TEXTURING\n    //--------------------------------------------------------------------------------\n\n    if (uvs && ((normals && material._normalMap)\n        || material._ambientMap\n        || material._baseColorMap\n        || material._diffuseMap\n        || material._occlusionMap\n        || material._emissiveMap\n        || material._metallicMap\n        || material._roughnessMap\n        || material._metallicRoughnessMap\n        || material._specularMap\n        || material._glossinessMap\n        || material._specularGlossinessMap\n        || material._alphaMap)) {\n        src.push(\"vec4 texturePos = vec4(vUV.s, vUV.t, 1.0, 1.0);\");\n        src.push(\"vec2 textureCoord;\");\n    }\n\n    if (uvs && material._ambientMap) {\n        if (material._ambientMap._state.matrix) {\n            src.push(\"textureCoord = (ambientMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"vec4 ambientTexel = texture2D(ambientMap, textureCoord).rgb;\");\n        src.push(\"ambientTexel = \" + TEXTURE_DECODE_FUNCS[material._ambientMap._state.encoding] + \"(ambientTexel);\");\n        src.push(\"ambientColor *= ambientTexel.rgb;\");\n    }\n\n    if (uvs && material._diffuseMap) {\n        if (material._diffuseMap._state.matrix) {\n            src.push(\"textureCoord = (diffuseMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"vec4 diffuseTexel = texture2D(diffuseMap, textureCoord);\");\n        src.push(\"diffuseTexel = \" + TEXTURE_DECODE_FUNCS[material._diffuseMap._state.encoding] + \"(diffuseTexel);\");\n        src.push(\"diffuseColor *= diffuseTexel.rgb;\");\n        src.push(\"alpha *= diffuseTexel.a;\");\n    }\n\n    if (uvs && material._baseColorMap) {\n        if (material._baseColorMap._state.matrix) {\n            src.push(\"textureCoord = (baseColorMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"vec4 baseColorTexel = texture2D(baseColorMap, textureCoord);\");\n        src.push(\"baseColorTexel = \" + TEXTURE_DECODE_FUNCS[material._baseColorMap._state.encoding] + \"(baseColorTexel);\");\n        src.push(\"diffuseColor *= baseColorTexel.rgb;\");\n        src.push(\"alpha *= baseColorTexel.a;\");\n    }\n\n    if (uvs && material._emissiveMap) {\n        if (material._emissiveMap._state.matrix) {\n            src.push(\"textureCoord = (emissiveMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"vec4 emissiveTexel = texture2D(emissiveMap, textureCoord);\");\n        src.push(\"emissiveTexel = \" + TEXTURE_DECODE_FUNCS[material._emissiveMap._state.encoding] + \"(emissiveTexel);\");\n        src.push(\"emissiveColor *= emissiveTexel.rgb;\");\n    }\n\n    if (uvs && material._alphaMap) {\n        if (material._alphaMap._state.matrix) {\n            src.push(\"textureCoord = (alphaMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"alpha *= texture2D(alphaMap, textureCoord).r;\");\n    }\n\n    if (uvs && material._occlusionMap) {\n        if (material._occlusionMap._state.matrix) {\n            src.push(\"textureCoord = (occlusionMapMatrix * texturePos).xy;\");\n        } else {\n            src.push(\"textureCoord = texturePos.xy;\");\n        }\n        src.push(\"occlusion *= texture2D(occlusionMap, textureCoord).r;\");\n    }\n\n    if (normals && ((lightsState.lights.length > 0) || lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0)) {\n\n        //--------------------------------------------------------------------------------\n        // SHADING\n        //--------------------------------------------------------------------------------\n\n        if (uvs && material._normalMap) {\n            if (material._normalMap._state.matrix) {\n                src.push(\"textureCoord = (normalMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"vec3 viewNormal = perturbNormal2Arb( vViewPosition, normalize(vViewNormal), textureCoord );\");\n        } else {\n            src.push(\"vec3 viewNormal = normalize(vViewNormal);\");\n        }\n\n        if (uvs && material._specularMap) {\n            if (material._specularMap._state.matrix) {\n                src.push(\"textureCoord = (specularMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"specular *= texture2D(specularMap, textureCoord).rgb;\");\n        }\n\n        if (uvs && material._glossinessMap) {\n            if (material._glossinessMap._state.matrix) {\n                src.push(\"textureCoord = (glossinessMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"glossiness *= texture2D(glossinessMap, textureCoord).r;\");\n        }\n\n        if (uvs && material._specularGlossinessMap) {\n            if (material._specularGlossinessMap._state.matrix) {\n                src.push(\"textureCoord = (materialSpecularGlossinessMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"vec4 specGlossRGB = texture2D(materialSpecularGlossinessMap, textureCoord).rgba;\"); // TODO: what if only RGB texture?\n            src.push(\"specular *= specGlossRGB.rgb;\");\n            src.push(\"glossiness *= specGlossRGB.a;\");\n        }\n\n        if (uvs && material._metallicMap) {\n            if (material._metallicMap._state.matrix) {\n                src.push(\"textureCoord = (metallicMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"metallic *= texture2D(metallicMap, textureCoord).r;\");\n        }\n\n        if (uvs && material._roughnessMap) {\n            if (material._roughnessMap._state.matrix) {\n                src.push(\"textureCoord = (roughnessMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"roughness *= texture2D(roughnessMap, textureCoord).r;\");\n        }\n\n        if (uvs && material._metallicRoughnessMap) {\n            if (material._metallicRoughnessMap._state.matrix) {\n                src.push(\"textureCoord = (metallicRoughnessMapMatrix * texturePos).xy;\");\n            } else {\n                src.push(\"textureCoord = texturePos.xy;\");\n            }\n            src.push(\"vec3 metalRoughRGB = texture2D(metallicRoughnessMap, textureCoord).rgb;\");\n            src.push(\"metallic *= metalRoughRGB.b;\");\n            src.push(\"roughness *= metalRoughRGB.g;\");\n        }\n\n        src.push(\"vec3 viewEyeDir = normalize(-vViewPosition);\");\n\n        if (material._diffuseFresnel) {\n            src.push(\"float diffuseFresnel = fresnel(viewEyeDir, viewNormal, diffuseFresnelEdgeBias, diffuseFresnelCenterBias, diffuseFresnelPower);\");\n            src.push(\"diffuseColor *= mix(diffuseFresnelEdgeColor, diffuseFresnelCenterColor, diffuseFresnel);\");\n        }\n        if (material._specularFresnel) {\n            src.push(\"float specularFresnel = fresnel(viewEyeDir, viewNormal, specularFresnelEdgeBias, specularFresnelCenterBias, specularFresnelPower);\");\n            src.push(\"specular *= mix(specularFresnelEdgeColor, specularFresnelCenterColor, specularFresnel);\");\n        }\n        if (material._alphaFresnel) {\n            src.push(\"float alphaFresnel = fresnel(viewEyeDir, viewNormal, alphaFresnelEdgeBias, alphaFresnelCenterBias, alphaFresnelPower);\");\n            src.push(\"alpha *= mix(alphaFresnelEdgeColor.r, alphaFresnelCenterColor.r, alphaFresnel);\");\n        }\n        if (material._emissiveFresnel) {\n            src.push(\"float emissiveFresnel = fresnel(viewEyeDir, viewNormal, emissiveFresnelEdgeBias, emissiveFresnelCenterBias, emissiveFresnelPower);\");\n            src.push(\"emissiveColor *= mix(emissiveFresnelEdgeColor, emissiveFresnelCenterColor, emissiveFresnel);\");\n        }\n\n        src.push(\"if (materialAlphaModeCutoff[1] == 1.0 && alpha < materialAlphaModeCutoff[2]) {\"); // ie. (alphaMode == \"mask\" && alpha < alphaCutoff)\n        src.push(\"   discard;\"); // TODO: Discard earlier within this shader?\n        src.push(\"}\");\n\n        // PREPARE INPUTS FOR SHADER FUNCTIONS\n\n        src.push(\"IncidentLight  light;\");\n        src.push(\"Material       material;\");\n        src.push(\"Geometry       geometry;\");\n        src.push(\"ReflectedLight reflectedLight = ReflectedLight(vec3(0.0,0.0,0.0), vec3(0.0,0.0,0.0));\");\n        src.push(\"vec3           viewLightDir;\");\n\n        if (phongMaterial) {\n            src.push(\"material.diffuseColor      = diffuseColor;\");\n            src.push(\"material.specularColor     = specular;\");\n            src.push(\"material.shine             = materialShininess;\");\n        }\n\n        if (specularMaterial) {\n            src.push(\"float oneMinusSpecularStrength = 1.0 - max(max(specular.r, specular.g ),specular.b);\"); // Energy conservation\n            src.push(\"material.diffuseColor      = diffuseColor * oneMinusSpecularStrength;\");\n            src.push(\"material.specularRoughness = clamp( 1.0 - glossiness, 0.04, 1.0 );\");\n            src.push(\"material.specularColor     = specular;\");\n        }\n\n        if (metallicMaterial) {\n            src.push(\"float dielectricSpecular = 0.16 * specularF0 * specularF0;\");\n            src.push(\"material.diffuseColor      = diffuseColor * (1.0 - dielectricSpecular) * (1.0 - metallic);\");\n            src.push(\"material.specularRoughness = clamp(roughness, 0.04, 1.0);\");\n            src.push(\"material.specularColor     = mix(vec3(dielectricSpecular), diffuseColor, metallic);\");\n        }\n\n        src.push(\"geometry.position      = vViewPosition;\");\n        if (lightsState.lightMaps.length > 0) {\n            src.push(\"geometry.worldNormal   = normalize(vWorldNormal);\");\n        }\n        src.push(\"geometry.viewNormal    = viewNormal;\");\n        src.push(\"geometry.viewEyeDir    = viewEyeDir;\");\n\n        // ENVIRONMENT AND REFLECTION MAP SHADING\n\n        if ((phongMaterial) && (lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0)) {\n            src.push(\"computePhongLightMapping(geometry, material, reflectedLight);\");\n        }\n\n        if ((specularMaterial || metallicMaterial) && (lightsState.lightMaps.length > 0 || lightsState.reflectionMaps.length > 0)) {\n            src.push(\"computePBRLightMapping(geometry, material, reflectedLight);\");\n        }\n\n        // LIGHT SOURCE SHADING\n\n        src.push(\"float shadow = 1.0;\");\n\n        // if (receiveShadow) {\n        //\n        //     src.push(\"float lightDepth2 = clamp(length(lightPos)/40.0, 0.0, 1.0);\");\n        //     src.push(\"float illuminated = VSM(sLightDepth, lightUV, lightDepth2);\");\n        //\n        src.push(\"float shadowAcneRemover = 0.007;\");\n        src.push(\"vec3 fragmentDepth;\");\n        src.push(\"float texelSize = 1.0 / 1024.0;\");\n        src.push(\"float amountInLight = 0.0;\");\n        src.push(\"vec3 shadowCoord;\");\n        src.push('vec4 rgbaDepth;');\n        src.push(\"float depth;\");\n        // }\n\n        const numShadows = 0;\n        for (i = 0, len = lightsState.lights.length; i < len; i++) {\n\n            light = lightsState.lights[i];\n\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\" && light.space === \"view\") {\n                src.push(\"viewLightDir = -normalize(lightDir\" + i + \");\");\n            } else if (light.type === \"point\" && light.space === \"view\") {\n                src.push(\"viewLightDir = normalize(lightPos\" + i + \" - vViewPosition);\");\n                //src.push(\"tmpVec3 = lightPos\" + i + \".xyz - viewPosition.xyz;\");\n                //src.push(\"lightDist = abs(length(tmpVec3));\");\n            } else {\n                src.push(\"viewLightDir = normalize(vViewLightReverseDirAndDist\" + i + \".xyz);\"); // If normal mapping, the fragment->light vector will be in tangent space\n            }\n\n            if (receiveShadow && light.castShadow) {\n\n                // if (true) {\n                //     src.push('shadowCoord = (vShadowPosFromLight' + i + '.xyz/vShadowPosFromLight' + i + '.w)/2.0 + 0.5;');\n                //     src.push(\"lightDepth2 = clamp(length(vec3[0.0, 20.0, 20.0])/40.0, 0.0, 1.0);\");\n                //     src.push(\"castShadow *= VSM(shadowMap' + i + ', shadowCoord, lightDepth2);\");\n                // }\n                //\n                // if (false) {\n                //\n                // PCF\n\n                src.push(\"shadow = 0.0;\");\n\n                src.push(\"fragmentDepth = vShadowPosFromLight\" + i + \".xyz;\");\n                src.push(\"fragmentDepth.z -= shadowAcneRemover;\");\n                src.push(\"for (int x = -3; x <= 3; x++) {\");\n                src.push(\"  for (int y = -3; y <= 3; y++) {\");\n                src.push(\"      float texelDepth = unpackDepth(texture2D(shadowMap\" + i + \", fragmentDepth.xy + vec2(x, y) * texelSize));\");\n                src.push(\"      if (fragmentDepth.z < texelDepth) {\");\n                src.push(\"          shadow += 1.0;\");\n                src.push(\"      }\");\n                src.push(\"  }\");\n                src.push(\"}\");\n\n                src.push(\"shadow = shadow / 9.0;\");\n\n                src.push(\"light.color =  lightColor\" + i + \".rgb * (lightColor\" + i + \".a * shadow);\"); // a is intensity\n                //\n                // }\n                //\n                // if (false){\n                //\n                //     src.push(\"shadow = 1.0;\");\n                //\n                //     src.push('shadowCoord = (vShadowPosFromLight' + i + '.xyz/vShadowPosFromLight' + i + '.w)/2.0 + 0.5;');\n                //\n                //     src.push('shadow -= (shadowCoord.z > unpackDepth(texture2D(shadowMap' + i + ', shadowCoord.xy + vec2( -0.94201624, -0.39906216 ) / 700.0)) + 0.0015) ? 0.2 : 0.0;');\n                //     src.push('shadow -= (shadowCoord.z > unpackDepth(texture2D(shadowMap' + i + ', shadowCoord.xy + vec2( 0.94558609, -0.76890725 ) / 700.0)) + 0.0015) ? 0.2 : 0.0;');\n                //     src.push('shadow -= (shadowCoord.z > unpackDepth(texture2D(shadowMap' + i + ', shadowCoord.xy + vec2( -0.094184101, -0.92938870 ) / 700.0)) + 0.0015) ? 0.2 : 0.0;');\n                //     src.push('shadow -= (shadowCoord.z > unpackDepth(texture2D(shadowMap' + i + ', shadowCoord.xy + vec2( 0.34495938, 0.29387760 ) / 700.0)) + 0.0015) ? 0.2 : 0.0;');\n                //\n                //     src.push(\"light.color =  lightColor\" + i + \".rgb * (lightColor\" + i + \".a * shadow);\");\n                // }\n            } else {\n                src.push(\"light.color =  lightColor\" + i + \".rgb * (lightColor\" + i + \".a );\"); // a is intensity\n            }\n\n            src.push(\"light.direction = viewLightDir;\");\n\n            if (phongMaterial) {\n                src.push(\"computePhongLighting(light, geometry, material, reflectedLight);\");\n            }\n\n            if (specularMaterial || metallicMaterial) {\n                src.push(\"computePBRLighting(light, geometry, material, reflectedLight);\");\n            }\n        }\n\n        if (numShadows > 0) {\n            //src.push(\"shadow /= \" + (9 * numShadows) + \".0;\");\n        }\n\n        //src.push(\"reflectedLight.diffuse *= shadow;\");\n\n        // COMBINE TERMS\n\n        if (phongMaterial) {\n\n            src.push(\"ambientColor *= (lightAmbient.rgb * lightAmbient.a);\");\n\n            src.push(\"vec3 outgoingLight =  ((occlusion * (( reflectedLight.diffuse + reflectedLight.specular)))) + emissiveColor;\");\n\n        } else {\n            src.push(\"vec3 outgoingLight = (occlusion * (reflectedLight.diffuse)) + (occlusion * reflectedLight.specular) + emissiveColor;\");\n        }\n\n    } else {\n\n        //--------------------------------------------------------------------------------\n        // NO SHADING - EMISSIVE and AMBIENT ONLY\n        //--------------------------------------------------------------------------------\n\n        src.push(\"ambientColor *= (lightAmbient.rgb * lightAmbient.a);\");\n\n        src.push(\"vec3 outgoingLight = emissiveColor + ambientColor;\");\n    }\n\n    src.push(\"gl_FragColor = vec4(outgoingLight, alpha) * colorize;\");\n\n    if (gammaOutput) {\n        src.push(\"gl_FragColor = linearToGamma(gl_FragColor, gammaFactor);\");\n    }\n\n    src.push(\"}\");\n\n    return src;\n}\n\nexport {DrawShaderSource};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/draw/DrawShaderSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2188,
    "kind": "variable",
    "name": "TEXTURE_DECODE_FUNCS",
    "memberof": "scene/mesh/draw/DrawShaderSource.js",
    "static": true,
    "longname": "scene/mesh/draw/DrawShaderSource.js~TEXTURE_DECODE_FUNCS",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"linear\": string, \"sRGB\": string, \"gamma\": string}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2189,
    "kind": "function",
    "name": "receivesShadow",
    "memberof": "scene/mesh/draw/DrawShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawShaderSource.js~receivesShadow",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2190,
    "kind": "function",
    "name": "hasTextures",
    "memberof": "scene/mesh/draw/DrawShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawShaderSource.js~hasTextures",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 36,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2191,
    "kind": "function",
    "name": "hasNormals",
    "memberof": "scene/mesh/draw/DrawShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawShaderSource.js~hasNormals",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2192,
    "kind": "function",
    "name": "getFragmentFloatPrecision",
    "memberof": "scene/mesh/draw/DrawShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawShaderSource.js~getFragmentFloatPrecision",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2193,
    "kind": "function",
    "name": "buildVertexLambert",
    "memberof": "scene/mesh/draw/DrawShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawShaderSource.js~buildVertexLambert",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2194,
    "kind": "function",
    "name": "buildFragmentLambert",
    "memberof": "scene/mesh/draw/DrawShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawShaderSource.js~buildFragmentLambert",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 241,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2195,
    "kind": "function",
    "name": "buildVertexDraw",
    "memberof": "scene/mesh/draw/DrawShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawShaderSource.js~buildVertexDraw",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 305,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2196,
    "kind": "function",
    "name": "buildFragmentDraw",
    "memberof": "scene/mesh/draw/DrawShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawShaderSource.js~buildFragmentDraw",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 514,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2197,
    "kind": "function",
    "name": "DrawShaderSource",
    "memberof": "scene/mesh/draw/DrawShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/draw/DrawShaderSource.js~DrawShaderSource",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/draw/DrawShaderSource.js",
    "importStyle": "{DrawShaderSource}",
    "description": "",
    "lineNumber": 4,
    "ignore": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2198,
    "kind": "file",
    "name": "scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\nimport {Map} from \"../../utils/Map.js\";\nimport {EmphasisEdgesShaderSource} from \"./EmphasisEdgesShaderSource.js\";\nimport {Program} from \"../../webgl/Program.js\";\nimport {stats} from './../../stats.js';\n\nconst ids = new Map({});\n\n/**\n * @private\n */\nconst EmphasisEdgesRenderer = function (hash, mesh) {\n    this.id = ids.addItem({});\n    this._hash = hash;\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._shaderSource = new EmphasisEdgesShaderSource(mesh);\n    this._allocate(mesh);\n};\n\nconst renderers = {};\n\nEmphasisEdgesRenderer.get = function (mesh) {\n    const hash = [\n        mesh.scene.id,\n        mesh.scene.gammaOutput ? \"go\" : \"\", // Gamma input not needed\n        mesh.scene._clipsState.getHash(),\n        mesh._geometry._state.compressGeometry ? \"cp\" : \"\",\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new EmphasisEdgesRenderer(hash, mesh);\n        renderers[hash] = renderer;\n        stats.memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nEmphasisEdgesRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        stats.memory.programs--;\n    }\n};\n\nEmphasisEdgesRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nEmphasisEdgesRenderer.prototype.drawMesh = function (frame, mesh, mode) {\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    let materialState;\n    const meshState = mesh._state;\n    const geometry = mesh._geometry;\n    const geometryState = geometry._state;\n    if (frame.lastProgramId !== this._program.id) {\n        frame.lastProgramId = this._program.id;\n        this._bindProgram(frame);\n    }\n    switch (mode) {\n        case 0:\n            materialState = mesh._ghostMaterial._state;\n            break;\n        case 1:\n            materialState = mesh._highlightMaterial._state;\n            break;\n        case 2:\n            materialState = mesh._selectedMaterial._state;\n            break;\n        case 3:\n        default:\n            materialState = mesh._edgeMaterial._state;\n            break;\n    }\n    if (materialState.id !== this._lastMaterialId) {\n        const backfaces = materialState.backfaces;\n        if (frame.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frame.backfaces = backfaces;\n        }\n        if (frame.lineWidth !== materialState.edgeWidth) {\n            gl.lineWidth(materialState.edgeWidth);\n            frame.lineWidth = materialState.edgeWidth;\n        }\n        if (this._uEdgeColor) {\n            const edgeColor = materialState.edgeColor;\n            const edgeAlpha = materialState.edgeAlpha;\n            gl.uniform4f(this._uEdgeColor, edgeColor[0], edgeColor[1], edgeColor[2], edgeAlpha);\n        }\n        this._lastMaterialId = materialState.id;\n    }\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n    if (this._uModelNormalMatrix) {\n        gl.uniformMatrix4fv(this._uModelNormalMatrix, gl.FALSE, mesh.worldNormalMatrix);\n    }\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, meshState.clippable);\n    }\n    if (geometryState.combineGeometry) {\n        const vertexBufs = mesh._geometry._getVertexBufs();\n        if (vertexBufs.id !== this._lastVertexBufsId) {\n            if (vertexBufs.positionsBuf && this._aPosition) {\n                this._aPosition.bindArrayBuffer(vertexBufs.positionsBuf, vertexBufs.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n                frame.bindArray++;\n            }\n            this._lastVertexBufsId = vertexBufs.id;\n        }\n    }\n    // Bind VBOs\n    let indicesBuf;\n    if (geometryState.primitive === gl.TRIANGLES) {\n        indicesBuf = geometry._getEdgeIndices();\n    } else if (geometryState.primitive === gl.LINES) {\n        indicesBuf = geometryState.indicesBuf;\n    }\n    if (indicesBuf) {\n        if (geometryState.id !== this._lastGeometryId) {\n            if (this._uPositionsDecodeMatrix) {\n                gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n            }\n            if (!geometryState.combineGeometry) { // VBOs were bound by the VertexBufs logic above\n                if (this._aPosition) {\n                    this._aPosition.bindArrayBuffer(geometryState.positionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n                    frame.bindArray++;\n                }\n            }\n            indicesBuf.bind();\n            frame.bindArray++;\n            this._lastGeometryId = geometryState.id;\n        }\n        gl.drawElements(gl.LINES, indicesBuf.numItems, indicesBuf.itemType, 0);\n        frame.drawElements++;\n    }\n};\n\nEmphasisEdgesRenderer.prototype._allocate = function (mesh) {\n    const gl = mesh.scene.canvas.gl;\n    const clipsState = mesh.scene._clipsState;\n    this._program = new Program(gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uClips = [];\n    for (let i = 0, len = clipsState.clips.length; i < len; i++) {\n        this._uClips.push({\n            active: program.getLocation(\"clipActive\" + i),\n            pos: program.getLocation(\"clipPos\" + i),\n            dir: program.getLocation(\"clipDir\" + i)\n        });\n    }\n    this._uEdgeColor = program.getLocation(\"edgeColor\");\n    this._aPosition = program.getAttribute(\"position\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uGammaFactor = program.getLocation(\"gammaFactor\");\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n};\n\nEmphasisEdgesRenderer.prototype._bindProgram = function (frame) {\n    const program = this._program;\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const clipsState = scene._clipsState;\n    const camera = scene.camera;\n    const cameraState = camera._state;\n    program.bind();\n    frame.useProgram++;\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n    gl.uniformMatrix4fv(this._uViewMatrix, false, cameraState.matrix);\n    gl.uniformMatrix4fv(this._uProjMatrix, false, camera.project._state.matrix);\n    if (clipsState.clips.length > 0) {\n        const clips = clipsState.clips;\n        let clipUniforms;\n        let uClipActive;\n        let clip;\n        let uClipPos;\n        let uClipDir;\n        for (let i = 0, len = this._uClips.length; i < len; i++) {\n            clipUniforms = this._uClips[i];\n            uClipActive = clipUniforms.active;\n            clip = clips[i];\n            if (uClipActive) {\n                gl.uniform1i(uClipActive, clip.active);\n            }\n            uClipPos = clipUniforms.pos;\n            if (uClipPos) {\n                gl.uniform3fv(clipUniforms.pos, clip.pos);\n            }\n            uClipDir = clipUniforms.dir;\n            if (uClipDir) {\n                gl.uniform3fv(clipUniforms.dir, clip.dir);\n            }\n        }\n    }\n    if (this._uGammaFactor) {\n        gl.uniform1f(this._uGammaFactor, scene.gammaFactor);\n    }\n};\n\nexport {EmphasisEdgesRenderer};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2199,
    "kind": "variable",
    "name": "ids",
    "memberof": "scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisEdgesRenderer.js~ids",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "scene/utils/Map.js~Map"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2200,
    "kind": "variable",
    "name": "renderers",
    "memberof": "scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisEdgesRenderer.js~renderers",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2201,
    "kind": "function",
    "name": "get",
    "memberof": "scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisEdgesRenderer.js~get",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2202,
    "kind": "function",
    "name": "put",
    "memberof": "scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisEdgesRenderer.js~put",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2203,
    "kind": "function",
    "name": "webglContextRestored",
    "memberof": "scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisEdgesRenderer.js~webglContextRestored",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2204,
    "kind": "function",
    "name": "drawMesh",
    "memberof": "scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisEdgesRenderer.js~drawMesh",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      },
      {
        "name": "mode",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2205,
    "kind": "function",
    "name": "_allocate",
    "memberof": "scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisEdgesRenderer.js~_allocate",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 153,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2206,
    "kind": "function",
    "name": "_bindProgram",
    "memberof": "scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisEdgesRenderer.js~_bindProgram",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 183,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2207,
    "kind": "function",
    "name": "EmphasisEdgesRenderer",
    "memberof": "scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisEdgesRenderer.js~EmphasisEdgesRenderer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisEdgesRenderer.js",
    "importStyle": "{EmphasisEdgesRenderer}",
    "description": "",
    "lineNumber": 15,
    "ignore": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2208,
    "kind": "file",
    "name": "scene/mesh/emphasis/EmphasisEdgesShaderSource.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n/**\n * @private\n */\nclass EmphasisEdgesShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._clipsState.clips.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n    src.push(\"// Edges drawing vertex shader\");\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform vec4 edgeColor;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n        src.push(\"billboard(modelViewMatrix);\");\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"vec4 viewPosition = modelViewMatrix * localPosition;\");\n    } else {\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"vec4 viewPosition  = viewMatrix2 * worldPosition; \");\n    }\n    src.push(\"vColor = edgeColor;\");\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    src.push(\"   gl_Position = projMatrix * viewPosition;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n    const clipsState = mesh.scene._clipsState;\n    const gammaOutput = mesh.scene.gammaOutput;\n    const clipping = clipsState.clips.length > 0;\n    let i;\n    let len;\n    const src = [];\n    src.push(\"// Edges drawing fragment shader\");\n    src.push(\"precision lowp float;\");\n    if (gammaOutput) {\n        src.push(\"uniform float gammaFactor;\");\n        src.push(\"vec4 linearToGamma( in vec4 value, in float gammaFactor ) {\");\n        src.push(\"  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\");\n        src.push(\"}\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (i = 0, len = clipsState.clips.length; i < len; i++) {\n            src.push(\"uniform bool clipActive\" + i + \";\");\n            src.push(\"uniform vec3 clipPos\" + i + \";\");\n            src.push(\"uniform vec3 clipDir\" + i + \";\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (i = 0, len = clipsState.clips.length; i < len; i++) {\n            src.push(\"if (clipActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-clipDir\" + i + \".xyz, vWorldPosition.xyz - clipPos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    src.push(\"gl_FragColor = vColor;\");\n    if (gammaOutput) {\n        src.push(\"gl_FragColor = linearToGamma(vColor, gammaFactor);\");\n    } else {\n        src.push(\"gl_FragColor = vColor;\");\n    }\n    src.push(\"}\");\n    return src;\n}\n\nexport {EmphasisEdgesShaderSource};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/emphasis/EmphasisEdgesShaderSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2209,
    "kind": "function",
    "name": "buildVertex",
    "memberof": "scene/mesh/emphasis/EmphasisEdgesShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisEdgesShaderSource.js~buildVertex",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisEdgesShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2210,
    "kind": "function",
    "name": "buildFragment",
    "memberof": "scene/mesh/emphasis/EmphasisEdgesShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisEdgesShaderSource.js~buildFragment",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisEdgesShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2211,
    "kind": "class",
    "name": "EmphasisEdgesShaderSource",
    "memberof": "scene/mesh/emphasis/EmphasisEdgesShaderSource.js",
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisEdgesShaderSource.js~EmphasisEdgesShaderSource",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisEdgesShaderSource.js",
    "importStyle": "{EmphasisEdgesShaderSource}",
    "description": "",
    "lineNumber": 8,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 2212,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/mesh/emphasis/EmphasisEdgesShaderSource.js~EmphasisEdgesShaderSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/emphasis/EmphasisEdgesShaderSource.js~EmphasisEdgesShaderSource#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 2213,
    "kind": "member",
    "name": "vertex",
    "memberof": "scene/mesh/emphasis/EmphasisEdgesShaderSource.js~EmphasisEdgesShaderSource",
    "static": false,
    "longname": "scene/mesh/emphasis/EmphasisEdgesShaderSource.js~EmphasisEdgesShaderSource#vertex",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2214,
    "kind": "member",
    "name": "fragment",
    "memberof": "scene/mesh/emphasis/EmphasisEdgesShaderSource.js~EmphasisEdgesShaderSource",
    "static": false,
    "longname": "scene/mesh/emphasis/EmphasisEdgesShaderSource.js~EmphasisEdgesShaderSource#fragment",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2215,
    "kind": "file",
    "name": "scene/mesh/emphasis/EmphasisFillRenderer.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\nimport {Map} from \"../../utils/Map.js\";\nimport {EmphasisFillShaderSource} from \"./EmphasisFillShaderSource.js\";\nimport {Program} from \"../../webgl/Program.js\";\nimport {stats} from './../../stats.js';\n\nconst ids = new Map({});\n\n/**\n * @private\n */\nconst EmphasisFillRenderer = function (hash, mesh) {\n    this.id = ids.addItem({});\n    this._hash = hash;\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._shaderSource = new EmphasisFillShaderSource(mesh);\n    this._allocate(mesh);\n};\n\nconst ghostFillRenderers = {};\n\nEmphasisFillRenderer.get = function (mesh) {\n    const hash = [\n        mesh.scene.id,\n        mesh.scene.gammaOutput ? \"go\" : \"\", // Gamma input not needed\n        mesh.scene._clipsState.getHash(),\n        !!mesh._geometry.normals ? \"n\" : \"\",\n        mesh._geometry._state.compressGeometry ? \"cp\" : \"\",\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = ghostFillRenderers[hash];\n    if (!renderer) {\n        renderer = new EmphasisFillRenderer(hash, mesh);\n        ghostFillRenderers[hash] = renderer;\n        stats.memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nEmphasisFillRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete ghostFillRenderers[this._hash];\n        stats.memory.programs--;\n    }\n};\n\nEmphasisFillRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nEmphasisFillRenderer.prototype.drawMesh = function (frame, mesh, mode) {\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const materialState = mode === 0 ? mesh._ghostMaterial._state : (mode === 1 ? mesh._highlightMaterial._state : mesh._selectedMaterial._state);\n    const meshState = mesh._state;\n    const geometryState = mesh._geometry._state;\n    if (frame.lastProgramId !== this._program.id) {\n        frame.lastProgramId = this._program.id;\n        this._bindProgram(frame);\n    }\n    if (materialState.id !== this._lastMaterialId) {\n        const fillColor = materialState.fillColor;\n        const backfaces = materialState.backfaces;\n        if (frame.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frame.backfaces = backfaces;\n        }\n        gl.uniform4f(this._uFillColor, fillColor[0], fillColor[1], fillColor[2], materialState.fillAlpha);\n        this._lastMaterialId = materialState.id;\n    }\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n    if (this._uModelNormalMatrix) {\n        gl.uniformMatrix4fv(this._uModelNormalMatrix, gl.FALSE, mesh.worldNormalMatrix);\n    }\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, meshState.clippable);\n    }\n    if (geometryState.combineGeometry) {\n        const vertexBufs = mesh._geometry._getVertexBufs();\n        if (vertexBufs.id !== this._lastVertexBufsId) {\n            if (vertexBufs.positionsBuf && this._aPosition) {\n                this._aPosition.bindArrayBuffer(vertexBufs.positionsBuf);\n                frame.bindArray++;\n            }\n            if (vertexBufs.normalsBuf && this._aNormal) {\n                this._aNormal.bindArrayBuffer(vertexBufs.normalsBuf);\n                frame.bindArray++;\n            }\n            this._lastVertexBufsId = vertexBufs.id;\n        }\n    }\n    // Bind VBOs\n    if (geometryState.id !== this._lastGeometryId) {\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        }\n        if (this._uUVDecodeMatrix) {\n            gl.uniformMatrix3fv(this._uUVDecodeMatrix, false, geometryState.uvDecodeMatrix);\n        }\n        if (geometryState.combineGeometry) { // VBOs were bound by the VertexBufs logic above\n            if (geometryState.indicesBufCombined) {\n                geometryState.indicesBufCombined.bind();\n                frame.bindArray++;\n            }\n        } else {\n            if (this._aPosition) {\n                this._aPosition.bindArrayBuffer(geometryState.positionsBuf);\n                frame.bindArray++;\n            }\n            if (this._aNormal) {\n                this._aNormal.bindArrayBuffer(geometryState.normalsBuf);\n                frame.bindArray++;\n            }\n            if (geometryState.indicesBuf) {\n                geometryState.indicesBuf.bind();\n                frame.bindArray++;\n                // gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n                // frame.drawElements++;\n            } else if (geometryState.positions) {\n                // gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n                //  frame.drawArrays++;\n            }\n        }\n        this._lastGeometryId = geometryState.id;\n    }\n    // Draw (indices bound in prev step)\n    if (geometryState.combineGeometry) {\n        if (geometryState.indicesBufCombined) { // Geometry indices into portion of uber-array\n            gl.drawElements(geometryState.primitive, geometryState.indicesBufCombined.numItems, geometryState.indicesBufCombined.itemType, 0);\n            frame.drawElements++;\n        } else {\n            // TODO: drawArrays() with VertexBufs positions\n        }\n    } else {\n        if (geometryState.indicesBuf) {\n            gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n            frame.drawElements++;\n        } else if (geometryState.positions) {\n            gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n            frame.drawArrays++;\n        }\n    }\n};\n\nEmphasisFillRenderer.prototype._allocate = function (mesh) {\n    const lightsState = mesh.scene._lightsState;\n    const clipsState = mesh.scene._clipsState;\n    const gl = mesh.scene.canvas.gl;\n    this._program = new Program(gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uModelNormalMatrix = program.getLocation(\"modelNormalMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uViewNormalMatrix = program.getLocation(\"viewNormalMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uLightAmbient = [];\n    this._uLightColor = [];\n    this._uLightDir = [];\n    this._uLightPos = [];\n    this._uLightAttenuation = [];\n    for (var i = 0, len = lightsState.lights.length; i < len; i++) {\n        const light = lightsState.lights[i];\n        switch (light.type) {\n            case \"ambient\":\n                this._uLightAmbient[i] = program.getLocation(\"lightAmbient\");\n                break;\n            case \"dir\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = null;\n                this._uLightDir[i] = program.getLocation(\"lightDir\" + i);\n                break;\n            case \"point\":\n                this._uLightColor[i] = program.getLocation(\"lightColor\" + i);\n                this._uLightPos[i] = program.getLocation(\"lightPos\" + i);\n                this._uLightDir[i] = null;\n                this._uLightAttenuation[i] = program.getLocation(\"lightAttenuation\" + i);\n                break;\n        }\n    }\n    this._uClips = [];\n    for (var i = 0, len = clipsState.clips.length; i < len; i++) {\n        this._uClips.push({\n            active: program.getLocation(\"clipActive\" + i),\n            pos: program.getLocation(\"clipPos\" + i),\n            dir: program.getLocation(\"clipDir\" + i)\n        });\n    }\n    this._uFillColor = program.getLocation(\"fillColor\");\n    this._aPosition = program.getAttribute(\"position\");\n    this._aNormal = program.getAttribute(\"normal\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uGammaFactor = program.getLocation(\"gammaFactor\");\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n};\n\nEmphasisFillRenderer.prototype._bindProgram = function (frame) {\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const clipsState = scene._clipsState;\n    const lightsState = scene._lightsState;\n    const camera = scene.camera;\n    const cameraState = camera._state;\n    let light;\n    const program = this._program;\n    program.bind();\n    frame.useProgram++;\n    frame.textureUnit = 0;\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n    this._lastIndicesBufId = null;\n    gl.uniformMatrix4fv(this._uViewMatrix, false, cameraState.matrix);\n    gl.uniformMatrix4fv(this._uViewNormalMatrix, false, cameraState.normalMatrix);\n    gl.uniformMatrix4fv(this._uProjMatrix, false, camera.project._state.matrix);\n    for (var i = 0, len = lightsState.lights.length; i < len; i++) {\n        light = lightsState.lights[i];\n        if (this._uLightAmbient[i]) {\n            gl.uniform4f(this._uLightAmbient[i], light.color[0], light.color[1], light.color[2], light.intensity);\n        } else {\n            if (this._uLightColor[i]) {\n                gl.uniform4f(this._uLightColor[i], light.color[0], light.color[1], light.color[2], light.intensity);\n            }\n            if (this._uLightPos[i]) {\n                gl.uniform3fv(this._uLightPos[i], light.pos);\n                if (this._uLightAttenuation[i]) {\n                    gl.uniform1f(this._uLightAttenuation[i], light.attenuation);\n                }\n            }\n            if (this._uLightDir[i]) {\n                gl.uniform3fv(this._uLightDir[i], light.dir);\n            }\n        }\n    }\n    if (clipsState.clips.length > 0) {\n        const clips = scene._clipsState.clips;\n        let clipUniforms;\n        let uClipActive;\n        let clip;\n        let uClipPos;\n        let uClipDir;\n        for (var i = 0, len = this._uClips.length; i < len; i++) {\n            clipUniforms = this._uClips[i];\n            uClipActive = clipUniforms.active;\n            clip = clips[i];\n            if (uClipActive) {\n                gl.uniform1i(uClipActive, clip.active);\n            }\n            uClipPos = clipUniforms.pos;\n            if (uClipPos) {\n                gl.uniform3fv(clipUniforms.pos, clip.pos);\n            }\n            uClipDir = clipUniforms.dir;\n            if (uClipDir) {\n                gl.uniform3fv(clipUniforms.dir, clip.dir);\n            }\n        }\n    }\n    if (this._uGammaFactor) {\n        gl.uniform1f(this._uGammaFactor, scene.gammaFactor);\n    }\n};\n\nexport {EmphasisFillRenderer};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/emphasis/EmphasisFillRenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2216,
    "kind": "variable",
    "name": "ids",
    "memberof": "scene/mesh/emphasis/EmphasisFillRenderer.js",
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisFillRenderer.js~ids",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "scene/utils/Map.js~Map"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2217,
    "kind": "variable",
    "name": "ghostFillRenderers",
    "memberof": "scene/mesh/emphasis/EmphasisFillRenderer.js",
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisFillRenderer.js~ghostFillRenderers",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2218,
    "kind": "function",
    "name": "get",
    "memberof": "scene/mesh/emphasis/EmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisFillRenderer.js~get",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2219,
    "kind": "function",
    "name": "put",
    "memberof": "scene/mesh/emphasis/EmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisFillRenderer.js~put",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2220,
    "kind": "function",
    "name": "webglContextRestored",
    "memberof": "scene/mesh/emphasis/EmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisFillRenderer.js~webglContextRestored",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2221,
    "kind": "function",
    "name": "drawMesh",
    "memberof": "scene/mesh/emphasis/EmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisFillRenderer.js~drawMesh",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      },
      {
        "name": "mode",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2222,
    "kind": "function",
    "name": "_allocate",
    "memberof": "scene/mesh/emphasis/EmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisFillRenderer.js~_allocate",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2223,
    "kind": "function",
    "name": "_bindProgram",
    "memberof": "scene/mesh/emphasis/EmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisFillRenderer.js~_bindProgram",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisFillRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 219,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2224,
    "kind": "function",
    "name": "EmphasisFillRenderer",
    "memberof": "scene/mesh/emphasis/EmphasisFillRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisFillRenderer.js~EmphasisFillRenderer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisFillRenderer.js",
    "importStyle": "{EmphasisFillRenderer}",
    "description": "",
    "lineNumber": 15,
    "ignore": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2225,
    "kind": "file",
    "name": "scene/mesh/emphasis/EmphasisFillShaderSource.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n/**\n * @private\n */\nclass EmphasisFillShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const lightsState = scene._lightsState;\n    const normals = hasNormals(mesh);\n    const clipping = scene._clipsState.clips.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n    let i;\n    let len;\n    let light;\n    src.push(\"// EmphasisFillShaderSource vertex shader\");\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform vec4 colorize;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"uniform vec4   lightAmbient;\");\n    src.push(\"uniform vec4   fillColor;\");\n    if (normals) {\n        src.push(\"attribute vec3 normal;\");\n        src.push(\"uniform mat4 modelNormalMatrix;\");\n        src.push(\"uniform mat4 viewNormalMatrix;\");\n        for (i = 0, len = lightsState.lights.length; i < len; i++) {\n            light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            src.push(\"uniform vec4 lightColor\" + i + \";\");\n            if (light.type === \"dir\") {\n                src.push(\"uniform vec3 lightDir\" + i + \";\");\n            }\n            if (light.type === \"point\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            }\n            if (light.type === \"spot\") {\n                src.push(\"uniform vec3 lightPos\" + i + \";\");\n            }\n        }\n        if (quantizedGeometry) {\n            src.push(\"vec3 octDecode(vec2 oct) {\");\n            src.push(\"    vec3 v = vec3(oct.xy, 1.0 - abs(oct.x) - abs(oct.y));\");\n            src.push(\"    if (v.z < 0.0) {\");\n            src.push(\"        v.xy = (1.0 - abs(v.yx)) * vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);\");\n            src.push(\"    }\");\n            src.push(\"    return normalize(v);\");\n            src.push(\"}\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    if (normals) {\n        if (quantizedGeometry) {\n            src.push(\"vec4 localNormal = vec4(octDecode(normal.xy), 0.0); \");\n        } else {\n            src.push(\"vec4 localNormal = vec4(normal, 0.0); \");\n        }\n        src.push(\"mat4 modelNormalMatrix2 = modelNormalMatrix;\");\n        src.push(\"mat4 viewNormalMatrix2 = viewNormalMatrix;\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n        src.push(\"billboard(modelViewMatrix);\");\n        if (normals) {\n            src.push(\"mat4 modelViewNormalMatrix =  viewNormalMatrix2 * modelNormalMatrix2;\");\n            src.push(\"billboard(modelNormalMatrix2);\");\n            src.push(\"billboard(viewNormalMatrix2);\");\n            src.push(\"billboard(modelViewNormalMatrix);\");\n        }\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"vec4 viewPosition = modelViewMatrix * localPosition;\");\n    } else {\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"vec4 viewPosition  = viewMatrix2 * worldPosition; \");\n    }\n    if (normals) {\n        src.push(\"vec3 viewNormal = normalize((viewNormalMatrix2 * modelNormalMatrix2 * localNormal).xyz);\");\n    }\n    src.push(\"vec3 reflectedColor = vec3(0.0, 0.0, 0.0);\");\n    src.push(\"vec3 viewLightDir = vec3(0.0, 0.0, -1.0);\");\n    src.push(\"float lambertian = 1.0;\");\n    if (normals) {\n        for (i = 0, len = lightsState.lights.length; i < len; i++) {\n            light = lightsState.lights[i];\n            if (light.type === \"ambient\") {\n                continue;\n            }\n            if (light.type === \"dir\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightDir\" + i + \");\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix2 * vec4(lightDir\" + i + \", 0.0)).xyz);\");\n                }\n            } else if (light.type === \"point\") {\n                if (light.space === \"view\") {\n                    src.push(\"viewLightDir = normalize(lightPos\" + i + \" - viewPosition.xyz);\");\n                } else {\n                    src.push(\"viewLightDir = normalize((viewMatrix2 * vec4(lightPos\" + i + \", 0.0)).xyz);\");\n                }\n            } else {\n                continue;\n            }\n            src.push(\"lambertian = max(dot(-viewNormal, viewLightDir), 0.0);\");\n            src.push(\"reflectedColor += lambertian * (lightColor\" + i + \".rgb * lightColor\" + i + \".a);\");\n        }\n    }\n    // TODO: A blending mode for emphasis materials, to select add/multiply/mix\n    //src.push(\"vColor = vec4((mix(reflectedColor, fillColor.rgb, 0.7)), fillColor.a);\");\n    src.push(\"vColor = vec4(reflectedColor * fillColor.rgb, fillColor.a);\");\n    //src.push(\"vColor = vec4(reflectedColor + fillColor.rgb, fillColor.a);\");\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    if (mesh._geometry._state.primitiveName === \"points\") {\n        src.push(\"gl_PointSize = pointSize;\");\n    }\n    src.push(\"   gl_Position = projMatrix * viewPosition;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction hasNormals(mesh) {\n    const primitive = mesh._geometry._state.primitiveName;\n    if ((mesh._geometry._state.autoVertexNormals || mesh._geometry._state.normals) && (primitive === \"triangles\" || primitive === \"triangle-strip\" || primitive === \"triangle-fan\")) {\n        return true;\n    }\n    return false;\n}\n\nfunction buildFragment(mesh) {\n    const clipsState = mesh.scene._clipsState;\n    const gammaOutput = mesh.scene.gammaOutput;\n    const clipping = clipsState.clips.length > 0;\n    let i;\n    let len;\n    const src = [];\n    src.push(\"// Lambertian drawing fragment shader\");\n    src.push(\"precision lowp float;\");\n    if (gammaOutput) {\n        src.push(\"uniform float gammaFactor;\");\n        src.push(\"vec4 linearToGamma( in vec4 value, in float gammaFactor ) {\");\n        src.push(\"  return vec4( pow( value.xyz, vec3( 1.0 / gammaFactor ) ), value.w );\");\n        src.push(\"}\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n        src.push(\"uniform bool clippable;\");\n        for (i = 0, len = clipsState.clips.length; i < len; i++) {\n            src.push(\"uniform bool clipActive\" + i + \";\");\n            src.push(\"uniform vec3 clipPos\" + i + \";\");\n            src.push(\"uniform vec3 clipDir\" + i + \";\");\n        }\n    }\n    src.push(\"varying vec4 vColor;\");\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (i = 0, len = clipsState.clips.length; i < len; i++) {\n            src.push(\"if (clipActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-clipDir\" + i + \".xyz, vWorldPosition.xyz - clipPos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    if (mesh._geometry._state.primitiveName === \"points\") {\n        src.push(\"vec2 cxy = 2.0 * gl_PointCoord - 1.0;\");\n        src.push(\"float r = dot(cxy, cxy);\");\n        src.push(\"if (r > 1.0) {\");\n        src.push(\"   discard;\");\n        src.push(\"}\");\n    }\n    src.push(\"gl_FragColor = vColor;\");\n    if (gammaOutput) {\n        src.push(\"gl_FragColor = linearToGamma(vColor, gammaFactor);\");\n    } else {\n        src.push(\"gl_FragColor = vColor;\");\n    }\n    src.push(\"}\");\n    return src;\n}\n\nexport {EmphasisFillShaderSource};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/emphasis/EmphasisFillShaderSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2226,
    "kind": "function",
    "name": "buildVertex",
    "memberof": "scene/mesh/emphasis/EmphasisFillShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisFillShaderSource.js~buildVertex",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisFillShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2227,
    "kind": "function",
    "name": "hasNormals",
    "memberof": "scene/mesh/emphasis/EmphasisFillShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisFillShaderSource.js~hasNormals",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisFillShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 170,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2228,
    "kind": "function",
    "name": "buildFragment",
    "memberof": "scene/mesh/emphasis/EmphasisFillShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisFillShaderSource.js~buildFragment",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisFillShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2229,
    "kind": "class",
    "name": "EmphasisFillShaderSource",
    "memberof": "scene/mesh/emphasis/EmphasisFillShaderSource.js",
    "static": true,
    "longname": "scene/mesh/emphasis/EmphasisFillShaderSource.js~EmphasisFillShaderSource",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/emphasis/EmphasisFillShaderSource.js",
    "importStyle": "{EmphasisFillShaderSource}",
    "description": "",
    "lineNumber": 8,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 2230,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/mesh/emphasis/EmphasisFillShaderSource.js~EmphasisFillShaderSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/emphasis/EmphasisFillShaderSource.js~EmphasisFillShaderSource#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 2231,
    "kind": "member",
    "name": "vertex",
    "memberof": "scene/mesh/emphasis/EmphasisFillShaderSource.js~EmphasisFillShaderSource",
    "static": false,
    "longname": "scene/mesh/emphasis/EmphasisFillShaderSource.js~EmphasisFillShaderSource#vertex",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2232,
    "kind": "member",
    "name": "fragment",
    "memberof": "scene/mesh/emphasis/EmphasisFillShaderSource.js~EmphasisFillShaderSource",
    "static": false,
    "longname": "scene/mesh/emphasis/EmphasisFillShaderSource.js~EmphasisFillShaderSource#fragment",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2233,
    "kind": "file",
    "name": "scene/mesh/outline/OutlineRenderer.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\nimport {Map} from \"../../utils/Map.js\";\nimport {OutlineShaderSource} from \"./OutlineShaderSource.js\";\nimport {Program} from \"../../webgl/Program.js\";\nimport {stats} from \"../../stats.js\";\n\nconst ids = new Map({});\n\n/**\n * @private\n */\nconst OutlineRenderer = function (hash, mesh) {\n    this._init(hash, mesh);\n};\n\nconst outlineRenderers = {};\n\nOutlineRenderer.get = function (mesh) {\n    const hash = [\n        mesh.scene.canvas.canvas.id,\n        mesh.scene.gammaOutput ? \"go\" : \"\", // Gamma input not needed\n        mesh.scene._clipsState.getHash(),\n        mesh._geometry._state.hash,\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = outlineRenderers[hash];\n    if (!renderer) {\n        renderer = new OutlineRenderer(hash, mesh);\n        outlineRenderers[hash] = renderer;\n        stats.memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nOutlineRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        ids.removeItem(this.id);\n        this._program.destroy();\n        delete outlineRenderers[this._hash];\n        stats.memory.programs--;\n    }\n};\n\nOutlineRenderer.prototype._init = function (hash, mesh) {\n    this.id = ids.addItem({});\n    this._scene = mesh.scene;\n    this._hash = hash;\n    this._shaderSource = new OutlineShaderSource(mesh);\n    this._program = new Program(mesh.scene.canvas.gl, this._shaderSource);\n    this._useCount = 0;\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uClips = [];\n    const clips = mesh.scene._clipsState.clips;\n    for (let i = 0, len = clips.length; i < len; i++) {\n        this._uClips.push({\n            active: program.getLocation(\"clipActive\" + i),\n            pos: program.getLocation(\"clipPos\" + i),\n            dir: program.getLocation(\"clipDir\" + i)\n        });\n    }\n    this._uColor = program.getLocation(\"color\");\n    this._uWidth = program.getLocation(\"width\");\n    this._aPosition = program.getAttribute(\"position\");\n    this._aNormal = program.getAttribute(\"normal\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uGammaFactor = program.getLocation(\"gammaFactor\");\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n};\n\nOutlineRenderer.prototype._bindProgram = function (frame) {\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const program = this._program;\n    const clipsState = scene._clipsState;\n    program.bind();\n    frame.useProgram++;\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n    gl.uniformMatrix4fv(this._uViewMatrix, false, scene.viewTransform.matrix);\n    gl.uniformMatrix4fv(this._uProjMatrix, false, scene.projTransform.matrix);\n    if (clipsState.clips.length > 0) {\n        let clipUniforms;\n        let uClipActive;\n        let clip;\n        let uClipPos;\n        let uClipDir;\n        for (let i = 0, len = this._uClips.length; i < len; i++) {\n            clipUniforms = this._uClips[i];\n            uClipActive = clipUniforms.active;\n            clip = clipsState.clips[i];\n            if (uClipActive) {\n                gl.uniform1i(uClipActive, clip.active);\n            }\n            uClipPos = clipUniforms.pos;\n            if (uClipPos) {\n                gl.uniform3fv(clipUniforms.pos, clip.pos);\n            }\n            uClipDir = clipUniforms.dir;\n            if (uClipDir) {\n                gl.uniform3fv(clipUniforms.dir, clip.dir);\n            }\n        }\n    }\n    if (this._uGammaFactor) {\n        gl.uniform1f(this._uGammaFactor, scene.gammaFactor);\n    }\n};\n\nOutlineRenderer.prototype.drawMesh = function (frame, mesh) {\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const materialState = mesh.outlineMaterial;\n    const meshState = mesh._state;\n    const geometryState = mesh._geometry._state;\n    if (frame.lastProgramId !== this._program.id) {\n        frame.lastProgramId = this._program.id;\n        this._bindProgram(frame);\n    }\n    if (materialState.id !== this._lastMaterialId) {\n        if (this._uWidth) {\n            gl.uniform1f(this._uWidth, materialState.width);\n        }\n        if (this._uColor) {\n            const color = materialState.color;\n            const alpha = materialState.alpha;\n            gl.uniform4f(this._uColor, color[0], color[1], color[2], alpha);\n        }\n        this._lastMaterialId = materialState.id;\n    }\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n    if (this._uModelNormalMatrix) {\n        gl.uniformMatrix4fv(this._uModelNormalMatrix, gl.FALSE, mesh.worldNormalMatrix);\n    }\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, meshState.clippable);\n    }\n    if (geometryState.combineGeometry) {\n        const vertexBufs = mesh._geometry._getVertexBufs();\n        if (vertexBufs.id !== this._lastVertexBufsId) {\n            if (vertexBufs.positionsBuf && this._aPosition) {\n                this._aPosition.bindArrayBuffer(vertexBufs.positionsBuf, vertexBufs.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n                frame.bindArray++;\n            }\n            if (vertexBufs.normalsBuf && this._aNormal) {\n                this._aNormal.bindArrayBuffer(vertexBufs.normalsBuf, vertexBufs.compressGeometry ? gl.BYTE : gl.FLOAT);\n                frame.bindArray++;\n            }\n            this._lastVertexBufsId = vertexBufs.id;\n        }\n    }\n    // Bind VBOs\n    if (geometryState.id !== this._lastGeometryId) {\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        }\n        if (this._uUVDecodeMatrix) {\n            gl.uniformMatrix3fv(this._uUVDecodeMatrix, false, geometryState.uvDecodeMatrix);\n        }\n        if (geometryState.combineGeometry) { // VBOs were bound by the VertexBufs logic above\n            if (geometryState.indicesBufCombined) {\n                geometryState.indicesBufCombined.bind();\n                frame.bindArray++;\n            }\n        } else {\n            if (this._aPosition) {\n                this._aPosition.bindArrayBuffer(geometryState.positionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n                frame.bindArray++;\n            }\n            if (this._aNormal) {\n                this._aNormal.bindArrayBuffer(geometryState.normalsBuf, geometryState.compressGeometry ? gl.BYTE : gl.FLOAT);\n                frame.bindArray++;\n            }\n            if (geometryState.indicesBuf) {\n                geometryState.indicesBuf.bind();\n                frame.bindArray++;\n                // gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n                // frame.drawElements++;\n            } else if (geometryState.positions) {\n                // gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n                //  frame.drawArrays++;\n            }\n        }\n        this._lastGeometryId = geometryState.id;\n    }\n    // Draw (indices bound in prev step)\n    if (geometryState.combineGeometry) {\n        if (geometryState.indicesBufCombined) { // Geometry indices into portion of uber-array\n            gl.drawElements(geometryState.primitive, geometryState.indicesBufCombined.numItems, geometryState.indicesBufCombined.itemType, 0);\n            frame.drawElements++;\n        } else {\n            // TODO: drawArrays() with VertexBufs positions\n        }\n    } else {\n        if (geometryState.indicesBuf) {\n            gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n            frame.drawElements++;\n        } else if (geometryState.positions) {\n            gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n            frame.drawArrays++;\n        }\n    }\n};\n\nexport {OutlineRenderer};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/outline/OutlineRenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2234,
    "kind": "variable",
    "name": "ids",
    "memberof": "scene/mesh/outline/OutlineRenderer.js",
    "static": true,
    "longname": "scene/mesh/outline/OutlineRenderer.js~ids",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/outline/OutlineRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "scene/utils/Map.js~Map"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2235,
    "kind": "variable",
    "name": "outlineRenderers",
    "memberof": "scene/mesh/outline/OutlineRenderer.js",
    "static": true,
    "longname": "scene/mesh/outline/OutlineRenderer.js~outlineRenderers",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/outline/OutlineRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2236,
    "kind": "function",
    "name": "get",
    "memberof": "scene/mesh/outline/OutlineRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/outline/OutlineRenderer.js~get",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/outline/OutlineRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2237,
    "kind": "function",
    "name": "put",
    "memberof": "scene/mesh/outline/OutlineRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/outline/OutlineRenderer.js~put",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/outline/OutlineRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2238,
    "kind": "function",
    "name": "_init",
    "memberof": "scene/mesh/outline/OutlineRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/outline/OutlineRenderer.js~_init",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/outline/OutlineRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2239,
    "kind": "function",
    "name": "_bindProgram",
    "memberof": "scene/mesh/outline/OutlineRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/outline/OutlineRenderer.js~_bindProgram",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/outline/OutlineRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2240,
    "kind": "function",
    "name": "drawMesh",
    "memberof": "scene/mesh/outline/OutlineRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/outline/OutlineRenderer.js~drawMesh",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/outline/OutlineRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2241,
    "kind": "function",
    "name": "OutlineRenderer",
    "memberof": "scene/mesh/outline/OutlineRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/outline/OutlineRenderer.js~OutlineRenderer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/outline/OutlineRenderer.js",
    "importStyle": "{OutlineRenderer}",
    "description": "",
    "lineNumber": 15,
    "ignore": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2242,
    "kind": "file",
    "name": "scene/mesh/outline/OutlineShaderSource.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n/**\n * @private\n */\nclass OutlineShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction hasNormals(mesh) {\n    const primitive = mesh._geometry._state.primitiveName;\n    if ((mesh._geometry._state.autoVertexNormals || mesh._geometry._state.normals) && (primitive === \"triangles\" || primitive === \"triangle-strip\" || primitive === \"triangle-fan\")) {\n        return true;\n    }\n    return false;\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._clipsState.clips.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const normals = hasNormals(mesh);\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n    src.push(\"// Outline effect vertex shader\");\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"uniform float width;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    if (normals) {\n        src.push(\"attribute vec3 normal;\");\n        if (quantizedGeometry) {\n            src.push(\"vec3 octDecode(vec2 oct) {\");\n            src.push(\"    vec3 v = vec3(oct.xy, 1.0 - abs(oct.x) - abs(oct.y));\");\n            src.push(\"    if (v.z < 0.0) {\");\n            src.push(\"        v.xy = (1.0 - abs(v.yx)) * vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0);\");\n            src.push(\"    }\");\n            src.push(\"    return normalize(v);\");\n            src.push(\"}\");\n        }\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    if (normals) {\n        if (quantizedGeometry) {\n            src.push(\"vec3 localNormal = octDecode(normal.xy); \");\n        } else {\n            src.push(\"vec3 localNormal = normal; \");\n        }\n        //src.push(\"  localPosition.xyz += (normalize(normal) * (width * 0.0005 * (projPos.z/1.0)));\");\n        src.push(\"  localPosition.xyz += (normalize(normal) * (width * 0.0005));\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n        src.push(\"billboard(modelViewMatrix);\");\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"vec4 viewPosition = modelViewMatrix * localPosition;\");\n    } else {\n        src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n        src.push(\"vec4 viewPosition  = viewMatrix2 * worldPosition; \");\n    }\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    src.push(\"   gl_Position = projMatrix * viewPosition;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n    const scene = mesh.scene;\n    const clipsState = scene._clipsState;\n    const clipping = clipsState.clips.length > 0;\n    const src = [];\n    src.push(\"precision lowp float;\");\n    src.push(\"uniform vec4  color;\");\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"uniform bool clipActive\" + i + \";\");\n            src.push(\"uniform vec3 clipPos\" + i + \";\");\n            src.push(\"uniform vec3 clipDir\" + i + \";\");\n        }\n    }\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"if (clipActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-clipDir\" + i + \".xyz, vWorldPosition.xyz - clipPos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    src.push(\"   gl_FragColor = color;\");\n    src.push(\"}\");\n    return src;\n}\n\nexport {OutlineShaderSource};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/outline/OutlineShaderSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2243,
    "kind": "function",
    "name": "hasNormals",
    "memberof": "scene/mesh/outline/OutlineShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/outline/OutlineShaderSource.js~hasNormals",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/outline/OutlineShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2244,
    "kind": "function",
    "name": "buildVertex",
    "memberof": "scene/mesh/outline/OutlineShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/outline/OutlineShaderSource.js~buildVertex",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/outline/OutlineShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2245,
    "kind": "function",
    "name": "buildFragment",
    "memberof": "scene/mesh/outline/OutlineShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/outline/OutlineShaderSource.js~buildFragment",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/outline/OutlineShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 109,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2246,
    "kind": "class",
    "name": "OutlineShaderSource",
    "memberof": "scene/mesh/outline/OutlineShaderSource.js",
    "static": true,
    "longname": "scene/mesh/outline/OutlineShaderSource.js~OutlineShaderSource",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/outline/OutlineShaderSource.js",
    "importStyle": "{OutlineShaderSource}",
    "description": "",
    "lineNumber": 8,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 2247,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/mesh/outline/OutlineShaderSource.js~OutlineShaderSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/outline/OutlineShaderSource.js~OutlineShaderSource#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 2248,
    "kind": "member",
    "name": "vertex",
    "memberof": "scene/mesh/outline/OutlineShaderSource.js~OutlineShaderSource",
    "static": false,
    "longname": "scene/mesh/outline/OutlineShaderSource.js~OutlineShaderSource#vertex",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2249,
    "kind": "member",
    "name": "fragment",
    "memberof": "scene/mesh/outline/OutlineShaderSource.js~OutlineShaderSource",
    "static": false,
    "longname": "scene/mesh/outline/OutlineShaderSource.js~OutlineShaderSource#fragment",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2250,
    "kind": "file",
    "name": "scene/mesh/pick/PickMeshRenderer.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\nimport {PickMeshShaderSource} from \"./PickMeshShaderSource.js\";\nimport {Program} from \"../../webgl/Program.js\";\nimport {stats} from \"../../stats.js\";\n\n// No ID, because there is exactly one PickMeshRenderer per scene\n\n/**\n * @private\n */\nconst PickMeshRenderer = function (hash, mesh) {\n    this._hash = hash;\n    this._shaderSource = new PickMeshShaderSource(mesh);\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._allocate(mesh);\n};\n\nconst renderers = {};\n\nPickMeshRenderer.get = function (mesh) {\n    const hash = [\n        mesh.scene.canvas.canvas.id,\n        mesh.scene._clipsState.getHash(),\n        mesh._geometry._state.hash,\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new PickMeshRenderer(hash, mesh);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        stats.memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nPickMeshRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        stats.memory.programs--;\n    }\n};\n\nPickMeshRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nPickMeshRenderer.prototype.drawMesh = function (frame, mesh) {\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const materialState = mesh._material._state;\n    const geometryState = mesh._geometry._state;\n    if (frame.lastProgramId !== this._program.id) {\n        frame.lastProgramId = this._program.id;\n        this._bindProgram(frame);\n    }\n    if (materialState.id !== this._lastMaterialId) {\n        const backfaces = materialState.backfaces;\n        if (frame.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frame.backfaces = backfaces;\n        }\n        const frontface = materialState.frontface;\n        if (frame.frontface !== frontface) {\n            if (frontface) {\n                gl.frontFace(gl.CCW);\n            } else {\n                gl.frontFace(gl.CW);\n            }\n            frame.frontface = frontface;\n        }\n        if (frame.lineWidth !== materialState.lineWidth) {\n            gl.lineWidth(materialState.lineWidth);\n            frame.lineWidth = materialState.lineWidth;\n        }\n        if (this._uPointSize) {\n            gl.uniform1i(this._uPointSize, materialState.pointSize);\n        }\n        this._lastMaterialId = materialState.id;\n    }\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n    if (geometryState.combineGeometry) {\n        const vertexBufs = mesh._geometry._getVertexBufs();\n        if (vertexBufs.id !== this._lastVertexBufsId) {\n            if (vertexBufs.positionsBuf && this._aPosition) {\n                this._aPosition.bindArrayBuffer(vertexBufs.positionsBuf, vertexBufs.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n                frame.bindArray++;\n            }\n            this._lastVertexBufsId = vertexBufs.id;\n        }\n    }\n    // Mesh state\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, mesh._state.clippable);\n    }\n    // Bind VBOs\n    if (geometryState.id !== this._lastGeometryId) {\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        }\n        if (geometryState.combineGeometry) { // VBOs were bound by the preceding VertexBufs chunk\n            if (geometryState.indicesBufCombined) {\n                geometryState.indicesBufCombined.bind();\n                frame.bindArray++;\n            }\n        } else {\n            if (this._aPosition) {\n                this._aPosition.bindArrayBuffer(geometryState.positionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n                frame.bindArray++;\n            }\n            if (geometryState.indicesBuf) {\n                geometryState.indicesBuf.bind();\n                frame.bindArray++;\n            }\n        }\n        this._lastGeometryId = geometryState.id;\n    }\n    // Mesh-indexed color\n    var pickID = mesh._state.pickID;\n    const a = pickID >> 24 & 0xFF;\n    const b = pickID >> 16 & 0xFF;\n    const g = pickID >> 8 & 0xFF;\n    const r = pickID & 0xFF;\n    gl.uniform4f(this._uPickColor, r / 255, g / 255, b / 255, a / 255);\n    // Draw (indices bound in prev step)\n    if (geometryState.combineGeometry) {\n        if (geometryState.indicesBufCombined) { // Geometry indices into portion of uber-array\n            gl.drawElements(geometryState.primitive, geometryState.indicesBufCombined.numItems, geometryState.indicesBufCombined.itemType, 0);\n            frame.drawElements++;\n        } else {\n            // TODO: drawArrays() with VertexBufs positions\n        }\n    } else {\n        if (geometryState.indicesBuf) {\n            gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n            frame.drawElements++;\n        } else if (geometryState.positions) {\n            gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n        }\n    }\n};\n\nPickMeshRenderer.prototype._allocate = function (mesh) {\n    const gl = mesh.scene.canvas.gl;\n    this._program = new Program(gl, this._shaderSource);\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uClips = [];\n    const clips = mesh.scene._clipsState.clips;\n    for (let i = 0, len = clips.length; i < len; i++) {\n        this._uClips.push({\n            active: program.getLocation(\"clipActive\" + i),\n            pos: program.getLocation(\"clipPos\" + i),\n            dir: program.getLocation(\"clipDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._uPickColor = program.getLocation(\"pickColor\");\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n};\n\nPickMeshRenderer.prototype._bindProgram = function (frame) {\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const clipsState = scene._clipsState;\n    const camera = scene.camera;\n    const cameraState = camera._state;\n    this._program.bind();\n    frame.useProgram++;\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n    gl.uniformMatrix4fv(this._uViewMatrix, false, frame.pickViewMatrix || cameraState.matrix);\n    gl.uniformMatrix4fv(this._uProjMatrix, false, frame.pickProjMatrix || camera.project._state.matrix);\n    if (clipsState.clips.length > 0) {\n        let clipUniforms;\n        let uClipActive;\n        let clip;\n        let uClipPos;\n        let uClipDir;\n        for (let i = 0, len = this._uClips.length; i < len; i++) {\n            clipUniforms = this._uClips[i];\n            uClipActive = clipUniforms.active;\n            clip = clipsState.clips[i];\n            if (uClipActive) {\n                gl.uniform1i(uClipActive, clip.active);\n            }\n            uClipPos = clipUniforms.pos;\n            if (uClipPos) {\n                gl.uniform3fv(clipUniforms.pos, clip.pos);\n            }\n            uClipDir = clipUniforms.dir;\n            if (uClipDir) {\n                gl.uniform3fv(clipUniforms.dir, clip.dir);\n            }\n        }\n    }\n};\n\nexport {PickMeshRenderer};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/pick/PickMeshRenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2251,
    "kind": "variable",
    "name": "renderers",
    "memberof": "scene/mesh/pick/PickMeshRenderer.js",
    "static": true,
    "longname": "scene/mesh/pick/PickMeshRenderer.js~renderers",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickMeshRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2252,
    "kind": "function",
    "name": "get",
    "memberof": "scene/mesh/pick/PickMeshRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickMeshRenderer.js~get",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickMeshRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2253,
    "kind": "function",
    "name": "put",
    "memberof": "scene/mesh/pick/PickMeshRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickMeshRenderer.js~put",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickMeshRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2254,
    "kind": "function",
    "name": "webglContextRestored",
    "memberof": "scene/mesh/pick/PickMeshRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickMeshRenderer.js~webglContextRestored",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickMeshRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2255,
    "kind": "function",
    "name": "drawMesh",
    "memberof": "scene/mesh/pick/PickMeshRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickMeshRenderer.js~drawMesh",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickMeshRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2256,
    "kind": "function",
    "name": "_allocate",
    "memberof": "scene/mesh/pick/PickMeshRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickMeshRenderer.js~_allocate",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickMeshRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 161,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2257,
    "kind": "function",
    "name": "_bindProgram",
    "memberof": "scene/mesh/pick/PickMeshRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickMeshRenderer.js~_bindProgram",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickMeshRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2258,
    "kind": "function",
    "name": "PickMeshRenderer",
    "memberof": "scene/mesh/pick/PickMeshRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickMeshRenderer.js~PickMeshRenderer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickMeshRenderer.js",
    "importStyle": "{PickMeshRenderer}",
    "description": "",
    "lineNumber": 14,
    "ignore": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2259,
    "kind": "file",
    "name": "scene/mesh/pick/PickMeshShaderSource.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n/**\n * @private\n */\nclass PickMeshShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._clipsState.clips.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n    src.push(\"// Mesh picking vertex shader\");\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 viewNormalMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    src.push(\"varying vec4 vViewPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n    }\n    src.push(\"   vec4 worldPosition = modelMatrix2 * localPosition;\");\n    src.push(\"   vec4 viewPosition = viewMatrix2 * worldPosition;\");\n    if (clipping) {\n        src.push(\"   vWorldPosition = worldPosition;\");\n    }\n    src.push(\"   gl_Position = projMatrix * viewPosition;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n    const scene = mesh.scene;\n    const clipsState = scene._clipsState;\n    const clipping = clipsState.clips.length > 0;\n    const src = [];\n    src.push(\"// Mesh picking fragment shader\");\n    src.push(\"precision lowp float;\");\n    src.push(\"uniform vec4 pickColor;\");\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"uniform bool clipActive\" + i + \";\");\n            src.push(\"uniform vec3 clipPos\" + i + \";\");\n            src.push(\"uniform vec3 clipDir\" + i + \";\");\n        }\n    }\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"if (clipActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-clipDir\" + i + \".xyz, vWorldPosition.xyz - clipPos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    src.push(\"   gl_FragColor = pickColor; \");\n    src.push(\"}\");\n    return src;\n}\n\nexport {PickMeshShaderSource};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/pick/PickMeshShaderSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2260,
    "kind": "function",
    "name": "buildVertex",
    "memberof": "scene/mesh/pick/PickMeshShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickMeshShaderSource.js~buildVertex",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickMeshShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2261,
    "kind": "function",
    "name": "buildFragment",
    "memberof": "scene/mesh/pick/PickMeshShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickMeshShaderSource.js~buildFragment",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickMeshShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2262,
    "kind": "class",
    "name": "PickMeshShaderSource",
    "memberof": "scene/mesh/pick/PickMeshShaderSource.js",
    "static": true,
    "longname": "scene/mesh/pick/PickMeshShaderSource.js~PickMeshShaderSource",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickMeshShaderSource.js",
    "importStyle": "{PickMeshShaderSource}",
    "description": "",
    "lineNumber": 8,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 2263,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/mesh/pick/PickMeshShaderSource.js~PickMeshShaderSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/pick/PickMeshShaderSource.js~PickMeshShaderSource#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 2264,
    "kind": "member",
    "name": "vertex",
    "memberof": "scene/mesh/pick/PickMeshShaderSource.js~PickMeshShaderSource",
    "static": false,
    "longname": "scene/mesh/pick/PickMeshShaderSource.js~PickMeshShaderSource#vertex",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2265,
    "kind": "member",
    "name": "fragment",
    "memberof": "scene/mesh/pick/PickMeshShaderSource.js~PickMeshShaderSource",
    "static": false,
    "longname": "scene/mesh/pick/PickMeshShaderSource.js~PickMeshShaderSource#fragment",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2266,
    "kind": "file",
    "name": "scene/mesh/pick/PickTriangleRenderer.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\nimport {PickTriangleShaderSource} from \"./PickTriangleShaderSource.js\";\nimport {Program} from \"../../webgl/Program.js\";\nimport {stats} from \"../../stats.js\";\n\n/**\n * @private\n */\nconst PickTriangleRenderer = function (hash, mesh) {\n    this._hash = hash;\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._shaderSource = new PickTriangleShaderSource(mesh);\n    this._allocate(mesh);\n};\n\nconst renderers = {};\n\nPickTriangleRenderer.get = function (mesh) {\n    const hash = [\n        mesh.scene.canvas.canvas.id,\n        mesh.scene._clipsState.getHash(),\n        mesh._geometry._state.compressGeometry ? \"cp\" : \"\",\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new PickTriangleRenderer(hash, mesh);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        stats.memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nPickTriangleRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        stats.memory.programs--;\n    }\n};\n\nPickTriangleRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nPickTriangleRenderer.prototype.drawMesh = function (frame, mesh) {\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const clipsState = scene._clipsState;\n    const materialState = mesh._material._state;\n    const meshState = mesh._state;\n    const geometry = mesh._geometry;\n    const geometryState = mesh._geometry._state;\n    const backfaces = materialState.backfaces;\n    const frontface = materialState.frontface;\n    const positionsBuf = geometry._getPickTrianglePositions();\n    const pickColorsBuf = geometry._getPickTriangleColors();\n    const camera = scene.camera;\n    const cameraState = camera._state;\n    this._program.bind();\n    frame.useProgram++;\n    gl.uniformMatrix4fv(this._uViewMatrix, false, frame.pickViewMatrix || cameraState.matrix);\n    gl.uniformMatrix4fv(this._uProjMatrix, false, frame.pickProjMatrix || camera.project._state.matrix);\n    if (clipsState.clips.length > 0) {\n        const clips = clipsState.clips;\n        let clipUniforms;\n        let uClipActive;\n        let clip;\n        let uClipPos;\n        let uClipDir;\n        for (let i = 0, len = this._uClips.length; i < len; i++) {\n            clipUniforms = this._uClips[i];\n            uClipActive = clipUniforms.active;\n            clip = clips[i];\n            if (uClipActive) {\n                gl.uniform1i(uClipActive, clip.active);\n            }\n            uClipPos = clipUniforms.pos;\n            if (uClipPos) {\n                gl.uniform3fv(clipUniforms.pos, clip.pos);\n            }\n            uClipDir = clipUniforms.dir;\n            if (uClipDir) {\n                gl.uniform3fv(clipUniforms.dir, clip.dir);\n            }\n        }\n    }\n    if (frame.backfaces !== backfaces) {\n        if (backfaces) {\n            gl.disable(gl.CULL_FACE);\n        } else {\n            gl.enable(gl.CULL_FACE);\n        }\n        frame.backfaces = backfaces;\n    }\n    if (frame.frontface !== frontface) {\n        if (frontface) {\n            gl.frontFace(gl.CCW);\n        } else {\n            gl.frontFace(gl.CW);\n        }\n        frame.frontface = frontface;\n    }\n    this._lastMaterialId = materialState.id;\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, mesh._state.clippable);\n    }\n    if (this._uPositionsDecodeMatrix) {\n        gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        this._aPosition.bindArrayBuffer(positionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n    } else {\n        this._aPosition.bindArrayBuffer(positionsBuf);\n    }\n    pickColorsBuf.bind();\n    gl.enableVertexAttribArray(this._aColor.location);\n    gl.vertexAttribPointer(this._aColor.location, pickColorsBuf.itemSize, pickColorsBuf.itemType, true, 0, 0); // Normalize\n    gl.drawArrays(geometryState.primitive, 0, positionsBuf.numItems / 3);\n};\n\nPickTriangleRenderer.prototype._allocate = function (mesh) {\n    const gl = mesh.scene.canvas.gl;\n    this._program = new Program(gl, this._shaderSource);\n    this._useCount = 0;\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uClips = [];\n    const clips = mesh.scene._clipsState.clips;\n    for (let i = 0, len = clips.length; i < len; i++) {\n        this._uClips.push({\n            active: program.getLocation(\"clipActive\" + i),\n            pos: program.getLocation(\"clipPos\" + i),\n            dir: program.getLocation(\"clipDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._aColor = program.getAttribute(\"color\");\n    this._uClippable = program.getLocation(\"clippable\");\n};\n\nexport {PickTriangleRenderer};\n\n\n\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/pick/PickTriangleRenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2267,
    "kind": "variable",
    "name": "renderers",
    "memberof": "scene/mesh/pick/PickTriangleRenderer.js",
    "static": true,
    "longname": "scene/mesh/pick/PickTriangleRenderer.js~renderers",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickTriangleRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2268,
    "kind": "function",
    "name": "get",
    "memberof": "scene/mesh/pick/PickTriangleRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickTriangleRenderer.js~get",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickTriangleRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2269,
    "kind": "function",
    "name": "put",
    "memberof": "scene/mesh/pick/PickTriangleRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickTriangleRenderer.js~put",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickTriangleRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2270,
    "kind": "function",
    "name": "webglContextRestored",
    "memberof": "scene/mesh/pick/PickTriangleRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickTriangleRenderer.js~webglContextRestored",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickTriangleRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2271,
    "kind": "function",
    "name": "drawMesh",
    "memberof": "scene/mesh/pick/PickTriangleRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickTriangleRenderer.js~drawMesh",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickTriangleRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2272,
    "kind": "function",
    "name": "_allocate",
    "memberof": "scene/mesh/pick/PickTriangleRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickTriangleRenderer.js~_allocate",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickTriangleRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2273,
    "kind": "function",
    "name": "PickTriangleRenderer",
    "memberof": "scene/mesh/pick/PickTriangleRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickTriangleRenderer.js~PickTriangleRenderer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickTriangleRenderer.js",
    "importStyle": "{PickTriangleRenderer}",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2274,
    "kind": "file",
    "name": "scene/mesh/pick/PickTriangleShaderSource.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n/**\n * @private\n */\nclass PickTriangleShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._clipsState.clips.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n    src.push(\"// Surface picking vertex shader\");\n    src.push(\"attribute vec3 position;\");\n    src.push(\"attribute vec4 color;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    src.push(\"   vec4 worldPosition = modelMatrix * localPosition; \");\n    src.push(\"   vec4 viewPosition = viewMatrix * worldPosition;\");\n    if (clipping) {\n        src.push(\"   vWorldPosition = worldPosition;\");\n    }\n    src.push(\"   vColor = color;\");\n    src.push(\"   gl_Position = projMatrix * viewPosition;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n    const scene = mesh.scene;\n    const clipsState = scene._clipsState;\n    const clipping = clipsState.clips.length > 0;\n    const src = [];\n    src.push(\"// Surface picking fragment shader\");\n    src.push(\"precision lowp float;\");\n    src.push(\"varying vec4 vColor;\");\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"uniform bool clipActive\" + i + \";\");\n            src.push(\"uniform vec3 clipPos\" + i + \";\");\n            src.push(\"uniform vec3 clipDir\" + i + \";\");\n        }\n    }\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"if (clipActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-clipDir\" + i + \".xyz, vWorldPosition.xyz - clipPos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    src.push(\"   gl_FragColor = vColor;\");\n    src.push(\"}\");\n    return src;\n}\n\nexport {PickTriangleShaderSource};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/pick/PickTriangleShaderSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2275,
    "kind": "function",
    "name": "buildVertex",
    "memberof": "scene/mesh/pick/PickTriangleShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickTriangleShaderSource.js~buildVertex",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickTriangleShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2276,
    "kind": "function",
    "name": "buildFragment",
    "memberof": "scene/mesh/pick/PickTriangleShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickTriangleShaderSource.js~buildFragment",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickTriangleShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2277,
    "kind": "class",
    "name": "PickTriangleShaderSource",
    "memberof": "scene/mesh/pick/PickTriangleShaderSource.js",
    "static": true,
    "longname": "scene/mesh/pick/PickTriangleShaderSource.js~PickTriangleShaderSource",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickTriangleShaderSource.js",
    "importStyle": "{PickTriangleShaderSource}",
    "description": "",
    "lineNumber": 8,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 2278,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/mesh/pick/PickTriangleShaderSource.js~PickTriangleShaderSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/pick/PickTriangleShaderSource.js~PickTriangleShaderSource#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 2279,
    "kind": "member",
    "name": "vertex",
    "memberof": "scene/mesh/pick/PickTriangleShaderSource.js~PickTriangleShaderSource",
    "static": false,
    "longname": "scene/mesh/pick/PickTriangleShaderSource.js~PickTriangleShaderSource#vertex",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2280,
    "kind": "member",
    "name": "fragment",
    "memberof": "scene/mesh/pick/PickTriangleShaderSource.js~PickTriangleShaderSource",
    "static": false,
    "longname": "scene/mesh/pick/PickTriangleShaderSource.js~PickTriangleShaderSource#fragment",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2281,
    "kind": "file",
    "name": "scene/mesh/pick/PickVertexRenderer.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\nimport {PickVertexShaderSource} from \"./PickVertexShaderSource.js\";\nimport {Program} from \"../../webgl/Program.js\";\nimport {stats} from \"../../stats.js\";\n\n/**\n * @private\n */\nconst PickVertexRenderer = function (hash, mesh) {\n    const gl = mesh.scene.canvas.gl;\n    this._hash = hash;\n    this._shaderSource = new PickVertexShaderSource(mesh);\n    this._program = new Program(gl, this._shaderSource);\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uClips = [];\n    const clips = mesh.scene._clipsState.clips;\n    for (let i = 0, len = clips.length; i < len; i++) {\n        this._uClips.push({\n            active: program.getLocation(\"clipActive\" + i),\n            pos: program.getLocation(\"clipPos\" + i),\n            dir: program.getLocation(\"clipDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._aColor = program.getAttribute(\"color\");\n    this._uClippable = program.getLocation(\"clippable\");\n};\n\nconst renderers = {};\n\nPickVertexRenderer.get = function (scene, mesh) {\n    const hash = [\n        mesh.scene.canvas.canvas.id,\n        mesh.scene._clipsState.getHash(),\n        mesh._geometry._state.compressGeometry ? \"cp\" : \"\",\n        mesh._state.hash\n    ].join(\";\");\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new PickVertexRenderer(hash, mesh);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        stats.memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nPickVertexRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        stats.memory.programs--;\n    }\n};\n\nPickVertexRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\nPickVertexRenderer.prototype._bindProgram = function (frame) {\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const clipsState = scene._clipsState;\n    const camera = scene.camera;\n    const cameraState = camera._state;\n    this._program.bind();\n    frame.useProgram++;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n    gl.uniformMatrix4fv(this._uViewMatrix, false, cameraState.matrix);\n    gl.uniformMatrix4fv(this._uProjMatrix, false, camera.project._state.matrix);\n    if (clipsState.clips.length > 0) {\n        const clips = clipsState.clips;\n        let clipUniforms;\n        let uClipActive;\n        let clip;\n        let uClipPos;\n        let uClipDir;\n        for (let i = 0, len = this._uClips.length; i < len; i++) {\n            clipUniforms = this._uClips[i];\n            uClipActive = clipUniforms.active;\n            clip = clips[i];\n            if (uClipActive) {\n                gl.uniform1i(uClipActive, clip.active);\n            }\n            uClipPos = clipUniforms.pos;\n            if (uClipPos) {\n                gl.uniform3fv(clipUniforms.pos, clip.pos);\n            }\n            uClipDir = clipUniforms.dir;\n            if (uClipDir) {\n                gl.uniform3fv(clipUniforms.dir, clip.dir);\n            }\n        }\n    }\n};\n\nPickVertexRenderer.prototype.drawMesh = function (frame, mesh) {\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const geometryState = mesh._geometry._state;\n    if (frame.lastProgramId !== this._program.id) {\n        frame.lastProgramId = this._program.id;\n        this._bindProgram(frame);\n    }\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, mesh._state.clippable);\n    }\n    // Bind VBOs\n    if (geometryState.id !== this._lastGeometryId) {\n        const pickPositionsBuf = geometryState.getVertexPickPositions();\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n            this._aPosition.bindArrayBuffer(pickPositionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n        } else {\n            this._aPosition.bindArrayBuffer(pickPositionsBuf);\n        }\n        const pickColorsBuf = geometryState.getVertexPickColors();\n        pickColorsBuf.bind();\n        gl.enableVertexAttribArray(this._aColor.location);\n        this._gl.vertexAttribPointer(this._aColor.location, pickColorsBuf.itemSize, pickColorsBuf.itemType, true, 0, 0); // Normalize\n        this._lastGeometryId = geometryState.id;\n    }\n    // TODO: load point size\n    // FIXME make points\n    gl.drawArrays(geometryState.primitive, 0, positions.numItems / 3);\n};\n\nexport{PickVertexRenderer};\n\n\n\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/pick/PickVertexRenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2282,
    "kind": "variable",
    "name": "renderers",
    "memberof": "scene/mesh/pick/PickVertexRenderer.js",
    "static": true,
    "longname": "scene/mesh/pick/PickVertexRenderer.js~renderers",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickVertexRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2283,
    "kind": "function",
    "name": "get",
    "memberof": "scene/mesh/pick/PickVertexRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickVertexRenderer.js~get",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickVertexRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "params": [
      {
        "name": "scene",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2284,
    "kind": "function",
    "name": "put",
    "memberof": "scene/mesh/pick/PickVertexRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickVertexRenderer.js~put",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickVertexRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 65,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2285,
    "kind": "function",
    "name": "webglContextRestored",
    "memberof": "scene/mesh/pick/PickVertexRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickVertexRenderer.js~webglContextRestored",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickVertexRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2286,
    "kind": "function",
    "name": "_bindProgram",
    "memberof": "scene/mesh/pick/PickVertexRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickVertexRenderer.js~_bindProgram",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickVertexRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 79,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2287,
    "kind": "function",
    "name": "drawMesh",
    "memberof": "scene/mesh/pick/PickVertexRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickVertexRenderer.js~drawMesh",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickVertexRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 117,
    "undocument": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2288,
    "kind": "function",
    "name": "PickVertexRenderer",
    "memberof": "scene/mesh/pick/PickVertexRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickVertexRenderer.js~PickVertexRenderer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickVertexRenderer.js",
    "importStyle": "{PickVertexRenderer}",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2289,
    "kind": "file",
    "name": "scene/mesh/pick/PickVertexShaderSource.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n/**\n * @private\n */\nclass PickVertexShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._clipsState.clips.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n    src.push(\"// Surface picking vertex shader\");\n    src.push(\"attribute vec3 position;\");\n    src.push(\"attribute vec4 color;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    src.push(\"varying vec4 vColor;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    src.push(\"   vec4 worldPosition = modelMatrix * localPosition; \");\n    src.push(\"   vec4 viewPosition = viewMatrix * worldPosition;\");\n    if (clipping) {\n        src.push(\"   vWorldPosition = worldPosition;\");\n    }\n    src.push(\"   vColor = color;\");\n    src.push(\"   gl_Position = projMatrix * viewPosition;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n    const scene = mesh.scene;\n    const clipsState = scene._clipsState;\n    const clipping = clipsState.clips.length > 0;\n    const src = [];\n    src.push(\"// Surface picking fragment shader\");\n    src.push(\"precision lowp float;\");\n    src.push(\"varying vec4 vColor;\");\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"uniform bool clipActive\" + i + \";\");\n            src.push(\"uniform vec3 clipPos\" + i + \";\");\n            src.push(\"uniform vec3 clipDir\" + i + \";\");\n        }\n    }\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"if (clipActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-clipDir\" + i + \".xyz, vWorldPosition.xyz - clipPos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n\n    src.push(\"   gl_FragColor = vColor;\");\n    src.push(\"}\");\n    return src;\n}\n\nexport{PickVertexShaderSource};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/pick/PickVertexShaderSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2290,
    "kind": "function",
    "name": "buildVertex",
    "memberof": "scene/mesh/pick/PickVertexShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickVertexShaderSource.js~buildVertex",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickVertexShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2291,
    "kind": "function",
    "name": "buildFragment",
    "memberof": "scene/mesh/pick/PickVertexShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/pick/PickVertexShaderSource.js~buildFragment",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickVertexShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2292,
    "kind": "class",
    "name": "PickVertexShaderSource",
    "memberof": "scene/mesh/pick/PickVertexShaderSource.js",
    "static": true,
    "longname": "scene/mesh/pick/PickVertexShaderSource.js~PickVertexShaderSource",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/pick/PickVertexShaderSource.js",
    "importStyle": "{PickVertexShaderSource}",
    "description": "",
    "lineNumber": 8,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 2293,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/mesh/pick/PickVertexShaderSource.js~PickVertexShaderSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/pick/PickVertexShaderSource.js~PickVertexShaderSource#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 2294,
    "kind": "member",
    "name": "vertex",
    "memberof": "scene/mesh/pick/PickVertexShaderSource.js~PickVertexShaderSource",
    "static": false,
    "longname": "scene/mesh/pick/PickVertexShaderSource.js~PickVertexShaderSource#vertex",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2295,
    "kind": "member",
    "name": "fragment",
    "memberof": "scene/mesh/pick/PickVertexShaderSource.js~PickVertexShaderSource",
    "static": false,
    "longname": "scene/mesh/pick/PickVertexShaderSource.js~PickVertexShaderSource#fragment",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2296,
    "kind": "file",
    "name": "scene/mesh/shadow/ShadowRenderer.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\nimport {ShadowShaderSource} from \"./ShadowShaderSource.js\";\nimport {Program} from \"../../webgl/Program.js\";\nimport {stats} from \"../../stats.js\";\n\n/**\n * @private\n */\nconst ShadowRenderer = function (hash, mesh) {\n    this._hash = hash;\n    this._shaderSource = new ShadowShaderSource(mesh);\n    this._scene = mesh.scene;\n    this._useCount = 0;\n    this._allocate(mesh);\n};\n\nconst renderers = {};\n\nShadowRenderer.get = function (mesh) {\n    const scene = mesh.scene;\n    const hash = [\n        scene.canvas.canvas.id,\n        scene._clipsState.getHash(),\n        mesh._geometry._state.hash,\n        mesh._state.hash].join(\";\");\n    let renderer = renderers[hash];\n    if (!renderer) {\n        renderer = new ShadowRenderer(hash, mesh);\n        if (renderer.errors) {\n            console.log(renderer.errors.join(\"\\n\"));\n            return null;\n        }\n        renderers[hash] = renderer;\n        stats.memory.programs++;\n    }\n    renderer._useCount++;\n    return renderer;\n};\n\nShadowRenderer.prototype.put = function () {\n    if (--this._useCount === 0) {\n        if (this._program) {\n            this._program.destroy();\n        }\n        delete renderers[this._hash];\n        stats.memory.programs--;\n    }\n};\n\nShadowRenderer.prototype.webglContextRestored = function () {\n    this._program = null;\n};\n\n\nShadowRenderer.prototype.drawMesh = function (frame, mesh, light) {\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const materialState = mesh._material._state;\n    const geometryState = mesh._geometry._state;\n    if (frame.lastProgramId !== this._program.id) {\n        frame.lastProgramId = this._program.id;\n        this._bindProgram(frame);\n    }\n    frame.textureUnit = 0;\n    if (light.id !== this._lastLightId) {\n        gl.uniformMatrix4fv(this._uViewMatrix, false, light.getShadowViewMatrix());\n        gl.uniformMatrix4fv(this._uProjMatrix, false, light.getShadowProjMatrix());\n        this._lastLightId = light.id;\n    }\n    // gl.uniformMatrix4fv(this._uViewMatrix, false, this._scene.viewTransform.matrix);\n    // gl.uniformMatrix4fv(this._uProjMatrix, false, this._scene.projTransform.matrix);\n    if (materialState.id !== this._lastMaterialId) {\n        const backfaces = materialState.backfaces;\n        if (frame.backfaces !== backfaces) {\n            if (backfaces) {\n                gl.disable(gl.CULL_FACE);\n            } else {\n                gl.enable(gl.CULL_FACE);\n            }\n            frame.backfaces = backfaces;\n        }\n        const frontface = materialState.frontface;\n        if (frame.frontface !== frontface) {\n            if (frontface) {\n                gl.frontFace(gl.CCW);\n            } else {\n                gl.frontFace(gl.CW);\n            }\n            frame.frontface = frontface;\n        }\n        if (frame.lineWidth !== materialState.lineWidth) {\n            gl.lineWidth(materialState.lineWidth);\n            frame.lineWidth = materialState.lineWidth;\n        }\n        if (this._uPointSize) {\n            gl.uniform1i(this._uPointSize, materialState.pointSize);\n        }\n        this._lastMaterialId = materialState.id;\n    }\n    gl.uniformMatrix4fv(this._uModelMatrix, gl.FALSE, mesh.worldMatrix);\n    if (geometryState.combineGeometry) {\n        const vertexBufs = mesh.vertexBufs;\n        if (vertexBufs.id !== this._lastVertexBufsId) {\n            if (vertexBufs.positionsBuf && this._aPosition) {\n                this._aPosition.bindArrayBuffer(vertexBufs.positionsBuf, vertexBufs.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n                frame.bindArray++;\n            }\n            this._lastVertexBufsId = vertexBufs.id;\n        }\n    }\n    if (this._uClippable) {\n        gl.uniform1i(this._uClippable, mesh._state.clippable);\n    }\n    if (geometryState.id !== this._lastGeometryId) {\n        if (this._uPositionsDecodeMatrix) {\n            gl.uniformMatrix4fv(this._uPositionsDecodeMatrix, false, geometryState.positionsDecodeMatrix);\n        }\n        if (geometryState.combineGeometry) { // VBOs were bound by the preceding VertexBufs chunk\n            if (geometryState.indicesBufCombined) {\n                geometryState.indicesBufCombined.bind();\n                frame.bindArray++;\n            }\n        } else {\n            if (this._aPosition) {\n                this._aPosition.bindArrayBuffer(geometryState.positionsBuf, geometryState.compressGeometry ? gl.UNSIGNED_SHORT : gl.FLOAT);\n                frame.bindArray++;\n            }\n            if (geometryState.indicesBuf) {\n                geometryState.indicesBuf.bind();\n                frame.bindArray++;\n            }\n        }\n        this._lastGeometryId = geometryState.id;\n    }\n    if (geometryState.combineGeometry) {\n        if (geometryState.indicesBufCombined) {\n            gl.drawElements(geometryState.primitive, geometryState.indicesBufCombined.numItems, geometryState.indicesBufCombined.itemType, 0);\n            frame.drawElements++;\n        } else {\n            // TODO: drawArrays() with VertexBufs positions\n        }\n    } else {\n        if (geometryState.indicesBuf) {\n            gl.drawElements(geometryState.primitive, geometryState.indicesBuf.numItems, geometryState.indicesBuf.itemType, 0);\n            frame.drawElements++;\n        } else if (geometryState.positions) {\n            gl.drawArrays(gl.TRIANGLES, 0, geometryState.positions.numItems);\n            frame.drawArrays++;\n        }\n    }\n};\n\nShadowRenderer.prototype._allocate = function (mesh) {\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    this._program = new Program(gl, this._shaderSource);\n    this._scene = scene;\n    this._useCount = 0;\n    if (this._program.errors) {\n        this.errors = this._program.errors;\n        return;\n    }\n    const program = this._program;\n    this._uPositionsDecodeMatrix = program.getLocation(\"positionsDecodeMatrix\");\n    this._uModelMatrix = program.getLocation(\"modelMatrix\");\n    this._uViewMatrix = program.getLocation(\"viewMatrix\");\n    this._uProjMatrix = program.getLocation(\"projMatrix\");\n    this._uClips = {};\n    const clips = scene._clipsState.clips;\n    for (let i = 0, len = clips.length; i < len; i++) {\n        this._uClips.push({\n            active: program.getLocation(\"clipActive\" + i),\n            pos: program.getLocation(\"clipPos\" + i),\n            dir: program.getLocation(\"clipDir\" + i)\n        });\n    }\n    this._aPosition = program.getAttribute(\"position\");\n    this._uClippable = program.getLocation(\"clippable\");\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n};\n\nShadowRenderer.prototype._bindProgram = function (frame) {\n    if (!this._program) {\n        this._allocate(mesh);\n    }\n    const scene = this._scene;\n    const gl = scene.canvas.gl;\n    const clipsState = scene._clipsState;\n    this._program.bind();\n    frame.useProgram++;\n    this._lastLightId = null;\n    this._lastMaterialId = null;\n    this._lastVertexBufsId = null;\n    this._lastGeometryId = null;\n    if (clipsState.clips.length > 0) {\n        let clipUniforms;\n        let uClipActive;\n        let clip;\n        let uClipPos;\n        let uClipDir;\n        for (let i = 0, len = this._uClips.length; i < len; i++) {\n            clipUniforms = this._uClips[i];\n            uClipActive = clipUniforms.active;\n            clip = clipsState.clips[i];\n            if (uClipActive) {\n                gl.uniform1i(uClipActive, clip.active);\n            }\n            uClipPos = clipUniforms.pos;\n            if (uClipPos) {\n                gl.uniform3fv(clipUniforms.pos, clip.pos);\n            }\n            uClipDir = clipUniforms.dir;\n            if (uClipDir) {\n                gl.uniform3fv(clipUniforms.dir, clip.dir);\n            }\n        }\n    }\n};\n\nexport {ShadowRenderer};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/shadow/ShadowRenderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2297,
    "kind": "variable",
    "name": "renderers",
    "memberof": "scene/mesh/shadow/ShadowRenderer.js",
    "static": true,
    "longname": "scene/mesh/shadow/ShadowRenderer.js~renderers",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/shadow/ShadowRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2298,
    "kind": "function",
    "name": "get",
    "memberof": "scene/mesh/shadow/ShadowRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/shadow/ShadowRenderer.js~get",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/shadow/ShadowRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2299,
    "kind": "function",
    "name": "put",
    "memberof": "scene/mesh/shadow/ShadowRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/shadow/ShadowRenderer.js~put",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/shadow/ShadowRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2300,
    "kind": "function",
    "name": "webglContextRestored",
    "memberof": "scene/mesh/shadow/ShadowRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/shadow/ShadowRenderer.js~webglContextRestored",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/shadow/ShadowRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "params": [],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2301,
    "kind": "function",
    "name": "drawMesh",
    "memberof": "scene/mesh/shadow/ShadowRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/shadow/ShadowRenderer.js~drawMesh",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/shadow/ShadowRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      },
      {
        "name": "light",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 2302,
    "kind": "function",
    "name": "_allocate",
    "memberof": "scene/mesh/shadow/ShadowRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/shadow/ShadowRenderer.js~_allocate",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/shadow/ShadowRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2303,
    "kind": "function",
    "name": "_bindProgram",
    "memberof": "scene/mesh/shadow/ShadowRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/shadow/ShadowRenderer.js~_bindProgram",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/shadow/ShadowRenderer.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 190,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "frame",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2304,
    "kind": "function",
    "name": "ShadowRenderer",
    "memberof": "scene/mesh/shadow/ShadowRenderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/shadow/ShadowRenderer.js~ShadowRenderer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/shadow/ShadowRenderer.js",
    "importStyle": "{ShadowRenderer}",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "params": [
      {
        "name": "hash",
        "types": [
          "*"
        ]
      },
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2305,
    "kind": "file",
    "name": "scene/mesh/shadow/ShadowShaderSource.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n/**\n * @private\n */\nclass ShadowShaderSource {\n    constructor(mesh) {\n        this.vertex = buildVertex(mesh);\n        this.fragment = buildFragment(mesh);\n    }\n}\n\nfunction buildVertex(mesh) {\n    const scene = mesh.scene;\n    const clipping = scene._clipsState.clips.length > 0;\n    const quantizedGeometry = !!mesh._geometry._state.compressGeometry;\n    const billboard = mesh._state.billboard;\n    const stationary = mesh._state.stationary;\n    const src = [];\n    src.push(\"// Shadow drawing vertex shader\");\n    src.push(\"attribute vec3 position;\");\n    src.push(\"uniform mat4 modelMatrix;\");\n    src.push(\"uniform mat4 viewMatrix;\");\n    src.push(\"uniform mat4 projMatrix;\");\n    if (quantizedGeometry) {\n        src.push(\"uniform mat4 positionsDecodeMatrix;\");\n    }\n    if (clipping) {\n        src.push(\"varying vec4 vWorldPosition;\");\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"void billboard(inout mat4 mat) {\");\n        src.push(\"   mat[0][0] = 1.0;\");\n        src.push(\"   mat[0][1] = 0.0;\");\n        src.push(\"   mat[0][2] = 0.0;\");\n        if (billboard === \"spherical\") {\n            src.push(\"   mat[1][0] = 0.0;\");\n            src.push(\"   mat[1][1] = 1.0;\");\n            src.push(\"   mat[1][2] = 0.0;\");\n        }\n        src.push(\"   mat[2][0] = 0.0;\");\n        src.push(\"   mat[2][1] = 0.0;\");\n        src.push(\"   mat[2][2] =1.0;\");\n        src.push(\"}\");\n    }\n    src.push(\"void main(void) {\");\n    src.push(\"vec4 localPosition = vec4(position, 1.0); \");\n    src.push(\"vec4 worldPosition;\");\n    if (quantizedGeometry) {\n        src.push(\"localPosition = positionsDecodeMatrix * localPosition;\");\n    }\n    src.push(\"mat4 viewMatrix2 = viewMatrix;\");\n    src.push(\"mat4 modelMatrix2 = modelMatrix;\");\n    if (stationary) {\n        src.push(\"viewMatrix2[3][0] = viewMatrix2[3][1] = viewMatrix2[3][2] = 0.0;\")\n    }\n    if (billboard === \"spherical\" || billboard === \"cylindrical\") {\n        src.push(\"mat4 modelViewMatrix = viewMatrix2 * modelMatrix2;\");\n        src.push(\"billboard(modelMatrix2);\");\n        src.push(\"billboard(viewMatrix2);\");\n    }\n    src.push(\"worldPosition = modelMatrix2 * localPosition;\");\n    src.push(\"vec4 viewPosition  = viewMatrix2 * worldPosition; \");\n    if (clipping) {\n        src.push(\"vWorldPosition = worldPosition;\");\n    }\n    src.push(\"   gl_Position = projMatrix * viewPosition;\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction buildFragment(mesh) {\n    const scene = mesh.scene;\n    const gl = scene.canvas.gl;\n    const clipsState = scene._clipsState;\n    const clipping = clipsState.clips.length > 0;\n    const src = [];\n    src.push(\"// Shadow fragment shader\");\n    src.push(\"precision \" + getFragmentFloatPrecision(gl) + \" float;\");\n    if (clipping) {\n        src.push(\"uniform bool clippable;\");\n        src.push(\"varying vec4 vWorldPosition;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"uniform bool clipActive\" + i + \";\");\n            src.push(\"uniform vec3 clipPos\" + i + \";\");\n            src.push(\"uniform vec3 clipDir\" + i + \";\");\n        }\n    }\n    src.push(\"vec4 packDepth (float depth) {\");\n    src.push(\"  const vec4 bitShift = vec4(1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0);\");\n    src.push(\"  const vec4 bitMask = vec4(1.0/256.0, 1.0/256.0, 1.0/256.0, 0.0);\");\n    src.push(\"  vec4 comp = fract(depth * bitShift);\");\n    src.push(\"  comp -= comp.gbaa * bitMask;\");\n    src.push(\"  return comp;\");\n    src.push(\"}\");\n\n    src.push(\"void main(void) {\");\n    if (clipping) {\n        src.push(\"if (clippable) {\");\n        src.push(\"  float dist = 0.0;\");\n        for (var i = 0; i < clipsState.clips.length; i++) {\n            src.push(\"if (clipActive\" + i + \") {\");\n            src.push(\"   dist += clamp(dot(-clipDir\" + i + \".xyz, vWorldPosition.xyz - clipPos\" + i + \".xyz), 0.0, 1000.0);\");\n            src.push(\"}\");\n        }\n        src.push(\"  if (dist > 0.0) { discard; }\");\n        src.push(\"}\");\n    }\n    src.push(\"gl_FragColor = packDepth(gl_FragCoord.z);\");\n    src.push(\"}\");\n    return src;\n}\n\nfunction getFragmentFloatPrecision(gl) {\n    if (!gl.getShaderPrecisionFormat) {\n        return \"mediump\";\n    }\n    if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n        return \"highp\";\n    }\n    if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n        return \"mediump\";\n    }\n    return \"lowp\";\n}\n\nexport {ShadowShaderSource};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/mesh/shadow/ShadowShaderSource.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2306,
    "kind": "function",
    "name": "buildVertex",
    "memberof": "scene/mesh/shadow/ShadowShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/shadow/ShadowShaderSource.js~buildVertex",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/shadow/ShadowShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2307,
    "kind": "function",
    "name": "buildFragment",
    "memberof": "scene/mesh/shadow/ShadowShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/shadow/ShadowShaderSource.js~buildFragment",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/shadow/ShadowShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "mesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2308,
    "kind": "function",
    "name": "getFragmentFloatPrecision",
    "memberof": "scene/mesh/shadow/ShadowShaderSource.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/mesh/shadow/ShadowShaderSource.js~getFragmentFloatPrecision",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/mesh/shadow/ShadowShaderSource.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "string"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2309,
    "kind": "class",
    "name": "ShadowShaderSource",
    "memberof": "scene/mesh/shadow/ShadowShaderSource.js",
    "static": true,
    "longname": "scene/mesh/shadow/ShadowShaderSource.js~ShadowShaderSource",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/mesh/shadow/ShadowShaderSource.js",
    "importStyle": "{ShadowShaderSource}",
    "description": "",
    "lineNumber": 8,
    "interface": false,
    "ignore": true
  },
  {
    "__docId__": 2310,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/mesh/shadow/ShadowShaderSource.js~ShadowShaderSource",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/mesh/shadow/ShadowShaderSource.js~ShadowShaderSource#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 2311,
    "kind": "member",
    "name": "vertex",
    "memberof": "scene/mesh/shadow/ShadowShaderSource.js~ShadowShaderSource",
    "static": false,
    "longname": "scene/mesh/shadow/ShadowShaderSource.js~ShadowShaderSource#vertex",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2312,
    "kind": "member",
    "name": "fragment",
    "memberof": "scene/mesh/shadow/ShadowShaderSource.js~ShadowShaderSource",
    "static": false,
    "longname": "scene/mesh/shadow/ShadowShaderSource.js~ShadowShaderSource#fragment",
    "access": "public",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2313,
    "kind": "file",
    "name": "scene/nodes/Node.js",
    "content": "import {utils} from '../utils.js';\nimport {Component} from '../Component.js';\nimport {Mesh} from './../mesh/Mesh.js';\nimport {AABBGeometry} from '../geometry/AABBGeometry.js';\nimport {PhongMaterial} from '../materials/PhongMaterial.js';\nimport {math} from '../math/math.js';\n\nconst angleAxis = new Float32Array(4);\nconst q1 = new Float32Array(4);\nconst q2 = new Float32Array(4);\nconst xAxis = new Float32Array([1, 0, 0]);\nconst yAxis = new Float32Array([0, 1, 0]);\nconst zAxis = new Float32Array([0, 0, 1]);\n\nconst veca = new Float32Array(3);\nconst vecb = new Float32Array(3);\n\nconst identityMat = math.identityMat4();\n\n/**\n A scene graph node within a {@link Viewer}'s {@link Scene}.\n\n @class Node\n */\nclass Node extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Node\";\n    }\n\n    /**\n     * @private\n     */\n    get isNode() {\n        return true;\n    }\n\n    /**\n     @constructor\n\n     @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n     @param {*} [cfg] Configs\n     @param {String} [cfg.id] Optional ID, unique among all components in the parent scene, generated automatically when omitted.\n     @param [cfg.guid] {String} Optional globally unique identifier. This is unique not only within the {@link Scene}, but throughout the entire universe.\n     @param {String:Object} [cfg.meta] Optional map of user-defined metadata.\n     @param [cfg.objectId] {String} Optional object ID.\n     @param [cfg.parent] {Node} The parent.\n     @param [cfg.position=[0,0,0]] {Float32Array} Local 3D position.\n     @param [cfg.scale=[1,1,1]] {Float32Array} Local scale.\n     @param [cfg.rotation=[0,0,0]] {Float32Array} Local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n     @param [cfg.matrix=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1] {Float32Array} Local modelling transform matrix. Overrides the position, scale and rotation parameters.\n     @param [cfg.visible=true] {Boolean}        Indicates if visible.\n     @param [cfg.culled=false] {Boolean}        Indicates if culled from view.\n     @param [cfg.pickable=true] {Boolean}       Indicates if pickable.\n     @param [cfg.clippable=true] {Boolean}      Indicates if clippable.\n     @param [cfg.collidable=true] {Boolean}     Indicates if included in boundary calculations.\n     @param [cfg.castShadow=true] {Boolean}     Indicates if casting shadows.\n     @param [cfg.receiveShadow=true] {Boolean}  Indicates if receiving shadows.\n     @param [cfg.outlined=false] {Boolean}      Indicates if outline is rendered.\n     @param [cfg.ghosted=false] {Boolean}       Indicates if ghosted.\n     @param [cfg.highlighted=false] {Boolean}   Indicates if highlighted.\n     @param [cfg.selected=false] {Boolean}      Indicates if selected.\n     @param [cfg.edges=false] {Boolean}         Indicates if edges are emphasized.\n     @param [cfg.aabbVisible=false] {Boolean}   Indicates if axis-aligned World-space bounding box is visible.\n     @param [cfg.colorize=[1.0,1.0,1.0]] {Float32Array}  RGB colorize color, multiplies by the rendered fragment colors.\n     @param [cfg.opacity=1.0] {Number}          Opacity factor, multiplies by the rendered fragment alpha.\n     @param [cfg.children] {Array(Node)}      Children to add. Children must be in the same {@link Scene} and will be removed from whatever parents they may already have.\n     @param [cfg.inheritStates=true] {Boolean}  Indicates if children given to this constructor should inherit state from this parent as they are added. RenderState includes {@link Node/visible}, {@link Node/culled}, {@link Node/pickable},\n     {@link Node/clippable}, {@link Node/castShadow}, {@link Node/receiveShadow},\n     {@link Node/outlined}, {@link Node/ghosted}, {@link Node/highlighted},\n     {@link Node/selected}, {@link Node/colorize} and {@link Node/opacity}.\n\n     */\n\n    constructor(owner, cfg = {}) {\n\n        super(owner, cfg);\n\n        this._parent = null;\n        this._childList = [];\n        this._childMap = {};\n        this._childIDs = null;\n\n        this._aabb = null;\n        this._aabbDirty = true;\n        this.scene._aabbDirty = true;\n\n        this._scale = math.vec3();\n        this._quaternion = math.identityQuaternion();\n        this._rotation = math.vec3();\n        this._position = math.vec3();\n\n        this._worldMatrix = math.identityMat4();\n        this._worldNormalMatrix = math.identityMat4();\n\n        this._localMatrixDirty = true;\n        this._worldMatrixDirty = true;\n        this._worldNormalMatrixDirty = true;\n\n        if (cfg.matrix) {\n            this.matrix = cfg.matrix;\n        } else {\n            this.scale = cfg.scale;\n            this.position = cfg.position;\n            if (cfg.quaternion) {\n            } else {\n                this.rotation = cfg.rotation;\n            }\n        }\n\n        if (cfg.objectId) {\n            this._objectId = cfg.objectId;\n            this.scene._registerObject(this); // Must assign type before setting properties\n        }\n\n        if (cfg.modelId) {\n            this._modelId = cfg.modelId;\n            this.scene._registerModel(this);\n        }\n\n        this.visible = cfg.visible;\n        this.culled = cfg.culled;\n        this.pickable = cfg.pickable;\n        this.clippable = cfg.clippable;\n        this.collidable = cfg.collidable;\n        this.castShadow = cfg.castShadow;\n        this.receiveShadow = cfg.receiveShadow;\n        this.outlined = cfg.outlined;\n        this.ghosted = cfg.ghosted;\n        this.highlighted = cfg.highlighted;\n        this.selected = cfg.selected;\n        this.edges = cfg.edges;\n        this.aabbVisible = cfg.aabbVisible;\n        this.layer = cfg.layer;\n        this.colorize = cfg.colorize;\n        this.opacity = cfg.opacity;\n\n        // Add children, which inherit state from this Node\n\n        if (cfg.children) {\n            const children = cfg.children;\n            for (let i = 0, len = children.length; i < len; i++) {\n                this.addChild(children[i], cfg.inheritStates);\n            }\n        }\n\n        if (cfg.parentId) {\n            const parentNode = this.scene.components[cfg.parentId];\n            if (!parentNode) {\n                this.error(\"Parent not found: '\" + cfg.parentId + \"'\");\n            } else if (!parentNode.isNode) {\n                this.error(\"Parent is not a Node: '\" + cfg.parentId + \"'\");\n            } else {\n                parentNode.addChild(this);\n            }\n        } else if (cfg.parent) {\n            if (!cfg.parent.isNode) {\n                this.error(\"Parent is not a Node\");\n            }\n            cfg.parent.addChild(this);\n        }\n    }\n\n    _setLocalMatrixDirty() {\n        this._localMatrixDirty = true;\n        this._setWorldMatrixDirty();\n    }\n\n    _setWorldMatrixDirty() {\n        this._worldMatrixDirty = true;\n        this._worldNormalMatrixDirty = true;\n        if (this._childList) {\n            for (let i = 0, len = this._childList.length; i < len; i++) {\n                this._childList[i]._setWorldMatrixDirty();\n            }\n        }\n    }\n\n    _buildWorldMatrix() {\n        const localMatrix = this.matrix;\n        if (!this._parent) {\n            for (let i = 0, len = localMatrix.length; i < len; i++) {\n                this._worldMatrix[i] = localMatrix[i];\n            }\n        } else {\n            math.mulMat4(this._parent.worldMatrix, localMatrix, this._worldMatrix);\n        }\n        this._worldMatrixDirty = false;\n    }\n\n    _buildWorldNormalMatrix() {\n        if (this._worldMatrixDirty) {\n            this._buildWorldMatrix();\n        }\n        if (!this._worldNormalMatrix) {\n            this._worldNormalMatrix = math.mat4();\n        }\n        // Note: order of inverse and transpose doesn't matter\n        math.transposeMat4(this._worldMatrix, this._worldNormalMatrix);\n        math.inverseMat4(this._worldNormalMatrix);\n        this._worldNormalMatrixDirty = false;\n    }\n\n    _setSubtreeAABBsDirty(object) {\n        object._aabbDirty = true;\n        object.fire(\"boundary\", true);\n        if (object._childList) {\n            for (let i = 0, len = object._childList.length; i < len; i++) {\n                this._setSubtreeAABBsDirty(object._childList[i]);\n            }\n        }\n    }\n\n    _setAABBDirty() {\n        this._setSubtreeAABBsDirty(this);\n        if (this.collidable) {\n            for (let object = this; object; object = object._parent) {\n                object._aabbDirty = true;\n                object.fire(\"boundary\", true);\n            }\n        }\n    }\n\n    _updateAABB() {\n        this.scene._aabbDirty = true;\n        if (!this._aabb) {\n            this._aabb = math.AABB3();\n        }\n        if (this._buildAABB) {\n            this._buildAABB(this.worldMatrix, this._aabb); // Mesh or BigModel\n        } else { // Node | Node | Model\n            math.collapseAABB3(this._aabb);\n            let object;\n            for (let i = 0, len = this._childList.length; i < len; i++) {\n                object = this._childList[i];\n                if (!object.collidable) {\n                    continue;\n                }\n                math.expandAABB3(this._aabb, object.aabb);\n            }\n            if (!this._aabbCenter) {\n                this._aabbCenter = new Float32Array(3);\n            }\n            math.getAABB3Center(this._aabb, this._aabbCenter);\n        }\n        this._aabbDirty = false;\n    }\n\n    /**\n     Adds a child {@link Node}.\n\n     The child must be a {@link Node} in the same {@link Scene}.\n\n     If the child already has a parent, will be removed from that parent first.\n\n     Does nothing if already a child.\n\n     @param {Node|String} child Instance or ID of the child to add.\n     @param [inheritStates=false] Indicates if the child should inherit state from this parent as it is added. RenderState includes\n     {@link Node/visible}, {@link Node/culled}, {@link Node/pickable},\n     {@link Node/clippable}, {@link Node/castShadow}, {@link Node/receiveShadow},\n     {@link Node/outlined}, {@link Node/ghosted}, {@link Node/highlighted},\n     {@link Node/selected}, {@link Node/edges}, {@link Node/colorize} and {@link Node/opacity}.\n     @returns {Node} The child.\n     */\n    addChild(child, inheritStates) {\n        if (utils.isNumeric(child) || utils.isString(child)) {\n            const nodeId = child;\n            child = this.scene.component[nodeId];\n            if (!child) {\n                this.warn(\"Component not found: \" + utils.inQuotes(nodeId));\n                return;\n            }\n            if (!child.isNode && !child.isMesh) {\n                this.error(\"Not a Node or Mesh: \" + nodeId);\n                return;\n            }\n        } else {\n            if (!child.isNode && !child.isMesh) {\n                this.error(\"Not a Node or Mesh: \" + child.id);\n                return;\n            }\n            if (child._parent) {\n                if (child._parent.id === this.id) {\n                    this.warn(\"Already a child: \" + child.id);\n                    return;\n                }\n                child._parent.removeChild(child);\n            }\n        }\n        const id = child.id;\n        if (child.scene.id !== this.scene.id) {\n            this.error(\"Child not in same Scene: \" + child.id);\n            return;\n        }\n        this._childList.push(child);\n        this._childMap[child.id] = child;\n        this._childIDs = null;\n        child._parent = this;\n        if (!!inheritStates) {\n            child.visible = this.visible;\n            child.culled = this.culled;\n            child.ghosted = this.ghosted;\n            child.highlited = this.highlighted;\n            child.selected = this.selected;\n            child.edges = this.edges;\n            child.outlined = this.outlined;\n            child.clippable = this.clippable;\n            child.pickable = this.pickable;\n            child.collidable = this.collidable;\n            child.castShadow = this.castShadow;\n            child.receiveShadow = this.receiveShadow;\n            child.colorize = this.colorize;\n            child.opacity = this.opacity;\n        }\n        child._setWorldMatrixDirty();\n        child._setAABBDirty();\n        return child;\n    }\n\n    /**\n     Removes the given child.\n\n     @method removeChild\n     @param {Node} child Child to remove.\n     */\n    removeChild(child) {\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            if (this._childList[i].id === child.id) {\n                child._parent = null;\n                this._childList = this._childList.splice(i, 1);\n                delete this._childMap[child.id];\n                this._childIDs = null;\n                child._setWorldMatrixDirty();\n                child._setAABBDirty();\n                this._setAABBDirty();\n                return;\n            }\n        }\n    }\n\n    /**\n     Removes all children.\n\n     @method removeChildren\n     */\n    removeChildren() {\n        let child;\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            child = this._childList[i];\n            child._parent = null;\n            child._setWorldMatrixDirty();\n            child._setAABBDirty();\n        }\n        this._childList = [];\n        this._childMap = {};\n        this._childIDs = null;\n        this._setAABBDirty();\n    }\n\n    /**\n     Rotates about the given local axis by the given increment.\n\n     @method rotate\n     @param {Float32Array} axis Local axis about which to rotate.\n     @param {Number} angle Angle increment in degrees.\n     */\n    rotate(axis, angle) {\n        angleAxis[0] = axis[0];\n        angleAxis[1] = axis[1];\n        angleAxis[2] = axis[2];\n        angleAxis[3] = angle * math.DEGTORAD;\n        math.angleAxisToQuaternion(angleAxis, q1);\n        math.mulQuaternions(this.quaternion, q1, q2);\n        this.quaternion = q2;\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n        return this;\n    }\n\n    /**\n     Rotates about the given World-space axis by the given increment.\n\n     @method rotate\n     @param {Float32Array} axis Local axis about which to rotate.\n     @param {Number} angle Angle increment in degrees.\n     */\n    rotateOnWorldAxis(axis, angle) {\n        angleAxis[0] = axis[0];\n        angleAxis[1] = axis[1];\n        angleAxis[2] = axis[2];\n        angleAxis[3] = angle * math.DEGTORAD;\n        math.angleAxisToQuaternion(angleAxis, q1);\n        math.mulQuaternions(q1, this.quaternion, q1);\n        //this.quaternion.premultiply(q1);\n        return this;\n    }\n\n    /**\n     Rotates about the local X-axis by the given increment.\n\n     @method rotateX\n     @param {Number} angle Angle increment in degrees.\n     */\n    rotateX(angle) {\n        return this.rotate(xAxis, angle);\n    }\n\n    /**\n     Rotates about the local Y-axis by the given increment.\n\n     @method rotateY\n     @param {Number} angle Angle increment in degrees.\n     */\n    rotateY(angle) {\n        return this.rotate(yAxis, angle);\n    }\n\n    /**\n     Rotates about the local Z-axis by the given increment.\n\n     @method rotateZ\n     @param {Number} angle Angle increment in degrees.\n     */\n    rotateZ(angle) {\n        return this.rotate(zAxis, angle);\n    }\n\n    /**\n     Translates along local space vector by the given increment.\n\n     @method translate\n     @param {Float32Array} axis Normalized local space 3D vector along which to translate.\n     @param {Number} distance Distance to translate along  the vector.\n     */\n    translate(axis, distance) {\n        math.vec3ApplyQuaternion(this.quaternion, axis, veca);\n        math.mulVec3Scalar(veca, distance, vecb);\n        math.addVec3(this.position, vecb, this.position);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n        return this;\n    }\n\n    /**\n     Translates along the local X-axis by the given increment.\n\n     @method translateX\n     @param {Number} distance Distance to translate along  the X-axis.\n     */\n    translateX(distance) {\n        return this.translate(xAxis, distance);\n    }\n\n    /**\n     * Translates along the local Y-axis by the given increment.\n     *\n     * @method translateX\n     * @param {Number} distance Distance to translate along  the Y-axis.\n     */\n    translateY(distance) {\n        return this.translate(yAxis, distance);\n    }\n\n    /**\n     Translates along the local Z-axis by the given increment.\n\n     @method translateX\n     @param {Number} distance Distance to translate along  the Z-axis.\n     */\n    translateZ(distance) {\n        return this.translate(zAxis, distance);\n    }\n\n    /**\n     Optional ID to identify this Node as an {@link Object}.\n\n     @property objectId\n     @default null\n     @type String\n     @final\n     */\n    get objectId() {\n        return this._objectId;\n    }\n\n    /**\n     Optional ID to identify this Node as a {@link Model}.\n\n     @property modelId\n     @default null\n     @type String\n     @final\n     */\n    get modelId() {\n        return this._modelId;\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Children and parent properties\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     Number of child {@link Node}s.\n\n     @property numChildren\n     @final\n     @type Number\n     */\n    get numChildren() {\n        return this._childList.length;\n    }\n\n    /**\n     Array of child {@link Node}s.\n\n     @property children\n     @final\n     @type Array\n     */\n    get children() {\n        return this._childList;\n    }\n\n    /**\n     Child {@link Node}s mapped to their IDs.\n\n     @property childMap\n     @final\n     @type {*}\n     */\n    get childMap() {\n        return this._childMap;\n    }\n\n    /**\n     IDs of child {@link Node}s.\n\n     @property childIDs\n     @final\n     @type Array\n     */\n    get childIDs() {\n        if (!this._childIDs) {\n            this._childIDs = Object.keys(this._childMap);\n        }\n        return this._childIDs;\n    }\n\n    /**\n     The parent.\n\n     The parent Node may also be set by passing the Node to the\n     Node/Model's {@link Node/addChild:method\"}}addChild(){{/crossLink}} method.\n\n     @property parent\n     @type Node\n     */\n    set parent(node) {\n        if (utils.isNumeric(node) || utils.isString(node)) {\n            const nodeId = node;\n            node = this.scene.components[nodeId];\n            if (!node) {\n                this.warn(\"Node not found: \" + utils.inQuotes(nodeId));\n                return;\n            }\n            if (!node.isNode) {\n                this.error(\"Not a Node: \" + node.id);\n                return;\n            }\n        }\n        if (node.scene.id !== this.scene.id) {\n            this.error(\"Node not in same Scene: \" + node.id);\n            return;\n        }\n        if (this._parent && this._parent.id === node.id) {\n            this.warn(\"Already a child of Node: \" + node.id);\n            return;\n        }\n        node.addChild(this);\n    }\n\n    get parent() {\n        return this._parent;\n    }\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Transform properties\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     Local translation.\n\n     @property position\n     @default [0,0,0]\n     @type {Float32Array}\n     */\n    set position(value) {\n        this._position.set(value || [0, 0, 0]);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    get position() {\n        return this._position;\n    }\n\n    /**\n     Local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.\n\n     @property rotation\n     @default [0,0,0]\n     @type {Float32Array}\n     */\n    set rotation(value) {\n        this._rotation.set(value || [0, 0, 0]);\n        math.eulerToQuaternion(this._rotation, \"XYZ\", this._quaternion);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    get rotation() {\n        return this._rotation;\n    }\n\n    /**\n     Local rotation quaternion.\n\n     @property quaternion\n     @default [0,0,0, 1]\n     @type {Float32Array}\n     */\n    set quaternion(value) {\n        this._quaternion.set(value || [0, 0, 0, 1]);\n        math.quaternionToEuler(this._quaternion, \"XYZ\", this._rotation);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    get quaternion() {\n        return this._quaternion;\n    }\n\n    /**\n     Local scale.\n\n     @property scale\n     @default [1,1,1]\n     @type {Float32Array}\n     */\n    set scale(value) {\n        this._scale.set(value || [1, 1, 1]);\n        this._setLocalMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    get scale() {\n        return this._scale;\n    }\n\n    /**\n     * Local matrix.\n     *\n     * @property matrix\n     * @default [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n     * @type {Float32Array}\n     */\n    set matrix(value) {\n        if (!this.__localMatrix) {\n            this.__localMatrix = math.identityMat4();\n        }\n        this.__localMatrix.set(value || identityMat);\n        math.decomposeMat4(this.__localMatrix, this._position, this._quaternion, this._scale);\n        this._localMatrixDirty = false;\n        this._setWorldMatrixDirty();\n        this._setAABBDirty();\n        this.glRedraw();\n    }\n\n    get matrix() {\n        if (this._localMatrixDirty) {\n            if (!this.__localMatrix) {\n                this.__localMatrix = math.identityMat4();\n            }\n            math.composeMat4(this._position, this._quaternion, this._scale, this.__localMatrix);\n            this._localMatrixDirty = false;\n        }\n        return this.__localMatrix;\n    }\n\n    /**\n     * The World matrix.\n     *\n     * @property worldMatrix\n     * @type {Float32Array}\n     */\n    get worldMatrix() {\n        if (this._worldMatrixDirty) {\n            this._buildWorldMatrix();\n        }\n        return this._worldMatrix;\n    }\n\n    /**\n     * This World normal matrix.\n     *\n     * @property worldNormalMatrix\n     * @default [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]\n     * @type {Float32Array}\n     */\n    get worldNormalMatrix() {\n        if (this._worldNormalMatrixDirty) {\n            this._buildWorldNormalMatrix();\n        }\n        return this._worldNormalMatrix;\n    }\n\n    // worldPosition: {\n    //     get: function (optionalTarget) {\n    //         var result = optionalTarget || new Vector3();\n    //         this.updateMatrixWorld(true);\n    //         return result.setFromMatrixPosition(this.matrixWorld);\n    //     }\n    // },\n    //\n    // worldQuaternion: {\n    //     get: function () {\n    //         var position = new Vector3();\n    //         var scale = new Vector3();\n    //         return function getWorldQuaternion(optionalTarget) {\n    //             var result = optionalTarget || new Quaternion();\n    //             this.updateMatrixWorld(true);\n    //             this.matrixWorld.decompose(position, result, scale);\n    //             return result;\n    //         };\n    //     }()\n    // },\n    //\n    // worldRotation: {\n    //     get: function () {\n    //         var quaternion = new Quaternion();\n    //         return function getWorldRotation(optionalTarget) {\n    //             var result = optionalTarget || new Euler();\n    //             this.getWorldQuaternion(quaternion);\n    //             return result.setFromQuaternion(quaternion, this.rotation.order, false)\n    //         };\n    //     }\n    // }(),\n    //\n    // worldScale: {\n    //     get: (function () {\n    //         var position = new Float32Array(3);\n    //         var quaternion = new Float32Array(4);\n    //         return function getWorldScale(optionalTarget) {\n    //             var result = optionalTarget || new Float32Array(3);\n    //             math.decomposeMat4(this.worldMatrix, position, quaternion, result);\n    //             return result;\n    //         };\n    //     })()\n    // },\n    //\n    // worldDirection: {\n    //     get: (function () {\n    //         var quaternion = new Quaternion();\n    //         return function getWorldDirection(optionalTarget) {\n    //             var result = optionalTarget || new Vector3();\n    //             this.getWorldQuaternion(quaternion);\n    //             return result.set(0, 0, 1).applyQuaternion(quaternion);\n    //         };\n    //     })()\n    // },\n\n    //------------------------------------------------------------------------------------------------------------------\n    // Boundary properties\n    //------------------------------------------------------------------------------------------------------------------\n\n    /**\n     World-space 3D axis-aligned bounding box (AABB).\n\n     Represented by a six-element Float32Array containing the min/max extents of the\n     axis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.\n\n     @property aabb\n     @final\n     @type {Float32Array}\n     */\n    get aabb() {\n        if (this._aabbDirty) {\n            this._updateAABB();\n        }\n        return this._aabb;\n    }\n\n    /**\n     World-space 3D center.\n\n     @property center\n     @final\n     @type {Float32Array}\n     */\n    get center() {\n        if (this._aabbDirty) {\n            this._updateAABB();\n        }\n        return this._aabbCenter;\n    }\n\n    /**\n     Indicates if visible.\n\n     Only rendered when {@link Node/visible} is true and\n     {@link Node/culled} is false.\n\n     Each visible Node is registered in its {@link Scene}'s\n     {@link Scene#visibleObjects} map while its {@link Node/objectId}\n     is set to a value.\n\n     @property visible\n     @default true\n     @type Boolean\n     */\n    set visible(visible) {\n        visible = visible !== false;\n        this._visible = visible;\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            this._childList[i].visible = visible;\n        }\n        if (this._objectId) {\n            this.scene._objectVisibilityUpdated(this, visible);\n        }\n    }\n\n    get visible() {\n        return this._visible;\n    }\n\n    /**\n     Indicates if highlighted.\n\n     Each highlighted Node is registered in its {@link Scene}'s\n     {@link Scene#highlightedObjects} map while its {@link Node/objectId}\n     is set to a value.\n\n     @property highlighted\n     @default false\n     @type Boolean\n     */\n    set highlighted(highlighted) {\n        highlighted = !!highlighted;\n        this._highlighted = highlighted;\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            this._childList[i].highlighted = highlighted;\n        }\n        if (this._objectId) {\n            this.scene._objectHighlightedUpdated(this, highlighted);\n        }\n    }\n\n    get highlighted() {\n        return this._highlighted;\n    }\n\n    /**\n     Indicates if ghosted.\n\n     Each ghosted Node is registered in its {@link Scene}'s\n     {@link Scene#ghostedObjects} map while its {@link Node/objectId}\n     is set to a value.\n\n     @property ghosted\n     @default false\n     @type Boolean\n     */\n    set ghosted(ghosted) {\n        ghosted = !!ghosted;\n        this._ghosted = ghosted;\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            this._childList[i].ghosted = ghosted;\n        }\n        if (this._objectId) {\n            this.scene._objectGhostedUpdated(this, ghosted);\n        }\n    }\n\n    get ghosted() {\n        return this._ghosted;\n    }\n\n    /**\n     Indicates if selected.\n\n     Each selected Node is registered in its {@link Scene}'s\n     {@link Scene#selectedObjects} map while its {@link Node/objectId}\n     is set to a value.\n\n     @property selected\n     @default false\n     @type Boolean\n     */\n    set selected(selected) {\n        selected = !!selected;\n        this._selected = selected;\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            this._childList[i].selected = selected;\n        }\n        if (this._objectId) {\n            this.scene._objectSelectedUpdated(this, selected);\n        }\n    }\n\n    get selected() {\n        return this._selected;\n    }\n\n    /**\n     Indicates if edges are emphasized.\n\n     @property edges\n     @default false\n     @type Boolean\n     */\n    set edges(edges) {\n        edges = !!edges;\n        this._edges = edges;\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            this._childList[i].edges = edges;\n        }\n    }\n\n    get edges() {\n        return this._edges;\n    }\n\n    /**\n     Indicates if culled from view.\n\n     Only rendered when {@link Node/visible} is true and\n     {@link Node/culled} is false.\n\n     @property culled\n     @default false\n     @type Boolean\n     */\n    set culled(culled) {\n        culled = !!culled;\n        this._culled = culled;\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            this._childList[i].culled = culled;\n        }\n    }\n\n    get culled() {\n        return this._culled;\n    }\n\n    /**\n     Indicates if clippable.\n\n     Clipping is done by the {@link Clip} components in {@link Scene#clips}.\n\n     @property clippable\n     @default true\n     @type Boolean\n     */\n    set clippable(clippable) {\n        clippable = clippable !== false;\n        this._clippable = clippable;\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            this._childList[i].clippable = clippable;\n        }\n    }\n\n    get clippable() {\n        return this._clippable;\n    }\n\n    /**\n     Indicates if included in boundary calculations.\n\n     @property collidable\n     @default true\n     @type Boolean\n     */\n    set collidable(collidable) {\n        collidable = collidable !== false;\n        this._collidable = collidable;\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            this._childList[i].collidable = collidable;\n        }\n    }\n\n    get collidable() {\n        return this._collidable;\n    }\n\n    /**\n     Whether or not to allow picking.\n\n     Picking is done via calls to {@link Scene#pick}.\n\n     @property pickable\n     @default true\n     @type Boolean\n     */\n    set pickable(pickable) {\n        pickable = pickable !== false;\n        this._pickable = pickable;\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            this._childList[i].pickable = pickable;\n        }\n    }\n\n    get pickable() {\n        return this._pickable;\n    }\n\n    /**\n     RGB colorize color, multiplies by the rendered fragment color.\n\n     @property colorize\n     @default [1.0, 1.0, 1.0]\n     @type Float32Array\n     */\n    set colorize(rgb) {\n        let colorize = this._colorize;\n        if (!colorize) {\n            colorize = this._colorize = new Float32Array(4);\n            colorize[3] = 1.0;\n        }\n        if (rgb) {\n            colorize[0] = rgb[0];\n            colorize[1] = rgb[1];\n            colorize[2] = rgb[2];\n        } else {\n            colorize[0] = 1;\n            colorize[1] = 1;\n            colorize[2] = 1;\n        }\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            this._childList[i].colorize = colorize;\n        }\n    }\n\n    get colorize() {\n        return this._colorize.slice(0, 3);\n    }\n\n    /**\n     Opacity factor, multiplies by the rendered fragment alpha.\n\n     This is a factor in range ````[0..1]````.\n\n     @property opacity\n     @default 1.0\n     @type Number\n     */\n    set opacity(opacity) {\n        let colorize = this._colorize;\n        if (!colorize) {\n            colorize = this._colorize = new Float32Array(4);\n            colorize[0] = 1;\n            colorize[1] = 1;\n            colorize[2] = 1;\n        }\n        colorize[3] = opacity !== null && opacity !== undefined ? opacity : 1.0;\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            this._childList[i].opacity = opacity;\n        }\n    }\n\n    get opacity() {\n        return this._colorize[3];\n    }\n\n    /**\n     Indicates if outlined.\n\n     @property outlined\n     @default false\n     @type Boolean\n     */\n    set outlined(outlined) {\n        outlined = !!outlined;\n        this._outlined = outlined;\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            this._childList[i].outlined = outlined;\n        }\n    }\n\n    get outlined() {\n        return this._outlined;\n    }\n\n    /**\n     Indicates if casting shadows.\n\n     @property castShadow\n     @default true\n     @type Boolean\n     */\n    set castShadow(castShadow) {\n        castShadow = !!castShadow;\n        this._castShadow = castShadow;\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            this._childList[i].castShadow = castShadow;\n        }\n    }\n\n    get castShadow() {\n        return this._castShadow;\n    }\n\n    /**\n     Indicates if receiving shadows.\n\n     @property receiveShadow\n     @default true\n     @type Boolean\n     */\n    set receiveShadow(receiveShadow) {\n        receiveShadow = !!receiveShadow;\n        this._receiveShadow = receiveShadow;\n        for (let i = 0, len = this._childList.length; i < len; i++) {\n            this._childList[i].receiveShadow = receiveShadow;\n        }\n    }\n\n    get receiveShadow() {\n        return this._receiveShadow;\n    }\n\n    /**\n     Indicates if the 3D World-space axis-aligned bounding box (AABB) is visible.\n\n     @property aabbVisible\n     @default false\n     @type {Boolean}\n     */\n    set aabbVisible(visible) {\n        if (!visible && !this._aabbHelper) {\n            return;\n        }\n        if (!this._aabbHelper) {\n            this._aabbHelper = new Mesh(this, {\n                geometry: new AABBGeometry(this, {\n                    target: this\n                }),\n                material: new PhongMaterial(this, {\n                    diffuse: [0.5, 1.0, 0.5],\n                    emissive: [0.5, 1.0, 0.5],\n                    lineWidth: 2\n                })\n            });\n        }\n        this._aabbHelper.visible = visible;\n    }\n\n    get aabbVisible() {\n        return this._aabbHelper ? this._aabbHelper.visible : false;\n    }\n\n    destroy() {\n        super.destroy();\n        if (this._parent) {\n            this._parent.removeChild(this);\n        }\n        if (this._objectId) {\n            const scene = this.scene;\n            scene._deregisterObject(this);\n            if (this._visible) {\n                scene._objectVisibilityUpdated(this, false);\n            }\n            if (this._ghosted) {\n                scene._objectGhostedUpdated(this, false);\n            }\n            if (this._selected) {\n                scene._objectSelectedUpdated(this, false);\n            }\n            if (this._highlighted) {\n                scene._objectHighlightedUpdated(this, false);\n            }\n        }\n        if (this._modelId) {\n            const scene = this.scene;\n            scene._deregisterModel(this);\n        }\n        if (this._childList.length) {\n            // Clone the _childList before iterating it, so our children don't mess us up when calling removeChild().\n            const tempChildList = this._childList.splice();\n            let child;\n            for (let i = 0, len = tempChildList.length; i < len; i++) {\n                child = tempChildList[i];\n                child.destroy();\n            }\n        }\n        this._childList = [];\n        this._childMap = {};\n        this._childIDs = null;\n        this._setAABBDirty();\n        this.scene._aabbDirty = true;\n    }\n}\n\nexport {Node};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/nodes/Node.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2314,
    "kind": "variable",
    "name": "angleAxis",
    "memberof": "scene/nodes/Node.js",
    "static": true,
    "longname": "scene/nodes/Node.js~angleAxis",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/nodes/Node.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2315,
    "kind": "variable",
    "name": "q1",
    "memberof": "scene/nodes/Node.js",
    "static": true,
    "longname": "scene/nodes/Node.js~q1",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/nodes/Node.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2316,
    "kind": "variable",
    "name": "q2",
    "memberof": "scene/nodes/Node.js",
    "static": true,
    "longname": "scene/nodes/Node.js~q2",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/nodes/Node.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2317,
    "kind": "variable",
    "name": "xAxis",
    "memberof": "scene/nodes/Node.js",
    "static": true,
    "longname": "scene/nodes/Node.js~xAxis",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/nodes/Node.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2318,
    "kind": "variable",
    "name": "yAxis",
    "memberof": "scene/nodes/Node.js",
    "static": true,
    "longname": "scene/nodes/Node.js~yAxis",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/nodes/Node.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2319,
    "kind": "variable",
    "name": "zAxis",
    "memberof": "scene/nodes/Node.js",
    "static": true,
    "longname": "scene/nodes/Node.js~zAxis",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/nodes/Node.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2320,
    "kind": "variable",
    "name": "veca",
    "memberof": "scene/nodes/Node.js",
    "static": true,
    "longname": "scene/nodes/Node.js~veca",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/nodes/Node.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2321,
    "kind": "variable",
    "name": "vecb",
    "memberof": "scene/nodes/Node.js",
    "static": true,
    "longname": "scene/nodes/Node.js~vecb",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/nodes/Node.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2322,
    "kind": "variable",
    "name": "identityMat",
    "memberof": "scene/nodes/Node.js",
    "static": true,
    "longname": "scene/nodes/Node.js~identityMat",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/nodes/Node.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2323,
    "kind": "class",
    "name": "Node",
    "memberof": "scene/nodes/Node.js",
    "static": true,
    "longname": "scene/nodes/Node.js~Node",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/nodes/Node.js",
    "importStyle": "{Node}",
    "description": "A scene graph node within a {@link Viewer}'s {@link Scene}.",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Node"
      }
    ],
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 2324,
    "kind": "get",
    "name": "type",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 36,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2325,
    "kind": "get",
    "name": "isNode",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#isNode",
    "access": "private",
    "description": "",
    "lineNumber": 43,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2326,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Component"
        ],
        "spread": false,
        "optional": false,
        "name": "owner",
        "description": "Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg",
        "description": "Configs"
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.id",
        "description": "Optional ID, unique among all components in the parent scene, generated automatically when omitted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.guid",
        "description": "{String} Optional globally unique identifier. This is unique not only within the {@link Scene}, but throughout the entire universe."
      },
      {
        "nullable": null,
        "types": [
          "String:Object"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.meta",
        "description": "Optional map of user-defined metadata."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.objectId",
        "description": "{String} Optional object ID."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.parent",
        "description": "{Node} The parent."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "cfg.position",
        "description": "{Float32Array} Local 3D position."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,1,1]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "cfg.scale",
        "description": "{Float32Array} Local scale."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[0,0,0]",
        "defaultRaw": [
          0,
          0,
          0
        ],
        "name": "cfg.rotation",
        "description": "{Float32Array} Local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1] {Float32Array} Local modelling transform matrix. Overrides the position, scale and rotation parameters.",
        "defaultRaw": "[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1] {Float32Array} Local modelling transform matrix. Overrides the position, scale and rotation parameters.",
        "name": "cfg.matrix",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cfg.visible",
        "description": "{Boolean}        Indicates if visible."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.culled",
        "description": "{Boolean}        Indicates if culled from view."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cfg.pickable",
        "description": "{Boolean}       Indicates if pickable."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cfg.clippable",
        "description": "{Boolean}      Indicates if clippable."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cfg.collidable",
        "description": "{Boolean}     Indicates if included in boundary calculations."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cfg.castShadow",
        "description": "{Boolean}     Indicates if casting shadows."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cfg.receiveShadow",
        "description": "{Boolean}  Indicates if receiving shadows."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.outlined",
        "description": "{Boolean}      Indicates if outline is rendered."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.ghosted",
        "description": "{Boolean}       Indicates if ghosted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.highlighted",
        "description": "{Boolean}   Indicates if highlighted."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.selected",
        "description": "{Boolean}      Indicates if selected."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.edges",
        "description": "{Boolean}         Indicates if edges are emphasized."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "cfg.aabbVisible",
        "description": "{Boolean}   Indicates if axis-aligned World-space bounding box is visible."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[1.0,1.0,1.0]",
        "defaultRaw": [
          1,
          1,
          1
        ],
        "name": "cfg.colorize",
        "description": "{Float32Array}  RGB colorize color, multiplies by the rendered fragment colors."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1.0",
        "defaultRaw": 1,
        "name": "cfg.opacity",
        "description": "{Number}          Opacity factor, multiplies by the rendered fragment alpha."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "cfg.children",
        "description": "{Array(Node)}      Children to add. Children must be in the same {@link Scene} and will be removed from whatever parents they may already have."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cfg.inheritStates",
        "description": "{Boolean}  Indicates if children given to this constructor should inherit state from this parent as they are added. RenderState includes {@link Node/visible}, {@link Node/culled}, {@link Node/pickable},\n{@link Node/clippable}, {@link Node/castShadow}, {@link Node/receiveShadow},\n{@link Node/outlined}, {@link Node/ghosted}, {@link Node/highlighted},\n{@link Node/selected}, {@link Node/colorize} and {@link Node/opacity}."
      }
    ]
  },
  {
    "__docId__": 2327,
    "kind": "member",
    "name": "_parent",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_parent",
    "access": "private",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2328,
    "kind": "member",
    "name": "_childList",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_childList",
    "access": "private",
    "description": null,
    "lineNumber": 89,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 2329,
    "kind": "member",
    "name": "_childMap",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_childMap",
    "access": "private",
    "description": null,
    "lineNumber": 90,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 2330,
    "kind": "member",
    "name": "_childIDs",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_childIDs",
    "access": "private",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2331,
    "kind": "member",
    "name": "_aabb",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_aabb",
    "access": "private",
    "description": null,
    "lineNumber": 93,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2332,
    "kind": "member",
    "name": "_aabbDirty",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_aabbDirty",
    "access": "private",
    "description": null,
    "lineNumber": 94,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2333,
    "kind": "member",
    "name": "_scale",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_scale",
    "access": "private",
    "description": null,
    "lineNumber": 97,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2334,
    "kind": "member",
    "name": "_quaternion",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_quaternion",
    "access": "private",
    "description": null,
    "lineNumber": 98,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2335,
    "kind": "member",
    "name": "_rotation",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_rotation",
    "access": "private",
    "description": null,
    "lineNumber": 99,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2336,
    "kind": "member",
    "name": "_position",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_position",
    "access": "private",
    "description": null,
    "lineNumber": 100,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2337,
    "kind": "member",
    "name": "_worldMatrix",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_worldMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2338,
    "kind": "member",
    "name": "_worldNormalMatrix",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_worldNormalMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2339,
    "kind": "member",
    "name": "_localMatrixDirty",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_localMatrixDirty",
    "access": "private",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2340,
    "kind": "member",
    "name": "_worldMatrixDirty",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_worldMatrixDirty",
    "access": "private",
    "description": null,
    "lineNumber": 106,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2341,
    "kind": "member",
    "name": "_worldNormalMatrixDirty",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_worldNormalMatrixDirty",
    "access": "private",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2346,
    "kind": "member",
    "name": "_objectId",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_objectId",
    "access": "private",
    "description": null,
    "lineNumber": 121,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2347,
    "kind": "member",
    "name": "_modelId",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_modelId",
    "access": "private",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2361,
    "kind": "member",
    "name": "layer",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#layer",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2364,
    "kind": "method",
    "name": "_setLocalMatrixDirty",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_setLocalMatrixDirty",
    "access": "private",
    "description": null,
    "lineNumber": 173,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2366,
    "kind": "method",
    "name": "_setWorldMatrixDirty",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_setWorldMatrixDirty",
    "access": "private",
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2369,
    "kind": "method",
    "name": "_buildWorldMatrix",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_buildWorldMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 188,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2371,
    "kind": "method",
    "name": "_buildWorldNormalMatrix",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_buildWorldNormalMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 200,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2374,
    "kind": "method",
    "name": "_setSubtreeAABBsDirty",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_setSubtreeAABBsDirty",
    "access": "private",
    "description": null,
    "lineNumber": 213,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "object",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2375,
    "kind": "method",
    "name": "_setAABBDirty",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_setAABBDirty",
    "access": "private",
    "description": null,
    "lineNumber": 223,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2376,
    "kind": "method",
    "name": "_updateAABB",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_updateAABB",
    "access": "private",
    "description": null,
    "lineNumber": 233,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2378,
    "kind": "member",
    "name": "_aabbCenter",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_aabbCenter",
    "access": "private",
    "description": null,
    "lineNumber": 251,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2380,
    "kind": "method",
    "name": "addChild",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#addChild",
    "access": "public",
    "description": "Adds a child {@link Node}.\n\nThe child must be a {@link Node} in the same {@link Scene}.\n\nIf the child already has a parent, will be removed from that parent first.\n\nDoes nothing if already a child.",
    "lineNumber": 275,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{Node} The child."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "Instance or ID of the child to add."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "inheritStates",
        "description": "Indicates if the child should inherit state from this parent as it is added. RenderState includes\n{@link Node/visible}, {@link Node/culled}, {@link Node/pickable},\n{@link Node/clippable}, {@link Node/castShadow}, {@link Node/receiveShadow},\n{@link Node/outlined}, {@link Node/ghosted}, {@link Node/highlighted},\n{@link Node/selected}, {@link Node/edges}, {@link Node/colorize} and {@link Node/opacity}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Node"
      ],
      "spread": false,
      "description": "The child."
    }
  },
  {
    "__docId__": 2382,
    "kind": "method",
    "name": "removeChild",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#removeChild",
    "access": "public",
    "description": "Removes the given child.",
    "lineNumber": 336,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "removeChild"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Node"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "Child to remove."
      }
    ],
    "return": null
  },
  {
    "__docId__": 2385,
    "kind": "method",
    "name": "removeChildren",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#removeChildren",
    "access": "public",
    "description": "Removes all children.",
    "lineNumber": 356,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "removeChildren"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 2389,
    "kind": "method",
    "name": "rotate",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#rotate",
    "access": "public",
    "description": "Rotates about the given local axis by the given increment.",
    "lineNumber": 377,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "rotate"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "axis",
        "description": "Local axis about which to rotate."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle increment in degrees."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2391,
    "kind": "method",
    "name": "rotateOnWorldAxis",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#rotateOnWorldAxis",
    "access": "public",
    "description": "Rotates about the given World-space axis by the given increment.",
    "lineNumber": 398,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "rotate"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "axis",
        "description": "Local axis about which to rotate."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle increment in degrees."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2392,
    "kind": "method",
    "name": "rotateX",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#rotateX",
    "access": "public",
    "description": "Rotates about the local X-axis by the given increment.",
    "lineNumber": 415,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "rotateX"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle increment in degrees."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2393,
    "kind": "method",
    "name": "rotateY",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#rotateY",
    "access": "public",
    "description": "Rotates about the local Y-axis by the given increment.",
    "lineNumber": 425,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "rotateY"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle increment in degrees."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2394,
    "kind": "method",
    "name": "rotateZ",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#rotateZ",
    "access": "public",
    "description": "Rotates about the local Z-axis by the given increment.",
    "lineNumber": 435,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "rotateZ"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "angle",
        "description": "Angle increment in degrees."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2395,
    "kind": "method",
    "name": "translate",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#translate",
    "access": "public",
    "description": "Translates along local space vector by the given increment.",
    "lineNumber": 446,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "translate"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": false,
        "name": "axis",
        "description": "Normalized local space 3D vector along which to translate."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "distance",
        "description": "Distance to translate along  the vector."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2396,
    "kind": "method",
    "name": "translateX",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#translateX",
    "access": "public",
    "description": "Translates along the local X-axis by the given increment.",
    "lineNumber": 462,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "translateX"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "distance",
        "description": "Distance to translate along  the X-axis."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2397,
    "kind": "method",
    "name": "translateY",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#translateY",
    "access": "public",
    "description": "Translates along the local Y-axis by the given increment.",
    "lineNumber": 472,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "translateX"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "distance",
        "description": "Distance to translate along  the Y-axis."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2398,
    "kind": "method",
    "name": "translateZ",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#translateZ",
    "access": "public",
    "description": "Translates along the local Z-axis by the given increment.",
    "lineNumber": 482,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "translateX"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "distance",
        "description": "Distance to translate along  the Z-axis."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2399,
    "kind": "get",
    "name": "objectId",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#objectId",
    "access": "public",
    "description": "Optional ID to identify this Node as an {@link Object}.",
    "lineNumber": 494,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "null"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objectId",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2400,
    "kind": "get",
    "name": "modelId",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#modelId",
    "access": "public",
    "description": "Optional ID to identify this Node as a {@link Model}.",
    "lineNumber": 506,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "null"
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "modelId",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2401,
    "kind": "get",
    "name": "numChildren",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#numChildren",
    "access": "public",
    "description": "Number of child {@link Node}s.",
    "lineNumber": 521,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "numChildren",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2402,
    "kind": "get",
    "name": "children",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#children",
    "access": "public",
    "description": "Array of child {@link Node}s.",
    "lineNumber": 532,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "children",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2403,
    "kind": "get",
    "name": "childMap",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#childMap",
    "access": "public",
    "description": "Child {@link Node}s mapped to their IDs.",
    "lineNumber": 543,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "childMap",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2404,
    "kind": "get",
    "name": "childIDs",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#childIDs",
    "access": "public",
    "description": "IDs of child {@link Node}s.",
    "lineNumber": 554,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "childIDs",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2406,
    "kind": "set",
    "name": "parent",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#parent",
    "access": "public",
    "description": "The parent.\n\nThe parent Node may also be set by passing the Node to the\nNode/Model's {@link Node/addChild:method\"}}addChild(){{/crossLink}} method.",
    "lineNumber": 570,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "parent",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2407,
    "kind": "get",
    "name": "parent",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#parent",
    "access": "public",
    "description": null,
    "lineNumber": 594,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2408,
    "kind": "set",
    "name": "position",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#position",
    "access": "public",
    "description": "Local translation.",
    "lineNumber": 609,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0,0,0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "position",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2409,
    "kind": "get",
    "name": "position",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#position",
    "access": "public",
    "description": null,
    "lineNumber": 616,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2410,
    "kind": "set",
    "name": "rotation",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#rotation",
    "access": "public",
    "description": "Local rotation, as Euler angles given in degrees, for each of the X, Y and Z axis.",
    "lineNumber": 627,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0,0,0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "rotation",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2411,
    "kind": "get",
    "name": "rotation",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#rotation",
    "access": "public",
    "description": null,
    "lineNumber": 635,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2412,
    "kind": "set",
    "name": "quaternion",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#quaternion",
    "access": "public",
    "description": "Local rotation quaternion.",
    "lineNumber": 646,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0,0,0, 1]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "quaternion",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2413,
    "kind": "get",
    "name": "quaternion",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#quaternion",
    "access": "public",
    "description": null,
    "lineNumber": 654,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2414,
    "kind": "set",
    "name": "scale",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#scale",
    "access": "public",
    "description": "Local scale.",
    "lineNumber": 665,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1,1,1]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "scale",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2415,
    "kind": "get",
    "name": "scale",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#scale",
    "access": "public",
    "description": null,
    "lineNumber": 672,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2416,
    "kind": "set",
    "name": "matrix",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#matrix",
    "access": "public",
    "description": "Local matrix.",
    "lineNumber": 683,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "matrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2417,
    "kind": "member",
    "name": "__localMatrix",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#__localMatrix",
    "access": "private",
    "description": null,
    "lineNumber": 685,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2419,
    "kind": "get",
    "name": "matrix",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#matrix",
    "access": "public",
    "description": null,
    "lineNumber": 695,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2422,
    "kind": "get",
    "name": "worldMatrix",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#worldMatrix",
    "access": "public",
    "description": "The World matrix.",
    "lineNumber": 712,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "worldMatrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2423,
    "kind": "get",
    "name": "worldNormalMatrix",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#worldNormalMatrix",
    "access": "public",
    "description": "This World normal matrix.",
    "lineNumber": 726,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "worldNormalMatrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2424,
    "kind": "get",
    "name": "aabb",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#aabb",
    "access": "public",
    "description": "World-space 3D axis-aligned bounding box (AABB).\n\nRepresented by a six-element Float32Array containing the min/max extents of the\naxis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.",
    "lineNumber": 802,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "aabb",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2425,
    "kind": "get",
    "name": "center",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#center",
    "access": "public",
    "description": "World-space 3D center.",
    "lineNumber": 816,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "center",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2426,
    "kind": "set",
    "name": "visible",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#visible",
    "access": "public",
    "description": "Indicates if visible.\n\nOnly rendered when {@link Node/visible} is true and\n{@link Node/culled} is false.\n\nEach visible Node is registered in its {@link Scene}'s\n{@link Scene#visibleObjects} map while its {@link Node/objectId}\nis set to a value.",
    "lineNumber": 837,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "visible",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2427,
    "kind": "member",
    "name": "_visible",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_visible",
    "access": "private",
    "description": null,
    "lineNumber": 839,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2428,
    "kind": "get",
    "name": "visible",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#visible",
    "access": "public",
    "description": null,
    "lineNumber": 848,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2429,
    "kind": "set",
    "name": "highlighted",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#highlighted",
    "access": "public",
    "description": "Indicates if highlighted.\n\nEach highlighted Node is registered in its {@link Scene}'s\n{@link Scene#highlightedObjects} map while its {@link Node/objectId}\nis set to a value.",
    "lineNumber": 863,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlighted",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2430,
    "kind": "member",
    "name": "_highlighted",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_highlighted",
    "access": "private",
    "description": null,
    "lineNumber": 865,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2431,
    "kind": "get",
    "name": "highlighted",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#highlighted",
    "access": "public",
    "description": null,
    "lineNumber": 874,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2432,
    "kind": "set",
    "name": "ghosted",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#ghosted",
    "access": "public",
    "description": "Indicates if ghosted.\n\nEach ghosted Node is registered in its {@link Scene}'s\n{@link Scene#ghostedObjects} map while its {@link Node/objectId}\nis set to a value.",
    "lineNumber": 889,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghosted",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2433,
    "kind": "member",
    "name": "_ghosted",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_ghosted",
    "access": "private",
    "description": null,
    "lineNumber": 891,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2434,
    "kind": "get",
    "name": "ghosted",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#ghosted",
    "access": "public",
    "description": null,
    "lineNumber": 900,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2435,
    "kind": "set",
    "name": "selected",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#selected",
    "access": "public",
    "description": "Indicates if selected.\n\nEach selected Node is registered in its {@link Scene}'s\n{@link Scene#selectedObjects} map while its {@link Node/objectId}\nis set to a value.",
    "lineNumber": 915,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selected",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2436,
    "kind": "member",
    "name": "_selected",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_selected",
    "access": "private",
    "description": null,
    "lineNumber": 917,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2437,
    "kind": "get",
    "name": "selected",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#selected",
    "access": "public",
    "description": null,
    "lineNumber": 926,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2438,
    "kind": "set",
    "name": "edges",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#edges",
    "access": "public",
    "description": "Indicates if edges are emphasized.",
    "lineNumber": 937,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edges",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2439,
    "kind": "member",
    "name": "_edges",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_edges",
    "access": "private",
    "description": null,
    "lineNumber": 939,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2440,
    "kind": "get",
    "name": "edges",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#edges",
    "access": "public",
    "description": null,
    "lineNumber": 945,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2441,
    "kind": "set",
    "name": "culled",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#culled",
    "access": "public",
    "description": "Indicates if culled from view.\n\nOnly rendered when {@link Node/visible} is true and\n{@link Node/culled} is false.",
    "lineNumber": 959,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "culled",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2442,
    "kind": "member",
    "name": "_culled",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_culled",
    "access": "private",
    "description": null,
    "lineNumber": 961,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2443,
    "kind": "get",
    "name": "culled",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#culled",
    "access": "public",
    "description": null,
    "lineNumber": 967,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2444,
    "kind": "set",
    "name": "clippable",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#clippable",
    "access": "public",
    "description": "Indicates if clippable.\n\nClipping is done by the {@link Clip} components in {@link Scene#clips}.",
    "lineNumber": 980,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "clippable",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2445,
    "kind": "member",
    "name": "_clippable",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_clippable",
    "access": "private",
    "description": null,
    "lineNumber": 982,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2446,
    "kind": "get",
    "name": "clippable",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#clippable",
    "access": "public",
    "description": null,
    "lineNumber": 988,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2447,
    "kind": "set",
    "name": "collidable",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#collidable",
    "access": "public",
    "description": "Indicates if included in boundary calculations.",
    "lineNumber": 999,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "collidable",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2448,
    "kind": "member",
    "name": "_collidable",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_collidable",
    "access": "private",
    "description": null,
    "lineNumber": 1001,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2449,
    "kind": "get",
    "name": "collidable",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#collidable",
    "access": "public",
    "description": null,
    "lineNumber": 1007,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2450,
    "kind": "set",
    "name": "pickable",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#pickable",
    "access": "public",
    "description": "Whether or not to allow picking.\n\nPicking is done via calls to {@link Scene#pick}.",
    "lineNumber": 1020,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pickable",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2451,
    "kind": "member",
    "name": "_pickable",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_pickable",
    "access": "private",
    "description": null,
    "lineNumber": 1022,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2452,
    "kind": "get",
    "name": "pickable",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#pickable",
    "access": "public",
    "description": null,
    "lineNumber": 1028,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2453,
    "kind": "set",
    "name": "colorize",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#colorize",
    "access": "public",
    "description": "RGB colorize color, multiplies by the rendered fragment color.",
    "lineNumber": 1039,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[1.0, 1.0, 1.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "colorize",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2454,
    "kind": "get",
    "name": "colorize",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#colorize",
    "access": "public",
    "description": null,
    "lineNumber": 1059,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2455,
    "kind": "set",
    "name": "opacity",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#opacity",
    "access": "public",
    "description": "Opacity factor, multiplies by the rendered fragment alpha.\n\nThis is a factor in range ````[0..1]````.",
    "lineNumber": 1072,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "opacity",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2456,
    "kind": "get",
    "name": "opacity",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#opacity",
    "access": "public",
    "description": null,
    "lineNumber": 1086,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2457,
    "kind": "set",
    "name": "outlined",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#outlined",
    "access": "public",
    "description": "Indicates if outlined.",
    "lineNumber": 1097,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outlined",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2458,
    "kind": "member",
    "name": "_outlined",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_outlined",
    "access": "private",
    "description": null,
    "lineNumber": 1099,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2459,
    "kind": "get",
    "name": "outlined",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#outlined",
    "access": "public",
    "description": null,
    "lineNumber": 1105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2460,
    "kind": "set",
    "name": "castShadow",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#castShadow",
    "access": "public",
    "description": "Indicates if casting shadows.",
    "lineNumber": 1116,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "castShadow",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2461,
    "kind": "member",
    "name": "_castShadow",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_castShadow",
    "access": "private",
    "description": null,
    "lineNumber": 1118,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2462,
    "kind": "get",
    "name": "castShadow",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#castShadow",
    "access": "public",
    "description": null,
    "lineNumber": 1124,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2463,
    "kind": "set",
    "name": "receiveShadow",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#receiveShadow",
    "access": "public",
    "description": "Indicates if receiving shadows.",
    "lineNumber": 1135,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "receiveShadow",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2464,
    "kind": "member",
    "name": "_receiveShadow",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_receiveShadow",
    "access": "private",
    "description": null,
    "lineNumber": 1137,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2465,
    "kind": "get",
    "name": "receiveShadow",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#receiveShadow",
    "access": "public",
    "description": null,
    "lineNumber": 1143,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2466,
    "kind": "set",
    "name": "aabbVisible",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#aabbVisible",
    "access": "public",
    "description": "Indicates if the 3D World-space axis-aligned bounding box (AABB) is visible.",
    "lineNumber": 1154,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "aabbVisible",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2467,
    "kind": "member",
    "name": "_aabbHelper",
    "memberof": "scene/nodes/Node.js~Node",
    "static": false,
    "longname": "scene/nodes/Node.js~Node#_aabbHelper",
    "access": "private",
    "description": null,
    "lineNumber": 1159,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2468,
    "kind": "get",
    "name": "aabbVisible",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#aabbVisible",
    "access": "public",
    "description": null,
    "lineNumber": 1173,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2469,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/nodes/Node.js~Node",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/nodes/Node.js~Node#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 1177,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2473,
    "kind": "file",
    "name": "scene/paths/CubicBezierCurve.js",
    "content": "import {Curve} from \"./Curve.js\"\nimport {math} from \"../math/math.js\";\n\nclass CubicBezierCurve extends Curve {\n\n    constructor(owner, cfg={}) {\n        super(owner, cfg);\n        this.v0 = cfg.v0;\n        this.v1 = cfg.v1;\n        this.v2 = cfg.v2;\n        this.v3 = cfg.v3;\n        this.t = cfg.t;\n    }\n\n    /**\n     Starting point on this CubicBezierCurve.\n\n     Fires a {@link CubicBezierCurve/v0:event} event on change.\n\n     @property v0\n     @default [0.0, 0.0, 0.0]\n     @type Float32Array\n     */\n    set v0(value) {\n\n        /**\n         * Fired whenever this CubicBezierCurve's\n         * {@link CubicBezierCurve/v0} property changes.\n         * @event v0\n         * @param value The property's new value\n         */\n        this.fire(\"v0\", this._v0 = value || math.vec3([0, 0, 0]));\n    }\n\n    get v0() {\n        return this._v0;\n    }\n\n    /**\n     First control point on this CubicBezierCurve.\n\n     Fires a {@link CubicBezierCurve/v1:event} event on change.\n\n     @property v1\n     @default [0.0, 0.0, 0.0]\n     @type Float32Array\n     */\n    set v1(value) {\n\n        /**\n         * Fired whenever this CubicBezierCurve's\n         * {@link CubicBezierCurve/v1} property changes.\n         * @event v1\n         * @param value The property's new value\n         */\n        this.fire(\"v1\", this._v1 = value || math.vec3([0, 0, 0]));\n    }\n\n    get v1() {\n        return this._v1;\n    }\n\n    /**\n     Second control point on this CubicBezierCurve.\n\n     Fires a {@link CubicBezierCurve/v2:event} event on change.\n\n     @property v2\n     @default [0.0, 0.0, 0.0]\n     @type Float32Array\n     */\n    set v2(value) {\n\n        /**\n         * Fired whenever this CubicBezierCurve's\n         * {@link CubicBezierCurve/v2} property changes.\n         * @event v2\n         * @param value The property's new value\n         */\n        this.fire(\"v2\", this._v2 = value || math.vec3([0, 0, 0]));\n    }\n\n    get v2() {\n        return this._v2;\n    }\n\n    /**\n     End point on this CubicBezierCurve.\n\n     Fires a {@link CubicBezierCurve/v3:event} event on change.\n\n     @property v3\n     @default [0.0, 0.0, 0.0]\n     @type Float32Array\n     */\n    set v3(value) {\n\n        /**\n         * Fired whenever this CubicBezierCurve's\n         * {@link CubicBezierCurve/v3} property changes.\n         * @event v3\n         * @param value The property's new value\n         */\n        this.fire(\"v3\", this._v3 = value || math.vec3([0, 0, 0]));\n    }\n\n    get v3() {\n        return this._v3;\n    }\n\n    /**\n     Current position of progress along this CubicBezierCurve.\n\n     Automatically clamps to range [0..1].\n\n     Fires a {@link CubicBezierCurve/t:event} event on change.\n\n     @property t\n     @default 0\n     @type Number\n     */\n\n    set t(value) {\n\n        value = value || 0;\n\n        this._t = value < 0.0 ? 0.0 : (value > 1.0 ? 1.0 : value);\n\n        /**\n         * Fired whenever this CubicBezierCurve's\n         * {@link CubicBezierCurve/t} property changes.\n         * @event t\n         * @param value The property's new value\n         */\n        this.fire(\"t\", this._t);\n    }\n\n    get t() {\n        return this._t;\n    }\n\n    /**\n     Point on this CubicBezierCurve at position {@link CubicBezierCurve/t}.\n\n     @property point\n     @type {{Array of Number}}\n     */\n    get point() {\n        return this.getPoint(this._t);\n    }\n\n    /**\n     * Returns point on this CubicBezierCurve at the given position.\n     * @method getPoint\n     * @param {Number} t Position to get point at.\n     * @returns {{Array of Number}}\n     */\n    getPoint(t) {\n\n        var vector = math.vec3();\n\n        vector[0] = math.b3(t, this._v0[0], this._v1[0], this._v2[0], this._v3[0]);\n        vector[1] = math.b3(t, this._v0[1], this._v1[1], this._v2[1], this._v3[1]);\n        vector[2] = math.b3(t, this._v0[2], this._v1[2], this._v2[2], this._v3[2]);\n\n        return vector;\n    }\n\n    getJSON() {\n        return {\n            v0: this._v0,\n            v1: this._v1,\n            v2: this._v2,\n            v3: this._v3,\n            t: this._t\n        };\n    }\n}\n\nexport {CubicBezierCurve}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/paths/CubicBezierCurve.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2474,
    "kind": "class",
    "name": "CubicBezierCurve",
    "memberof": "scene/paths/CubicBezierCurve.js",
    "static": true,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/paths/CubicBezierCurve.js",
    "importStyle": "{CubicBezierCurve}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "scene/paths/Curve.js~Curve"
    ]
  },
  {
    "__docId__": 2475,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 2481,
    "kind": "set",
    "name": "v0",
    "memberof": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve#v0",
    "access": "public",
    "description": "Starting point on this CubicBezierCurve.\n\nFires a {@link CubicBezierCurve/v0:event} event on change.",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.0, 0.0, 0.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v0",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2482,
    "kind": "get",
    "name": "v0",
    "memberof": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve#v0",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2483,
    "kind": "set",
    "name": "v1",
    "memberof": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve#v1",
    "access": "public",
    "description": "First control point on this CubicBezierCurve.\n\nFires a {@link CubicBezierCurve/v1:event} event on change.",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.0, 0.0, 0.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v1",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2484,
    "kind": "get",
    "name": "v1",
    "memberof": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve#v1",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2485,
    "kind": "set",
    "name": "v2",
    "memberof": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve#v2",
    "access": "public",
    "description": "Second control point on this CubicBezierCurve.\n\nFires a {@link CubicBezierCurve/v2:event} event on change.",
    "lineNumber": 72,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.0, 0.0, 0.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v2",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2486,
    "kind": "get",
    "name": "v2",
    "memberof": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve#v2",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2487,
    "kind": "set",
    "name": "v3",
    "memberof": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve#v3",
    "access": "public",
    "description": "End point on this CubicBezierCurve.\n\nFires a {@link CubicBezierCurve/v3:event} event on change.",
    "lineNumber": 96,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.0, 0.0, 0.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v3",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2488,
    "kind": "get",
    "name": "v3",
    "memberof": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve#v3",
    "access": "public",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2489,
    "kind": "set",
    "name": "t",
    "memberof": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve#t",
    "access": "public",
    "description": "Current position of progress along this CubicBezierCurve.\n\nAutomatically clamps to range [0..1].\n\nFires a {@link CubicBezierCurve/t:event} event on change.",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2490,
    "kind": "member",
    "name": "_t",
    "memberof": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "static": false,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve#_t",
    "access": "private",
    "description": null,
    "lineNumber": 127,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2491,
    "kind": "get",
    "name": "t",
    "memberof": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve#t",
    "access": "public",
    "description": null,
    "lineNumber": 138,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2492,
    "kind": "get",
    "name": "point",
    "memberof": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve#point",
    "access": "public",
    "description": "Point on this CubicBezierCurve at position {@link CubicBezierCurve/t}.",
    "lineNumber": 148,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{Array of Number}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2493,
    "kind": "method",
    "name": "getPoint",
    "memberof": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve#getPoint",
    "access": "public",
    "description": "Returns point on this CubicBezierCurve at the given position.",
    "lineNumber": 158,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getPoint"
      },
      {
        "tagName": "@returns",
        "tagValue": "{{Array of Number}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "Position to get point at."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Array of Number}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2494,
    "kind": "method",
    "name": "getJSON",
    "memberof": "scene/paths/CubicBezierCurve.js~CubicBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/CubicBezierCurve.js~CubicBezierCurve#getJSON",
    "access": "public",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"v0\": *, \"v1\": *, \"v2\": *, \"v3\": *, \"t\": *}"
      ]
    }
  },
  {
    "__docId__": 2495,
    "kind": "file",
    "name": "scene/paths/Curve.js",
    "content": "import {Component} from \"./../Component.js\"\nimport {math} from \"../math/math.js\";\n\nclass Curve extends Component {\n\n    constructor(owner, cfg={}) {\n        super(owner, cfg);\n        this.t = cfg.t;\n    }\n\n    /**\n     Progress along this Curve.\n\n     Automatically clamps to range [0..1].\n\n     @property t\n     @default 0\n     @type Number\n     */\n    set t(value) {\n        value = value || 0;\n        this._t = value < 0.0 ? 0.0 : (value > 1.0 ? 1.0 : value);\n    }\n\n    get t() {\n        return this._t;\n    }\n\n    /**\n     Tangent on this Curve at position {@link Curve/t}.\n\n     @property tangent\n     @type {{Array of Number}}\n     */\n    get tangent() {\n        return this.getTangent(this._t);\n    }\n\n    /**\n     Length of this Curve.\n     @property length\n     @type {Number}\n     */\n    get length() {\n        var lengths = this._getLengths();\n        return lengths[lengths.length - 1];\n    }\n\n    /**\n     * Returns a normalized tangent vector on this Curve at the given position.\n     * @method getTangent\n     * @param {Number} t Position to get tangent at.\n     * @returns {{Array of Number}} Normalized tangent vector\n     */\n    getTangent(t) {\n        var delta = 0.0001;\n        if (t === undefined) {\n            t = this._t;\n        }\n        var t1 = t - delta;\n        var t2 = t + delta;\n        if (t1 < 0) {\n            t1 = 0;\n        }\n        if (t2 > 1) {\n            t2 = 1;\n        }\n        var pt1 = this.getPoint(t1);\n        var pt2 = this.getPoint(t2);\n        var vec = math.subVec3(pt2, pt1, []);\n        return math.normalizeVec3(vec, []);\n    }\n\n    getPointAt(u) {\n        var t = this.getUToTMapping(u);\n        return this.getPoint(t);\n    }\n\n    /**\n     * Samples points on this Curve, at the given number of equally-spaced divisions.\n     * @method getPoints\n     * @param {Number} divisions The number of divisions.\n     * @returns {Array of Array} Array of sampled 3D points.\n     */\n    getPoints(divisions) {\n        if (!divisions) {\n            divisions = 5;\n        }\n        var d, pts = [];\n        for (d = 0; d <= divisions; d++) {\n            pts.push(this.getPoint(d / divisions));\n        }\n        return pts;\n    }\n\n    getSpacedPoints(divisions) {\n        if (!divisions) {\n            divisions = 5;\n        }\n        var d, pts = [];\n        for (d = 0; d <= divisions; d++) {\n            pts.push(this.getPointAt(d / divisions));\n        }\n        return pts;\n    }\n\n    _getLengths(divisions) {\n        if (!divisions) {\n            divisions = (this.__arcLengthDivisions) ? (this.__arcLengthDivisions) : 200;\n        }\n        if (this.cacheArcLengths && ( this.cacheArcLengths.length === divisions + 1 ) && !this.needsUpdate) {\n            return this.cacheArcLengths;\n\n        }\n        this.needsUpdate = false;\n        var cache = [];\n        var current;\n        var last = this.getPoint(0);\n        var p;\n        var sum = 0;\n        cache.push(0);\n        for (p = 1; p <= divisions; p++) {\n            current = this.getPoint(p / divisions);\n            sum += math.lenVec3(math.subVec3(current, last, []));\n            cache.push(sum);\n            last = current;\n        }\n        this.cacheArcLengths = cache;\n        return cache; // { sums: cache, sum:sum }, Sum is in the last element.\n    }\n\n    _updateArcLengths() {\n        this.needsUpdate = true;\n        this._getLengths();\n    }\n\n    // Given u ( 0 .. 1 ), get a t to find p. This gives you points which are equi distance\n\n    getUToTMapping(u, distance) {\n        var arcLengths = this._getLengths();\n        var i = 0;\n        var il = arcLengths.length;\n        var t;\n        var targetArcLength; // The targeted u distance value to get\n        if (distance) {\n            targetArcLength = distance;\n        } else {\n            targetArcLength = u * arcLengths[il - 1];\n        }\n        //var time = Date.now();\n        var low = 0, high = il - 1, comparison;\n        while (low <= high) {\n            i = Math.floor(low + ( high - low ) / 2); // less likely to overflow, though probably not issue here, JS doesn't really have integers, all numbers are floats\n            comparison = arcLengths[i] - targetArcLength;\n            if (comparison < 0) {\n                low = i + 1;\n            } else if (comparison > 0) {\n                high = i - 1;\n            } else {\n                high = i;\n                break;\n                // DONE\n            }\n        }\n        i = high;\n        if (arcLengths[i] === targetArcLength) {\n            t = i / ( il - 1 );\n            return t;\n        }\n        var lengthBefore = arcLengths[i];\n        var lengthAfter = arcLengths[i + 1];\n        var segmentLength = lengthAfter - lengthBefore;\n        var segmentFraction = ( targetArcLength - lengthBefore ) / segmentLength;\n        t = ( i + segmentFraction ) / ( il - 1 );\n        return t;\n    }\n}\n\nexport {Curve}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/paths/Curve.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2496,
    "kind": "class",
    "name": "Curve",
    "memberof": "scene/paths/Curve.js",
    "static": true,
    "longname": "scene/paths/Curve.js~Curve",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/paths/Curve.js",
    "importStyle": "{Curve}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 2497,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/paths/Curve.js~Curve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Curve.js~Curve#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 2499,
    "kind": "set",
    "name": "t",
    "memberof": "scene/paths/Curve.js~Curve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Curve.js~Curve#t",
    "access": "public",
    "description": "Progress along this Curve.\n\nAutomatically clamps to range [0..1].",
    "lineNumber": 20,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2500,
    "kind": "member",
    "name": "_t",
    "memberof": "scene/paths/Curve.js~Curve",
    "static": false,
    "longname": "scene/paths/Curve.js~Curve#_t",
    "access": "private",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2501,
    "kind": "get",
    "name": "t",
    "memberof": "scene/paths/Curve.js~Curve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Curve.js~Curve#t",
    "access": "public",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2502,
    "kind": "get",
    "name": "tangent",
    "memberof": "scene/paths/Curve.js~Curve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Curve.js~Curve#tangent",
    "access": "public",
    "description": "Tangent on this Curve at position {@link Curve/t}.",
    "lineNumber": 35,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "tangent",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{Array of Number}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2503,
    "kind": "get",
    "name": "length",
    "memberof": "scene/paths/Curve.js~Curve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Curve.js~Curve#length",
    "access": "public",
    "description": "Length of this Curve.",
    "lineNumber": 44,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2504,
    "kind": "method",
    "name": "getTangent",
    "memberof": "scene/paths/Curve.js~Curve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Curve.js~Curve#getTangent",
    "access": "public",
    "description": "Returns a normalized tangent vector on this Curve at the given position.",
    "lineNumber": 55,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getTangent"
      },
      {
        "tagName": "@returns",
        "tagValue": "{{Array of Number}} Normalized tangent vector"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "Position to get tangent at."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Array of Number}"
      ],
      "spread": false,
      "description": "Normalized tangent vector"
    }
  },
  {
    "__docId__": 2505,
    "kind": "method",
    "name": "getPointAt",
    "memberof": "scene/paths/Curve.js~Curve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Curve.js~Curve#getPointAt",
    "access": "public",
    "description": null,
    "lineNumber": 74,
    "undocument": true,
    "params": [
      {
        "name": "u",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2506,
    "kind": "method",
    "name": "getPoints",
    "memberof": "scene/paths/Curve.js~Curve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Curve.js~Curve#getPoints",
    "access": "public",
    "description": "Samples points on this Curve, at the given number of equally-spaced divisions.",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getPoints"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Array of Array} Array of sampled 3D points."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "divisions",
        "description": "The number of divisions."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array of Array"
      ],
      "spread": false,
      "description": "Array of sampled 3D points."
    }
  },
  {
    "__docId__": 2507,
    "kind": "method",
    "name": "getSpacedPoints",
    "memberof": "scene/paths/Curve.js~Curve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Curve.js~Curve#getSpacedPoints",
    "access": "public",
    "description": null,
    "lineNumber": 96,
    "undocument": true,
    "params": [
      {
        "name": "divisions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2508,
    "kind": "method",
    "name": "_getLengths",
    "memberof": "scene/paths/Curve.js~Curve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Curve.js~Curve#_getLengths",
    "access": "private",
    "description": null,
    "lineNumber": 107,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "divisions",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2509,
    "kind": "member",
    "name": "needsUpdate",
    "memberof": "scene/paths/Curve.js~Curve",
    "static": false,
    "longname": "scene/paths/Curve.js~Curve#needsUpdate",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2510,
    "kind": "member",
    "name": "cacheArcLengths",
    "memberof": "scene/paths/Curve.js~Curve",
    "static": false,
    "longname": "scene/paths/Curve.js~Curve#cacheArcLengths",
    "access": "public",
    "description": null,
    "lineNumber": 128,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2511,
    "kind": "method",
    "name": "_updateArcLengths",
    "memberof": "scene/paths/Curve.js~Curve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Curve.js~Curve#_updateArcLengths",
    "access": "private",
    "description": null,
    "lineNumber": 132,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2513,
    "kind": "method",
    "name": "getUToTMapping",
    "memberof": "scene/paths/Curve.js~Curve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Curve.js~Curve#getUToTMapping",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [
      {
        "name": "u",
        "types": [
          "*"
        ]
      },
      {
        "name": "distance",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2514,
    "kind": "file",
    "name": "scene/paths/Path.js",
    "content": "import {utils} from \"../utils.js\";\nimport {Curve} from \"./curve.js\"\n\nclass Path extends Curve {\n\n    constructor(owner, cfg={}) {\n        super(owner, cfg);\n        this._cachedLengths = [];\n        this._dirty = true;\n        this._curves = []; // Array of child Curve components\n        this._t = 0;\n        this._dirtySubs = []; // Subscriptions to \"dirty\" events from child Curve components\n        this._destroyedSubs = []; // Subscriptions to \"destroyed\" events from child Curve components\n        this.curves = cfg.curves || [];    // Add initial curves\n        this.t = cfg.t; // Set initial progress\n    }\n\n    /**\n     * Adds a {@link Curve} to this Path.\n     *\n     * @param {Curve} curve The {@link Curve} to add.\n     */\n    addCurve(curve) {\n        this._curves.push(curve);\n        this._dirty = true;\n    }\n\n    /**\n     The {@link Curve\"}}Curves{{/crossLink}} in this Path.\n\n     @property curves\n     @default []\n     @type {{Array of Spline, Path, QuadraticBezierCurve or CubicBezierCurve}}\n     */\n    set curves(value) {\n\n        value = value || [];\n\n        var curve;\n        // Unsubscribe from events on old curves\n        var i;\n        var len;\n        for (i = 0, len = this._curves.length; i < len; i++) {\n            curve = this._curves[i];\n            curve.off(this._dirtySubs[i]);\n            curve.off(this._destroyedSubs[i]);\n        }\n\n        this._curves = [];\n        this._dirtySubs = [];\n        this._destroyedSubs = [];\n\n        var self = this;\n\n        function curveDirty() {\n            self._dirty = true;\n        }\n\n        function curveDestroyed() {\n            var id = this.id;\n            for (i = 0, len = self._curves.length; i < len; i++) {\n                if (self._curves[i].id === id) {\n                    self._curves = self._curves.slice(i, i + 1);\n                    self._dirtySubs = self._dirtySubs.slice(i, i + 1);\n                    self._destroyedSubs = self._destroyedSubs.slice(i, i + 1);\n                    self._dirty = true;\n                    self.fire(\"curves\", self._curves);\n                    return;\n                }\n            }\n        }\n\n        for (i = 0, len = value.length; i < len; i++) {\n            curve = value[i];\n            if (utils.isNumeric(curve) || utils.isString(curve)) {\n                // ID given for curve - find the curve component\n                var id = curve;\n                curve = this.scene.components[id];\n                if (!curve) {\n                    this.error(\"Component not found: \" + _inQuotes(id));\n                    continue;\n                }\n            }\n\n            var type = curve.type;\n\n            if (type !== \"xeokit.SplineCurve\" &&\n                type !== \"xeokit.Path\" &&\n                type !== \"xeokit.CubicBezierCurve\" &&\n                type !== \"xeokit.QuadraticBezierCurve\") {\n\n                this.error(\"Component \" + _inQuotes(curve.id)\n                    + \" is not a xeokit.SplineCurve, xeokit.Path or xeokit.QuadraticBezierCurve\");\n\n                continue;\n            }\n\n            this._curves.push(curve);\n            this._dirtySubs.push(curve.on(\"dirty\", curveDirty));\n            this._destroyedSubs.push(curve.once(\"destroyed\", curveDestroyed));\n        }\n\n        this._dirty = true;\n\n        this.fire(\"curves\", this._curves);\n    }\n\n    get curves() {\n        return this._curves;\n    }\n\n    /**\n     Current point of progress along this Path.\n\n     Automatically clamps to range [0..1].\n\n     Fires a {@link Path/t:event} event on change.\n\n     @property t\n     @default 0\n     @type Number\n     */\n    set t(value) {\n        value = value || 0;\n        this._t = value < 0.0 ? 0.0 : (value > 1.0 ? 1.0 : value);\n        /**\n         * Fired whenever this Path's\n         * {@link Path/t} property changes.\n         * @event t\n         * @param value The property's new value\n         */\n        this.fire(\"t\", this._t);\n    }\n\n    get t() {\n        return this._t;\n    }\n\n    /**\n     Point on this Path corresponding to the current value of {@link Path/t}.\n\n     @property point\n     @type {{Array of Number}}\n     */\n    get point() {\n        return this.getPoint(this._t);\n    }\n\n    /**\n     Length of this Path, which is the cumulative length of all {@link Curve/t:property\"}}Curves{{/crossLink}}\n     currently in {@link Path/curves}.\n\n     @property length\n     @type {Number}\n     */\n    get length() {\n        var lens = this._getCurveLengths();\n        return lens[lens.length - 1];\n    }\n\n    /**\n     * Gets a point on this Path corresponding to the given progress position.\n     * @param {Number} t Indicates point of progress along this curve, in the range [0..1].\n     * @returns {{Array of Number}}\n     */\n    getPoint(t) {\n        var d = t * this.length;\n        var curveLengths = this._getCurveLengths();\n        var i = 0, diff, curve;\n        while (i < curveLengths.length) {\n            if (curveLengths[i] >= d) {\n                diff = curveLengths[i] - d;\n                curve = this._curves[i];\n                var u = 1 - diff / curve.length;\n                return curve.getPointAt(u);\n            }\n            i++;\n        }\n        return null;\n    }\n\n    _getCurveLengths() {\n        if (!this._dirty) {\n            return this._cachedLengths;\n        }\n        var lengths = [];\n        var sums = 0;\n        var i, il = this._curves.length;\n        for (i = 0; i < il; i++) {\n            sums += this._curves[i].length;\n            lengths.push(sums);\n\n        }\n        this._cachedLengths = lengths;\n        this._dirty = false;\n        return lengths;\n    }\n\n    _getJSON() {\n        var curveIds = [];\n        for (var i = 0, len = this._curves.length; i < len; i++) {\n            curveIds.push(this._curves[i].id);\n        }\n        return {\n            curves: curveIds,\n            t: this._t\n        };\n    }\n\n    destroy() {\n        super.destroy();\n        var i;\n        var len;\n        var curve;\n        for (i = 0, len = this._curves.length; i < len; i++) {\n            curve = this._curves[i];\n            curve.off(this._dirtySubs[i]);\n            curve.off(this._destroyedSubs[i]);\n        }\n    }\n}\n\nexport {Path}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/paths/Path.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2515,
    "kind": "class",
    "name": "Path",
    "memberof": "scene/paths/Path.js",
    "static": true,
    "longname": "scene/paths/Path.js~Path",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/paths/Path.js",
    "importStyle": "{Path}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false,
    "extends": [
      "scene/paths/curve.js~Curve"
    ]
  },
  {
    "__docId__": 2516,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/paths/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Path.js~Path#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 2517,
    "kind": "member",
    "name": "_cachedLengths",
    "memberof": "scene/paths/Path.js~Path",
    "static": false,
    "longname": "scene/paths/Path.js~Path#_cachedLengths",
    "access": "private",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 2518,
    "kind": "member",
    "name": "_dirty",
    "memberof": "scene/paths/Path.js~Path",
    "static": false,
    "longname": "scene/paths/Path.js~Path#_dirty",
    "access": "private",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2519,
    "kind": "member",
    "name": "_curves",
    "memberof": "scene/paths/Path.js~Path",
    "static": false,
    "longname": "scene/paths/Path.js~Path#_curves",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 2520,
    "kind": "member",
    "name": "_t",
    "memberof": "scene/paths/Path.js~Path",
    "static": false,
    "longname": "scene/paths/Path.js~Path#_t",
    "access": "private",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 2521,
    "kind": "member",
    "name": "_dirtySubs",
    "memberof": "scene/paths/Path.js~Path",
    "static": false,
    "longname": "scene/paths/Path.js~Path#_dirtySubs",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 2522,
    "kind": "member",
    "name": "_destroyedSubs",
    "memberof": "scene/paths/Path.js~Path",
    "static": false,
    "longname": "scene/paths/Path.js~Path#_destroyedSubs",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 2525,
    "kind": "method",
    "name": "addCurve",
    "memberof": "scene/paths/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Path.js~Path#addCurve",
    "access": "public",
    "description": "Adds a {@link Curve} to this Path.",
    "lineNumber": 23,
    "params": [
      {
        "nullable": null,
        "types": [
          "Curve"
        ],
        "spread": false,
        "optional": false,
        "name": "curve",
        "description": "The {@link Curve} to add."
      }
    ],
    "return": null
  },
  {
    "__docId__": 2527,
    "kind": "set",
    "name": "curves",
    "memberof": "scene/paths/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Path.js~Path#curves",
    "access": "public",
    "description": "The {@link Curve\"}}Curves{{/crossLink}} in this Path.",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "curves",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{Array of Spline, Path, QuadraticBezierCurve or CubicBezierCurve}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2532,
    "kind": "get",
    "name": "curves",
    "memberof": "scene/paths/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Path.js~Path#curves",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2533,
    "kind": "set",
    "name": "t",
    "memberof": "scene/paths/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Path.js~Path#t",
    "access": "public",
    "description": "Current point of progress along this Path.\n\nAutomatically clamps to range [0..1].\n\nFires a {@link Path/t:event} event on change.",
    "lineNumber": 123,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2535,
    "kind": "get",
    "name": "t",
    "memberof": "scene/paths/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Path.js~Path#t",
    "access": "public",
    "description": null,
    "lineNumber": 135,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2536,
    "kind": "get",
    "name": "point",
    "memberof": "scene/paths/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Path.js~Path#point",
    "access": "public",
    "description": "Point on this Path corresponding to the current value of {@link Path/t}.",
    "lineNumber": 145,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{Array of Number}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2537,
    "kind": "get",
    "name": "length",
    "memberof": "scene/paths/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Path.js~Path#length",
    "access": "public",
    "description": "Length of this Path, which is the cumulative length of all {@link Curve/t:property\"}}Curves{{/crossLink}}\ncurrently in {@link Path/curves}.",
    "lineNumber": 156,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "length",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2538,
    "kind": "method",
    "name": "getPoint",
    "memberof": "scene/paths/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Path.js~Path#getPoint",
    "access": "public",
    "description": "Gets a point on this Path corresponding to the given progress position.",
    "lineNumber": 166,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{{Array of Number}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "Indicates point of progress along this curve, in the range [0..1]."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Array of Number}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2539,
    "kind": "method",
    "name": "_getCurveLengths",
    "memberof": "scene/paths/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Path.js~Path#_getCurveLengths",
    "access": "private",
    "description": null,
    "lineNumber": 182,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2542,
    "kind": "method",
    "name": "_getJSON",
    "memberof": "scene/paths/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Path.js~Path#_getJSON",
    "access": "private",
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "{\"curves\": *, \"t\": *}"
      ]
    }
  },
  {
    "__docId__": 2543,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/paths/Path.js~Path",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/Path.js~Path#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2544,
    "kind": "file",
    "name": "scene/paths/QuadraticBezierCurve.js",
    "content": "import {Curve} from \"./Curve.js\"\nimport {math} from \"../math/math.js\";\n\n/**\n * @private\n */\nclass QuadraticBezierCurve extends Curve {\n\n    constructor(owner, cfg={}) {\n        super(owner, cfg);\n        this.v0 = cfg.v0;\n        this.v1 = cfg.v1;\n        this.v2 = cfg.v2;\n        this.t = cfg.t;\n    }\n\n    /**\n     Starting point on this QuadraticBezierCurve.\n\n     Fires a {@link QuadraticBezierCurve/v0:event} event on change.\n\n     @property v0\n     @default [0.0, 0.0, 0.0]\n     @type Float32Array\n     */\n    set v0(value) {\n\n        /**\n         * Fired whenever this QuadraticBezierCurve's\n         * {@link QuadraticBezierCurve/v0} property changes.\n         * @event v0\n         * @param value The property's new value\n         */\n        this.fire(\"v0\", this._v0 = value || math.vec3([0, 0, 0]));\n    }\n\n    get v0() {\n        return this._v0;\n    }\n\n    /**\n     Middle control point on this QuadraticBezierCurve.\n\n     Fires a {@link QuadraticBezierCurve/v1:event} event on change.\n\n     @property v1\n     @default [0.0, 0.0, 0.0]\n     @type Float32Array\n     */\n    set v1(value) {\n\n        /**\n         * Fired whenever this QuadraticBezierCurve's\n         * {@link QuadraticBezierCurve/v1} property changes.\n         * @event v1\n         * @param value The property's new value\n         */\n        this.fire(\"v1\", this._v1 = value || math.vec3([0, 0, 0]));\n    }\n\n    get v1() {\n        return this._v1;\n    }\n\n    /**\n     End point on this QuadraticBezierCurve.\n\n     Fires a {@link QuadraticBezierCurve/v2:event} event on change.\n\n     @property v2\n     @default [0.0, 0.0, 0.0]\n     @type Float32Array\n     */\n    set v2(value) {\n        /**\n         * Fired whenever this QuadraticBezierCurve's\n         * {@link QuadraticBezierCurve/v2} property changes.\n         * @event v2\n         * @param value The property's new value\n         */\n        this.fire(\"v2\", this._v2 = value || math.vec3([0, 0, 0]));\n    }\n\n    get v2() {\n        return this._v2;\n    }\n\n    /**\n     Progress along this QuadraticBezierCurve.\n\n     Automatically clamps to range [0..1].\n\n     Fires a {@link QuadraticBezierCurve/t:event} event on change.\n\n     @property t\n     @default 0\n     @type Number\n     */\n    set t(value) {\n        value = value || 0;\n        this._t = value < 0.0 ? 0.0 : (value > 1.0 ? 1.0 : value);\n        /**\n         * Fired whenever this QuadraticBezierCurve's\n         * {@link QuadraticBezierCurve/t} property changes.\n         * @event t\n         * @param value The property's new value\n         */\n        this.fire(\"t\", this._t);\n    }\n\n    get t() {\n        return this._t;\n    }\n\n    /**\n     Point on this QuadraticBezierCurve at position {@link QuadraticBezierCurve/t}.\n\n     @property point\n     @type {{Array of Number}}\n     */\n    get point() {\n        return this.getPoint(this._t);\n    }\n\n    /**\n     * Returns point on this QuadraticBezierCurve at the given position.\n     * @method getPoint\n     * @param {Number} t Position to get point at.\n     * @returns {{Array of Number}}\n     */\n    getPoint(t) {\n        var vector = math.vec3();\n        vector[0] = math.b2(t, this._v0[0], this._v1[0], this._v2[0]);\n        vector[1] = math.b2(t, this._v0[1], this._v1[1], this._v2[1]);\n        vector[2] = math.b2(t, this._v0[2], this._v1[2], this._v2[2]);\n        return vector;\n    }\n\n    getJSON() {\n        return {\n            v0: this._v0,\n            v1: this._v1,\n            v2: this._v2,\n            t: this._t\n        };\n    }\n}\n\nexport {QuadraticBezierCurve}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/paths/QuadraticBezierCurve.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2545,
    "kind": "class",
    "name": "QuadraticBezierCurve",
    "memberof": "scene/paths/QuadraticBezierCurve.js",
    "static": true,
    "longname": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/paths/QuadraticBezierCurve.js",
    "importStyle": "{QuadraticBezierCurve}",
    "description": "",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "scene/paths/Curve.js~Curve"
    ],
    "ignore": true
  },
  {
    "__docId__": 2546,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 2551,
    "kind": "set",
    "name": "v0",
    "memberof": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve#v0",
    "access": "public",
    "description": "Starting point on this QuadraticBezierCurve.\n\nFires a {@link QuadraticBezierCurve/v0:event} event on change.",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.0, 0.0, 0.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v0",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2552,
    "kind": "get",
    "name": "v0",
    "memberof": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve#v0",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2553,
    "kind": "set",
    "name": "v1",
    "memberof": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve#v1",
    "access": "public",
    "description": "Middle control point on this QuadraticBezierCurve.\n\nFires a {@link QuadraticBezierCurve/v1:event} event on change.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.0, 0.0, 0.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v1",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2554,
    "kind": "get",
    "name": "v1",
    "memberof": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve#v1",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2555,
    "kind": "set",
    "name": "v2",
    "memberof": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve#v2",
    "access": "public",
    "description": "End point on this QuadraticBezierCurve.\n\nFires a {@link QuadraticBezierCurve/v2:event} event on change.",
    "lineNumber": 74,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[0.0, 0.0, 0.0]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "v2",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2556,
    "kind": "get",
    "name": "v2",
    "memberof": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve#v2",
    "access": "public",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2557,
    "kind": "set",
    "name": "t",
    "memberof": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve#t",
    "access": "public",
    "description": "Progress along this QuadraticBezierCurve.\n\nAutomatically clamps to range [0..1].\n\nFires a {@link QuadraticBezierCurve/t:event} event on change.",
    "lineNumber": 99,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2558,
    "kind": "member",
    "name": "_t",
    "memberof": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve",
    "static": false,
    "longname": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve#_t",
    "access": "private",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2559,
    "kind": "get",
    "name": "t",
    "memberof": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve#t",
    "access": "public",
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2560,
    "kind": "get",
    "name": "point",
    "memberof": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve#point",
    "access": "public",
    "description": "Point on this QuadraticBezierCurve at position {@link QuadraticBezierCurve/t}.",
    "lineNumber": 121,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{Array of Number}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2561,
    "kind": "method",
    "name": "getPoint",
    "memberof": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve#getPoint",
    "access": "public",
    "description": "Returns point on this QuadraticBezierCurve at the given position.",
    "lineNumber": 131,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getPoint"
      },
      {
        "tagName": "@returns",
        "tagValue": "{{Array of Number}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "Position to get point at."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Array of Number}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2562,
    "kind": "method",
    "name": "getJSON",
    "memberof": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/QuadraticBezierCurve.js~QuadraticBezierCurve#getJSON",
    "access": "public",
    "description": null,
    "lineNumber": 139,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"v0\": *, \"v1\": *, \"v2\": *, \"t\": *}"
      ]
    }
  },
  {
    "__docId__": 2563,
    "kind": "file",
    "name": "scene/paths/SplineCurve.js",
    "content": "import {Curve} from \"./Curve.js\"\nimport {math} from \"../math/math.js\";\n\n/**\n * @private\n */\nclass SplineCurve extends Curve {\n\n    constructor(owner, cfg={}) {\n        super(owner, cfg);\n        this.points = cfg.points;\n        this.t = cfg.t;\n    }\n\n    /**\n     Control points on this SplineCurve.\n\n     Fires a {@link SplineCurve/points:event} event on change.\n\n     @property points\n     @default []\n     @type Float32Array\n     */\n    set points(value) {\n        this._points = value || [];\n        /**\n         * Fired whenever this SplineCurve's\n         * {@link SplineCurve/points} property changes.\n         * @event points\n         * @param value The property's new value\n         */\n        this.fire(\"points\", this._points);\n    }\n\n    get points() {\n        return this._points;\n    }\n\n    /**\n     Progress along this SplineCurve.\n\n     Automatically clamps to range [0..1].\n\n     Fires a {@link SplineCurve/t:event} event on change.\n\n     @property t\n     @default 0\n     @type Number\n     */\n    set t(value) {\n        value = value || 0;\n        this._t = value < 0.0 ? 0.0 : (value > 1.0 ? 1.0 : value);\n        /**\n         * Fired whenever this SplineCurve's\n         * {@link SplineCurve/t} property changes.\n         * @event t\n         * @param value The property's new value\n         */\n        this.fire(\"t\", this._t);\n    }\n\n    get t() {\n        return this._t;\n    }\n\n    /**\n     Point on this SplineCurve at position {@link SplineCurve/t}.\n\n     @property point\n     @type {{Array of Number}}\n     */\n    get point() {\n        return this.getPoint(this._t);\n    }\n\n    /**\n     * Returns point on this SplineCurve at the given position.\n     * @method getPoint\n     * @param {Number} t Position to get point at.\n     * @returns {{Array of Number}}\n     */\n    getPoint(t) {\n\n        var points = this.points;\n\n        if (points.length < 3) {\n            this.error(\"Can't sample point from SplineCurve - not enough points on curve - returning [0,0,0].\");\n            return;\n        }\n\n        var point = ( points.length - 1 ) * t;\n\n        var intPoint = Math.floor(point);\n        var weight = point - intPoint;\n\n        var point0 = points[intPoint === 0 ? intPoint : intPoint - 1];\n        var point1 = points[intPoint];\n        var point2 = points[intPoint > points.length - 2 ? points.length - 1 : intPoint + 1];\n        var point3 = points[intPoint > points.length - 3 ? points.length - 1 : intPoint + 2];\n\n        var vector = math.vec3();\n\n        vector[0] = math.catmullRomInterpolate(point0[0], point1[0], point2[0], point3[0], weight);\n        vector[1] = math.catmullRomInterpolate(point0[1], point1[1], point2[1], point3[1], weight);\n        vector[2] = math.catmullRomInterpolate(point0[2], point1[2], point2[2], point3[2], weight);\n\n        return vector;\n    }\n\n    getJSON() {\n        return {\n            points: points,\n            t: this._t\n        };\n    }\n}\n\nexport {SplineCurve}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/paths/SplineCurve.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2564,
    "kind": "class",
    "name": "SplineCurve",
    "memberof": "scene/paths/SplineCurve.js",
    "static": true,
    "longname": "scene/paths/SplineCurve.js~SplineCurve",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/paths/SplineCurve.js",
    "importStyle": "{SplineCurve}",
    "description": "",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "scene/paths/Curve.js~Curve"
    ],
    "ignore": true
  },
  {
    "__docId__": 2565,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/paths/SplineCurve.js~SplineCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/SplineCurve.js~SplineCurve#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 2568,
    "kind": "set",
    "name": "points",
    "memberof": "scene/paths/SplineCurve.js~SplineCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/SplineCurve.js~SplineCurve#points",
    "access": "public",
    "description": "Control points on this SplineCurve.\n\nFires a {@link SplineCurve/points:event} event on change.",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "points",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2569,
    "kind": "member",
    "name": "_points",
    "memberof": "scene/paths/SplineCurve.js~SplineCurve",
    "static": false,
    "longname": "scene/paths/SplineCurve.js~SplineCurve#_points",
    "access": "private",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2570,
    "kind": "get",
    "name": "points",
    "memberof": "scene/paths/SplineCurve.js~SplineCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/SplineCurve.js~SplineCurve#points",
    "access": "public",
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2571,
    "kind": "set",
    "name": "t",
    "memberof": "scene/paths/SplineCurve.js~SplineCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/SplineCurve.js~SplineCurve#t",
    "access": "public",
    "description": "Progress along this SplineCurve.\n\nAutomatically clamps to range [0..1].\n\nFires a {@link SplineCurve/t:event} event on change.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2572,
    "kind": "member",
    "name": "_t",
    "memberof": "scene/paths/SplineCurve.js~SplineCurve",
    "static": false,
    "longname": "scene/paths/SplineCurve.js~SplineCurve#_t",
    "access": "private",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2573,
    "kind": "get",
    "name": "t",
    "memberof": "scene/paths/SplineCurve.js~SplineCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/SplineCurve.js~SplineCurve#t",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2574,
    "kind": "get",
    "name": "point",
    "memberof": "scene/paths/SplineCurve.js~SplineCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/SplineCurve.js~SplineCurve#point",
    "access": "public",
    "description": "Point on this SplineCurve at position {@link SplineCurve/t}.",
    "lineNumber": 72,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "point",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{Array of Number}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2575,
    "kind": "method",
    "name": "getPoint",
    "memberof": "scene/paths/SplineCurve.js~SplineCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/SplineCurve.js~SplineCurve#getPoint",
    "access": "public",
    "description": "Returns point on this SplineCurve at the given position.",
    "lineNumber": 82,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getPoint"
      },
      {
        "tagName": "@returns",
        "tagValue": "{{Array of Number}}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "t",
        "description": "Position to get point at."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "{Array of Number}"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 2576,
    "kind": "method",
    "name": "getJSON",
    "memberof": "scene/paths/SplineCurve.js~SplineCurve",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/paths/SplineCurve.js~SplineCurve#getJSON",
    "access": "public",
    "description": null,
    "lineNumber": 110,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"points\": *, \"t\": *}"
      ]
    }
  },
  {
    "__docId__": 2577,
    "kind": "file",
    "name": "scene/scene/Scene.js",
    "content": "\nimport {core} from '../core.js';\nimport {utils} from '../utils.js';\nimport {math} from '../math/math.js';\nimport {stats} from '../stats.js';\nimport {Component} from '../Component.js';\nimport {Canvas} from '../canvas/Canvas.js';\nimport {Renderer} from '../webgl/Renderer.js';\nimport {Input} from '../input/Input.js';\nimport {Viewport} from '../viewport/Viewport.js';\nimport {Camera} from '../camera/Camera.js';\nimport {DirLight} from '../lights/DirLight.js';\nimport {BoxGeometry} from '../geometry/BoxGeometry.js';\nimport {PhongMaterial} from '../materials/PhongMaterial.js';\nimport {EmphasisMaterial} from '../materials/EmphasisMaterial.js';\nimport {EdgeMaterial} from '../materials/EdgeMaterial.js';\nimport {OutlineMaterial} from '../materials/OutlineMaterial.js';\n\n// Cached vars to avoid garbage collection\n\nfunction getMeshIDMap(scene, meshIds) {\n    const map = {};\n    let meshId;\n    let mesh;\n    for (let i = 0, len = meshIds.length; i < len; i++) {\n        meshId = meshIds[i];\n        mesh = scene.meshes[meshId];\n        if (!mesh) {\n            scene.warn(\"pick(): Mesh not found: \" + meshId);\n            continue;\n        }\n        map[meshId] = true;\n    }\n    return map;\n}\n\n/**\n * Fired whenever a debug message is logged on a component within this Scene.\n * @event log\n * @param {String} value The debug message\n */\n\n/**\n * Fired whenever an error is logged on a component within this Scene.\n * @event error\n * @param {String} value The error message\n */\n\n/**\n * Fired whenever a warning is logged on a component within this Scene.\n * @event warn\n * @param {String} value The warning message\n */\n\n/**\n * @desc Contains the components that comprise a 3D scene.\n *\n * * A {@link Viewer} has a single Scene, which it provides in {@link Viewer#scene}.\n * * Plugins like {@link AxisGizmoPlugin} and {@link PlanViewPlugin} also have their own private Scenes.\n *\n * ## Getting a Viewer's Scene\n *\n * ````javascript\n * var scene = myViewer.scene;\n * ````\n *\n * ## Creating and accessing Scene components\n *\n * As a brief introduction to creating Scene components, we'll create a {@link Mesh} that has a\n * {@link TorusGeometry} and a {@link PhongMaterial}:\n *\n * ````javascript\n * var teapotMesh = new Mesh(scene, {\n *     id: \"myMesh\",                               // <<---------- ID automatically generated if not provided\n *     geometry: new TorusGeometry(scene),\n *     material: new PhongMaterial(scene, {\n *         id: \"myMaterial\",\n *         diffuse: [0.2, 0.2, 1.0]\n *     })\n * });\n *\n * teapotMesh.scene.camera.eye = [45, 45, 45];\n * ````\n *\n * Find components by ID in their Scene's {@link Scene#components} map:\n *\n * ````javascript\n * var teapotMesh = scene.components[\"myMesh\"];\n * teapotMesh.visible = false;\n *\n * var teapotMaterial = scene.components[\"myMaterial\"];\n * teapotMaterial.diffuse = [1,0,0]; // Change to red\n * ````\n *\n * A Scene also has a map of component instances for each {@link Component} subtype:\n *\n * ````javascript\n * var meshes = scene.types[\"Mesh\"];\n * var teapotMesh = meshes[\"myMesh\"];\n * teapotMesh.ghosted = true;\n *\n * var phongMaterials = scene.types[\"PhongMaterial\"];\n * var teapotMaterial = phongMaterials[\"myMaterial\"];\n * teapotMaterial.diffuse = [0,1,0]; // Change to green\n * ````\n *\n * See {@link Node}, {@link Node} and {@link Model} for how to create and access more sophisticated content.\n *\n * ## Controlling the camera\n *\n * Use the Scene's {@link Camera} to control the current viewpoint and projection:\n *\n * ````javascript\n * var camera = myScene.camera;\n *\n * camera.eye = [-10,0,0];\n * camera.look = [-10,0,0];\n * camera.up = [0,1,0];\n *\n * camera.projection = \"perspective\";\n * camera.perspective.fov = 45;\n * //...\n * ````\n *\n * ## Managing the canvas, taking snapshots\n *\n * The Scene's {@link Canvas} component provides various conveniences relevant to the WebGL canvas, such\n * as getting getting snapshots, firing resize events etc:\n *\n * ````javascript\n * var canvas = scene.canvas;\n *\n * canvas.on(\"boundary\", function(boundary) {\n *     //...\n * });\n *\n * var imageData = canvas.getSnapshot({\n *     width: 500,\n *     height: 500,\n *     format: \"png\"\n * });\n * ````\n *\n * ## Picking\n *\n * Use {@link Scene#pick} to pick and raycast meshes.\n *\n * For example, to pick a point on the surface of the closest mesh at the given canvas coordinates:\n *\n * ````javascript\n * var hit = scene.pick({\n *      pickSurface: true,\n *      canvasPos: [23, 131]\n * });\n *\n * if (hit) { // Picked a Mesh\n *\n *     var mesh = hit.mesh;\n *\n *     var primitive = hit.primitive; // Type of primitive that was picked, usually \"triangles\"\n *     var primIndex = hit.primIndex; // Position of triangle's first index in the picked Mesh's Geometry's indices array\n *     var indices = hit.indices; // UInt32Array containing the triangle's vertex indices\n *     var localPos = hit.localPos; // Float32Array containing the picked Local-space position on the triangle\n *     var worldPos = hit.worldPos; // Float32Array containing the picked World-space position on the triangle\n *     var viewPos = hit.viewPos; // Float32Array containing the picked View-space position on the triangle\n *     var bary = hit.bary; // Float32Array containing the picked barycentric position within the triangle\n *     var normal = hit.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle\n *     var uv = hit.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle\n * }\n * ````\n *\n * ## Pick masking\n *\n * We can use {@link Scene#pick}'s ````includeMeshes```` and ````excludeMeshes````  options to mask which {@link Mesh}es we attempt to pick.\n *\n * This is useful for picking <em>through</em> things, to pick only the Meshes of interest.\n *\n * To pick only Meshes ````\"gearbox#77.0\"```` and ````\"gearbox#79.0\"````, picking through any other Meshes that are\n * in the way, as if they weren't there:\n *\n * ````javascript\n * var hit = scene.pick({\n *      canvasPos: [23, 131],\n *      includeMeshes: [\"gearbox#77.0\", \"gearbox#79.0\"]\n * });\n *\n * if (hit) {\n *       // Mesh will always be either \"gearbox#77.0\" or \"gearbox#79.0\"\n *       var mesh = hit.mesh;\n * }\n * ````\n *\n * To pick any pickable Mesh, except for ````\"gearbox#77.0\"```` and ````\"gearbox#79.0\"````, picking through those\n * Meshes if they happen to be in the way:\n *\n * ````javascript\n * var hit = scene.pick({\n *      canvasPos: [23, 131],\n *      excludeMeshes: [\"gearbox#77.0\", \"gearbox#79.0\"]\n * });\n *\n * if (hit) {\n *       // Mesh will never be \"gearbox#77.0\" or \"gearbox#79.0\"\n *       var mesh = hit.mesh;\n * }\n * ````\n *\n * See {@link Scene#pick} for more info on picking.\n *\n * ## Querying and tracking boundaries\n *\n * Getting a Scene's World-space axis-aligned boundary (AABB):\n *\n * ````javascript\n * var aabb = scene.aabb; // [xmin, ymin, zmin, xmax, ymax, zmax]\n * ````\n *\n * Subscribing to updates to the AABB, which occur whenever {@link Mesh}es are transformed, their\n * {@link Geometry}s have been updated, or the {@link Camera} has moved:\n *\n * ````javascript\n * scene.on(\"boundary\", function() {\n *      var aabb = scene.aabb;\n * });\n * ````\n *\n * Getting the AABB of the {@link Node}s with the given IDs:\n *\n * ````JavaScript\n * scene.getAABB(); // Gets collective boundary of all Mesh Objects in the scene\n * scene.getAABB(\"saw\"); // Gets boundary of an Object\n * scene.getAABB([\"saw\", \"gearbox\"]); // Gets collective boundary of two Objects\n * ````\n *\n * See {@link Scene#getAABB} and {@link Node} for more info on querying and tracking boundaries.\n *\n * ## Managing the viewport\n *\n * The Scene's {@link Viewport} component manages the WebGL viewport:\n *\n * ````javascript\n * var viewport = scene.viewport\n * viewport.boundary = [0, 0, 500, 400];;\n * ````\n *\n * ## Controlling rendering\n *\n * You can configure a Scene to perform multiple \"passes\" (renders) per frame. This is useful when we want to render the\n * scene to multiple viewports, such as for stereo effects.\n *\n * In the example, below, we'll configure the Scene to render twice on each frame, each time to different viewport. We'll do this\n * with a callback that intercepts the Scene before each render and sets its {@link Viewport} to a\n * different portion of the canvas. By default, the Scene will clear the canvas only before the first render, allowing the\n * two views to be shown on the canvas at the same time.\n *\n * ````Javascript\n * // Load a glTF model\n * var model = new GLTFModel({\n *     src: \"models/gltf/GearboxAssy/glTF-MaterialsCommon/GearboxAssy.gltf\"\n * });\n *\n * var scene = model.scene;\n * var viewport = scene.viewport;\n *\n * // Configure Scene to render twice for each frame\n * scene.passes = 2; // Default is 1\n * scene.clearEachPass = false; // Default is false\n *\n * // Render to a separate viewport on each render\n *\n * var viewport = scene.viewport;\n * viewport.autoBoundary = false;\n *\n * scene.on(\"rendering\", function (e) {\n *      switch (e.pass) {\n *          case 0:\n *              viewport.boundary = [0, 0, 200, 200]; // xmin, ymin, width, height\n *              break;\n *\n *          case 1:\n *              viewport.boundary = [200, 0, 200, 200];\n *              break;\n *      }\n * });\n *\n * // We can also intercept the Scene after each render,\n * // (though we're not using this for anything here)\n * scene.on(\"rendered\", function (e) {\n *      switch (e.pass) {\n *          case 0:\n *              break;\n *\n *          case 1:\n *              break;\n *      }\n * });\n * ````\n *\n * ## Gamma correction\n *\n * Within its shaders, xeokit performs shading calculations in linear space.\n *\n * By default, the Scene expects color textures (eg. {@link PhongMaterial#diffuseMap},\n * {@link MetallicMaterial#baseColorMap} and {@link SpecularMaterial#diffuseMap}) to\n * be in pre-multipled gamma space, so will convert those to linear space before they are used in shaders. Other textures are\n * always expected to be in linear space.\n *\n * By default, the Scene will also gamma-correct its rendered output.\n *\n * You can configure the Scene to expect all those color textures to be linear space, so that it does not gamma-correct them:\n *\n * ````javascript\n * scene.gammaInput = false;\n * ````\n *\n * You would still need to gamma-correct the output, though, if it's going straight to the canvas, so normally we would\n * leave that enabled:\n *\n * ````javascript\n * scene.gammaOutput = true;\n * ````\n *\n * See {@link Texture} for more information on texture encoding and gamma.\n *\n * @class Scene\n */\nclass Scene extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Scene\";\n    }\n\n    /**\n     * @constructor\n     */\n    constructor(cfg={}) {\n\n        super(null, cfg);\n\n        if (!cfg.canvasId) {\n            throw \"Mandatory config expected: canvasId\";\n        }\n\n        const canvas = document.getElementById(cfg.canvasId);\n        if (!canvas) {\n            throw \"Canvas not found: '\" + cfg.canvasId + \"'\";\n        }\n\n        const self = this;\n\n        const transparent = !!cfg.transparent;\n\n        /**\n         The number of models currently loading.\n\n         @property loading\n         @final\n         @type {Number}\n         */\n        this.loading = 0;\n\n        /**\n         The epoch time (in milliseconds since 1970) when this Scene was instantiated.\n\n         @property timeCreated\n         @final\n         @type {Number}\n         */\n        this.startTime = (new Date()).getTime();\n\n        /**\n         {@link Model}s in this Scene, mapped to their IDs.\n\n         @property models\n         @final\n         @type {{String:Model}}\n         */\n        this.models = {};\n\n        /**\n         {@link Node}s in this Scene that have {@link Node#objectId} properties, mapped to those IDs.\n\n         Each Object is registered in this map when its {@link Node#objectId} is assigned a value.\n\n         @property objects\n         @final\n         @type {{String:Object}}\n         */\n        this.objects = {};\n\n        /**\n         Visible entity {@link Node}s within this Scene, mapped to their IDs.\n\n         Each Object is registered in this map when its {@link Node/visible} property is true and its\n         {@link Node/objectId} is assigned a value.\n\n         @property visibleObjects\n         @final\n         @type {{String:Object}}\n         */\n        this.visibleObjects = {};\n\n        /**\n         Ghosted entity {@link Node}s within this Scene, mapped to their IDs.\n\n         Each Object is registered in this map when its {@link Node/ghosted} property is true and its\n         {@link Node/objectId} is assigned a value.\n\n         @property ghostedObjects\n         @final\n         @type {{String:Object}}\n         */\n        this.ghostedObjects = {};\n\n        /**\n         Highlighted entity {@link Node}s within this Scene, mapped to their IDs.\n\n         Each Object is registered in this map when its {@link Node/highlighted} property is true and its\n         {@link Node/objectId} is assigned a value.\n\n         @property highlightedObjects\n         @final\n         @type {{String:Object}}\n         */\n        this.highlightedObjects = {};\n\n        /**\n         Selected entity {@link Node}s within this Scene, mapped to their IDs.\n\n         Each Object is registered in this map when its {@link Node/selected} property is true and its\n         {@link Node/objectId} is assigned a value.\n\n         @property selectedObjects\n         @final\n         @type {{String:Object}}\n         */\n        this.selectedObjects = {};\n\n        // Cached ID arrays, lazy-rebuilt as needed when stale after map updates\n\n        /**\n         Lazy-regenerated ID lists.\n         */\n        this._modelIds = null;\n        this._objectIds = null;\n        this._visibleObjectIds = null;\n        this._ghostedObjectIds = null;\n        this._highlightedObjectIds = null;\n        this._selectedObjectIds = null;\n\n        this._collidables = {}; // Components that contribute to the Scene AABB\n        this._compilables = {}; // Components that require shader compilation\n\n        this._needRecompile = false;\n\n        /**\n         For each {@link Component} type, a map of\n         IDs to {@link Component} instances of that type.\n\n         @property types\n         @final\n         @type {String:{String:Component}}\n         */\n        this.types = {};\n\n        /**\n         The {@link Component}s within this Scene, each mapped to its {@link Component#id}.\n\n         @property components\n         @final\n         @type {String:Component}\n         */\n        this.components = {};\n\n        /**\n         The {@link Clip}s in this Scene, each mapped to its {@link Clip#id}.\n\n         @property clips\n         @final\n         @type {{String:Clip}}\n         */\n        this.clips = {};\n\n        /**\n         The {@link Light}s in this Scene, each mapped to its {@link Light#id}.\n\n         @property lights\n         @final\n         @type {{String:Light}}\n         */\n        this.lights = {};\n\n        /**\n         The {@link LightMap}s in this Scene, each mapped to its its {@link LightMap#id}.\n\n         @property lightMaps\n         @final\n         @type {{String:LightMap}}\n         */\n        this.lightMaps = {};\n\n        /**\n         The {@link ReflectionMap}s in this Scene, mapped to its {@link ReflectionMap#id}.\n\n         @property reflectionMaps\n         @final\n         @type {{String:ReflectionMap}}\n         */\n        this.reflectionMaps = {};\n\n        /**\n         Manages the HTML5 canvas for this Scene.\n         @final\n         @property canvas\n         @type {Canvas}\n         */\n        this.canvas = new Canvas(this, {\n            dontClear: true, // Never destroy this component with Scene#clear();\n            canvas: canvas,\n            transparent: transparent,\n            backgroundColor: cfg.backgroundColor,\n            backgroundImage: cfg.backgroundImage,\n            webgl2: cfg.webgl2 !== false,\n            contextAttr: cfg.contextAttr || {},\n            simulateWebGLContextLost: cfg.simulateWebGLContextLost\n        });\n\n        // Redraw as canvas resized\n        this.canvas.on(\"boundary\", function () {\n            self.glRedraw();\n        });\n\n        this.canvas.on(\"webglContextFailed\", function () {\n            alert(\"xeokit failed to find WebGL!\");\n        });\n\n        this._renderer = new Renderer(this, {\n            transparent: transparent\n        });\n\n        this._clipsState = new (function () {\n\n            this.clips = [];\n\n            let hash = null;\n\n            this.getHash = function () {\n                if (hash) {\n                    return hash;\n                }\n                const clips = this.clips;\n                if (clips.length === 0) {\n                    return this.hash = \";\";\n                }\n                let clip;\n                const hashParts = [];\n                for (let i = 0, len = clips.length; i < len; i++) {\n                    clip = clips[i];\n                    hashParts.push(\"cp\");\n                }\n                hashParts.push(\";\");\n                hash = hashParts.join(\"\");\n                return hash;\n            };\n\n            this.addClip = function (clip) {\n                this.clips.push(clip);\n                hash = null;\n            };\n\n            this.removeClip = function (clip) {\n                for (let i = 0, len = this.clips.length; i < len; i++) {\n                    if (this.clips[i].id === clip.id) {\n                        this.clips.splice(i, 1);\n                        hash = null;\n                        return;\n                    }\n                }\n            };\n        })();\n\n        this._lightsState = new (function () {\n\n            const DEFAULT_AMBIENT = math.vec3([0, 0, 0]);\n            const ambientColor = math.vec3();\n\n            this.lights = [];\n            this.reflectionMaps = [];\n            this.lightMaps = [];\n\n            let hash = null;\n            let ambientLight = null;\n\n            this.getHash = function () {\n                if (hash) {\n                    return hash;\n                }\n                const hashParts = [];\n                const lights = this.lights;\n                let light;\n                for (let i = 0, len = lights.length; i < len; i++) {\n                    light = lights[i];\n                    hashParts.push(\"/\");\n                    hashParts.push(light.type);\n                    hashParts.push((light.space === \"world\") ? \"w\" : \"v\");\n                    if (light.castShadow) {\n                        hashParts.push(\"sh\");\n                    }\n                }\n                if (this.lightMaps.length > 0) {\n                    hashParts.push(\"/lm\");\n                }\n                if (this.reflectionMaps.length > 0) {\n                    hashParts.push(\"/rm\");\n                }\n                hashParts.push(\";\");\n                hash = hashParts.join(\"\");\n                return hash;\n            };\n\n            this.addLight = function (state) {\n                this.lights.push(state);\n                ambientLight = null;\n                hash = null;\n            };\n\n            this.removeLight = function (state) {\n                for (let i = 0, len = this.lights.length; i < len; i++) {\n                    const light = this.lights[i];\n                    if (light.id === state.id) {\n                        this.lights.splice(i, 1);\n                        if (ambientLight && ambientLight.id === state.id) {\n                            ambientLight = null;\n                        }\n                        hash = null;\n                        return;\n                    }\n                }\n            };\n\n            this.addReflectionMap = function (state) {\n                this.reflectionMaps.push(state);\n                hash = null;\n            };\n\n            this.removeReflectionMap = function (state) {\n                for (let i = 0, len = this.reflectionMaps.length; i < len; i++) {\n                    if (this.reflectionMaps[i].id === state.id) {\n                        this.reflectionMaps.splice(i, 1);\n                        hash = null;\n                        return;\n                    }\n                }\n            };\n\n            this.addLightMap = function (state) {\n                this.lightMaps.push(state);\n                hash = null;\n            };\n\n            this.removeLightMap = function (state) {\n                for (let i = 0, len = this.lightMaps.length; i < len; i++) {\n                    if (this.lightMaps[i].id === state.id) {\n                        this.lightMaps.splice(i, 1);\n                        hash = null;\n                        return;\n                    }\n                }\n            };\n\n            this.getAmbientColor = function () {\n                if (!ambientLight) {\n                    for (let i = 0, len = this.lights.length; i < len; i++) {\n                        const light = this.lights[i];\n                        if (light.type === \"ambient\") {\n                            ambientLight = light;\n                            break;\n                        }\n                    }\n                }\n                if (ambientLight) {\n                    const color = ambientLight.color;\n                    const intensity = ambientLight.intensity;\n                    ambientColor[0] = color[0] * intensity;\n                    ambientColor[1] = color[1] * intensity;\n                    ambientColor[2] = color[2] * intensity;\n                    return ambientColor;\n                } else {\n                    return DEFAULT_AMBIENT;\n                }\n            };\n\n        })();\n\n        /**\n         Publishes input events that occur on this Scene's canvas.\n\n         @final\n         @property input\n         @type {Input}\n         @final\n         */\n        this.input = new Input(this, {\n            dontClear: true, // Never destroy this component with Scene#clear();\n            element: this.canvas.canvas\n        });\n\n        // Register Scene on xeokit\n        // Do this BEFORE we add components below\n        core._addScene(this);\n\n        this._initDefaults();\n\n        // Global components\n\n        this._viewport = new Viewport(this, {\n            id: \"default.viewport\",\n            autoBoundary: true,\n            dontClear: true // Never destroy this component with Scene#clear();\n        });\n\n        this._camera = new Camera(this, {\n            id: \"default.camera\",\n            dontClear: true // Never destroy this component with Scene#clear();\n        });\n\n        // Default lights\n\n        new DirLight(this, {\n            dir: [0.8, -0.6, -0.8],\n            color: [1.0, 1.0, 1.0],\n            intensity: 1.0,\n            space: \"view\"\n        });\n\n        new DirLight(this, {\n            dir: [-0.8, -0.4, -0.4],\n            color: [1.0, 1.0, 1.0],\n            intensity: 1.0,\n            space: \"view\"\n        });\n\n        new DirLight(this, {\n            dir: [0.2, -0.8, 0.8],\n            color: [0.6, 0.6, 0.6],\n            intensity: 1.0,\n            space: \"view\"\n        });\n\n        // Plug global components into renderer\n\n        const viewport = this._viewport;\n        const renderer = this._renderer;\n        const camera = this._camera;\n\n        camera.on(\"dirty\", function () {\n            renderer.imageDirty();\n        });\n\n        this.ticksPerRender = cfg.ticksPerRender;\n        this.passes = cfg.passes;\n        this.clearEachPass = cfg.clearEachPass;\n        this.gammaInput = cfg.gammaInput;\n        this.gammaOutput = cfg.gammaOutput;\n        this.gammaFactor = cfg.gammaFactor;\n    }\n\n    _initDefaults() {\n\n        // Call this Scene's property accessors to lazy-init their properties\n\n        let dummy; // Keeps Codacy happy\n\n        dummy = this.geometry;\n        dummy = this.material;\n        dummy = this.ghostMaterial;\n        dummy = this.outlineMaterial;\n        dummy = this.edgeMaterial;\n        dummy = this.selectedMaterial;\n        dummy = this.highlightMaterial;\n    }\n\n    _addComponent(component) {\n        if (component.id) { // Manual ID\n            if (this.components[component.id]) {\n                this.error(\"Component \" + utils.inQuotes(component.id) + \" already exists in Scene - ignoring ID, will randomly-generate instead\");\n                component.id = null;\n            }\n        }\n        if (!component.id) { // Auto ID\n            if (window.nextID === undefined) {\n                window.nextID = 0;\n            }\n            //component.id = math.createUUID();\n            component.id = \"_\" + window.nextID++;\n            while (this.components[component.id]) {\n                component.id = math.createUUID();\n            }\n        }\n        this.components[component.id] = component;\n\n        // Register for class type\n        const type = component.type;\n        let types = this.types[component.type];\n        if (!types) {\n            types = this.types[type] = {};\n        }\n        types[component.id] = component;\n\n        if (component.compile) {\n            this._compilables[component.id] = component;\n        }\n        if (component.isDrawable) {\n            this._renderer.addDrawable(component.id, component);\n            this._collidables[component.id] = component;\n        }\n        if (component.isModel) {\n            this.models[component.id] = component;\n        }\n    }\n\n    _removeComponent(component) {\n        var id = component.id;\n        var type = component.type;\n        delete this.components[id];\n        // Unregister for types\n        const types = this.types[type];\n        if (types) {\n            delete types[id];\n            if (utils.isEmptyObject(types)) {\n                delete this.types[type];\n            }\n        }\n        if (component.compile) {\n            delete this._compilables[component.id];\n        }\n        if (component.isDrawable) {\n            this._renderer.removeDrawable(component.id);\n            delete this._collidables[component.id];\n        }\n    }\n\n    // Methods below are called by various component types to register themselves on their\n    // Scene. Violates Hollywood Principle, where we could just filter on type in _addComponent,\n    // but this is faster than checking the type of each component in such a filter.\n\n    _clipCreated(clip) {\n        this.clips[clip.id] = clip;\n        this.scene._clipsState.addClip(clip._state);\n        this._needRecompile = true;\n    }\n\n    _lightCreated(light) {\n        this.lights[light.id] = light;\n        this.scene._lightsState.addLight(light._state);\n        this._needRecompile = true;\n    }\n\n    _lightMapCreated(lightMap) {\n        this.lightMaps[lightMap.id] = lightMap;\n        this.scene._lightsState.addLightMap(lightMap._state);\n        this._needRecompile = true;\n    }\n\n    _reflectionMapCreated(reflectionMap) {\n        this.reflectionMaps[reflectionMap.id] = reflectionMap;\n        this.scene._lightsState.addReflectionMap(reflectionMap._state);\n        this._needRecompile = true;\n    }\n\n    _clipDestroyed(clip) {\n        delete this.clips[clip.id];\n        this.scene._clipsState.removeClip(clip._state);\n        this._needRecompile = true;\n    }\n\n    _lightDestroyed(light) {\n        delete this.lights[light.id];\n        this.scene._lightsState.removeLight(light._state);\n        this._needRecompile = true;\n    }\n\n    _lightMapDestroyed(lightMap) {\n        delete this.lightMaps[lightMap.id];\n        this.scene._lightsState.removeLightMap(lightMap._state);\n        this._needRecompile = true;\n    }\n\n    _reflectionMapDestroyed(reflectionMap) {\n        delete this.reflectionMaps[reflectionMap.id];\n        this.scene._lightsState.removeReflectionMap(reflectionMap._state);\n        this._needRecompile = true;\n    }\n\n    _registerModel(component) {\n        this.models[component.modelId] = component;\n        this._modelIds = null; // Lazy regenerate\n    }\n\n    _deregisterModel(component) {\n        delete this.models[component.modelId];\n        this._modelIds = null; // Lazy regenerate\n    }\n    \n    _registerObject(component) {\n        this.objects[component.objectId] = component;\n        this._objectIds = null; // Lazy regenerate\n    }\n\n    _deregisterObject(component) {\n        delete this.objects[component.objectId];\n        this._objectIds = null; // Lazy regenerate\n    }\n\n    _objectVisibilityUpdated(component, visible) {\n        if (visible) {\n            this.visibleObjects[component.objectId] = component;\n        } else {\n            delete this.visibleObjects[component.objectId];\n        }\n        this._visibleObjectIds = null; // Lazy regenerate\n    }\n\n    _objectGhostedUpdated(component, ghosted) {\n        if (ghosted) {\n            this.ghostedObjects[component.objectId] = component;\n        } else {\n            delete this.ghostedObjects[component.objectId];\n        }\n        this._ghostedObjectIds = null; // Lazy regenerate\n    }\n\n    _objectHighlightedUpdated(component, highlighted) {\n        if (highlighted) {\n            this.highlightedObjects[component.objectId] = component;\n        } else {\n            delete this.highlightedObjects[component.objectId];\n        }\n        this._highlightedObjectIds = null; // Lazy regenerate\n    }\n\n    _objectSelectedUpdated(component, selected) {\n        if (selected) {\n            this.selectedObjects[component.objectId] = component;\n        } else {\n            delete this.selectedObjects[component.objectId];\n        }\n        this._selectedObjectIds = null; // Lazy regenerate\n    }\n\n    _webglContextLost() {\n        //  this.loading++;\n        this.canvas.spinner.processes++;\n        for (const id in this.components) {\n            if (this.components.hasOwnProperty(id)) {\n                const component = this.components[id];\n                if (component._webglContextLost) {\n                    component._webglContextLost();\n                }\n            }\n        }\n        this._renderer.webglContextLost();\n    }\n\n    _webglContextRestored() {\n        const gl = this.canvas.gl;\n        for (const id in this.components) {\n            if (this.components.hasOwnProperty(id)) {\n                const component = this.components[id];\n                if (component._webglContextRestored) {\n                    component._webglContextRestored(gl);\n                }\n            }\n        }\n        this._renderer.webglContextRestored(gl);\n        //this.loading--;\n        this.canvas.spinner.processes--;\n    }\n\n    /**\n     * Renders a single frame of this Scene.\n     *\n     * The Scene will periodically render itself after any updates, but you can call this method to force a render\n     * if required. This method is typically used when we want to synchronously take a snapshot of the canvas and\n     * need everything rendered right at that moment.\n     *\n     * @method render\n     * @param {Boolean} [forceRender=false] Forces a render when true, otherwise only renders if something has changed in this Scene\n     * since the last render.\n     */\n    render(forceRender) {\n\n        const renderEvent = {\n            sceneId: null,\n            pass: 0\n        };\n\n        if (this._needRecompile) {\n            this._recompile();\n            this._needRecompile = false;\n        }\n\n        if (this.loading > 0 || this.canvas.spinner.processes > 0) {\n            this.canvas.canvas.style.opacity = 0.0;\n            return;\n        }\n\n        let opacity = Number.parseFloat(this.canvas.canvas.style.opacity);\n        if (opacity < 1.0) {\n            opacity += 0.1;\n            this.canvas.canvas.style.opacity = opacity;\n        }\n\n        renderEvent.sceneId = this.id;\n\n        const passes = this._passes;\n        const clearEachPass = this._clearEachPass;\n        let pass;\n        let clear;\n\n        for (pass = 0; pass < passes; pass++) {\n\n            renderEvent.pass = pass;\n\n            /**\n             * Fired when about to render a frame for a Scene.\n             *\n             * @event rendering\n             * @param {String} sceneID The ID of this Scene.\n             * @param {Number} pass Index of the pass we are about to render (see {@link Scene#passes}).\n             */\n            this.fire(\"rendering\", renderEvent, true);\n\n            clear = clearEachPass || (pass === 0);\n\n            this._renderer.render({pass: pass, clear: clear, force: forceRender});\n\n            /**\n             * Fired when we have just rendered a frame for a Scene.\n             *\n             * @event rendering\n             * @param {String} sceneID The ID of this Scene.\n             * @param {Number} pass Index of the pass we rendered (see {@link Scene#passes}).\n             */\n            this.fire(\"rendered\", renderEvent, true);\n        }\n\n        this._saveAmbientColor();\n    }\n\n    _recompile() {\n        for (const id in this._compilables) {\n            if (this._compilables.hasOwnProperty(id)) {\n                this._compilables[id].compile();\n            }\n        }\n    }\n\n    _saveAmbientColor() {\n        const canvas = this.canvas;\n        if (!canvas.transparent && !canvas.backgroundImage && !canvas.backgroundColor) {\n            const ambientColor = this._lightsState.getAmbientColor();\n            if (!this._lastAmbientColor ||\n                this._lastAmbientColor[0] !== ambientColor[0] ||\n                this._lastAmbientColor[1] !== ambientColor[1] ||\n                this._lastAmbientColor[2] !== ambientColor[2] ||\n                this._lastAmbientColor[3] !== ambientColor[3]) {\n                canvas.backgroundColor = ambientColor;\n                if (!this._lastAmbientColor) {\n                    this._lastAmbientColor = math.vec4([0, 0, 0, 1]);\n                }\n                this._lastAmbientColor.set(ambientColor);\n            }\n        } else {\n            this._lastAmbientColor = null;\n        }\n    }\n\n    /**\n     Convenience array of IDs in {@link Scene#models}.\n     @property modelIds\n     @final\n     @type {Array of String}\n     */\n    get modelIds() {\n        if (!this._modelIds) {\n            this._modelIds = Object.keys(this.models);\n        }\n        return this._modelIds;\n    }\n\n    /**\n     Convenience array of IDs in {@link Scene#objects}.\n     @property objectIds\n     @final\n     @type {Array of String}\n     */\n    get objectIds() {\n        if (!this._objectIds) {\n            this._objectIds = Object.keys(this.objects);\n        }\n        return this._objectIds;\n    }\n\n    /**\n     Convenience array of IDs in {@link Scene#visibleObjects}.\n     @property visibleObjectIds\n     @final\n     @type {Array of String}\n     */\n    get visibleObjectIds() {\n        if (!this._visibleObjectIds) {\n            this._visibleObjectIds = Object.keys(this.visibleObjects);\n        }\n        return this._visibleObjectIds;\n    }\n\n    /**\n     Convenience array of IDs in {@link Scene#ghostedObjects}.\n     @property ghostedObjectIds\n     @final\n     @type {Array of String}\n     */\n    get ghostedObjectIds() {\n        if (!this._ghostedObjectIds) {\n            this._ghostedObjectIds = Object.keys(this.ghostedObjects);\n        }\n        return this._ghostedObjectIds;\n    }\n\n    /**\n     Convenience array of IDs in {@link Scene#highlightedObjects}.\n     @property highlightedObjectIds\n     @final\n     @type {Array of String}\n     */\n    get highlightedObjectIds() {\n        if (!this._highlightedObjectIds) {\n            this._highlightedObjectIds = Object.keys(this.highlightedObjects);\n        }\n        return this._highlightedObjectIds;\n    }\n\n    /**\n     Convenience array of IDs in {@link Scene#selectedObjects}.\n     @property selectedObjectIds\n     @final\n     @type {Array of String}\n     */\n    get selectedObjectIds() {\n        if (!this._selectedObjectIds) {\n            this._selectedObjectIds = Object.keys(this.selectedObjects);\n        }\n        return this._selectedObjectIds;\n    }\n\n    /**\n     The number of {@link Scene#tick} that happen between each render or this Scene.\n\n     @property ticksPerRender\n     @default 1\n     @type Number\n     */\n    set ticksPerRender(value) {\n        if (value === undefined || value === null) {\n            value = 1;\n        } else if (!utils.isNumeric(value) || value <= 0) {\n            this.error(\"Unsupported value for 'ticksPerRender': '\" + value +\n                \"' - should be an integer greater than zero.\");\n            value = 1;\n        }\n        if (value === this._ticksPerRender) {\n            return;\n        }\n        this._ticksPerRender = value;\n    }\n\n    get ticksPerRender() {\n        return this._ticksPerRender;\n    }\n\n    /**\n     The number of times this Scene renders per frame.\n\n     @property passes\n     @default 1\n     @type Number\n     */\n    set passes(value) {\n        if (value === undefined || value === null) {\n            value = 1;\n        } else if (!utils.isNumeric(value) || value <= 0) {\n            this.error(\"Unsupported value for 'passes': '\" + value +\n                \"' - should be an integer greater than zero.\");\n            value = 1;\n        }\n        if (value === this._passes) {\n            return;\n        }\n        this._passes = value;\n        this.glRedraw();\n    }\n\n    get passes() {\n        return this._passes;\n    }\n\n    /**\n     When doing multiple passes per frame, specifies whether to clear the\n     canvas before each pass (true) or just before the first pass (false).\n\n     @property clearEachPass\n     @default false\n     @type {Boolean}\n     */\n    set clearEachPass(value) {\n        value = !!value;\n        if (value === this._clearEachPass) {\n            return;\n        }\n        this._clearEachPass = value;\n        this.glRedraw();\n    }\n\n    get clearEachPass() {\n        return this._clearEachPass;\n    }\n\n    /**\n     When true, expects all textures and colors are premultiplied gamma.\n\n     @property gammaInput\n     @default false\n     @type {Boolean}\n     */\n    set gammaInput(value) {\n        value = value !== false;\n        if (value === this._renderer.gammaInput) {\n            return;\n        }\n        this._renderer.gammaInput = value;\n        this._needRecompile = true;\n    }\n\n    get gammaInput() {\n        return this._renderer.gammaInput;\n    }\n\n    /**\n     Whether or not to render pixels with pre-multiplied gama.\n\n     @property gammaOutput\n     @default true\n     @type Boolean\n     */\n    set gammaOutput(value) {\n        value = value !== false;\n        if (value === this._renderer.gammaOutput) {\n            return;\n        }\n        this._renderer.gammaOutput = value;\n        this._needRecompile = true;\n    }\n\n    get gammaOutput() {\n        return this._renderer.gammaOutput;\n    }\n\n    /**\n     The gamma factor to use when {@link Scene#property:gammaOutput} is set true.\n\n     @property gammaOutput\n     @default 1.0\n     @type Number\n     */\n    set gammaFactor(value) {\n        value = (value === undefined || value === null) ? 2.2 : value;\n        if (value === this._renderer.gammaFactor) {\n            return;\n        }\n        this._renderer.gammaFactor = value;\n        this.glRedraw();\n    }\n\n    get gammaFactor() {\n        return this._renderer.gammaFactor;\n    }\n\n    /**\n     The default geometry for this Scene, which is a {@link BoxGeometry}.\n\n     This {@link BoxGeometry} has an {@link Component#id} equal to \"default.geometry\".\n\n     {@link Mesh}s in this Scene are attached to this {@link Geometry} by default.\n     @property geometry\n     @final\n     @type BoxGeometry\n     */\n    get geometry() {\n        return this.components[\"default.geometry\"] ||\n            new BoxGeometry(this, {\n                id: \"default.geometry\",\n                dontClear: true\n            });\n    }\n\n    /**\n     The default drawing material for this Scene, which is a {@link PhongMaterial\"}}PhongMaterial{{/crossLink}}.\n\n     This {@link PhongMaterial\"}}PhongMaterial{{/crossLink}} has\n     an {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.material\", with all\n     other properties initialised to their default values.\n\n     {@link Mesh}es in this Scene are attached to this\n     {@link PhongMaterial\"}}PhongMaterial{{/crossLink}} by default.\n     @property material\n     @final\n     @type PhongMaterial\n     */\n    get material() {\n        return this.components[\"default.material\"] || new PhongMaterial(this, {\n            id: \"default.material\",\n            emissive: [0.4, 0.4, 0.4], // Visible by default on geometry without normals\n            dontClear: true\n        });\n    }\n\n    /**\n     The Scene's default {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are ghosted.\n\n     This {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} has\n     an {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.ghostMaterial\", with all\n     other properties initialised to their default values.\n\n     {@link Mesh}es in this Scene are attached to this\n     {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} by default.\n     @property ghostMaterial\n     @final\n     @type EmphasisMaterial\n     */\n    get ghostMaterial() {\n        return this.components[\"default.ghostMaterial\"] || new EmphasisMaterial(this, {\n            id: \"default.ghostMaterial\",\n            preset: \"sepia\",\n            dontClear: true\n        });\n    }\n\n    /**\n     The Scene's default {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are highlighted.\n\n     This {@link HighlightMaterial\"}}HighlightMaterial{{/crossLink}} has\n     an {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.highlightMaterial\", with all\n     other properties initialised to their default values.\n\n     {@link Mesh}es in this Scene are attached to this\n     {@link HighlightMaterial\"}}HighlightMaterial{{/crossLink}} by default.\n     @property highlightMaterial\n     @final\n     @type HighlightMaterial\n     */\n    get highlightMaterial() {\n        return this.components[\"default.highlightMaterial\"] || new EmphasisMaterial(this, {\n            id: \"default.highlightMaterial\",\n            preset: \"yellowHighlight\",\n            dontClear: true\n        });\n    }\n\n    /**\n     The Scene's default {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are selected.\n\n     This {@link SelectedMaterial\"}}SelectedMaterial{{/crossLink}} has\n     an {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.selectedMaterial\", with all\n     other properties initialised to their default values.\n\n     {@link Mesh}es in this Scene are attached to this\n     {@link SelectedMaterial\"}}SelectedMaterial{{/crossLink}} by default.\n     @property selectedMaterial\n     @final\n     @type SelectedMaterial\n     */\n    get selectedMaterial() {\n        return this.components[\"default.selectedMaterial\"] || new EmphasisMaterial(this, {\n            id: \"default.selectedMaterial\",\n            preset: \"greenSelected\",\n            dontClear: true\n        });\n    }\n\n    /**\n     The Scene's default {@link EdgeMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when edges are emphasized.\n\n     This {@link EdgeMaterial\"}}EdgeMaterial{{/crossLink}} has\n     an {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.edgeMaterial\", with all\n     other properties initialised to their default values.\n\n     {@link Mesh}es in this Scene are attached to this\n     {@link EdgeMaterial\"}}EdgeMaterial{{/crossLink}} by default.\n     @property edgeMaterial\n     @final\n     @type EdgeMaterial\n     */\n    get edgeMaterial() {\n        return this.components[\"default.edgeMaterial\"] || new EdgeMaterial(this, {\n            id: \"default.edgeMaterial\",\n            preset: \"default\",\n            edgeColor: [0.0, 0.0, 0.0],\n            edgeAlpha: 1.0,\n            edgeWidth: 1,\n            dontClear: true\n        });\n    }\n\n    /**\n     The Scene's default {@link OutlineMaterial\"}}OutlineMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are outlined.\n\n     This {@link OutlineMaterial\"}}OutlineMaterial{{/crossLink}} has\n     an {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.outlineMaterial\", with all\n     other properties initialised to their default values.\n\n     {@link Mesh}es in this Scene are attached to this\n     {@link OutlineMaterial\"}}OutlineMaterial{{/crossLink}} by default.\n     @property outlineMaterial\n     @final\n     @type OutlineMaterial\n     */\n    get outlineMaterial() {\n        return this.components[\"default.outlineMaterial\"] || new OutlineMaterial(this, {\n            id: \"default.outlineMaterial\",\n            dontClear: true\n        });\n    }\n\n    /**\n     The {@link Viewport} belonging to this Scene.\n\n     @property viewport\n     @final\n     @type Viewport\n     */\n    get viewport() {\n        return this._viewport;\n    }\n\n    /**\n     The {@link Camera} belonging to this Scene.\n\n     @property camera\n     @final\n     @type Camera\n     */\n    get camera() {\n        return this._camera;\n    }\n\n    /**\n     World-space 3D center of this Scene.\n\n     @property center\n     @final\n     @type {Float32Array}\n     */\n    get center() {\n        if (this._aabbDirty || !this._center) {\n            if (!this._center || !this._center) {\n                this._center = math.vec3();\n            }\n            const aabb = this.aabb;\n            this._center[0] = (aabb[0] + aabb[3]) / 2;\n            this._center[1] = (aabb[1] + aabb[4]) / 2;\n            this._center[2] = (aabb[2] + aabb[5]) / 2;\n        }\n        return this._center;\n    }\n\n    /**\n     World-space axis-aligned 3D boundary (AABB) of this Scene.\n\n     The AABB is represented by a six-element Float32Array containing the min/max extents of the\n     axis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.\n\n     @property aabb\n     @final\n     @type {Float32Array}\n     */\n    get aabb() {\n        if (this._aabbDirty) {\n            if (!this._aabb) {\n                this._aabb = math.AABB3();\n            }\n            let xmin = math.MAX_DOUBLE;\n            let ymin = math.MAX_DOUBLE;\n            let zmin = math.MAX_DOUBLE;\n            let xmax = -math.MAX_DOUBLE;\n            let ymax = -math.MAX_DOUBLE;\n            let zmax = -math.MAX_DOUBLE;\n            let aabb;\n            const collidables = this._collidables;\n            let collidable;\n            for (const collidableId in collidables) {\n                if (collidables.hasOwnProperty(collidableId)) {\n                    collidable = collidables[collidableId];\n                    if (collidable.collidable === false) {\n                        continue;\n                    }\n                    aabb = collidable.aabb;\n                    if (aabb[0] < xmin) {\n                        xmin = aabb[0];\n                    }\n                    if (aabb[1] < ymin) {\n                        ymin = aabb[1];\n                    }\n                    if (aabb[2] < zmin) {\n                        zmin = aabb[2];\n                    }\n                    if (aabb[3] > xmax) {\n                        xmax = aabb[3];\n                    }\n                    if (aabb[4] > ymax) {\n                        ymax = aabb[4];\n                    }\n                    if (aabb[5] > zmax) {\n                        zmax = aabb[5];\n                    }\n                }\n            }\n            this._aabb[0] = xmin;\n            this._aabb[1] = ymin;\n            this._aabb[2] = zmin;\n            this._aabb[3] = xmax;\n            this._aabb[4] = ymax;\n            this._aabb[5] = zmax;\n            this._aabbDirty = false;\n        }\n        return this._aabb;\n    }\n\n    _setBoundaryDirty() {\n        //if (!this._aabbDirty) {\n        this._aabbDirty = true;\n        this.fire(\"boundary\");\n        // }\n    }\n\n    /**\n     Attempts to pick an {@link Mesh\"}}Mesh{{/crossLink}} in this Scene.\n\n     Ignores {@link Mesh}es with {@link Mesh#pickable:property\"}}pickable{{/crossLink}}\n     set *false*.\n\n     When a {@link Mesh} is picked, fires a \"pick\" event on the {@link Mesh}\n     with the pick result as parameters.\n\n     Picking the {@link Mesh} at the given canvas coordinates:\n\n     ````javascript\n     var pickResult = scene.pick({\n              canvasPos: [23, 131]\n           });\n\n     if (pickResult) { // Picked a Mesh\n              var mesh = pickResult.mesh;\n          }\n     ````\n\n     **Usage:**\n\n     Picking, with a ray cast through the canvas, hits a {@link Mesh}:\n\n     ````javascript\n     var pickResult = scene.pick({\n              pickSurface: true,\n              canvasPos: [23, 131]\n           });\n\n     if (pickResult) { // Picked a Mesh\n\n              var mesh = pickResult.mesh;\n\n              // These properties are only on the pick result when we do a ray-pick:\n\n              var primitive = pickResult.primitive; // Type of primitive that was picked, usually \"triangles\"\n              var primIndex = pickResult.primIndex; // Position of triangle's first index in the picked Mesh's Geometry's indices array\n              var indices = pickResult.indices; // UInt32Array containing the triangle's vertex indices\n              var localPos = pickResult.localPos; // Float32Array containing the picked Local-space position on the triangle\n              var worldPos = pickResult.worldPos; // Float32Array containing the picked World-space position on the triangle\n              var viewPos = pickResult.viewPos; // Float32Array containing the picked View-space position on the triangle\n              var bary = pickResult.bary; // Float32Array containing the picked barycentric position within the triangle\n              var normal = pickResult.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle\n              var uv = pickResult.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle\n          }\n     ````\n\n     Picking the {@link Mesh} that intersects an arbitrarily-aligned World-space ray:\n\n     ````javascript\n     var pickResult = scene.pick({\n              pickSurface: true,   // Picking with arbitrarily-positioned ray\n              origin: [0,0,-5],    // Ray origin\n              direction: [0,0,1]   // Ray direction\n          });\n\n     if (pickResult) { // Picked a Mesh with the ray\n\n              var mesh = pickResult.mesh;\n\n              var primitive = pickResult.primitive; // Type of primitive that was picked, usually \"triangles\"\n              var primIndex = pickResult.primIndex; // Position of triangle's first index in the picked Mesh's Geometry's indices array\n              var indices = pickResult.indices; // UInt32Array containing the triangle's vertex indices\n              var localPos = pickResult.localPos; // Float32Array containing the picked Local-space position on the triangle\n              var worldPos = pickResult.worldPos; // Float32Array containing the picked World-space position on the triangle\n              var viewPos = pickResult.viewPos; // Float32Array containing the picked View-space position on the triangle\n              var bary = pickResult.bary; // Float32Array containing the picked barycentric position within the triangle\n              var normal = pickResult.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle\n              var uv = pickResult.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle\n              var origin = pickResult.origin; // Float32Array containing the World-space ray origin\n              var direction = pickResult.direction; // Float32Array containing the World-space ray direction\n          }\n     ````\n     @method pick\n\n     @param {*} params Picking parameters.\n     @param {Boolean} [params.pickSurface=false] Whether to find the picked position on the surface of the Mesh.\n     @param {Float32Array} [params.canvasPos] Canvas-space coordinates. When ray-picking, this will override the\n     **origin** and ** direction** parameters and will cause the ray to be fired through the canvas at this position,\n     directly along the negative View-space Z-axis.\n     @param {Float32Array} [params.origin] World-space ray origin when ray-picking. Ignored when canvasPos given.\n     @param {Float32Array} [params.direction] World-space ray direction when ray-picking. Also indicates the length of the ray. Ignored when canvasPos given.\n     @param {Array} [params.includeMeshes] IDs of {@link Mesh}es to restrict picking to. When given, ignores {@link Mesh}es whose IDs are not in this list.\n     @param {Array} [params.excludeMeshes] IDs of {@link Mesh}es to ignore. When given, will pick *through* these {@link Mesh}es, as if they were not there.\n     @param {PickResult} [pickResult] Holds the results of the pick attempt. Will use the Scene's singleton PickResult if you don't supply your own.\n     @returns {PickResult} Holds results of the pick attempt, returned when an {@link Mesh} is picked, else null. See method comments for description.\n     */\n    pick(params, pickResult) {\n\n        if (this.canvas.boundary[2] === 0 || this.canvas.boundary[3] === 0) {\n            this.error(\"Picking not allowed while canvas has zero width or height\");\n            return null;\n        }\n\n        params = params || {};\n\n        params.pickSurface = params.pickSurface || params.rayPick; // Backwards compatibility\n\n        if (!params.canvasPos && (!params.origin || !params.direction)) {\n            this.warn(\"picking without canvasPos or ray origin and direction\");\n        }\n\n        const includeMeshes = params.includeMeshes || params.include; // Backwards compat\n        if (includeMeshes) {\n            params.includeMeshIds = getMeshIDMap(this, includeMeshes);\n        }\n\n        const excludeMeshes = params.excludeMeshes || params.exclude; // Backwards compat\n        if (excludeMeshes) {\n            params.excludeMeshIds = getMeshIDMap(this, excludeMeshes);\n        }\n\n        if (pickResult = this._renderer.pick(params, pickResult)) {\n            utils.apply(params, pickResult);\n            pickResult.object = pickResult.mesh; // Backwards compat\n            if (params.pickSurface) {\n                pickResult.mesh.getPickResult(pickResult);\n            }\n            pickResult.mesh.fire(\"picked\", pickResult); // TODO: BigModelMesh doeosn;t fire events...\n            return pickResult;\n        }\n    }\n\n    /**\n     Returns the collective axis-aligned bounding box of the {@link Node}s, specified by their IDs or objectIds.\n\n     When no arguments are given, returns the total boundary of all objects in the scene.\n\n     Only {@link Mesh}es with {@link Mesh#collidable:property\"}}collidable{{/crossLink}}\n     set ````true```` are included in the boundary.\n\n     # Usage\n\n     ````JavaScript\n     scene.getAABB(); // Gets collective boundary of all objects in the scene\n     scene.getAABB(\"saw\"); // Gets collective boundary of all objects in saw model\n     scene.getAABB([\"saw\", \"gearbox\"]); // Gets collective boundary of all objects in saw and gearbox models\n     scene.getAABB(\"saw#0.1\"); // Get boundary of an object in the saw model\n     scene.getAABB([\"saw#0.1\", \"saw#0.2\"]); // Get collective boundary of two objects in saw model\n     scene.getAABB([\"saw#0.1\", \"surface\", \"support\"]); // Get collective boundary an object, and all objects of the given two entity classes.\n     ````\n\n     @method getAABB\n     @param {String|String[]} target {Array} Array of  {@link Node} IDs of objectIds.\n     @returns {[Number, Number, Number, Number, Number, Number]} An axis-aligned World-space bounding box, given as elements ````[xmin, ymin, zmin, xmax, ymax, zmax]````.\n     */\n    getAABB(target) {\n        if (target === undefined) {\n            return this.aabb;\n        }\n        if (utils.isString(target)) {\n            const component = this.components[target];\n            if (component && component.aabb) { // A Component subclass with an AABB\n                return component.aabb;\n            }\n            target = [target]; // Must be an entity type\n        }\n        if (target.length === 0) {\n            return this.aabb;\n        }\n        let xmin = 100000;\n        let ymin = 100000;\n        let zmin = 100000;\n        let xmax = -100000;\n        let ymax = -100000;\n        let zmax = -100000;\n        let valid;\n        this.withComponents(target, object => {\n                const aabb = object.aabb;\n                if (aabb[0] < xmin) {\n                    xmin = aabb[0];\n                }\n                if (aabb[1] < ymin) {\n                    ymin = aabb[1];\n                }\n                if (aabb[2] < zmin) {\n                    zmin = aabb[2];\n                }\n                if (aabb[3] > xmax) {\n                    xmax = aabb[3];\n                }\n                if (aabb[4] > ymax) {\n                    ymax = aabb[4];\n                }\n                if (aabb[5] > zmax) {\n                    zmax = aabb[5];\n                }\n                valid = true;\n            }\n        );\n        if (valid) {\n            const aabb2 = math.AABB3();\n            aabb2[0] = xmin;\n            aabb2[1] = ymin;\n            aabb2[2] = zmin;\n            aabb2[3] = xmax;\n            aabb2[4] = ymax;\n            aabb2[5] = zmax;\n            return aabb2;\n        } else {\n            return this.aabb; // Scene AABB\n        }\n    }\n\n    /**\n     Resets this Scene to its default state.\n\n     References to any components in this Scene will become invalid.\n\n     @method clear\n     */\n    clear() {\n        var component;\n        for (const id in this.components) {\n            if (this.components.hasOwnProperty(id)) {\n                // Each component fires \"destroyed\" as it is destroyed,\n                // which this Scene handles by removing the component\n                component = this.components[id];\n                if (!component._dontClear) { // Don't destroy components like Camera, Input, Viewport etc.\n                    component.destroy();\n                }\n            }\n        }\n    }\n\n    /**\n     Convenience method that destroys all light sources.\n\n     Removes all {@link AmbientLight\"}}AmbientLights{{/crossLink}}, {@link PointLight\"}}PointLights{{/crossLink}},\n     {@link DirLight\"}}DirLights{{/crossLink}} and {@link SpotLight\"}}SpotLights{{/crossLink}}.\n\n     @method clearLights\n     */\n    clearLights() {\n        const ids = Object.keys(this.lights);\n        for (let i = 0, len = ids.length; i < len; i++) {\n            this.lights[ids[i]].destroy();\n        }\n    }\n\n    /**\n     Convenience method that destroys all {@link Clip\"}}Clips{{/crossLink}}.\n\n     @method clearClips\n     */\n    clearClips() {\n        const ids = Object.keys(this.clips);\n        for (let i = 0, len = ids.length; i < len; i++) {\n            this.clips[ids[i]].destroy();\n        }\n    }\n\n    /**\n     Shows or hides a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.\n\n     Each Object indicates its visibility status in its {@link Node/visibility} property.\n\n     Each visible Object is registered in the {@link Scene}'s\n     {@link Scene#visibleObjects} map while its {@link Node/objectId}\n     is assigned a value.\n\n     @method setVisible\n     @param ids {Array} Array of  {@link Node} IDs, GUIDs or entity types.\n     @param visible {Boolean} The new visibility state.\n     @returns {Boolean} True if any {@link Node}s changed visibility, else false if all updates were redundant and not applied.\n     */\n    setVisible(ids, visible) {\n        return this.withComponents(ids, object => {\n            const changed = (object.visible !== visible);\n            object.visible = visible;\n            return changed;\n        });\n    }\n\n    /**\n     Culls or unculls a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.\n\n     Each Object indicates its culled status in its {@link Node/visibility} property.\n\n     @method setVisible\n     @param ids {Array} Array of  {@link Node} IDs, GUIDs or entity types.\n     @param culled {Boolean} The new cull state.\n     @returns {Boolean} True if any {@link Node}s changed culled state, else false if all updates were redundant and not applied.\n     */\n    setCulled(ids, culled) {\n        return this.withComponents(ids, object => {\n            const changed = (object.culled !== culled);\n            object.culled = culled;\n            return changed;\n        });\n    }\n\n    /**\n     Selects or de-selects a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.\n\n     Each Object indicates its selected status in its {@link Node/selected} property.\n\n     Each selected Object is registered in the {@link Scene}'s\n     {@link Scene#selectedObjects} map while its {@link Node/objectId}\n     is assigned a value.\n\n     @method setSelected\n     @param ids {Array} Array of  {@link Node} IDs, GUIDs or entity types.\n     @param selected {Boolean} Whether to select or deselect.\n     @returns {Boolean} True if any {@link Node}s changed selection state, else false if all updates were redundant and not applied.\n     */\n    setSelected(ids, selected) {\n        return this.withComponents(ids, object => {\n            const changed = (object.selected !== selected);\n            object.selected = selected;\n            return changed;\n        });\n    }\n\n    /**\n     Highlights or de-highlights a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.\n\n     Each Object indicates its highlight status in its {@link Node/highlighted} property.\n\n     Each highlighted Object is registered in the {@link Scene}'s\n     {@link Scene#highlightedObjects} map while its {@link Node/objectId}\n     is assigned a value.\n\n     @method setHighlighted\n     @param ids {Array} Array of  {@link Node} IDs, GUIDs or entity types.\n     @param highlighted {Boolean} Whether to highlight or un-highlight.\n     @returns {Boolean} True if any {@link Node}s changed highlighted state, else false if all updates were redundant and not applied.\n     */\n    setHighlighted(ids, highlighted) {\n        return this.withComponents(ids, object => {\n            const changed = (object.highlighted !== highlighted);\n            object.highlighted = highlighted;\n            return changed;\n        });\n    }\n\n    /**\n     Ghosts or un-ghosts a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.\n\n     Each Object indicates its ghosted status in its {@link Node/ghosted} property.\n\n     Each ghosted Object is registered in the {@link Scene}'s\n     {@link Scene#ghostedObjects} map when its {@link Node/objectId}\n     is assigned a value.\n\n     @method setGhosted\n     @param ids {Array} Array of  {@link Node} IDs, GUIDs or entity types.\n     @param ghosted {Float32Array} Whether to ghost or un-ghost.\n     @returns {Boolean} True if any {@link Node}s changed ghosted state, else false if all updates were redundant and not applied.\n     */\n    setGhosted(ids, ghosted) {\n        return this.withComponents(ids, object => {\n            const changed = (object.ghosted !== ghosted);\n            object.ghosted = ghosted;\n            return changed;\n        });\n    }\n\n    /**\n     Shows or hides wireeframe edges for batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.\n\n     @method setEdges\n     @param ids {Array} Array of  {@link Node} IDs, GUIDs or entity types.\n     @param edges {Float32Array} Whether to show or hide edges.\n     @returns {Boolean} True if any {@link Node}s changed edges state, else false if all updates were redundant and not applied.\n     */\n    setEdges(ids, edges) {\n        return this.withComponents(ids, object => {\n            const changed = (object.edges !== edges);\n            object.edges = edges;\n            return changed;\n        });\n    }\n\n    /**\n     Shows or hides an outline around a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.\n\n     Each Object indicates its outlined status in its {@link Node/outlined} property.\n\n     Each outlined Object is registered in the {@link Scene}'s\n     {@link Scene#outlinedObjects} map when its {@link Node/entityType}\n     is assigned a value.\n\n     @method setOutlined\n     @param ids {Array} Array of  {@link Node} IDs, GUIDs or entity types.\n     @param outlined {Float32Array} Whether to show or hide the outline.\n     @returns {Boolean} True if any {@link Node}s changed outlined state, else false if all updates were redundant and not applied.\n     */\n    setOutlined(ids, outlined) {\n        return this.withComponents(ids, object => {\n            const changed = (object.outlined !== outlined);\n            object.outlined = outlined;\n            return changed;\n        });\n    }\n\n    /**\n     Colorizes a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.\n\n     @method setColorize\n     @param ids {Array} Array of  {@link Node} IDs, GUIDs or entity types.\n     @param [colorize=(1,1,1)] Float32Array RGB colorize factors, multiplied by the rendered pixel colors.\n     */\n    setColorize(ids, colorize) {\n        return this.withComponents(ids, object => {\n            object.colorize = colorize;\n        });\n    }\n\n    /**\n     Updates opacities of a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.\n\n     @method setOpacity\n     @param ids {Array} Array of  {@link Node} IDs, GUIDs or entity types.\n     @param [opacity=1] Number Opacity factor in range ````[0..1]````, multiplies by the rendered pixel alphas.\n     */\n    setOpacity(ids, opacity) {\n        return this.withComponents(ids, object => {\n            object.opacity = opacity;\n        });\n    }\n\n    /**\n     Sets a batch of {@link Node}s pickable or unpickable, specified by their IDs, GUIDs and/or entity types.\n\n     Picking is done with {@link Scene#pick}.\n\n     @method setPickable\n     @param ids {Array} Array of  {@link Node} IDs, GUIDs or entity types.\n     @param pickable {Float32Array} Whether to ghost or un-ghost.\n     @returns {Boolean} True if any {@link Node}s changed pickable state, else false if all updates were redundant and not applied.\n     */\n    setPickable(ids, pickable) {\n        return this.withComponents(ids, object => {\n            const changed = (object.pickable !== pickable);\n            object.pickable = pickable;\n            return changed;\n        });\n    }\n\n    /**\n     Iterates with a callback over {@link Component}s, specified by their IDs or objectIds.\n\n     @method withComponents\n     @param ids {String|Array} One or more {@link Component} IDs or objectIds.\n     @param callback {Function} The callback, which takes each object as its argument.\n     */\n    withComponents(ids, callback) {\n        if (utils.isString(ids)) {\n            ids = [ids];\n        }\n        let changed = false;\n        for (let i = 0, len = ids.length; i < len; i++) {\n            const id = ids[i];\n            let component = this.components[id];\n            if (component) {\n                changed = callback(component) || changed;\n            } else {\n                component = this.objects[id];\n                if (component) {\n                    changed = callback(component) || changed;\n                } else {\n                    this.warn(\"Component not found: '\" + id + \"'\");\n                }\n            }\n        }\n        return changed;\n    }\n\n    destroy() {\n\n        super.destroy();\n\n        for (const id in this.components) {\n            if (this.components.hasOwnProperty(id)) {\n                this.components[id].destroy();\n            }\n        }\n\n        this.canvas.gl = null;\n\n        // Memory leak prevention\n        this.models = null;\n        this.components = null;\n        this.objects = null;\n        this.visibleObjects = null;\n        this.ghostedObjects = null;\n        this.highlightedObjects = null;\n        this.selectedObjects = null;\n        this.clips = null;\n        this.lights = null;\n        this.lightMaps = null;\n        this.reflectionMaps = null;\n        this._objectGUIDs = null;\n        this._objectIds = null;\n        this._visibleObjectIds = null;\n        this._ghostedObjectIds = null;\n        this._highlightedObjectIds = null;\n        this._selectedObjectIds = null;\n        this.types = null;\n        this.components = null;\n        this.canvas = null;\n        this._renderer = null;\n        this.input = null;\n        this._viewport = null;\n        this._camera = null;\n    }\n}\n\nexport {Scene};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/scene/Scene.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2578,
    "kind": "function",
    "name": "getMeshIDMap",
    "memberof": "scene/scene/Scene.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/scene/Scene.js~getMeshIDMap",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/scene/Scene.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "scene",
        "types": [
          "*"
        ]
      },
      {
        "name": "meshIds",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2579,
    "kind": "class",
    "name": "Scene",
    "memberof": "scene/scene/Scene.js",
    "static": true,
    "longname": "scene/scene/Scene.js~Scene",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/scene/Scene.js",
    "importStyle": "{Scene}",
    "description": "Contains the components that comprise a 3D scene.\n\n* A {@link Viewer} has a single Scene, which it provides in {@link Viewer#scene}.\n* Plugins like {@link AxisGizmoPlugin} and {@link PlanViewPlugin} also have their own private Scenes.\n\n## Getting a Viewer's Scene\n\n````javascript\nvar scene = myViewer.scene;\n````\n\n## Creating and accessing Scene components\n\nAs a brief introduction to creating Scene components, we'll create a {@link Mesh} that has a\n{@link TorusGeometry} and a {@link PhongMaterial}:\n\n````javascript\nvar teapotMesh = new Mesh(scene, {\n    id: \"myMesh\",                               // <<---------- ID automatically generated if not provided\n    geometry: new TorusGeometry(scene),\n    material: new PhongMaterial(scene, {\n        id: \"myMaterial\",\n        diffuse: [0.2, 0.2, 1.0]\n    })\n});\n\nteapotMesh.scene.camera.eye = [45, 45, 45];\n````\n\nFind components by ID in their Scene's {@link Scene#components} map:\n\n````javascript\nvar teapotMesh = scene.components[\"myMesh\"];\nteapotMesh.visible = false;\n\nvar teapotMaterial = scene.components[\"myMaterial\"];\nteapotMaterial.diffuse = [1,0,0]; // Change to red\n````\n\nA Scene also has a map of component instances for each {@link Component} subtype:\n\n````javascript\nvar meshes = scene.types[\"Mesh\"];\nvar teapotMesh = meshes[\"myMesh\"];\nteapotMesh.ghosted = true;\n\nvar phongMaterials = scene.types[\"PhongMaterial\"];\nvar teapotMaterial = phongMaterials[\"myMaterial\"];\nteapotMaterial.diffuse = [0,1,0]; // Change to green\n````\n\nSee {@link Node}, {@link Node} and {@link Model} for how to create and access more sophisticated content.\n\n## Controlling the camera\n\nUse the Scene's {@link Camera} to control the current viewpoint and projection:\n\n````javascript\nvar camera = myScene.camera;\n\ncamera.eye = [-10,0,0];\ncamera.look = [-10,0,0];\ncamera.up = [0,1,0];\n\ncamera.projection = \"perspective\";\ncamera.perspective.fov = 45;\n//...\n````\n\n## Managing the canvas, taking snapshots\n\nThe Scene's {@link Canvas} component provides various conveniences relevant to the WebGL canvas, such\nas getting getting snapshots, firing resize events etc:\n\n````javascript\nvar canvas = scene.canvas;\n\ncanvas.on(\"boundary\", function(boundary) {\n    //...\n});\n\nvar imageData = canvas.getSnapshot({\n    width: 500,\n    height: 500,\n    format: \"png\"\n});\n````\n\n## Picking\n\nUse {@link Scene#pick} to pick and raycast meshes.\n\nFor example, to pick a point on the surface of the closest mesh at the given canvas coordinates:\n\n````javascript\nvar hit = scene.pick({\n     pickSurface: true,\n     canvasPos: [23, 131]\n});\n\nif (hit) { // Picked a Mesh\n\n    var mesh = hit.mesh;\n\n    var primitive = hit.primitive; // Type of primitive that was picked, usually \"triangles\"\n    var primIndex = hit.primIndex; // Position of triangle's first index in the picked Mesh's Geometry's indices array\n    var indices = hit.indices; // UInt32Array containing the triangle's vertex indices\n    var localPos = hit.localPos; // Float32Array containing the picked Local-space position on the triangle\n    var worldPos = hit.worldPos; // Float32Array containing the picked World-space position on the triangle\n    var viewPos = hit.viewPos; // Float32Array containing the picked View-space position on the triangle\n    var bary = hit.bary; // Float32Array containing the picked barycentric position within the triangle\n    var normal = hit.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle\n    var uv = hit.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle\n}\n````\n\n## Pick masking\n\nWe can use {@link Scene#pick}'s ````includeMeshes```` and ````excludeMeshes````  options to mask which {@link Mesh}es we attempt to pick.\n\nThis is useful for picking <em>through</em> things, to pick only the Meshes of interest.\n\nTo pick only Meshes ````\"gearbox#77.0\"```` and ````\"gearbox#79.0\"````, picking through any other Meshes that are\nin the way, as if they weren't there:\n\n````javascript\nvar hit = scene.pick({\n     canvasPos: [23, 131],\n     includeMeshes: [\"gearbox#77.0\", \"gearbox#79.0\"]\n});\n\nif (hit) {\n      // Mesh will always be either \"gearbox#77.0\" or \"gearbox#79.0\"\n      var mesh = hit.mesh;\n}\n````\n\nTo pick any pickable Mesh, except for ````\"gearbox#77.0\"```` and ````\"gearbox#79.0\"````, picking through those\nMeshes if they happen to be in the way:\n\n````javascript\nvar hit = scene.pick({\n     canvasPos: [23, 131],\n     excludeMeshes: [\"gearbox#77.0\", \"gearbox#79.0\"]\n});\n\nif (hit) {\n      // Mesh will never be \"gearbox#77.0\" or \"gearbox#79.0\"\n      var mesh = hit.mesh;\n}\n````\n\nSee {@link Scene#pick} for more info on picking.\n\n## Querying and tracking boundaries\n\nGetting a Scene's World-space axis-aligned boundary (AABB):\n\n````javascript\nvar aabb = scene.aabb; // [xmin, ymin, zmin, xmax, ymax, zmax]\n````\n\nSubscribing to updates to the AABB, which occur whenever {@link Mesh}es are transformed, their\n{@link Geometry}s have been updated, or the {@link Camera} has moved:\n\n````javascript\nscene.on(\"boundary\", function() {\n     var aabb = scene.aabb;\n});\n````\n\nGetting the AABB of the {@link Node}s with the given IDs:\n\n````JavaScript\nscene.getAABB(); // Gets collective boundary of all Mesh Objects in the scene\nscene.getAABB(\"saw\"); // Gets boundary of an Object\nscene.getAABB([\"saw\", \"gearbox\"]); // Gets collective boundary of two Objects\n````\n\nSee {@link Scene#getAABB} and {@link Node} for more info on querying and tracking boundaries.\n\n## Managing the viewport\n\nThe Scene's {@link Viewport} component manages the WebGL viewport:\n\n````javascript\nvar viewport = scene.viewport\nviewport.boundary = [0, 0, 500, 400];;\n````\n\n## Controlling rendering\n\nYou can configure a Scene to perform multiple \"passes\" (renders) per frame. This is useful when we want to render the\nscene to multiple viewports, such as for stereo effects.\n\nIn the example, below, we'll configure the Scene to render twice on each frame, each time to different viewport. We'll do this\nwith a callback that intercepts the Scene before each render and sets its {@link Viewport} to a\ndifferent portion of the canvas. By default, the Scene will clear the canvas only before the first render, allowing the\ntwo views to be shown on the canvas at the same time.\n\n````Javascript\n// Load a glTF model\nvar model = new GLTFModel({\n    src: \"models/gltf/GearboxAssy/glTF-MaterialsCommon/GearboxAssy.gltf\"\n});\n\nvar scene = model.scene;\nvar viewport = scene.viewport;\n\n// Configure Scene to render twice for each frame\nscene.passes = 2; // Default is 1\nscene.clearEachPass = false; // Default is false\n\n// Render to a separate viewport on each render\n\nvar viewport = scene.viewport;\nviewport.autoBoundary = false;\n\nscene.on(\"rendering\", function (e) {\n     switch (e.pass) {\n         case 0:\n             viewport.boundary = [0, 0, 200, 200]; // xmin, ymin, width, height\n             break;\n\n         case 1:\n             viewport.boundary = [200, 0, 200, 200];\n             break;\n     }\n});\n\n// We can also intercept the Scene after each render,\n// (though we're not using this for anything here)\nscene.on(\"rendered\", function (e) {\n     switch (e.pass) {\n         case 0:\n             break;\n\n         case 1:\n             break;\n     }\n});\n````\n\n## Gamma correction\n\nWithin its shaders, xeokit performs shading calculations in linear space.\n\nBy default, the Scene expects color textures (eg. {@link PhongMaterial#diffuseMap},\n{@link MetallicMaterial#baseColorMap} and {@link SpecularMaterial#diffuseMap}) to\nbe in pre-multipled gamma space, so will convert those to linear space before they are used in shaders. Other textures are\nalways expected to be in linear space.\n\nBy default, the Scene will also gamma-correct its rendered output.\n\nYou can configure the Scene to expect all those color textures to be linear space, so that it does not gamma-correct them:\n\n````javascript\nscene.gammaInput = false;\n````\n\nYou would still need to gamma-correct the output, though, if it's going straight to the canvas, so normally we would\nleave that enabled:\n\n````javascript\nscene.gammaOutput = true;\n````\n\nSee {@link Texture} for more information on texture encoding and gamma.",
    "lineNumber": 327,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Scene"
      }
    ],
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 2580,
    "kind": "get",
    "name": "type",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 338,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2581,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 345,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ]
  },
  {
    "__docId__": 2582,
    "kind": "member",
    "name": "loading",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#loading",
    "access": "public",
    "description": "The number of models currently loading.",
    "lineNumber": 369,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "loading",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2583,
    "kind": "member",
    "name": "startTime",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#startTime",
    "access": "public",
    "description": "The epoch time (in milliseconds since 1970) when this Scene was instantiated.",
    "lineNumber": 378,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "timeCreated",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2584,
    "kind": "member",
    "name": "models",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#models",
    "access": "public",
    "description": "{@link Model}s in this Scene, mapped to their IDs.",
    "lineNumber": 387,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "models",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Model}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2585,
    "kind": "member",
    "name": "objects",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#objects",
    "access": "public",
    "description": "{@link Node}s in this Scene that have {@link Node#objectId} properties, mapped to those IDs.\n\nEach Object is registered in this map when its {@link Node#objectId} is assigned a value.",
    "lineNumber": 398,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objects",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Object}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2586,
    "kind": "member",
    "name": "visibleObjects",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#visibleObjects",
    "access": "public",
    "description": "Visible entity {@link Node}s within this Scene, mapped to their IDs.\n\nEach Object is registered in this map when its {@link Node/visible} property is true and its\n{@link Node/objectId} is assigned a value.",
    "lineNumber": 410,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "visibleObjects",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Object}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2587,
    "kind": "member",
    "name": "ghostedObjects",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#ghostedObjects",
    "access": "public",
    "description": "Ghosted entity {@link Node}s within this Scene, mapped to their IDs.\n\nEach Object is registered in this map when its {@link Node/ghosted} property is true and its\n{@link Node/objectId} is assigned a value.",
    "lineNumber": 422,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghostedObjects",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Object}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2588,
    "kind": "member",
    "name": "highlightedObjects",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#highlightedObjects",
    "access": "public",
    "description": "Highlighted entity {@link Node}s within this Scene, mapped to their IDs.\n\nEach Object is registered in this map when its {@link Node/highlighted} property is true and its\n{@link Node/objectId} is assigned a value.",
    "lineNumber": 434,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightedObjects",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Object}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2589,
    "kind": "member",
    "name": "selectedObjects",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#selectedObjects",
    "access": "public",
    "description": "Selected entity {@link Node}s within this Scene, mapped to their IDs.\n\nEach Object is registered in this map when its {@link Node/selected} property is true and its\n{@link Node/objectId} is assigned a value.",
    "lineNumber": 446,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedObjects",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Object}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2590,
    "kind": "member",
    "name": "_modelIds",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_modelIds",
    "access": "private",
    "description": "Lazy-regenerated ID lists.",
    "lineNumber": 453,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2591,
    "kind": "member",
    "name": "_objectIds",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_objectIds",
    "access": "private",
    "description": null,
    "lineNumber": 454,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2592,
    "kind": "member",
    "name": "_visibleObjectIds",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_visibleObjectIds",
    "access": "private",
    "description": null,
    "lineNumber": 455,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2593,
    "kind": "member",
    "name": "_ghostedObjectIds",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_ghostedObjectIds",
    "access": "private",
    "description": null,
    "lineNumber": 456,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2594,
    "kind": "member",
    "name": "_highlightedObjectIds",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_highlightedObjectIds",
    "access": "private",
    "description": null,
    "lineNumber": 457,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2595,
    "kind": "member",
    "name": "_selectedObjectIds",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_selectedObjectIds",
    "access": "private",
    "description": null,
    "lineNumber": 458,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2596,
    "kind": "member",
    "name": "_collidables",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_collidables",
    "access": "private",
    "description": null,
    "lineNumber": 460,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 2597,
    "kind": "member",
    "name": "_compilables",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_compilables",
    "access": "private",
    "description": null,
    "lineNumber": 461,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 2598,
    "kind": "member",
    "name": "_needRecompile",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_needRecompile",
    "access": "private",
    "description": null,
    "lineNumber": 463,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2599,
    "kind": "member",
    "name": "types",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#types",
    "access": "public",
    "description": "For each {@link Component} type, a map of\nIDs to {@link Component} instances of that type.",
    "lineNumber": 473,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "types",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String:{String:Component}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2600,
    "kind": "member",
    "name": "components",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#components",
    "access": "public",
    "description": "The {@link Component}s within this Scene, each mapped to its {@link Component#id}.",
    "lineNumber": 482,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "components",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String:Component"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2601,
    "kind": "member",
    "name": "clips",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#clips",
    "access": "public",
    "description": "The {@link Clip}s in this Scene, each mapped to its {@link Clip#id}.",
    "lineNumber": 491,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "clips",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Clip}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2602,
    "kind": "member",
    "name": "lights",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#lights",
    "access": "public",
    "description": "The {@link Light}s in this Scene, each mapped to its {@link Light#id}.",
    "lineNumber": 500,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "lights",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:Light}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2603,
    "kind": "member",
    "name": "lightMaps",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#lightMaps",
    "access": "public",
    "description": "The {@link LightMap}s in this Scene, each mapped to its its {@link LightMap#id}.",
    "lineNumber": 509,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "lightMaps",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:LightMap}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2604,
    "kind": "member",
    "name": "reflectionMaps",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#reflectionMaps",
    "access": "public",
    "description": "The {@link ReflectionMap}s in this Scene, mapped to its {@link ReflectionMap#id}.",
    "lineNumber": 518,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "reflectionMaps",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "{String:ReflectionMap}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2605,
    "kind": "member",
    "name": "canvas",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#canvas",
    "access": "public",
    "description": "Manages the HTML5 canvas for this Scene.",
    "lineNumber": 526,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "canvas",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Canvas"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2606,
    "kind": "member",
    "name": "_renderer",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_renderer",
    "access": "private",
    "description": null,
    "lineNumber": 546,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2607,
    "kind": "member",
    "name": "_clipsState",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_clipsState",
    "access": "private",
    "description": null,
    "lineNumber": 550,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2609,
    "kind": "member",
    "name": "_lightsState",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_lightsState",
    "access": "private",
    "description": null,
    "lineNumber": 591,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2613,
    "kind": "member",
    "name": "input",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#input",
    "access": "public",
    "description": "Publishes input events that occur on this Scene's canvas.",
    "lineNumber": 712,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      },
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Input"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2614,
    "kind": "member",
    "name": "_viewport",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_viewport",
    "access": "private",
    "description": null,
    "lineNumber": 725,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2615,
    "kind": "member",
    "name": "_camera",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_camera",
    "access": "private",
    "description": null,
    "lineNumber": 731,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2622,
    "kind": "method",
    "name": "_initDefaults",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_initDefaults",
    "access": "private",
    "description": null,
    "lineNumber": 777,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2623,
    "kind": "method",
    "name": "_addComponent",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_addComponent",
    "access": "private",
    "description": null,
    "lineNumber": 792,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2624,
    "kind": "method",
    "name": "_removeComponent",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_removeComponent",
    "access": "private",
    "description": null,
    "lineNumber": 831,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2625,
    "kind": "method",
    "name": "_clipCreated",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_clipCreated",
    "access": "private",
    "description": null,
    "lineNumber": 856,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "clip",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2627,
    "kind": "method",
    "name": "_lightCreated",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_lightCreated",
    "access": "private",
    "description": null,
    "lineNumber": 862,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "light",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2629,
    "kind": "method",
    "name": "_lightMapCreated",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_lightMapCreated",
    "access": "private",
    "description": null,
    "lineNumber": 868,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "lightMap",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2631,
    "kind": "method",
    "name": "_reflectionMapCreated",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_reflectionMapCreated",
    "access": "private",
    "description": null,
    "lineNumber": 874,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "reflectionMap",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2633,
    "kind": "method",
    "name": "_clipDestroyed",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_clipDestroyed",
    "access": "private",
    "description": null,
    "lineNumber": 880,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "clip",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2635,
    "kind": "method",
    "name": "_lightDestroyed",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_lightDestroyed",
    "access": "private",
    "description": null,
    "lineNumber": 886,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "light",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2637,
    "kind": "method",
    "name": "_lightMapDestroyed",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_lightMapDestroyed",
    "access": "private",
    "description": null,
    "lineNumber": 892,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "lightMap",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2639,
    "kind": "method",
    "name": "_reflectionMapDestroyed",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_reflectionMapDestroyed",
    "access": "private",
    "description": null,
    "lineNumber": 898,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "reflectionMap",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2641,
    "kind": "method",
    "name": "_registerModel",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_registerModel",
    "access": "private",
    "description": null,
    "lineNumber": 904,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2643,
    "kind": "method",
    "name": "_deregisterModel",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_deregisterModel",
    "access": "private",
    "description": null,
    "lineNumber": 909,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2645,
    "kind": "method",
    "name": "_registerObject",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_registerObject",
    "access": "private",
    "description": null,
    "lineNumber": 914,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2647,
    "kind": "method",
    "name": "_deregisterObject",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_deregisterObject",
    "access": "private",
    "description": null,
    "lineNumber": 919,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2649,
    "kind": "method",
    "name": "_objectVisibilityUpdated",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_objectVisibilityUpdated",
    "access": "private",
    "description": null,
    "lineNumber": 924,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      },
      {
        "name": "visible",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2651,
    "kind": "method",
    "name": "_objectGhostedUpdated",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_objectGhostedUpdated",
    "access": "private",
    "description": null,
    "lineNumber": 933,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      },
      {
        "name": "ghosted",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2653,
    "kind": "method",
    "name": "_objectHighlightedUpdated",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_objectHighlightedUpdated",
    "access": "private",
    "description": null,
    "lineNumber": 942,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      },
      {
        "name": "highlighted",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2655,
    "kind": "method",
    "name": "_objectSelectedUpdated",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_objectSelectedUpdated",
    "access": "private",
    "description": null,
    "lineNumber": 951,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "component",
        "types": [
          "*"
        ]
      },
      {
        "name": "selected",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2657,
    "kind": "method",
    "name": "_webglContextLost",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_webglContextLost",
    "access": "private",
    "description": null,
    "lineNumber": 960,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2658,
    "kind": "method",
    "name": "_webglContextRestored",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_webglContextRestored",
    "access": "private",
    "description": null,
    "lineNumber": 974,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2659,
    "kind": "method",
    "name": "render",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#render",
    "access": "public",
    "description": "Renders a single frame of this Scene.\n\nThe Scene will periodically render itself after any updates, but you can call this method to force a render\nif required. This method is typically used when we want to synchronously take a snapshot of the canvas and\nneed everything rendered right at that moment.",
    "lineNumber": 1000,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "render"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "forceRender",
        "description": "Forces a render when true, otherwise only renders if something has changed in this Scene\nsince the last render."
      }
    ],
    "return": null
  },
  {
    "__docId__": 2661,
    "kind": "method",
    "name": "_recompile",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_recompile",
    "access": "private",
    "description": null,
    "lineNumber": 1060,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2662,
    "kind": "method",
    "name": "_saveAmbientColor",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_saveAmbientColor",
    "access": "private",
    "description": null,
    "lineNumber": 1068,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2663,
    "kind": "member",
    "name": "_lastAmbientColor",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_lastAmbientColor",
    "access": "private",
    "description": null,
    "lineNumber": 1079,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2665,
    "kind": "get",
    "name": "modelIds",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#modelIds",
    "access": "public",
    "description": "Convenience array of IDs in {@link Scene#models}.",
    "lineNumber": 1094,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "modelIds",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Array of String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2667,
    "kind": "get",
    "name": "objectIds",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#objectIds",
    "access": "public",
    "description": "Convenience array of IDs in {@link Scene#objects}.",
    "lineNumber": 1107,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "objectIds",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Array of String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2669,
    "kind": "get",
    "name": "visibleObjectIds",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#visibleObjectIds",
    "access": "public",
    "description": "Convenience array of IDs in {@link Scene#visibleObjects}.",
    "lineNumber": 1120,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "visibleObjectIds",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Array of String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2671,
    "kind": "get",
    "name": "ghostedObjectIds",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#ghostedObjectIds",
    "access": "public",
    "description": "Convenience array of IDs in {@link Scene#ghostedObjects}.",
    "lineNumber": 1133,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghostedObjectIds",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Array of String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2673,
    "kind": "get",
    "name": "highlightedObjectIds",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#highlightedObjectIds",
    "access": "public",
    "description": "Convenience array of IDs in {@link Scene#highlightedObjects}.",
    "lineNumber": 1146,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightedObjectIds",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Array of String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2675,
    "kind": "get",
    "name": "selectedObjectIds",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#selectedObjectIds",
    "access": "public",
    "description": "Convenience array of IDs in {@link Scene#selectedObjects}.",
    "lineNumber": 1159,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedObjectIds",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Array of String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2677,
    "kind": "set",
    "name": "ticksPerRender",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#ticksPerRender",
    "access": "public",
    "description": "The number of {@link Scene#tick} that happen between each render or this Scene.",
    "lineNumber": 1173,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ticksPerRender",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2678,
    "kind": "member",
    "name": "_ticksPerRender",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_ticksPerRender",
    "access": "private",
    "description": null,
    "lineNumber": 1184,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2679,
    "kind": "get",
    "name": "ticksPerRender",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#ticksPerRender",
    "access": "public",
    "description": null,
    "lineNumber": 1187,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2680,
    "kind": "set",
    "name": "passes",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#passes",
    "access": "public",
    "description": "The number of times this Scene renders per frame.",
    "lineNumber": 1198,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "passes",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2681,
    "kind": "member",
    "name": "_passes",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_passes",
    "access": "private",
    "description": null,
    "lineNumber": 1209,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2682,
    "kind": "get",
    "name": "passes",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#passes",
    "access": "public",
    "description": null,
    "lineNumber": 1213,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2683,
    "kind": "set",
    "name": "clearEachPass",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#clearEachPass",
    "access": "public",
    "description": "When doing multiple passes per frame, specifies whether to clear the\ncanvas before each pass (true) or just before the first pass (false).",
    "lineNumber": 1225,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "clearEachPass",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2684,
    "kind": "member",
    "name": "_clearEachPass",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_clearEachPass",
    "access": "private",
    "description": null,
    "lineNumber": 1230,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2685,
    "kind": "get",
    "name": "clearEachPass",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#clearEachPass",
    "access": "public",
    "description": null,
    "lineNumber": 1234,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2686,
    "kind": "set",
    "name": "gammaInput",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#gammaInput",
    "access": "public",
    "description": "When true, expects all textures and colors are premultiplied gamma.",
    "lineNumber": 1245,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaInput",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2688,
    "kind": "get",
    "name": "gammaInput",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#gammaInput",
    "access": "public",
    "description": null,
    "lineNumber": 1254,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2689,
    "kind": "set",
    "name": "gammaOutput",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#gammaOutput",
    "access": "public",
    "description": "Whether or not to render pixels with pre-multiplied gama.",
    "lineNumber": 1265,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaOutput",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2691,
    "kind": "get",
    "name": "gammaOutput",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#gammaOutput",
    "access": "public",
    "description": null,
    "lineNumber": 1274,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2692,
    "kind": "set",
    "name": "gammaFactor",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#gammaFactor",
    "access": "public",
    "description": "The gamma factor to use when {@link Scene#property:gammaOutput} is set true.",
    "lineNumber": 1285,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1.0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "gammaOutput",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2693,
    "kind": "get",
    "name": "gammaFactor",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#gammaFactor",
    "access": "public",
    "description": null,
    "lineNumber": 1294,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2694,
    "kind": "get",
    "name": "geometry",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#geometry",
    "access": "public",
    "description": "The default geometry for this Scene, which is a {@link BoxGeometry}.\n\nThis {@link BoxGeometry} has an {@link Component#id} equal to \"default.geometry\".\n\n{@link Mesh}s in this Scene are attached to this {@link Geometry} by default.",
    "lineNumber": 1308,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "geometry",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2695,
    "kind": "get",
    "name": "material",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#material",
    "access": "public",
    "description": "The default drawing material for this Scene, which is a {@link PhongMaterial\"}}PhongMaterial{{/crossLink}}.\n\nThis {@link PhongMaterial\"}}PhongMaterial{{/crossLink}} has\nan {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.material\", with all\nother properties initialised to their default values.\n\n{@link Mesh}es in this Scene are attached to this\n{@link PhongMaterial\"}}PhongMaterial{{/crossLink}} by default.",
    "lineNumber": 1329,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "material",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2696,
    "kind": "get",
    "name": "ghostMaterial",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#ghostMaterial",
    "access": "public",
    "description": "The Scene's default {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are ghosted.\n\nThis {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} has\nan {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.ghostMaterial\", with all\nother properties initialised to their default values.\n\n{@link Mesh}es in this Scene are attached to this\n{@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} by default.",
    "lineNumber": 1350,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghostMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2697,
    "kind": "get",
    "name": "highlightMaterial",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#highlightMaterial",
    "access": "public",
    "description": "The Scene's default {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are highlighted.\n\nThis {@link HighlightMaterial\"}}HighlightMaterial{{/crossLink}} has\nan {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.highlightMaterial\", with all\nother properties initialised to their default values.\n\n{@link Mesh}es in this Scene are attached to this\n{@link HighlightMaterial\"}}HighlightMaterial{{/crossLink}} by default.",
    "lineNumber": 1371,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2698,
    "kind": "get",
    "name": "selectedMaterial",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#selectedMaterial",
    "access": "public",
    "description": "The Scene's default {@link EmphasisMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are selected.\n\nThis {@link SelectedMaterial\"}}SelectedMaterial{{/crossLink}} has\nan {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.selectedMaterial\", with all\nother properties initialised to their default values.\n\n{@link Mesh}es in this Scene are attached to this\n{@link SelectedMaterial\"}}SelectedMaterial{{/crossLink}} by default.",
    "lineNumber": 1392,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2699,
    "kind": "get",
    "name": "edgeMaterial",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#edgeMaterial",
    "access": "public",
    "description": "The Scene's default {@link EdgeMaterial\"}}EmphasisMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when edges are emphasized.\n\nThis {@link EdgeMaterial\"}}EdgeMaterial{{/crossLink}} has\nan {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.edgeMaterial\", with all\nother properties initialised to their default values.\n\n{@link Mesh}es in this Scene are attached to this\n{@link EdgeMaterial\"}}EdgeMaterial{{/crossLink}} by default.",
    "lineNumber": 1413,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edgeMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2700,
    "kind": "get",
    "name": "outlineMaterial",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#outlineMaterial",
    "access": "public",
    "description": "The Scene's default {@link OutlineMaterial\"}}OutlineMaterial{{/crossLink}} for the appearance of {@link Meshes\"}}Meshes{{/crossLink}} when they are outlined.\n\nThis {@link OutlineMaterial\"}}OutlineMaterial{{/crossLink}} has\nan {@link Component/id:property\"}}id{{/crossLink}} equal to \"default.outlineMaterial\", with all\nother properties initialised to their default values.\n\n{@link Mesh}es in this Scene are attached to this\n{@link OutlineMaterial\"}}OutlineMaterial{{/crossLink}} by default.",
    "lineNumber": 1437,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outlineMaterial",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2701,
    "kind": "get",
    "name": "viewport",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#viewport",
    "access": "public",
    "description": "The {@link Viewport} belonging to this Scene.",
    "lineNumber": 1451,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "viewport",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2702,
    "kind": "get",
    "name": "camera",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#camera",
    "access": "public",
    "description": "The {@link Camera} belonging to this Scene.",
    "lineNumber": 1462,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "camera",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2703,
    "kind": "get",
    "name": "center",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#center",
    "access": "public",
    "description": "World-space 3D center of this Scene.",
    "lineNumber": 1473,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "center",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2704,
    "kind": "member",
    "name": "_center",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_center",
    "access": "private",
    "description": null,
    "lineNumber": 1476,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2705,
    "kind": "get",
    "name": "aabb",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#aabb",
    "access": "public",
    "description": "World-space axis-aligned 3D boundary (AABB) of this Scene.\n\nThe AABB is represented by a six-element Float32Array containing the min/max extents of the\naxis-aligned volume, ie. ````[xmin, ymin,zmin,xmax,ymax, zmax]````.",
    "lineNumber": 1496,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "aabb",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2706,
    "kind": "member",
    "name": "_aabb",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_aabb",
    "access": "private",
    "description": null,
    "lineNumber": 1499,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2707,
    "kind": "member",
    "name": "_aabbDirty",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_aabbDirty",
    "access": "private",
    "description": null,
    "lineNumber": 1543,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2708,
    "kind": "method",
    "name": "_setBoundaryDirty",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_setBoundaryDirty",
    "access": "private",
    "description": null,
    "lineNumber": 1548,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2710,
    "kind": "method",
    "name": "pick",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#pick",
    "access": "public",
    "description": "Attempts to pick an {@link Mesh\"}}Mesh{{/crossLink}} in this Scene.\n\nIgnores {@link Mesh}es with {@link Mesh#pickable:property\"}}pickable{{/crossLink}}\nset *false*.\n\nWhen a {@link Mesh} is picked, fires a \"pick\" event on the {@link Mesh}\nwith the pick result as parameters.\n\nPicking the {@link Mesh} at the given canvas coordinates:\n\n````javascript\nvar pickResult = scene.pick({\ncanvasPos: [23, 131]\n});\n\nif (pickResult) { // Picked a Mesh\nvar mesh = pickResult.mesh;\n}\n````\n\n*Usage:**\n\nPicking, with a ray cast through the canvas, hits a {@link Mesh}:\n\n````javascript\nvar pickResult = scene.pick({\npickSurface: true,\ncanvasPos: [23, 131]\n});\n\nif (pickResult) { // Picked a Mesh\n\nvar mesh = pickResult.mesh;\n\n// These properties are only on the pick result when we do a ray-pick:\n\nvar primitive = pickResult.primitive; // Type of primitive that was picked, usually \"triangles\"\nvar primIndex = pickResult.primIndex; // Position of triangle's first index in the picked Mesh's Geometry's indices array\nvar indices = pickResult.indices; // UInt32Array containing the triangle's vertex indices\nvar localPos = pickResult.localPos; // Float32Array containing the picked Local-space position on the triangle\nvar worldPos = pickResult.worldPos; // Float32Array containing the picked World-space position on the triangle\nvar viewPos = pickResult.viewPos; // Float32Array containing the picked View-space position on the triangle\nvar bary = pickResult.bary; // Float32Array containing the picked barycentric position within the triangle\nvar normal = pickResult.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle\nvar uv = pickResult.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle\n}\n````\n\nPicking the {@link Mesh} that intersects an arbitrarily-aligned World-space ray:\n\n````javascript\nvar pickResult = scene.pick({\npickSurface: true,   // Picking with arbitrarily-positioned ray\norigin: [0,0,-5],    // Ray origin\ndirection: [0,0,1]   // Ray direction\n});\n\nif (pickResult) { // Picked a Mesh with the ray\n\nvar mesh = pickResult.mesh;\n\nvar primitive = pickResult.primitive; // Type of primitive that was picked, usually \"triangles\"\nvar primIndex = pickResult.primIndex; // Position of triangle's first index in the picked Mesh's Geometry's indices array\nvar indices = pickResult.indices; // UInt32Array containing the triangle's vertex indices\nvar localPos = pickResult.localPos; // Float32Array containing the picked Local-space position on the triangle\nvar worldPos = pickResult.worldPos; // Float32Array containing the picked World-space position on the triangle\nvar viewPos = pickResult.viewPos; // Float32Array containing the picked View-space position on the triangle\nvar bary = pickResult.bary; // Float32Array containing the picked barycentric position within the triangle\nvar normal = pickResult.normal; // Float32Array containing the interpolated normal vector at the picked position on the triangle\nvar uv = pickResult.uv; // Float32Array containing the interpolated UV coordinates at the picked position on the triangle\nvar origin = pickResult.origin; // Float32Array containing the World-space ray origin\nvar direction = pickResult.direction; // Float32Array containing the World-space ray direction\n}\n````",
    "lineNumber": 1644,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "pick"
      },
      {
        "tagName": "@returns",
        "tagValue": "{PickResult} Holds results of the pick attempt, returned when an {@link Mesh} is picked, else null. See method comments for description."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "Picking parameters."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "params.pickSurface",
        "description": "Whether to find the picked position on the surface of the Mesh."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "name": "params.canvasPos",
        "description": "Canvas-space coordinates. When ray-picking, this will override the\n*origin** and ** direction** parameters and will cause the ray to be fired through the canvas at this position,\ndirectly along the negative View-space Z-axis."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "name": "params.origin",
        "description": "World-space ray origin when ray-picking. Ignored when canvasPos given."
      },
      {
        "nullable": null,
        "types": [
          "Float32Array"
        ],
        "spread": false,
        "optional": true,
        "name": "params.direction",
        "description": "World-space ray direction when ray-picking. Also indicates the length of the ray. Ignored when canvasPos given."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "params.includeMeshes",
        "description": "IDs of {@link Mesh}es to restrict picking to. When given, ignores {@link Mesh}es whose IDs are not in this list."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "name": "params.excludeMeshes",
        "description": "IDs of {@link Mesh}es to ignore. When given, will pick *through* these {@link Mesh}es, as if they were not there."
      },
      {
        "nullable": null,
        "types": [
          "PickResult"
        ],
        "spread": false,
        "optional": true,
        "name": "pickResult",
        "description": "Holds the results of the pick attempt. Will use the Scene's singleton PickResult if you don't supply your own."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "PickResult"
      ],
      "spread": false,
      "description": "Holds results of the pick attempt, returned when an {@link Mesh} is picked, else null. See method comments for description."
    }
  },
  {
    "__docId__": 2711,
    "kind": "method",
    "name": "getAABB",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#getAABB",
    "access": "public",
    "description": "Returns the collective axis-aligned bounding box of the {@link Node}s, specified by their IDs or objectIds.\n\nWhen no arguments are given, returns the total boundary of all objects in the scene.\n\nOnly {@link Mesh}es with {@link Mesh#collidable:property\"}}collidable{{/crossLink}}\nset ````true```` are included in the boundary.\n\n# Usage\n\n````JavaScript\nscene.getAABB(); // Gets collective boundary of all objects in the scene\nscene.getAABB(\"saw\"); // Gets collective boundary of all objects in saw model\nscene.getAABB([\"saw\", \"gearbox\"]); // Gets collective boundary of all objects in saw and gearbox models\nscene.getAABB(\"saw#0.1\"); // Get boundary of an object in the saw model\nscene.getAABB([\"saw#0.1\", \"saw#0.2\"]); // Get collective boundary of two objects in saw model\nscene.getAABB([\"saw#0.1\", \"surface\", \"support\"]); // Get collective boundary an object, and all objects of the given two entity classes.\n````",
    "lineNumber": 1703,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getAABB"
      },
      {
        "tagName": "@returns",
        "tagValue": "{[Number, Number, Number, Number, Number, Number]} An axis-aligned World-space bounding box, given as elements ````[xmin, ymin, zmin, xmax, ymax, zmax]````."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "String[]"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "{Array} Array of  {@link Node} IDs of objectIds."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "[Number, Number, Number, Number, Number, Number]"
      ],
      "spread": false,
      "description": "An axis-aligned World-space bounding box, given as elements ````[xmin, ymin, zmin, xmax, ymax, zmax]````."
    }
  },
  {
    "__docId__": 2712,
    "kind": "method",
    "name": "clear",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#clear",
    "access": "public",
    "description": "Resets this Scene to its default state.\n\nReferences to any components in this Scene will become invalid.",
    "lineNumber": 1768,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "clear"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 2713,
    "kind": "method",
    "name": "clearLights",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#clearLights",
    "access": "public",
    "description": "Convenience method that destroys all light sources.\n\nRemoves all {@link AmbientLight\"}}AmbientLights{{/crossLink}}, {@link PointLight\"}}PointLights{{/crossLink}},\n{@link DirLight\"}}DirLights{{/crossLink}} and {@link SpotLight\"}}SpotLights{{/crossLink}}.",
    "lineNumber": 1790,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "clearLights"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 2714,
    "kind": "method",
    "name": "clearClips",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#clearClips",
    "access": "public",
    "description": "Convenience method that destroys all {@link Clip\"}}Clips{{/crossLink}}.",
    "lineNumber": 1802,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "clearClips"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 2715,
    "kind": "method",
    "name": "setVisible",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#setVisible",
    "access": "public",
    "description": "Shows or hides a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.\n\nEach Object indicates its visibility status in its {@link Node/visibility} property.\n\nEach visible Object is registered in the {@link Scene}'s\n{@link Scene#visibleObjects} map while its {@link Node/objectId}\nis assigned a value.",
    "lineNumber": 1823,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setVisible"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Node}s changed visibility, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Node} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "visible",
        "description": "{Boolean} The new visibility state."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Node}s changed visibility, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 2716,
    "kind": "method",
    "name": "setCulled",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#setCulled",
    "access": "public",
    "description": "Culls or unculls a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.\n\nEach Object indicates its culled status in its {@link Node/visibility} property.",
    "lineNumber": 1841,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setVisible"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Node}s changed culled state, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Node} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "culled",
        "description": "{Boolean} The new cull state."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Node}s changed culled state, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 2717,
    "kind": "method",
    "name": "setSelected",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#setSelected",
    "access": "public",
    "description": "Selects or de-selects a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.\n\nEach Object indicates its selected status in its {@link Node/selected} property.\n\nEach selected Object is registered in the {@link Scene}'s\n{@link Scene#selectedObjects} map while its {@link Node/objectId}\nis assigned a value.",
    "lineNumber": 1863,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setSelected"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Node}s changed selection state, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Node} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selected",
        "description": "{Boolean} Whether to select or deselect."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Node}s changed selection state, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 2718,
    "kind": "method",
    "name": "setHighlighted",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#setHighlighted",
    "access": "public",
    "description": "Highlights or de-highlights a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.\n\nEach Object indicates its highlight status in its {@link Node/highlighted} property.\n\nEach highlighted Object is registered in the {@link Scene}'s\n{@link Scene#highlightedObjects} map while its {@link Node/objectId}\nis assigned a value.",
    "lineNumber": 1885,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setHighlighted"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Node}s changed highlighted state, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Node} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlighted",
        "description": "{Boolean} Whether to highlight or un-highlight."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Node}s changed highlighted state, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 2719,
    "kind": "method",
    "name": "setGhosted",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#setGhosted",
    "access": "public",
    "description": "Ghosts or un-ghosts a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.\n\nEach Object indicates its ghosted status in its {@link Node/ghosted} property.\n\nEach ghosted Object is registered in the {@link Scene}'s\n{@link Scene#ghostedObjects} map when its {@link Node/objectId}\nis assigned a value.",
    "lineNumber": 1907,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setGhosted"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Node}s changed ghosted state, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Node} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghosted",
        "description": "{Float32Array} Whether to ghost or un-ghost."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Node}s changed ghosted state, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 2720,
    "kind": "method",
    "name": "setEdges",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#setEdges",
    "access": "public",
    "description": "Shows or hides wireeframe edges for batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.",
    "lineNumber": 1923,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setEdges"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Node}s changed edges state, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Node} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "edges",
        "description": "{Float32Array} Whether to show or hide edges."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Node}s changed edges state, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 2721,
    "kind": "method",
    "name": "setOutlined",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#setOutlined",
    "access": "public",
    "description": "Shows or hides an outline around a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.\n\nEach Object indicates its outlined status in its {@link Node/outlined} property.\n\nEach outlined Object is registered in the {@link Scene}'s\n{@link Scene#outlinedObjects} map when its {@link Node/entityType}\nis assigned a value.",
    "lineNumber": 1945,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setOutlined"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Node}s changed outlined state, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Node} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "outlined",
        "description": "{Float32Array} Whether to show or hide the outline."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Node}s changed outlined state, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 2722,
    "kind": "method",
    "name": "setColorize",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#setColorize",
    "access": "public",
    "description": "Colorizes a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.",
    "lineNumber": 1960,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setColorize"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Node} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "(1,1,1)",
        "defaultRaw": "(1,1,1)",
        "name": "colorize",
        "description": "Float32Array RGB colorize factors, multiplied by the rendered pixel colors."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2723,
    "kind": "method",
    "name": "setOpacity",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#setOpacity",
    "access": "public",
    "description": "Updates opacities of a batch of {@link Node}s, specified by their IDs, GUIDs and/or entity types.",
    "lineNumber": 1973,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setOpacity"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Node} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "1",
        "defaultRaw": 1,
        "name": "opacity",
        "description": "Number Opacity factor in range ````[0..1]````, multiplies by the rendered pixel alphas."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2724,
    "kind": "method",
    "name": "setPickable",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#setPickable",
    "access": "public",
    "description": "Sets a batch of {@link Node}s pickable or unpickable, specified by their IDs, GUIDs and/or entity types.\n\nPicking is done with {@link Scene#pick}.",
    "lineNumber": 1989,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "setPickable"
      },
      {
        "tagName": "@returns",
        "tagValue": "{Boolean} True if any {@link Node}s changed pickable state, else false if all updates were redundant and not applied."
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{Array} Array of  {@link Node} IDs, GUIDs or entity types."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pickable",
        "description": "{Float32Array} Whether to ghost or un-ghost."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": "True if any {@link Node}s changed pickable state, else false if all updates were redundant and not applied."
    }
  },
  {
    "__docId__": 2725,
    "kind": "method",
    "name": "withComponents",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#withComponents",
    "access": "public",
    "description": "Iterates with a callback over {@link Component}s, specified by their IDs or objectIds.",
    "lineNumber": 2004,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "withComponents"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ids",
        "description": "{String|Array} One or more {@link Component} IDs or objectIds."
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "callback",
        "description": "{Function} The callback, which takes each object as its argument."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2726,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/scene/Scene.js~Scene",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 2026,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2738,
    "kind": "member",
    "name": "_objectGUIDs",
    "memberof": "scene/scene/Scene.js~Scene",
    "static": false,
    "longname": "scene/scene/Scene.js~Scene#_objectGUIDs",
    "access": "private",
    "description": null,
    "lineNumber": 2050,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2751,
    "kind": "file",
    "name": "scene/skybox/Skybox.js",
    "content": "import {Component} from \"../Component.js\";\nimport {Mesh} from \"../mesh/Mesh.js\";\nimport {Geometry} from \"../geometry/Geometry.js\";\nimport {PhongMaterial} from \"../materials/PhongMaterial.js\";\nimport {Texture} from \"../materials/Texture.js\";\n\nclass Skybox extends Component {\n\n    constructor(owner, cfg={}) {\n\n        super(owner, cfg);\n\n        this._skyboxMesh = new Mesh(this, {\n\n            geometry: new Geometry(this, { // Box-shaped geometry\n                primitive: \"triangles\",\n                positions: [\n                    1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, 1, // v0-v1-v2-v3 front\n                    1, 1, 1, 1, -1, 1, 1, -1, -1, 1, 1, -1, // v0-v3-v4-v5 right\n                    1, 1, 1, 1, 1, -1, -1, 1, -1, -1, 1, 1, // v0-v5-v6-v1 top\n                    -1, 1, 1, -1, 1, -1, -1, -1, -1, -1, -1, 1, // v1-v6-v7-v2 left\n                    -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1, // v7-v4-v3-v2 bottom\n                    1, -1, -1, -1, -1, -1, -1, 1, -1, 1, 1, -1 // v4-v7-v6-v5 back\n                ],\n                uv: [\n                    0.5, 0.6666, 0.25, 0.6666, 0.25, 0.3333, 0.5, 0.3333, 0.5, 0.6666, 0.5, 0.3333, 0.75, 0.3333, 0.75, 0.6666,\n                    0.5, 0.6666, 0.5, 1, 0.25, 1, 0.25, 0.6666, 0.25, 0.6666, 0.0, 0.6666, 0.0, 0.3333, 0.25, 0.3333,\n                    0.25, 0, 0.50, 0, 0.50, 0.3333, 0.25, 0.3333, 0.75, 0.3333, 1.0, 0.3333, 1.0, 0.6666, 0.75, 0.6666\n                ],\n                indices: [\n                    0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7, 8, 9, 10, 8, 10, 11,\n                    12, 13, 14, 12, 14, 15, 16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23\n                ]\n            }),\n            scale: [2000, 2000, 2000], // Overridden when we initialize the 'size' property, below\n            rotation: [0, -90, 0],\n            material: new PhongMaterial(this, {\n                ambient: [0, 0, 0],\n                diffuse: [0, 0, 0],\n                specular: [0, 0, 0],\n                emissive: [1, 1, 1],\n                emissiveMap: new Texture(this, {\n                    src: cfg.src,\n                    flipY: true,\n                    encoding: cfg.encoding || \"sRGB\"\n                }),\n                backfaces: true // Show interior faces of our skybox geometry\n            }),\n            stationary: true,\n            visible: false,\n            pickable: false,\n            collidable: false\n        });\n\n        this.size = cfg.size; // Sets 'xyz' property on the Mesh's Scale transform\n        this.active = cfg.active;\n    }\n\n\n    /**\n     Size of this Skybox, given as the distance from the center at [0,0,0] to each face.\n\n     @property size\n     @default 1000\n     @type {Number}\n     */\n    set size(value) {\n        this._size = value || 1000;\n        this._skyboxMesh.scale = [this._size, this._size, this._size];\n    }\n\n    get size() {\n        return this._size;\n    }\n\n\n    /**\n     Indicates whether this Skybox is visible or not.\n\n     @property active\n     @default false\n     @type Boolean\n     */\n    set active(value) {\n        this._skyboxMesh.visible = value;\n    }\n\n    get active() {\n        return this._skyboxMesh.visible;\n    }\n}\n\nexport {Skybox}",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/skybox/Skybox.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2752,
    "kind": "class",
    "name": "Skybox",
    "memberof": "scene/skybox/Skybox.js",
    "static": true,
    "longname": "scene/skybox/Skybox.js~Skybox",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/skybox/Skybox.js",
    "importStyle": "{Skybox}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 2753,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/skybox/Skybox.js~Skybox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/skybox/Skybox.js~Skybox#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 9,
    "undocument": true
  },
  {
    "__docId__": 2754,
    "kind": "member",
    "name": "_skyboxMesh",
    "memberof": "scene/skybox/Skybox.js~Skybox",
    "static": false,
    "longname": "scene/skybox/Skybox.js~Skybox#_skyboxMesh",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2757,
    "kind": "set",
    "name": "size",
    "memberof": "scene/skybox/Skybox.js~Skybox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/skybox/Skybox.js~Skybox#size",
    "access": "public",
    "description": "Size of this Skybox, given as the distance from the center at [0,0,0] to each face.",
    "lineNumber": 67,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "1000"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "size",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2758,
    "kind": "member",
    "name": "_size",
    "memberof": "scene/skybox/Skybox.js~Skybox",
    "static": false,
    "longname": "scene/skybox/Skybox.js~Skybox#_size",
    "access": "private",
    "description": null,
    "lineNumber": 68,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2759,
    "kind": "get",
    "name": "size",
    "memberof": "scene/skybox/Skybox.js~Skybox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/skybox/Skybox.js~Skybox#size",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2760,
    "kind": "set",
    "name": "active",
    "memberof": "scene/skybox/Skybox.js~Skybox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/skybox/Skybox.js~Skybox#active",
    "access": "public",
    "description": "Indicates whether this Skybox is visible or not.",
    "lineNumber": 84,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "active",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2761,
    "kind": "get",
    "name": "active",
    "memberof": "scene/skybox/Skybox.js~Skybox",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/skybox/Skybox.js~Skybox#active",
    "access": "public",
    "description": null,
    "lineNumber": 88,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2762,
    "kind": "file",
    "name": "scene/stats.js",
    "content": "/**\n * xeokit runtime statistics.\n * @type {{components: {models: number, objects: number, scenes: number, meshes: number}, memory: {indices: number, uvs: number, textures: number, materials: number, transforms: number, positions: number, programs: number, normals: number, meshes: number, colors: number}, build: {version: string}, client: {browser: string}, frame: {frameCount: number, useProgram: number, bindTexture: number, drawElements: number, bindArray: number, tasksRun: number, fps: number, drawArrays: number, tasksScheduled: number}}}\n */\nconst stats = {\n    build: {\n        version: \"0.8\"\n    },\n    client: {\n        browser: (navigator && navigator.userAgent) ? navigator.userAgent : \"n/a\"\n    },\n\n    // TODO: replace 'canvas' with 'pixels'\n    //canvas: {\n    //    width: 0,\n    //    height: 0\n    //},\n    components: {\n        scenes: 0,\n        models: 0,\n        meshes: 0,\n        objects: 0\n    },\n    memory: {\n\n        // Note that these counts will include any positions, colors,\n        // normals and indices that xeokit internally creates on-demand\n        // to support color-index triangle picking.\n\n        meshes: 0,\n        positions: 0,\n        colors: 0,\n        normals: 0,\n        uvs: 0,\n        indices: 0,\n        textures: 0,\n        transforms: 0,\n        materials: 0,\n        programs: 0\n    },\n    frame: {\n        frameCount: 0,\n        fps: 0,\n        useProgram: 0,\n        bindTexture: 0,\n        bindArray: 0,\n        drawElements: 0,\n        drawArrays: 0,\n        tasksRun: 0,\n        tasksScheduled: 0\n    }\n};\n\nexport {stats};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/stats.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2763,
    "kind": "variable",
    "name": "stats",
    "memberof": "scene/stats.js",
    "static": true,
    "longname": "scene/stats.js~stats",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/stats.js",
    "importStyle": "{stats}",
    "description": "xeokit runtime statistics.",
    "lineNumber": 5,
    "type": {
      "nullable": null,
      "types": [
        "{components: {models: number, objects: number, scenes: number, meshes: number}, memory: {indices: number, uvs: number, textures: number, materials: number, transforms: number, positions: number, programs: number, normals: number, meshes: number, colors: number}, build: {version: string}, client: {browser: string}, frame: {frameCount: number, useProgram: number, bindTexture: number, drawElements: number, bindArray: number, tasksRun: number, fps: number, drawArrays: number, tasksScheduled: number}}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2764,
    "kind": "file",
    "name": "scene/utils/Map.js",
    "content": "class Map {\n\n    constructor(items, baseId) {\n        this.items = items || [];\n        this._lastUniqueId = (baseId || 0) + 1;\n    }\n\n    /**\n     * Usage:\n     *\n     * id = myMap.addItem(\"foo\") // ID internally generated\n     * id = myMap.addItem(\"foo\", \"bar\") // ID is \"foo\"\n     */\n    addItem() {\n        let item;\n        if (arguments.length === 2) {\n            const id = arguments[0];\n            item = arguments[1];\n            if (this.items[id]) { // Won't happen if given ID is string\n                throw \"ID clash: '\" + id + \"'\";\n            }\n            this.items[id] = item;\n            return id;\n\n        } else {\n            item = arguments[0] || {};\n            while (true) {\n                const findId = this._lastUniqueId++;\n                if (!this.items[findId]) {\n                    this.items[findId] = item;\n                    return findId;\n                }\n            }\n        }\n    }\n\n    removeItem(id) {\n        const item = this.items[id];\n        delete this.items[id];\n        return item;\n    }\n}\n\nexport {Map};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/utils/Map.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2765,
    "kind": "class",
    "name": "Map",
    "memberof": "scene/utils/Map.js",
    "static": true,
    "longname": "scene/utils/Map.js~Map",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/utils/Map.js",
    "importStyle": "{Map}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 2766,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/utils/Map.js~Map",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/utils/Map.js~Map#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 3,
    "undocument": true
  },
  {
    "__docId__": 2767,
    "kind": "member",
    "name": "items",
    "memberof": "scene/utils/Map.js~Map",
    "static": false,
    "longname": "scene/utils/Map.js~Map#items",
    "access": "public",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2768,
    "kind": "member",
    "name": "_lastUniqueId",
    "memberof": "scene/utils/Map.js~Map",
    "static": false,
    "longname": "scene/utils/Map.js~Map#_lastUniqueId",
    "access": "private",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2769,
    "kind": "method",
    "name": "addItem",
    "memberof": "scene/utils/Map.js~Map",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/utils/Map.js~Map#addItem",
    "access": "public",
    "description": "Usage:\n\nid = myMap.addItem(\"foo\") // ID internally generated\nid = myMap.addItem(\"foo\", \"bar\") // ID is \"foo\"",
    "lineNumber": 14,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2770,
    "kind": "method",
    "name": "removeItem",
    "memberof": "scene/utils/Map.js~Map",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/utils/Map.js~Map#removeItem",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "params": [
      {
        "name": "id",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2771,
    "kind": "file",
    "name": "scene/utils/Queue.js",
    "content": "// Fast queue that avoids using potentially inefficient array .shift() calls\n// Based on https://github.com/creationix/fastqueue\n\nclass Queue {\n\n    constructor() {\n\n        this._head = [];\n        this._headLength = 0;\n        this._tail = [];\n        this._index = 0;\n        this._length = 0;\n    }\n\n    get length() {\n        return this._length;\n    }\n\n    shift() {\n        if (this._index >= this._headLength) {\n            const t = this._head;\n            t.length = 0;\n            this._head = this._tail;\n            this._tail = t;\n            this._index = 0;\n            this._headLength = this._head.length;\n            if (!this._headLength) {\n                return;\n            }\n        }\n        const value = this._head[this._index];\n        if (this._index < 0) {\n            delete this._head[this._index++];\n        }\n        else {\n            this._head[this._index++] = undefined;\n        }\n        this._length--;\n        return value;\n    }\n\n    push(item) {\n        this._length++;\n        this._tail.push(item);\n        return this;\n    };\n\n    unshift(item) {\n        this._head[--this._index] = item;\n        this._length++;\n        return this;\n    }\n}\n\nexport {Queue};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/utils/Queue.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2772,
    "kind": "class",
    "name": "Queue",
    "memberof": "scene/utils/Queue.js",
    "static": true,
    "longname": "scene/utils/Queue.js~Queue",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/utils/Queue.js",
    "importStyle": "{Queue}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 2773,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/utils/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/utils/Queue.js~Queue#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 6,
    "undocument": true
  },
  {
    "__docId__": 2774,
    "kind": "member",
    "name": "_head",
    "memberof": "scene/utils/Queue.js~Queue",
    "static": false,
    "longname": "scene/utils/Queue.js~Queue#_head",
    "access": "private",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 2775,
    "kind": "member",
    "name": "_headLength",
    "memberof": "scene/utils/Queue.js~Queue",
    "static": false,
    "longname": "scene/utils/Queue.js~Queue#_headLength",
    "access": "private",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 2776,
    "kind": "member",
    "name": "_tail",
    "memberof": "scene/utils/Queue.js~Queue",
    "static": false,
    "longname": "scene/utils/Queue.js~Queue#_tail",
    "access": "private",
    "description": null,
    "lineNumber": 10,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*[]"
      ]
    }
  },
  {
    "__docId__": 2777,
    "kind": "member",
    "name": "_index",
    "memberof": "scene/utils/Queue.js~Queue",
    "static": false,
    "longname": "scene/utils/Queue.js~Queue#_index",
    "access": "private",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 2778,
    "kind": "member",
    "name": "_length",
    "memberof": "scene/utils/Queue.js~Queue",
    "static": false,
    "longname": "scene/utils/Queue.js~Queue#_length",
    "access": "private",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 2779,
    "kind": "get",
    "name": "length",
    "memberof": "scene/utils/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/utils/Queue.js~Queue#length",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2780,
    "kind": "method",
    "name": "shift",
    "memberof": "scene/utils/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/utils/Queue.js~Queue#shift",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2785,
    "kind": "method",
    "name": "push",
    "memberof": "scene/utils/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/utils/Queue.js~Queue#push",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2786,
    "kind": "method",
    "name": "unshift",
    "memberof": "scene/utils/Queue.js~Queue",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/utils/Queue.js~Queue#unshift",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "params": [
      {
        "name": "item",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2787,
    "kind": "file",
    "name": "scene/utils.js",
    "content": "/**\n * @private\n */\nfunction xmlToJson(node, attributeRenamer) {\n    if (node.nodeType === node.TEXT_NODE) {\n        var v = node.nodeValue;\n        if (v.match(/^\\s+$/) === null) {\n            return v;\n        }\n    } else if (node.nodeType === node.ELEMENT_NODE ||\n        node.nodeType === node.DOCUMENT_NODE) {\n        var json = {type: node.nodeName, children: []};\n\n        if (node.nodeType === node.ELEMENT_NODE) {\n            for (var j = 0; j < node.attributes.length; j++) {\n                var attribute = node.attributes[j];\n                var nm = attributeRenamer[attribute.nodeName] || attribute.nodeName;\n                json[nm] = attribute.nodeValue;\n            }\n        }\n\n        for (var i = 0; i < node.childNodes.length; i++) {\n            var item = node.childNodes[i];\n            var j = xmlToJson(item, attributeRenamer);\n            if (j) json.children.push(j);\n        }\n\n        return json;\n    }\n}\n\n/**\n * @private\n */\nfunction clone(ob) {\n    return JSON.parse(JSON.stringify(ob));\n}\n\n/**\n * @private\n */\nvar guidChars = [[\"0\", 10], [\"A\", 26], [\"a\", 26], [\"_\", 1], [\"$\", 1]].map(function (a) {\n    var li = [];\n    var st = a[0].charCodeAt(0);\n    var en = st + a[1];\n    for (var i = st; i < en; ++i) {\n        li.push(i);\n    }\n    return String.fromCharCode.apply(null, li);\n}).join(\"\");\n\n/**\n * @private\n */\nfunction b64(v, len) {\n    var r = (!len || len === 4) ? [0, 6, 12, 18] : [0, 6];\n    return r.map(function (i) {\n        return guidChars.substr(parseInt(v / (1 << i)) % 64, 1)\n    }).reverse().join(\"\");\n}\n\n/**\n * @private\n */\nfunction compressGuid(g) {\n    var bs = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30].map(function (i) {\n        return parseInt(g.substr(i, 2), 16);\n    });\n    return b64(bs[0], 2) + [1, 4, 7, 10, 13].map(function (i) {\n        return b64((bs[i] << 16) + (bs[i + 1] << 8) + bs[i + 2]);\n    }).join(\"\");\n}\n\n/**\n * @private\n */\nfunction findNodeOfType(m, t) {\n    var li = [];\n    var _ = function (n) {\n        if (n.type === t) li.push(n);\n        (n.children || []).forEach(function (c) {\n            _(c);\n        });\n    };\n    _(m);\n    return li;\n}\n\n/**\n * @private\n */\nfunction timeout(dt) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(resolve, dt);\n    });\n}\n\n/**\n * @private\n */\nfunction httpRequest(args) {\n    return new Promise(function (resolve, reject) {\n        var xhr = new XMLHttpRequest();\n        xhr.open(args.method || \"GET\", args.url, true);\n        xhr.onload = function (e) {\n            console.log(args.url, xhr.readyState, xhr.status)\n            if (xhr.readyState === 4) {\n                if (xhr.status === 200) {\n                    resolve(xhr.responseXML);\n                } else {\n                    reject(xhr.statusText);\n                }\n            }\n        };\n        xhr.send(null);\n    });\n}\n\n/**\n * @private\n */\nconst queryString = function () {\n    // This function is anonymous, is executed immediately and\n    // the return value is assigned to QueryString!\n    var query_string = {};\n    var query = window.location.search.substring(1);\n    var vars = query.split(\"&\");\n    for (var i = 0; i < vars.length; i++) {\n        var pair = vars[i].split(\"=\");\n        // If first entry with this name\n        if (typeof query_string[pair[0]] === \"undefined\") {\n            query_string[pair[0]] = decodeURIComponent(pair[1]);\n            // If second entry with this name\n        } else if (typeof query_string[pair[0]] === \"string\") {\n            var arr = [query_string[pair[0]], decodeURIComponent(pair[1])];\n            query_string[pair[0]] = arr;\n            // If third or later entry with this name\n        } else {\n            query_string[pair[0]].push(decodeURIComponent(pair[1]));\n        }\n    }\n    return query_string;\n}();\n\n\n/**\n * @private\n */\nvar delay = function (dt) {\n    return new Promise(function (resolve, reject) {\n        setTimeout(resolve, dt);\n    });\n};\n\n/**\n * @private\n */\nfunction loadJSON(url, ok, err) {\n    // Avoid checking ok and err on each use.\n    var defaultCallback = (_value) => undefined;\n    ok = ok || defaultCallback;\n    err = err || defaultCallback;\n\n    var request = new XMLHttpRequest();\n    request.overrideMimeType(\"application/json\");\n    request.open('GET', url, true);\n    request.addEventListener('load', function (event) {\n        var response = event.target.response;\n        if (this.status === 200) {\n            try {\n                ok(JSON.parse(response));\n            } catch (e) {\n                err(`utils.loadJSON(): Failed to parse JSON response - ${e}`);\n            }\n        } else if (this.status === 0) {\n            // Some browsers return HTTP Status 0 when using non-http protocol\n            // e.g. 'file://' or 'data://'. Handle as success.\n            console.warn('loadFile: HTTP Status 0 received.');\n            ok(response);\n        } else {\n            err(event);\n        }\n    }, false);\n\n    request.addEventListener('error', function (event) {\n        err(event);\n    }, false);\n    request.send(null);\n}\n\n\n/**\n Tests if the given object is an array\n @private\n */\nfunction isArray(testMesh) {\n    return testMesh && !(testMesh.propertyIsEnumerable('length')) && typeof testMesh === 'object' && typeof testMesh.length === 'number';\n}\n\n/**\n Tests if the given value is a string\n @param value\n @returns {boolean}\n @private\n */\nfunction isString(value) {\n    return (typeof value === 'string' || value instanceof String);\n}\n\n/**\n Tests if the given value is a number\n @param value\n @returns {boolean}\n @private\n */\nfunction isNumeric(value) {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n}\n\n/**\n Tests if the given value is an ID\n @param value\n @returns {boolean}\n @private\n */\nfunction isID(value) {\n    return utils.isString(value) || utils.isNumeric(value);\n}\n\n/**\n Tests if the given components are the same, where the components can be either IDs or instances.\n @param c1\n @param c2\n @returns {boolean}\n @private\n */\nfunction isSameComponent(c1, c2) {\n    if (!c1 || !c2) {\n        return false;\n    }\n    const id1 = (utils.isNumeric(c1) || utils.isString(c1)) ? `${c1}` : c1.id;\n    const id2 = (utils.isNumeric(c2) || utils.isString(c2)) ? `${c2}` : c2.id;\n    return id1 === id2;\n}\n\n/**\n Tests if the given value is a function\n @param value\n @returns {boolean}\n @private\n */\nfunction isFunction(value) {\n    return (typeof value === \"function\");\n}\n\n/**\n Tests if the given value is a JavaScript JSON object, eg, ````{ foo: \"bar\" }````.\n @param value\n @returns {boolean}\n @private\n */\nfunction isObject(value) {\n    const objectConstructor = {}.constructor;\n    return (!!value && value.constructor === objectConstructor);\n}\n\n/** Returns a shallow copy\n */\nfunction copy(o) {\n    return utils.apply(o, {});\n}\n\n/** Add properties of o to o2, overwriting them on o2 if already there\n */\nfunction apply(o, o2) {\n    for (const name in o) {\n        if (o.hasOwnProperty(name)) {\n            o2[name] = o[name];\n        }\n    }\n    return o2;\n}\n\n/**\n Add non-null/defined properties of o to o2\n @private\n */\nfunction apply2(o, o2) {\n    for (const name in o) {\n        if (o.hasOwnProperty(name)) {\n            if (o[name] !== undefined && o[name] !== null) {\n                o2[name] = o[name];\n            }\n        }\n    }\n    return o2;\n}\n\n/**\n Add properties of o to o2 where undefined or null on o2\n @private\n */\nfunction applyIf(o, o2) {\n    for (const name in o) {\n        if (o.hasOwnProperty(name)) {\n            if (o2[name] === undefined || o2[name] === null) {\n                o2[name] = o[name];\n            }\n        }\n    }\n    return o2;\n}\n\n/**\n Returns true if the given map is empty.\n @param obj\n @returns {boolean}\n @private\n */\nfunction isEmptyObject(obj) {\n    for (const name in obj) {\n        if (obj.hasOwnProperty(name)) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/**\n Returns the given ID as a string, in quotes if the ID was a string to begin with.\n\n This is useful for logging IDs.\n\n @param {Number| String} id The ID\n @returns {String}\n @private\n */\nfunction inQuotes(id) {\n    return utils.isNumeric(id) ? (`${id}`) : (`'${id}'`);\n}\n\n/**\n Returns the concatenation of two typed arrays.\n @param a\n @param b\n @returns {*|a}\n @private\n */\nfunction concat(a, b) {\n    const c = new a.constructor(a.length + b.length);\n    c.set(a);\n    c.set(b, a.length);\n    return c;\n}\n\nfunction flattenParentChildHierarchy(root) {\n    var list = [];\n\n    function visit(node) {\n        node.id = node.uuid;\n        delete node.oid;\n        list.push(node);\n        var children = node.children;\n\n        if (children) {\n            for (var i = 0, len = children.length; i < len; i++) {\n                const child = children[i];\n                child.parent = node.id;\n                visit(children[i]);\n            }\n        }\n         node.children = [];\n    }\n\n    visit(root);\n    console.log(JSON.stringify(list, null, \"\\t\"));\n    return list;\n}\n\n/**\n * @private\n */\nconst utils = {\n    xmlToJson: xmlToJson,\n    clone: clone,\n    compressGuid: compressGuid,\n    findNodeOfType: findNodeOfType,\n    timeout: timeout,\n    httpRequest: httpRequest,\n    loadJSON: loadJSON,\n    queryString: queryString,\n    isArray: isArray,\n    isString: isString,\n    isNumeric: isNumeric,\n    isID: isID,\n    isSameComponent: isSameComponent,\n    isFunction: isFunction,\n    isObject: isObject,\n    copy: copy,\n    apply: apply,\n    apply2: apply2,\n    applyIf: applyIf,\n    isEmptyObject: isEmptyObject,\n    inQuotes: inQuotes,\n    concat: concat,\n    flattenParentChildHierarchy: flattenParentChildHierarchy\n};\n\nexport {utils};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/utils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2788,
    "kind": "function",
    "name": "xmlToJson",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~xmlToJson",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 4,
    "ignore": true,
    "params": [
      {
        "name": "node",
        "types": [
          "*"
        ]
      },
      {
        "name": "attributeRenamer",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2789,
    "kind": "function",
    "name": "clone",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~clone",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 35,
    "ignore": true,
    "params": [
      {
        "name": "ob",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2790,
    "kind": "variable",
    "name": "guidChars",
    "memberof": "scene/utils.js",
    "static": true,
    "longname": "scene/utils.js~guidChars",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 42,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2791,
    "kind": "function",
    "name": "b64",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~b64",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 55,
    "ignore": true,
    "params": [
      {
        "name": "v",
        "types": [
          "*"
        ]
      },
      {
        "name": "len",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2792,
    "kind": "function",
    "name": "compressGuid",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~compressGuid",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 65,
    "ignore": true,
    "params": [
      {
        "name": "g",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2793,
    "kind": "function",
    "name": "findNodeOfType",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~findNodeOfType",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 77,
    "ignore": true,
    "params": [
      {
        "name": "m",
        "types": [
          "*"
        ]
      },
      {
        "name": "t",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2794,
    "kind": "function",
    "name": "timeout",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~timeout",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 92,
    "ignore": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2795,
    "kind": "function",
    "name": "httpRequest",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~httpRequest",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 101,
    "ignore": true,
    "params": [
      {
        "name": "args",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2796,
    "kind": "variable",
    "name": "queryString",
    "memberof": "scene/utils.js",
    "static": true,
    "longname": "scene/utils.js~queryString",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 122,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2797,
    "kind": "function",
    "name": "delay",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~delay",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 149,
    "ignore": true,
    "params": [
      {
        "name": "dt",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2798,
    "kind": "function",
    "name": "loadJSON",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~loadJSON",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "",
    "lineNumber": 158,
    "ignore": true,
    "params": [
      {
        "name": "url",
        "types": [
          "*"
        ]
      },
      {
        "name": "ok",
        "types": [
          "*"
        ]
      },
      {
        "name": "err",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2799,
    "kind": "function",
    "name": "isArray",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~isArray",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "Tests if the given object is an array",
    "lineNumber": 196,
    "ignore": true,
    "params": [
      {
        "name": "testMesh",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2800,
    "kind": "function",
    "name": "isString",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~isString",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "Tests if the given value is a string",
    "lineNumber": 206,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 2801,
    "kind": "function",
    "name": "isNumeric",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~isNumeric",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "Tests if the given value is a number",
    "lineNumber": 216,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 2802,
    "kind": "function",
    "name": "isID",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~isID",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "Tests if the given value is an ID",
    "lineNumber": 226,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 2803,
    "kind": "function",
    "name": "isSameComponent",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~isSameComponent",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "Tests if the given components are the same, where the components can be either IDs or instances.",
    "lineNumber": 237,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "c1",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "c2",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 2804,
    "kind": "function",
    "name": "isFunction",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~isFunction",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "Tests if the given value is a function",
    "lineNumber": 252,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 2805,
    "kind": "function",
    "name": "isObject",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~isObject",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "Tests if the given value is a JavaScript JSON object, eg, ````{ foo: \"bar\" }````.",
    "lineNumber": 262,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "value",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 2806,
    "kind": "function",
    "name": "copy",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~copy",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "Returns a shallow copy",
    "lineNumber": 269,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2807,
    "kind": "function",
    "name": "apply",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~apply",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "Add properties of o to o2, overwriting them on o2 if already there",
    "lineNumber": 275,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      },
      {
        "name": "o2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2808,
    "kind": "function",
    "name": "apply2",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~apply2",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "Add non-null/defined properties of o to o2",
    "lineNumber": 288,
    "ignore": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      },
      {
        "name": "o2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2809,
    "kind": "function",
    "name": "applyIf",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~applyIf",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "Add properties of o to o2 where undefined or null on o2",
    "lineNumber": 303,
    "ignore": true,
    "params": [
      {
        "name": "o",
        "types": [
          "*"
        ]
      },
      {
        "name": "o2",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2810,
    "kind": "function",
    "name": "isEmptyObject",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~isEmptyObject",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "Returns true if the given map is empty.",
    "lineNumber": 320,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{boolean}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "obj",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 2811,
    "kind": "function",
    "name": "inQuotes",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~inQuotes",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "Returns the given ID as a string, in quotes if the ID was a string to begin with.\n\nThis is useful for logging IDs.",
    "lineNumber": 338,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{String}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Number",
          " String"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": "The ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 2812,
    "kind": "function",
    "name": "concat",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~concat",
    "access": "private",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": "Returns the concatenation of two typed arrays.",
    "lineNumber": 349,
    "unknown": [
      {
        "tagName": "@returns",
        "tagValue": "{*|a}"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "b",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*",
        "a"
      ],
      "spread": false,
      "description": ""
    },
    "ignore": true
  },
  {
    "__docId__": 2813,
    "kind": "function",
    "name": "flattenParentChildHierarchy",
    "memberof": "scene/utils.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/utils.js~flattenParentChildHierarchy",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 356,
    "undocument": true,
    "params": [
      {
        "name": "root",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2814,
    "kind": "variable",
    "name": "utils",
    "memberof": "scene/utils.js",
    "static": true,
    "longname": "scene/utils.js~utils",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/utils.js",
    "importStyle": "{utils}",
    "description": "",
    "lineNumber": 383,
    "ignore": true,
    "type": {
      "types": [
        "{\"xmlToJson\": *, \"clone\": *, \"compressGuid\": *, \"findNodeOfType\": *, \"timeout\": *, \"httpRequest\": *, \"loadJSON\": *, \"queryString\": *, \"isArray\": *, \"isString\": *, \"isNumeric\": *, \"isID\": *, \"isSameComponent\": *, \"isFunction\": *, \"isObject\": *, \"copy\": *, \"apply\": *, \"apply2\": *, \"applyIf\": *, \"isEmptyObject\": *, \"inQuotes\": *, \"concat\": *, \"flattenParentChildHierarchy\": *}"
      ]
    }
  },
  {
    "__docId__": 2815,
    "kind": "file",
    "name": "scene/viewport/Viewport.js",
    "content": "/**\n A **Viewport** controls the canvas viewport for a {@link Scene}.\n\n <a href=\"../../examples/#effects_stereo_custom\"><img src=\"../../../assets/images/screenshots/StereoEffect.png\"></img></a>\n\n ## Overview\n\n * One Viewport per scene.\n * You can configure a Scene to render multiple times per frame, while setting the Viewport to different extents on each render.\n * Make a Viewport automatically size to its {@link Scene} {@link Canvas}\n by setting its {@link Viewport/autoBoundary} property ````true```` (default is ````false````).\n\n ## Examples\n\n * [Stereo effect using alternating viewports](../../examples/#effects_stereo_custom)\n\n ## Usage\n\n Configuring the Scene to render twice on each frame, each time to a separate viewport:\n\n ````Javascript\n // Load glTF model\n var model = new xeokit.GLTFModel({\n    src: \"models/gltf/GearboxAssy/glTF-MaterialsCommon/GearboxAssy.gltf\"\n });\n\n var scene = model.scene;\n var viewport = scene.viewport;\n\n // Configure Scene to render twice for each frame\n scene.passes = 2; // Default is 1\n scene.clearEachPass = false; // Default is false\n\n // Render to a separate viewport on each render\n\n var viewport = scene.viewport;\n viewport.autoBoundary = false;\n\n scene.on(\"rendering\", function (e) {\n     switch (e.pass) {\n         case 0:\n             viewport.boundary = [0, 0, 200, 200]; // xmin, ymin, width, height\n             break;\n\n         case 1:\n             viewport.boundary = [200, 0, 200, 200];\n             break;\n     }\n });\n ````\n\n @class Viewport\n @module xeokit\n @submodule rendering\n @constructor\n @param {Component} owner Owner component. When destroyed, the owner will destroy this component as well. Creates this component within the default {@link Scene} when omitted.\n @param {*} [cfg] Viewport configuration\n @param {String} [cfg.id] Optional ID, unique among all components in the parent\n {@link Scene}, generated automatically when omitted.\n @param {String:Object} [cfg.meta] Optional map of user-defined metadata to attach to this Viewport.\n @param [cfg.boundary] {Array of Number} Canvas-space Viewport boundary, given as\n (min, max, width, height). Defaults to the size of the parent\n {@link Scene} {@link Canvas}.\n @param [cfg.autoBoundary=false] {Boolean} Indicates whether this Viewport's {@link Viewport/boundary}\n automatically synchronizes with the size of the parent {@link Scene} {@link Canvas}.\n\n @extends Component\n */\nimport {Component} from '../Component.js';\nimport {RenderState} from '../webgl/RenderState.js';\n\nclass Viewport extends Component {\n\n    /**\n     JavaScript class name for this Component.\n\n     For example: \"AmbientLight\", \"MetallicMaterial\" etc.\n\n     @property type\n     @type String\n     @final\n     */\n    get type() {\n        return \"Viewport\";\n    }\n\n    constructor(owner, cfg={}) {\n\n        super(owner, cfg);\n\n        this._state = new RenderState({\n            boundary: [0, 0, 100, 100]\n        });\n\n        this.boundary = cfg.boundary;\n        this.autoBoundary = cfg.autoBoundary;\n    }\n\n\n    /**\n     The canvas-space boundary of this Viewport, indicated as [min, max, width, height].\n\n     Defaults to the size of the parent\n     {@link Scene} {@link Canvas}.\n\n     Ignores attempts to set value when {@link Viewport/autoBoundary} is ````true````.\n\n     Fires a {@link Viewport/boundary:event} event on change.\n\n     @property boundary\n     @default [size of Scene Canvas]\n     @type {Array of Number}\n     */\n    set boundary(value) {\n\n        if (this._autoBoundary) {\n            return;\n        }\n\n        if (!value) {\n\n            const canvasBoundary = this.scene.canvas.boundary;\n\n            const width = canvasBoundary[2];\n            const height = canvasBoundary[3];\n\n            value = [0, 0, width, height];\n        }\n\n        this._state.boundary = value;\n\n        this.glRedraw();\n\n        /**\n         Fired whenever this Viewport's {@link Viewport/boundary} property changes.\n\n         @event boundary\n         @param value {Boolean} The property's new value\n         */\n        this.fire(\"boundary\", this._state.boundary);\n    }\n\n    get boundary() {\n        return this._state.boundary;\n    }\n\n    /**\n     Indicates whether this Viewport's {@link Viewport/boundary} automatically\n     synchronizes with the size of the parent {@link Scene} {@link Canvas}.\n\n     When set true, then this Viewport will fire a {@link Viewport/boundary/event} whenever\n     the {@link Canvas} resizes. Also fires that event as soon as this ````autoBoundary````\n     property is changed.\n\n     Fires a {@link Viewport/autoBoundary:event} event on change.\n\n     @property autoBoundary\n     @default false\n     @type Boolean\n     */\n    set autoBoundary(value) {\n\n        value = !!value;\n\n        if (value === this._autoBoundary) {\n            return;\n        }\n\n        this._autoBoundary = value;\n\n        if (this._autoBoundary) {\n            this._onCanvasSize = this.scene.canvas.on(\"boundary\",\n                function (boundary) {\n\n                    const width = boundary[2];\n                    const height = boundary[3];\n\n                    this._state.boundary = [0, 0, width, height];\n\n                    this.glRedraw();\n\n                    /**\n                     Fired whenever this Viewport's {@link Viewport/boundary} property changes.\n\n                     @event boundary\n                     @param value {Boolean} The property's new value\n                     */\n                    this.fire(\"boundary\", this._state.boundary);\n\n                }, this);\n\n        } else if (this._onCanvasSize) {\n            this.scene.canvas.off(this._onCanvasSize);\n            this._onCanvasSize = null;\n        }\n\n        /**\n         Fired whenever this Viewport's {@link autoBoundary/autoBoundary} property changes.\n\n         @event autoBoundary\n         @param value The property's new value\n         */\n        this.fire(\"autoBoundary\", this._autoBoundary);\n    }\n\n    get autoBoundary() {\n        return this._autoBoundary;\n    }\n\n    _getState() {\n        return this._state;\n    }\n\n    destroy() {\n        super.destroy();\n        this._state.destroy();\n    }\n}\n\nexport {Viewport};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/viewport/Viewport.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2816,
    "kind": "class",
    "name": "Viewport",
    "memberof": "scene/viewport/Viewport.js",
    "static": true,
    "longname": "scene/viewport/Viewport.js~Viewport",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/viewport/Viewport.js",
    "importStyle": "{Viewport}",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "interface": false,
    "extends": [
      "scene/Component.js~Component"
    ]
  },
  {
    "__docId__": 2817,
    "kind": "get",
    "name": "type",
    "memberof": "scene/viewport/Viewport.js~Viewport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/viewport/Viewport.js~Viewport#type",
    "access": "public",
    "description": "JavaScript class name for this Component.\n\nFor example: \"AmbientLight\", \"MetallicMaterial\" etc.",
    "lineNumber": 83,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2818,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/viewport/Viewport.js~Viewport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/viewport/Viewport.js~Viewport#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 87,
    "undocument": true
  },
  {
    "__docId__": 2819,
    "kind": "member",
    "name": "_state",
    "memberof": "scene/viewport/Viewport.js~Viewport",
    "static": false,
    "longname": "scene/viewport/Viewport.js~Viewport#_state",
    "access": "private",
    "description": null,
    "lineNumber": 91,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2822,
    "kind": "set",
    "name": "boundary",
    "memberof": "scene/viewport/Viewport.js~Viewport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/viewport/Viewport.js~Viewport#boundary",
    "access": "public",
    "description": "The canvas-space boundary of this Viewport, indicated as [min, max, width, height].\n\nDefaults to the size of the parent\n{@link Scene} {@link Canvas}.\n\nIgnores attempts to set value when {@link Viewport/autoBoundary} is ````true````.\n\nFires a {@link Viewport/boundary:event} event on change.",
    "lineNumber": 114,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "[size of Scene Canvas]"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "boundary",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Array of Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2823,
    "kind": "get",
    "name": "boundary",
    "memberof": "scene/viewport/Viewport.js~Viewport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/viewport/Viewport.js~Viewport#boundary",
    "access": "public",
    "description": null,
    "lineNumber": 143,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2824,
    "kind": "set",
    "name": "autoBoundary",
    "memberof": "scene/viewport/Viewport.js~Viewport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/viewport/Viewport.js~Viewport#autoBoundary",
    "access": "public",
    "description": "Indicates whether this Viewport's {@link Viewport/boundary} automatically\nsynchronizes with the size of the parent {@link Scene} {@link Canvas}.\n\nWhen set true, then this Viewport will fire a {@link Viewport/boundary/event} whenever\nthe {@link Canvas} resizes. Also fires that event as soon as this ````autoBoundary````\nproperty is changed.\n\nFires a {@link Viewport/autoBoundary:event} event on change.",
    "lineNumber": 161,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "autoBoundary",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2825,
    "kind": "member",
    "name": "_autoBoundary",
    "memberof": "scene/viewport/Viewport.js~Viewport",
    "static": false,
    "longname": "scene/viewport/Viewport.js~Viewport#_autoBoundary",
    "access": "private",
    "description": null,
    "lineNumber": 169,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2826,
    "kind": "member",
    "name": "_onCanvasSize",
    "memberof": "scene/viewport/Viewport.js~Viewport",
    "static": false,
    "longname": "scene/viewport/Viewport.js~Viewport#_onCanvasSize",
    "access": "private",
    "description": null,
    "lineNumber": 172,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2828,
    "kind": "get",
    "name": "autoBoundary",
    "memberof": "scene/viewport/Viewport.js~Viewport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/viewport/Viewport.js~Viewport#autoBoundary",
    "access": "public",
    "description": null,
    "lineNumber": 206,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2829,
    "kind": "method",
    "name": "_getState",
    "memberof": "scene/viewport/Viewport.js~Viewport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/viewport/Viewport.js~Viewport#_getState",
    "access": "private",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2830,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/viewport/Viewport.js~Viewport",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/viewport/Viewport.js~Viewport#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 214,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2831,
    "kind": "file",
    "name": "scene/webgl/ArrayBuf.js",
    "content": "/**\n An **ArrayBuf** represents a WebGL ArrayBuffer.\n\n @class ArrayBuf\n @module xeokit\n @submodule webgl\n @constructor\n @param gl {WebGLRenderingContext} The WebGL rendering context.\n */\nclass ArrayBuf {\n\n    constructor(gl, type, data, numItems, itemSize, usage, normalized, stride, offset) {\n\n        this._gl = gl;\n        this.type = type;\n        this.allocated = false;\n\n        switch (data.constructor) {\n\n            case Uint8Array:\n                this.itemType = gl.UNSIGNED_BYTE;\n                this.itemByteSize = 1;\n                break;\n\n            case Int8Array:\n                this.itemType = gl.BYTE;\n                this.itemByteSize = 1;\n                break;\n\n            case  Uint16Array:\n                this.itemType = gl.UNSIGNED_SHORT;\n                this.itemByteSize = 2;\n                break;\n\n            case  Int16Array:\n                this.itemType = gl.SHORT;\n                this.itemByteSize = 2;\n                break;\n\n            case Uint32Array:\n                this.itemType = gl.UNSIGNED_INT;\n                this.itemByteSize = 4;\n                break;\n\n            case Int32Array:\n                this.itemType = gl.INT;\n                this.itemByteSize = 4;\n                break;\n\n            default:\n                this.itemType = gl.FLOAT;\n                this.itemByteSize = 4;\n        }\n\n        this.usage = usage;\n        this.length = 0;\n        this.dataLength = numItems;\n        this.numItems = 0;\n        this.itemSize = itemSize;\n        this.normalized = !!normalized;\n        this.stride = stride || 0;\n        this.offset = offset || 0;\n\n        this._allocate(data);\n    }\n\n    _allocate(data) {\n        this.allocated = false;\n        this._handle = this._gl.createBuffer();\n        if (!this._handle) {\n            throw \"Failed to allocate WebGL ArrayBuffer\";\n        }\n        if (this._handle) {\n            this._gl.bindBuffer(this.type, this._handle);\n            this._gl.bufferData(this.type, data.length > this.dataLength ? data.slice(0, this.dataLength) : data, this.usage);\n            this._gl.bindBuffer(this.type, null);\n            this.length = data.length;\n            this.numItems = this.length / this.itemSize;\n            this.allocated = true;\n        }\n    }\n\n    setData(data, offset) {\n        if (!this.allocated) {\n            return;\n        }\n        if (data.length > this.length) {            // Needs reallocation\n            this.destroy();\n            this._allocate(data, data.length);\n        } else {            // No reallocation needed\n            this._gl.bindBuffer(this.type, this._handle);\n            if (offset || offset === 0) {\n                this._gl.bufferSubData(this.type, offset * this.itemByteSize, data);\n            } else {\n                this._gl.bufferData(this.type, data, this.usage);\n            }\n            this._gl.bindBuffer(this.type, null);\n        }\n    }\n\n    bind() {\n        if (!this.allocated) {\n            return;\n        }\n        this._gl.bindBuffer(this.type, this._handle);\n    }\n\n    unbind() {\n        if (!this.allocated) {\n            return;\n        }\n        this._gl.bindBuffer(this.type, null);\n    }\n\n    destroy() {\n        if (!this.allocated) {\n            return;\n        }\n        this._gl.deleteBuffer(this._handle);\n        this._handle = null;\n        this.allocated = false;\n    }\n}\n\nexport {ArrayBuf};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/webgl/ArrayBuf.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2832,
    "kind": "class",
    "name": "ArrayBuf",
    "memberof": "scene/webgl/ArrayBuf.js",
    "static": true,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/webgl/ArrayBuf.js",
    "importStyle": "{ArrayBuf}",
    "description": "An **ArrayBuf** represents a WebGL ArrayBuffer.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "ArrayBuf"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "webgl"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "gl",
        "description": "{WebGLRenderingContext} The WebGL rendering context."
      }
    ],
    "interface": false
  },
  {
    "__docId__": 2833,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 2834,
    "kind": "member",
    "name": "_gl",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#_gl",
    "access": "private",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2835,
    "kind": "member",
    "name": "type",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#type",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2836,
    "kind": "member",
    "name": "allocated",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#allocated",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2837,
    "kind": "member",
    "name": "itemType",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#itemType",
    "access": "public",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2838,
    "kind": "member",
    "name": "itemByteSize",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#itemByteSize",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 2851,
    "kind": "member",
    "name": "usage",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#usage",
    "access": "public",
    "description": null,
    "lineNumber": 55,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2852,
    "kind": "member",
    "name": "length",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#length",
    "access": "public",
    "description": null,
    "lineNumber": 56,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 2853,
    "kind": "member",
    "name": "dataLength",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#dataLength",
    "access": "public",
    "description": null,
    "lineNumber": 57,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2854,
    "kind": "member",
    "name": "numItems",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#numItems",
    "access": "public",
    "description": null,
    "lineNumber": 58,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 2855,
    "kind": "member",
    "name": "itemSize",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#itemSize",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2856,
    "kind": "member",
    "name": "normalized",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#normalized",
    "access": "public",
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2857,
    "kind": "member",
    "name": "stride",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#stride",
    "access": "public",
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2858,
    "kind": "member",
    "name": "offset",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#offset",
    "access": "public",
    "description": null,
    "lineNumber": 62,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2859,
    "kind": "method",
    "name": "_allocate",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#_allocate",
    "access": "private",
    "description": null,
    "lineNumber": 67,
    "undocument": true,
    "ignore": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2861,
    "kind": "member",
    "name": "_handle",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#_handle",
    "access": "private",
    "description": null,
    "lineNumber": 69,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2865,
    "kind": "method",
    "name": "setData",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#setData",
    "access": "public",
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "params": [
      {
        "name": "data",
        "types": [
          "*"
        ]
      },
      {
        "name": "offset",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2866,
    "kind": "method",
    "name": "bind",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#bind",
    "access": "public",
    "description": null,
    "lineNumber": 101,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2867,
    "kind": "method",
    "name": "unbind",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#unbind",
    "access": "public",
    "description": null,
    "lineNumber": 108,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2868,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/webgl/ArrayBuf.js~ArrayBuf",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/ArrayBuf.js~ArrayBuf#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 115,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2871,
    "kind": "file",
    "name": "scene/webgl/Attribute.js",
    "content": "/**\n An **Attribute** represents a WebGL vertex attribute buffer (VBO).\n\n @class Attribute\n @module xeokit\n @submodule webgl\n @constructor\n @param gl {WebGLRenderingContext} The WebGL rendering context.\n */\nclass Attribute {\n\n    constructor(gl, location) {\n        this._gl = gl;\n        this.location = location;\n    }\n\n    bindArrayBuffer(arrayBuf, type, normalized=false, stride=0, offset=0) {\n        if (!arrayBuf) {\n            return;\n        }\n        arrayBuf.bind();\n        this._gl.enableVertexAttribArray(this.location);\n        this._gl.vertexAttribPointer(this.location, arrayBuf.itemSize, arrayBuf.itemType, arrayBuf.normalized, arrayBuf.stride, arrayBuf.offset);\n    }\n}\n\nexport {Attribute};\n",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/webgl/Attribute.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2872,
    "kind": "class",
    "name": "Attribute",
    "memberof": "scene/webgl/Attribute.js",
    "static": true,
    "longname": "scene/webgl/Attribute.js~Attribute",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/webgl/Attribute.js",
    "importStyle": "{Attribute}",
    "description": "An **Attribute** represents a WebGL vertex attribute buffer (VBO).",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Attribute"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "webgl"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "gl",
        "description": "{WebGLRenderingContext} The WebGL rendering context."
      }
    ],
    "interface": false
  },
  {
    "__docId__": 2873,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/webgl/Attribute.js~Attribute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Attribute.js~Attribute#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 2874,
    "kind": "member",
    "name": "_gl",
    "memberof": "scene/webgl/Attribute.js~Attribute",
    "static": false,
    "longname": "scene/webgl/Attribute.js~Attribute#_gl",
    "access": "private",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2875,
    "kind": "member",
    "name": "location",
    "memberof": "scene/webgl/Attribute.js~Attribute",
    "static": false,
    "longname": "scene/webgl/Attribute.js~Attribute#location",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2876,
    "kind": "method",
    "name": "bindArrayBuffer",
    "memberof": "scene/webgl/Attribute.js~Attribute",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Attribute.js~Attribute#bindArrayBuffer",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "arrayBuf",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      },
      {
        "name": "normalized",
        "optional": true,
        "types": [
          "boolean"
        ],
        "defaultRaw": false,
        "defaultValue": "false"
      },
      {
        "name": "stride",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      },
      {
        "name": "offset",
        "optional": true,
        "types": [
          "number"
        ],
        "defaultRaw": 0,
        "defaultValue": "0"
      }
    ],
    "return": null
  },
  {
    "__docId__": 2877,
    "kind": "file",
    "name": "scene/webgl/Drawable.js",
    "content": "/**\n * The **Drawable** interface defines the contract implemented by renderable components in xeokit.\n *\n * * Drawable is a \"virtual type\" that has no concrete JavaScript implementation.\n * * Within xeokit's core classes, Drawable is only implemented by {@link Mesh}.\n * * Implement Drawable by your own subclasses to plug custom drawable components into xeokit.\n *\n * @class Drawable\n * @module xeokit\n * @submodule webgl\n */\nclass Drawable {\n\n    /**\n     Defines the Drawable's surface appearance when ghosted.\n\n     @property ghostMaterial\n     @type EmphasisMaterial\n     @final\n     */\n\n    /**\n     Defines the Drawable's surface appearance when highlighted.\n\n     @property highlightMaterial\n     @type EmphasisMaterial\n     @final\n     */\n\n    /**\n     Defines the Drawable's surface appearance when selected.\n\n     @property selectedMaterial\n     @type EmphasisMaterial\n     */\n\n    /**\n     Defines the Drawable's surface appearance when edges are shown.\n\n     @property edgeMaterial\n     @type EdgeMaterial\n     */\n\n    /**\n     Defines the Drawable's surface appearance when outlined.\n\n     @property outlineMaterial\n     @type OutlineMaterial\n     */\n\n    /**\n     Indicates if the Drawable is currently visible.\n\n     When the Drawable is a {@link Mesh}, then a value of true indicates that the whole Mesh\n     is visible.\n\n     The Drawable is only rendered when {@link Drawable/visible} is true and\n     {@link Drawable/culled} is false.\n\n     Each visible Drawable is registered in the {@link Scene}'s\n     {@link Scene/visibleObjects} map when its {@link Node/objectId}\n     is set to a value.\n\n     @property visible\n     @default true\n     @type Boolean\n     */\n\n    /**\n     Indicates if the Drawable is currently ghosted.\n\n     The ghosted appearance is configured by {@link Drawable/ghostMaterial:property\"}}ghostMaterial{{/crossLink}}.\n\n     Each ghosted Drawable is registered in its {@link Scene}'s\n     {@link Scene/ghostedObjects} map when its {@link Node/objectId}\n     is set to a value.\n\n     @property ghosted\n     @default false\n     @type Boolean\n     */\n\n    /**\n     Indicates if the Drawable is currently highlighted.\n\n     The highlight appearance is configured by {@link Drawable/highlightMaterial:property\"}}highlightMaterial{{/crossLink}}.\n\n     Each highlighted Drawable is registered in its {@link Scene}'s\n     {@link Scene/highlightedObjects} map when its {@link Node/objectId}\n     is set to a value.\n\n     @property highlighted\n     @default false\n     @type Boolean\n     */\n\n    /**\n     Indicates if the Drawable is currently selected.\n\n     The selected appearance is configured by {@link Drawable/selectedMaterial:property\"}}selectedMaterial{{/crossLink}}.\n\n     Each selected Drawable is registered in its {@link Scene}'s\n     {@link Scene/selectedObjects} map when its {@link Node/objectId}\n     is set to a value.\n\n     @property selected\n     @default false\n     @type Boolean\n     */\n\n    /**\n     Indicates if the Drawable's edges are shown.\n\n     The edges appearance is configured by {@link Drawable/edgeMaterial:property\"}}edgeMaterial{{/crossLink}}.\n\n     @property edges\n     @default false\n     @type Boolean\n     */\n\n    /**\n     Indicates if the Drawable is currently culled from view.\n\n     The Drawable is only rendered when {@link Drawable/visible} is true and\n     {@link Drawable/culled} is false.\n\n     @property culled\n     @default false\n     @type Boolean\n     */\n\n    /**\n     Indicates if the Drawable is currently pickable.\n\n     When false, the Drawable will never be picked by calls to the {@link Scene/pick:method\"}}Scene pick(){{/crossLink}} method, and picking will happen as \"through\" the Drawable, to attempt to pick whatever lies on the other side of it.\n\n     @property pickable\n     @default true\n     @type Boolean\n     */\n\n    /**\n     Indicates if the Drawable is currently clippable.\n\n     When false, the {@link Scene}'s {@link Clips} will have no effect on the Drawable.\n\n     @property clippable\n     @default true\n     @type Boolean\n     */\n\n    /**\n     Indicates if the Drawable is currently included in boundary calculations.\n\n     When false, this Drawable will not be included in the bounding boxes provided by parent components.\n\n     @property collidable\n     @default true\n     @type Boolean\n     */\n\n    /**\n     Indicates if the Drawable currently casts shadows.\n\n     @property castShadow\n     @default true\n     @type Boolean\n     */\n\n    /**\n     Indicates if the Drawable is currently able to have shadows cast upon it.\n\n     @property receiveShadow\n     @default true\n     @type Boolean\n     */\n\n    /**\n     Indicates if the Drawable is currently rendered with an outline.\n\n     The outline appearance is configured by {@link Drawable/outlineMaterial:property\"}}outlineMaterial{{/crossLink}}.\n\n     @property outlined\n     @default false\n     @type Boolean\n     */\n\n    /**\n     The Drawable's RGB colorize color, multiplies by the rendered fragment colors.\n\n     @property colorize\n     @default [1.0, 1.0, 1.0]\n     @type Float32Array\n     */\n\n    /**\n     The Drawable's opacity factor, multiplies by the rendered fragment alpha.\n\n     This is a factor in range ````[0..1]````.\n\n     @property opacity\n     @default 1.0\n     @type Number\n     */\n\n    /**\n     Returns true to indicate that this component is a Drawable.\n\n     xeokit will then render the Drawable subclass, which therefore must completely implement the Drawable contract.\n\n     @property isDrawable\n     @type Boolean\n     @final\n     */\n\n    /**\n     When ````true````, indicates that xeokit should render this Drawable in sorted order, relative to other Drawables of the same class.\n\n     The sort order is determined by the Drawable subclasses' implementation\n     of {@link Drawable/stateSortCompare:method\"}}Drawable#stateSortCompare(){{/crossLink}}.\n\n     Sorting is essential for rendering performance, so that xeokit is able to avoid needlessly applying runs of the same\n     rendering state changes to the GPU, ie. can collapse them.\n\n     @property isStateSortable\n     @type Boolean\n     @final\n     */\n\n    /**\n     Comparison function used by the renderer to determine the order in which xeokit should render the Drawable subclass,\n     relative to to other subclasses of the same class.\n\n     xeokit requires the Drawable implementor to implement this method if the implemntor defines the\n     {@link Drawable/isStateSortable:property\"}}Drawable#isStateSortable{{/crossLink}} with value ````true````.\n\n     Sorting is essential for rendering performance, so that xeokit is able to avoid needlessly applying runs of the same\n     rendering state changes to the GPU, ie. can collapse them.\n\n     @method stateSortCompare\n     @param {Drawable} drawable1\n     @param {Drawable} drawable2\n     @returns {Number}\n     */\n\n    /**\n      Called by xeokit, when about to render this Drawable, to get flags indicating what rendering effects to apply for it.\n\n      @method getRenderFlags\n      @param {RenderFlags} renderFlags Returns the rendering flags.\n     */\n\n    //------------------------------------------------------------------------------------------------------------------\n    \n    /**\n     * Draws the Drawable's surfaces solid and opaque using its {@link Material}.\n     * @method drawNormalFillOpaque\n     * @param {FrameContext} frameCtx\n     */\n\n    /**\n     * Draws the Drawable's edges solid and opaque using its {@link Material}.\n     * @method drawNormalEdgesOpaque\n     * @param {FrameContext} frameCtx Frame rendering context.\n     */\n\n    /**\n     * Draws the Drawable's edges opaque, using its {@link Material}.\n     * @method drawGhostedEdgesOpaque\n     * @param {FrameContext} frameCtx Frame rendering context.\n     */\n    \n    /**\n     * Draws the Drawable's edges transparent using its {@link Material}.\n     * @method drawNormalEdgesOpaque\n     * @param {FrameContext} frameCtx Frame rendering context.\n     */\n    \n    //------------------------------------------------------------------------------------------------------------------\n    \n    /**\n     * Draws the Drawable's surfaces ghosted and opaque, using its {@link GhostMaterial}.\n     * @method drawGhostedFillOpaque\n     * @param {FrameContext} frameCtx Frame rendering context.\n     */\n\n    /**\n     * Draws the Drawable's edges ghosted and opaque, using its {@link GhostMaterial}.\n     * @method drawGhostedEdgesOpaque\n     * @param {FrameContext} frameCtx Frame rendering context.\n     */\n    \n    /**\n     * Draws the Drawable's surfaces ghosted and transparent, using its {@link GhostMaterial}.\n     * @method drawGhostedFillTransparent\n     * @param {FrameContext} frameCtx Frame rendering context.\n     */\n\n    /**\n     * Draws the Drawable's edges ghosted and transparent, using its {@link GhostMaterial}.\n     * @method drawGhostedEdgesTransparent\n     * @param {FrameContext} frameCtx Frame rendering context.\n     */\n\n    //------------------------------------------------------------------------------------------------------------------\n    \n    /**\n     * Draws the Mesh Drawable's surfaces highlighted and opaque, using its {@link HighlightMaterial}.\n     * @method drawHighlightedFillOpaque\n     * @param {FrameContext} frameCtx Frame rendering context.\n     */\n\n    /**\n     * Draws the Mesh Drawable's highlighted edges opaque, using its {@link HighlightMaterial}.\n     * @method drawHighlightedEdgesTransparent\n     * @param {FrameContext} frameCtx Frame rendering context.\n     */\n\n    /**\n     * Draws the Mesh Drawable's surfaces highlighted and transparent, using its {@link HighlightMaterial}.\n     * @method drawHighlightedFillTransparent\n     * @param {FrameContext} frameCtx Frame rendering context.\n     */\n\n    /**\n     * Draws the Mesh Drawable's highlighted edges transparent, using its {@link HighlightMaterial}.\n     * @method drawHighlightedEdgesTransparent\n     * @param {FrameContext} frameCtx Frame rendering context.\n     */\n\n    //------------------------------------------------------------------------------------------------------------------\n    \n    /**\n     * Draws the Mesh Drawable's surfaces selected and opaque, using its {@link SelectedMaterial}.\n     * @method drawSelectedFillOpaque\n     * @param {FrameContext} frameCtx Frame rendering context.\n     */\n\n    /**\n     * Draws the Mesh Drawable's edges selected and opaque, using its {@link SelectedMaterial}.\n     * @method drawSelectedFillOpaque\n     * @param {FrameContext} frameCtx Frame rendering context.\n     */\n\n    /**\n     * Draws the Mesh Drawable's surfaces selected and transparent, using its {@link SelectedMaterial}.\n     * @method drawSelectedFillTransparent\n     * @param {FrameContext} frameCtx Frame rendering context.\n     */\n\n    /**\n     * Draws the Mesh Drawable's selected edges transparent, using its {@link SelectedMaterial}.\n     * @method drawSelectedEdgesTransparent\n     * @param {FrameContext} frameCtx Frame rendering context.\n     */\n    \n    //------------------------------------------------------------------------------------------------------------------\n    \n    // drawShadow(frameCtx, light) {\n    //     if (this._shadowRenderer || (this._shadowRenderer = ShadowRenderer.get(this))) {\n    //         this._shadowRenderer.drawDrawable(frameCtx, this, light);\n    //     }\n    // }\n    //\n    // drawOutline(frameCtx) {\n    //     if (this._shadowRenderer || (this._outlineRenderer = OutlineRenderer.get(this))) {\n    //         this._outlineRenderer.drawDrawable(frameCtx, this);\n    //     }\n    // }\n\n    drawPickDrawable(frameCtx) {\n        if (this._pickDrawableRenderer || (this._pickDrawableRenderer = PickDrawableRenderer.get(this))) {\n            this._pickDrawableRenderer.drawDrawable(frameCtx, this);\n            frameCtx.drawablePickList[frameCtx.drawablePickListLen++] = this;\n        }\n    }\n\n    drawPickTriangles(frameCtx) {\n        if (this._pickTriangleRenderer || (this._pickTriangleRenderer = PickTriangleRenderer.get(this))) {\n            this._pickTriangleRenderer.drawDrawable(frameCtx, this);\n        }\n    }\n\n    drawPickVertices(frameCtx) {\n        if (this._pickVertexRenderer || (this._pickVertexRenderer = PickVertexRenderer.get(this))) {\n            this._pickVertexRenderer.drawDrawable(frameCtx, this);\n        }\n    }\n\n    /**\n     * Given a pick hit record containing picking parameters, get geometry about the pick intersection\n     * on the surface of this Drawable, adding it to the hit record.\n     *\n     * This delegates collection of that drawable-specific info to this xeokit.Drawable and allows user-defined\n     * non-core drawable implementations to provide whatever info they are able to.\n     *\n     * @method getPickResult\n     * @param hit\n     * @param [hit.primIndex]\n     * @param [hit.canvasPos]\n     * @param [hit.origin]\n     * @param [hit.direction]\n     */\n    getPickResult(hit) {\n        getPickResult(this, hit);\n    }\n\n    _putRenderers() {\n        if (this._drawRenderer) {\n            this._drawRenderer.put();\n            this._drawRenderer = null;\n        }\n        if (this._shadowRenderer) {\n            this._shadowRenderer.put();\n            this._shadowRenderer = null;\n        }\n        if (this._emphasisFillRenderer) {\n            this._emphasisFillRenderer.put();\n            this._emphasisFillRenderer = null;\n        }\n        if (this._emphasisEdgesRenderer) {\n            this._emphasisEdgesRenderer.put();\n            this._emphasisEdgesRenderer = null;\n        }\n        if (this._outlineRenderer) {\n            this._outlineRenderer.put();\n            this._outlineRenderer = null;\n        }\n        if (this._pickDrawableRenderer) {\n            this._pickDrawableRenderer.put();\n            this._pickDrawableRenderer = null;\n        }\n        if (this._pickTriangleRenderer) {\n            this._pickTriangleRenderer.put();\n            this._pickTriangleRenderer = null;\n        }\n        if (this._pickVertexRenderer) {\n            this._pickVertexRenderer.put();\n            this._pickVertexRenderer = null;\n        }\n    }\n\n    destroy() {\n        super.destroy(); // xeokit.Object\n        this._putRenderers();\n        this.scene._drawableDestroyed(this);\n        this.glRedraw();\n    }\n}\n\nvar getPickResult = (function () {\n\n    // Cached vars to avoid garbage collection\n\n    const localRayOrigin = math.vec3();\n    const localRayDir = math.vec3();\n    const positionA = math.vec3();\n    const positionB = math.vec3();\n    const positionC = math.vec3();\n    const triangleVertices = math.vec3();\n    const position = math.vec4();\n    const worldPos = math.vec3();\n    const viewPos = math.vec3();\n    const bary = math.vec3();\n    const normalA = math.vec3();\n    const normalB = math.vec3();\n    const normalC = math.vec3();\n    const uva = math.vec3();\n    const uvb = math.vec3();\n    const uvc = math.vec3();\n    const tempVec4a = math.vec4();\n    const tempVec4b = math.vec4();\n    const tempVec4c = math.vec4();\n    const tempVec3 = math.vec3();\n    const tempVec3b = math.vec3();\n    const tempVec3c = math.vec3();\n    const tempVec3d = math.vec3();\n    const tempVec3e = math.vec3();\n    const tempVec3f = math.vec3();\n    const tempVec3g = math.vec3();\n    const tempVec3h = math.vec3();\n    const tempVec3i = math.vec3();\n    const tempVec3j = math.vec3();\n    const tempVec3k = math.vec3();\n\n    return function (drawable, hit) {\n\n        if (hit.primIndex !== undefined && hit.primIndex > -1) {\n\n            const geometry = drawable.geometry._state;\n            const scene = drawable.scene;\n            const camera = scene.camera;\n\n            if (geometry.primitiveName === \"triangles\") {\n\n                // Triangle picked; this only happens when the\n                // Drawable has a Geometry that has primitives of type \"triangle\"\n\n                hit.primitive = \"triangle\";\n\n                // Get the World-space positions of the triangle's vertices\n\n                const i = hit.primIndex; // Indicates the first triangle index in the indices array\n\n                const indices = geometry.indices; // Indices into geometry arrays, not into shared VertexBufs\n                const positions = geometry.positions;\n\n                let ia3;\n                let ib3;\n                let ic3;\n\n                if (indices) {\n\n                    var ia = indices[i + 0];\n                    var ib = indices[i + 1];\n                    var ic = indices[i + 2];\n\n                    triangleVertices[0] = ia;\n                    triangleVertices[1] = ib;\n                    triangleVertices[2] = ic;\n\n                    hit.indices = triangleVertices;\n\n                    ia3 = ia * 3;\n                    ib3 = ib * 3;\n                    ic3 = ic * 3;\n\n                } else {\n\n                    ia3 = i * 3;\n                    ib3 = ia3 + 3;\n                    ic3 = ib3 + 3;\n                }\n\n                positionA[0] = positions[ia3 + 0];\n                positionA[1] = positions[ia3 + 1];\n                positionA[2] = positions[ia3 + 2];\n\n                positionB[0] = positions[ib3 + 0];\n                positionB[1] = positions[ib3 + 1];\n                positionB[2] = positions[ib3 + 2];\n\n                positionC[0] = positions[ic3 + 0];\n                positionC[1] = positions[ic3 + 1];\n                positionC[2] = positions[ic3 + 2];\n\n                if (geometry.compressGeometry) {\n\n                    // Decompress vertex positions\n\n                    const positionsDecodeMatrix = geometry.positionsDecodeMatrix;\n                    if (positionsDecodeMatrix) {\n                        math.decompressPosition(positionA, positionsDecodeMatrix, positionA);\n                        math.decompressPosition(positionB, positionsDecodeMatrix, positionB);\n                        math.decompressPosition(positionC, positionsDecodeMatrix, positionC);\n                    }\n                }\n\n                // Attempt to ray-pick the triangle in local space\n\n                let canvasPos;\n\n                if (hit.canvasPos) {\n                    canvasPos = hit.canvasPos;\n                    math.canvasPosToLocalRay(camera, drawable.worldMatrix, canvasPos, localRayOrigin, localRayDir);\n\n                } else if (hit.origin && hit.direction) {\n                    math.worldRayToLocalRay(drawable.worldMatrix, hit.origin, hit.direction, localRayOrigin, localRayDir);\n                }\n\n                math.normalizeVec3(localRayDir);\n                math.rayPlaneIntersect(localRayOrigin, localRayDir, positionA, positionB, positionC, position);\n\n                // Get Local-space cartesian coordinates of the ray-triangle intersection\n\n                hit.localPos = position;\n                hit.position = position;\n\n                // Get interpolated World-space coordinates\n\n                // Need to transform homogeneous coords\n\n                tempVec4a[0] = position[0];\n                tempVec4a[1] = position[1];\n                tempVec4a[2] = position[2];\n                tempVec4a[3] = 1;\n\n                // Get World-space cartesian coordinates of the ray-triangle intersection\n\n                math.transformVec4(drawable.worldMatrix, tempVec4a, tempVec4b);\n\n                worldPos[0] = tempVec4b[0];\n                worldPos[1] = tempVec4b[1];\n                worldPos[2] = tempVec4b[2];\n\n                hit.worldPos = worldPos;\n\n                // Get View-space cartesian coordinates of the ray-triangle intersection\n\n                math.transformVec4(camera.matrix, tempVec4b, tempVec4c);\n\n                viewPos[0] = tempVec4c[0];\n                viewPos[1] = tempVec4c[1];\n                viewPos[2] = tempVec4c[2];\n\n                hit.viewPos = viewPos;\n\n                // Get barycentric coordinates of the ray-triangle intersection\n\n                math.cartesianToBarycentric(position, positionA, positionB, positionC, bary);\n\n                hit.bary = bary;\n\n                // Get interpolated normal vector\n\n                const normals = geometry.normals;\n\n                if (normals) {\n\n                    if (geometry.compressGeometry) {\n\n                        // Decompress vertex normals\n\n                        const ia2 = ia * 2;\n                        const ib2 = ib * 2;\n                        const ic2 = ic * 2;\n\n                        math.octDecodeVec2(normals.subarray(ia2, ia2 + 2), normalA);\n                        math.octDecodeVec2(normals.subarray(ib2, ib2 + 2), normalB);\n                        math.octDecodeVec2(normals.subarray(ic2, ic2 + 2), normalC);\n\n                    } else {\n\n                        normalA[0] = normals[ia3];\n                        normalA[1] = normals[ia3 + 1];\n                        normalA[2] = normals[ia3 + 2];\n\n                        normalB[0] = normals[ib3];\n                        normalB[1] = normals[ib3 + 1];\n                        normalB[2] = normals[ib3 + 2];\n\n                        normalC[0] = normals[ic3];\n                        normalC[1] = normals[ic3 + 1];\n                        normalC[2] = normals[ic3 + 2];\n                    }\n\n                    const normal = math.addVec3(math.addVec3(\n                        math.mulVec3Scalar(normalA, bary[0], tempVec3),\n                        math.mulVec3Scalar(normalB, bary[1], tempVec3b), tempVec3c),\n                        math.mulVec3Scalar(normalC, bary[2], tempVec3d), tempVec3e);\n\n                    hit.normal = math.transformVec3(drawable.worldNormalMatrix, normal, tempVec3f);\n                }\n\n                // Get interpolated UV coordinates\n\n                const uvs = geometry.uv;\n\n                if (uvs) {\n\n                    uva[0] = uvs[(ia * 2)];\n                    uva[1] = uvs[(ia * 2) + 1];\n\n                    uvb[0] = uvs[(ib * 2)];\n                    uvb[1] = uvs[(ib * 2) + 1];\n\n                    uvc[0] = uvs[(ic * 2)];\n                    uvc[1] = uvs[(ic * 2) + 1];\n\n                    if (geometry.compressGeometry) {\n\n                        // Decompress vertex UVs\n\n                        const uvDecodeMatrix = geometry.uvDecodeMatrix;\n                        if (uvDecodeMatrix) {\n                            math.decompressUV(uva, uvDecodeMatrix, uva);\n                            math.decompressUV(uvb, uvDecodeMatrix, uvb);\n                            math.decompressUV(uvc, uvDecodeMatrix, uvc);\n                        }\n                    }\n\n                    hit.uv = math.addVec3(\n                        math.addVec3(\n                            math.mulVec2Scalar(uva, bary[0], tempVec3g),\n                            math.mulVec2Scalar(uvb, bary[1], tempVec3h), tempVec3i),\n                        math.mulVec2Scalar(uvc, bary[2], tempVec3j), tempVec3k);\n                }\n            }\n        }\n    }\n})();\n\nexport {Drawable};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/webgl/Drawable.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2878,
    "kind": "variable",
    "name": "getPickResult",
    "memberof": "scene/webgl/Drawable.js",
    "static": true,
    "longname": "scene/webgl/Drawable.js~getPickResult",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/webgl/Drawable.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 451,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2879,
    "kind": "class",
    "name": "Drawable",
    "memberof": "scene/webgl/Drawable.js",
    "static": true,
    "longname": "scene/webgl/Drawable.js~Drawable",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/webgl/Drawable.js",
    "importStyle": "{Drawable}",
    "description": "The **Drawable** interface defines the contract implemented by renderable components in xeokit.\n\n* Drawable is a \"virtual type\" that has no concrete JavaScript implementation.\n* Within xeokit's core classes, Drawable is only implemented by {@link Mesh}.\n* Implement Drawable by your own subclasses to plug custom drawable components into xeokit.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Drawable"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "webgl"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 2880,
    "kind": "method",
    "name": "drawPickDrawable",
    "memberof": "scene/webgl/Drawable.js~Drawable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Drawable.js~Drawable#drawPickDrawable",
    "access": "public",
    "description": "Draws the Mesh Drawable's selected edges transparent, using its {@link SelectedMaterial}.",
    "lineNumber": 371,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "drawSelectedEdgesTransparent"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "FrameContext"
        ],
        "spread": false,
        "optional": false,
        "name": "frameCtx",
        "description": "Frame rendering context."
      }
    ],
    "return": null
  },
  {
    "__docId__": 2881,
    "kind": "method",
    "name": "drawPickTriangles",
    "memberof": "scene/webgl/Drawable.js~Drawable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Drawable.js~Drawable#drawPickTriangles",
    "access": "public",
    "description": null,
    "lineNumber": 378,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2882,
    "kind": "method",
    "name": "drawPickVertices",
    "memberof": "scene/webgl/Drawable.js~Drawable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Drawable.js~Drawable#drawPickVertices",
    "access": "public",
    "description": null,
    "lineNumber": 384,
    "undocument": true,
    "params": [
      {
        "name": "frameCtx",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2883,
    "kind": "method",
    "name": "getPickResult",
    "memberof": "scene/webgl/Drawable.js~Drawable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Drawable.js~Drawable#getPickResult",
    "access": "public",
    "description": "Given a pick hit record containing picking parameters, get geometry about the pick intersection\non the surface of this Drawable, adding it to the hit record.\n\nThis delegates collection of that drawable-specific info to this xeokit.Drawable and allows user-defined\nnon-core drawable implementations to provide whatever info they are able to.",
    "lineNumber": 404,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "getPickResult"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "hit",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "hit.primIndex",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "hit.canvasPos",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "hit.origin",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "hit.direction",
        "description": ""
      }
    ],
    "return": null
  },
  {
    "__docId__": 2884,
    "kind": "method",
    "name": "_putRenderers",
    "memberof": "scene/webgl/Drawable.js~Drawable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Drawable.js~Drawable#_putRenderers",
    "access": "private",
    "description": null,
    "lineNumber": 408,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2885,
    "kind": "member",
    "name": "_drawRenderer",
    "memberof": "scene/webgl/Drawable.js~Drawable",
    "static": false,
    "longname": "scene/webgl/Drawable.js~Drawable#_drawRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 411,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2886,
    "kind": "member",
    "name": "_shadowRenderer",
    "memberof": "scene/webgl/Drawable.js~Drawable",
    "static": false,
    "longname": "scene/webgl/Drawable.js~Drawable#_shadowRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 415,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2887,
    "kind": "member",
    "name": "_emphasisFillRenderer",
    "memberof": "scene/webgl/Drawable.js~Drawable",
    "static": false,
    "longname": "scene/webgl/Drawable.js~Drawable#_emphasisFillRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 419,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2888,
    "kind": "member",
    "name": "_emphasisEdgesRenderer",
    "memberof": "scene/webgl/Drawable.js~Drawable",
    "static": false,
    "longname": "scene/webgl/Drawable.js~Drawable#_emphasisEdgesRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 423,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2889,
    "kind": "member",
    "name": "_outlineRenderer",
    "memberof": "scene/webgl/Drawable.js~Drawable",
    "static": false,
    "longname": "scene/webgl/Drawable.js~Drawable#_outlineRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 427,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2890,
    "kind": "member",
    "name": "_pickDrawableRenderer",
    "memberof": "scene/webgl/Drawable.js~Drawable",
    "static": false,
    "longname": "scene/webgl/Drawable.js~Drawable#_pickDrawableRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 431,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2891,
    "kind": "member",
    "name": "_pickTriangleRenderer",
    "memberof": "scene/webgl/Drawable.js~Drawable",
    "static": false,
    "longname": "scene/webgl/Drawable.js~Drawable#_pickTriangleRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 435,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2892,
    "kind": "member",
    "name": "_pickVertexRenderer",
    "memberof": "scene/webgl/Drawable.js~Drawable",
    "static": false,
    "longname": "scene/webgl/Drawable.js~Drawable#_pickVertexRenderer",
    "access": "private",
    "description": null,
    "lineNumber": 439,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2893,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/webgl/Drawable.js~Drawable",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Drawable.js~Drawable#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 443,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2894,
    "kind": "file",
    "name": "scene/webgl/FrameContext.js",
    "content": "/**\n A **FrameContext** provides rendering context to {@link Drawable\"}}Drawables{{/crossLink}} as xeokit renders them for a frame.\n\n @class FrameContext\n @module xeokit\n @submodule webgl\n */\nclass FrameContext {\n\n    constructor() {\n        this.reset();\n    }\n\n    /**\n     * Called by the renderer before each frame.\n     * @private\n     */\n    reset() {\n\n        /**\n         * ID of the last {@link webgl.Program} that was bound during the current frame.\n         * @property lastProgramId\n         * @type {Number}\n         */\n        this.lastProgramId = null;\n\n        /**\n         * Whether backfaces are currently enabled during the current frame.\n         * @property backfaces\n         * @default false\n         * @type {Boolean}\n         */\n        this.backfaces = false;\n\n        /**\n         * The vertex winding order for what we currently consider to be a backface during current\n         * frame: true == \"cw\", false == \"ccw\".\n         * @property frontFace\n         * @default true\n         * @type {Boolean}\n         */\n        this.frontface = true;\n\n        /**\n         * The next available texture unit to bind a {@link webgl.Texture} to.\n         * @defauilt 0\n         * @property textureUnit\n         * @type {number}\n         */\n        this.textureUnit = 0;\n\n        /**\n         * Performance statistic that counts how many times the renderer has called ````gl.drawElements()```` has been\n         * called so far within the current frame.\n         * @default 0\n         * @property drawElements\n         * @type {number}\n         */\n        this.drawElements = 0;\n\n        /**\n         * Performance statistic that counts how many times ````gl.drawArrays()```` has been called so far within\n         * the current frame.\n         * @default 0\n         * @property drawArrays\n         * @type {number}\n         */\n        this.drawArrays = 0;\n\n        /**\n         * Performance statistic that counts how many times ````gl.useProgram()```` has been called so far within\n         * the current frame.\n         * @default 0\n         * @property useProgram\n         * @type {number}\n         */\n        this.useProgram = 0;\n\n        /**\n         * Statistic that counts how many times ````gl.bindTexture()```` has been called so far within the current frame.\n         * @default 0\n         * @property bindTexture\n         * @type {number}\n         */\n        this.bindTexture = 0;\n\n        /**\n         * Counts how many times the renderer has called ````gl.bindArray()```` so far within the current frame.\n         * @defaulr 0\n         * @property bindArray\n         * @type {number}\n         */\n        this.bindArray = 0;\n\n        /**\n         * Indicates which pass the renderer is currently rendering.\n         *\n         * See {@link Scene/passes:property\"}}Scene#passes{{/crossLink}}, which configures how many passes we render\n         * per frame, which typically set to ````2```` when rendering a stereo view.\n         *\n         * @property pass\n         * @type {number}\n         */\n        this.pass = 0;\n\n        /**\n         * The 4x4 viewing transform matrix the renderer is currently using when rendering castShadows.\n         *\n         * This sets the viewpoint to look from the point of view of each {@link DirLight}\n         * or {@link PointLight} that casts a shadow.\n         *\n         * @property shadowViewMatrix\n         * @type {Float32Array}\n         */\n        this.shadowViewMatrix = null;\n\n        /**\n         * The 4x4 viewing projection matrix the renderer is currently using when rendering shadows.\n         *\n         * @property shadowProjMatrix\n         * @type {Float32Array}\n         */\n        this.shadowProjMatrix = null;\n\n        /**\n         * The 4x4 viewing transform matrix the renderer is currently using when rendering a ray-pick.\n         *\n         * This sets the viewpoint to look along the ray given to {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}\n         * when picking with a ray.\n         *\n         * @property pickViewMatrix\n         * @type {Float32Array}\n         */\n        this.pickViewMatrix = null;\n\n        /**\n         * The 4x4 orthographic projection transform matrix the renderer is currently using when rendering a ray-pick.\n         *\n         * @property pickProjMatrix\n         * @type {Float32Array}\n         */\n        this.pickProjMatrix = null;\n    }\n}\n\nexport {FrameContext};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/webgl/FrameContext.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2895,
    "kind": "class",
    "name": "FrameContext",
    "memberof": "scene/webgl/FrameContext.js",
    "static": true,
    "longname": "scene/webgl/FrameContext.js~FrameContext",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/webgl/FrameContext.js",
    "importStyle": "{FrameContext}",
    "description": "A **FrameContext** provides rendering context to {@link Drawable\"}}Drawables{{/crossLink}} as xeokit renders them for a frame.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "FrameContext"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "webgl"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 2896,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 2897,
    "kind": "method",
    "name": "reset",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#reset",
    "access": "private",
    "description": "Called by the renderer before each frame.",
    "lineNumber": 18,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2898,
    "kind": "member",
    "name": "lastProgramId",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#lastProgramId",
    "access": "public",
    "description": "ID of the last {@link webgl.Program} that was bound during the current frame.",
    "lineNumber": 25,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "lastProgramId",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2899,
    "kind": "member",
    "name": "backfaces",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#backfaces",
    "access": "public",
    "description": "Whether backfaces are currently enabled during the current frame.",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "false"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "backfaces",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2900,
    "kind": "member",
    "name": "frontface",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#frontface",
    "access": "public",
    "description": "The vertex winding order for what we currently consider to be a backface during current\nframe: true == \"cw\", false == \"ccw\".",
    "lineNumber": 42,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "true"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "frontFace",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2901,
    "kind": "member",
    "name": "textureUnit",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#textureUnit",
    "access": "public",
    "description": "The next available texture unit to bind a {@link webgl.Texture} to.",
    "lineNumber": 50,
    "unknown": [
      {
        "tagName": "@defauilt",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "textureUnit",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2902,
    "kind": "member",
    "name": "drawElements",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#drawElements",
    "access": "public",
    "description": "Performance statistic that counts how many times the renderer has called ````gl.drawElements()```` has been\ncalled so far within the current frame.",
    "lineNumber": 59,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "drawElements",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2903,
    "kind": "member",
    "name": "drawArrays",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#drawArrays",
    "access": "public",
    "description": "Performance statistic that counts how many times ````gl.drawArrays()```` has been called so far within\nthe current frame.",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "drawArrays",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2904,
    "kind": "member",
    "name": "useProgram",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#useProgram",
    "access": "public",
    "description": "Performance statistic that counts how many times ````gl.useProgram()```` has been called so far within\nthe current frame.",
    "lineNumber": 77,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "useProgram",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2905,
    "kind": "member",
    "name": "bindTexture",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#bindTexture",
    "access": "public",
    "description": "Statistic that counts how many times ````gl.bindTexture()```` has been called so far within the current frame.",
    "lineNumber": 85,
    "unknown": [
      {
        "tagName": "@default",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bindTexture",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2906,
    "kind": "member",
    "name": "bindArray",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#bindArray",
    "access": "public",
    "description": "Counts how many times the renderer has called ````gl.bindArray()```` so far within the current frame.",
    "lineNumber": 93,
    "unknown": [
      {
        "tagName": "@defaulr",
        "tagValue": "0"
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bindArray",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2907,
    "kind": "member",
    "name": "pass",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#pass",
    "access": "public",
    "description": "Indicates which pass the renderer is currently rendering.\n\nSee {@link Scene/passes:property\"}}Scene#passes{{/crossLink}}, which configures how many passes we render\nper frame, which typically set to ````2```` when rendering a stereo view.",
    "lineNumber": 104,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pass",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2908,
    "kind": "member",
    "name": "shadowViewMatrix",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#shadowViewMatrix",
    "access": "public",
    "description": "The 4x4 viewing transform matrix the renderer is currently using when rendering castShadows.\n\nThis sets the viewpoint to look from the point of view of each {@link DirLight}\nor {@link PointLight} that casts a shadow.",
    "lineNumber": 115,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "shadowViewMatrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2909,
    "kind": "member",
    "name": "shadowProjMatrix",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#shadowProjMatrix",
    "access": "public",
    "description": "The 4x4 viewing projection matrix the renderer is currently using when rendering shadows.",
    "lineNumber": 123,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "shadowProjMatrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2910,
    "kind": "member",
    "name": "pickViewMatrix",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#pickViewMatrix",
    "access": "public",
    "description": "The 4x4 viewing transform matrix the renderer is currently using when rendering a ray-pick.\n\nThis sets the viewpoint to look along the ray given to {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}\nwhen picking with a ray.",
    "lineNumber": 134,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pickViewMatrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2911,
    "kind": "member",
    "name": "pickProjMatrix",
    "memberof": "scene/webgl/FrameContext.js~FrameContext",
    "static": false,
    "longname": "scene/webgl/FrameContext.js~FrameContext#pickProjMatrix",
    "access": "public",
    "description": "The 4x4 orthographic projection transform matrix the renderer is currently using when rendering a ray-pick.",
    "lineNumber": 142,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "pickProjMatrix",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2912,
    "kind": "file",
    "name": "scene/webgl/PickResult.js",
    "content": "/**\n * A **PickResult** contains the results of a pick operation attempted with {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.\n *\n * @class PickResult\n * @module webgl\n * @submodule webgl\n */\nclass PickResult {\n\n    constructor() {\n\n        \n        /**\n         * Picked mesh.\n         * Null when no mesh was picked.\n         * @property mesh\n         * @type {Mesh|*}\n         */\n        this.mesh = null;\n\n        /**\n         * Type of primitive that was picked - usually \"triangle\".\n         * Null when no primitive was picked.\n         * @property primitive\n         * @type {String}\n         */\n        this.primitive = null;\n\n        /**\n         * Index of primitive that was picked.\n         * -1 when no mesh was picked.\n         * @property primIndex\n         * @type {number}\n         */\n        this.primIndex = -1;\n\n        this._origin = new Float32Array([0, 0, 0]);\n        this._direction = new Float32Array([0, 0, 0]);\n        this._indices = new Int32Array(3);\n        this._localPos = new Float32Array([0, 0, 0]);\n        this._worldPos = new Float32Array([0, 0, 0]);\n        this._viewPos = new Float32Array([0, 0, 0]);\n        this._bary = new Float32Array([0, 0, 0]);\n        this._normal = new Float32Array([0, 0, 0]);\n        this._uv = new Float32Array([0, 0]);\n\n        this.reset();\n    }\n\n    /**\n     * World-space 3D ray origin when raypicked.\n     * @property origin\n     * @type {Float32Array}\n     */\n    get origin() {\n        return this._gotOrigin ? this._origin : null;\n    }\n\n    set origin(value) {\n        if (value) {\n            this._origin[0] = value[0];\n            this._origin[1] = value[1];\n            this._origin[2] = value[2];\n            this._gotOrigin = true;\n        } else {\n            this._gotOrigin = false;\n        }\n    }\n\n    /**\n     * World-space 3D ray direction when raypicked.\n     * @property direction\n     * @type {Float32Array}\n     */\n    get direction() {\n        return this._gotDirection ? this._direction : null;\n    }\n\n    set direction(value) {\n        if (value) {\n            this._direction[0] = value[0];\n            this._direction[1] = value[1];\n            this._direction[2] = value[2];\n            this._gotDirection = true;\n        } else {\n            this._gotDirection = false;\n        }\n    }\n    \n    /**\n     * Picked triangle's vertex indices.\n     * Only defined when a mesh and triangle was picked.\n     * @property indices\n     * @type {Int32Array}\n     */\n    get indices() {\n        return this.mesh && this._gotIndices ? this._indices : null;\n    }\n\n    set indices(value) {\n        if (value) {\n            this._indices[0] = value[0];\n            this._indices[1] = value[1];\n            this._indices[2] = value[2];\n            this._gotIndices = true;\n        } else {\n            this._gotIndices = false;\n        }\n    }\n\n    /**\n     * Picked Local-space point on surface.\n     * Only defined when a mesh and a point on its surface was picked.\n     * @property localPos\n     * @type {Float32Array}\n     */\n    get localPos() {\n        return this.mesh && this._gotLocalPos ? this._localPos : null;\n    }\n\n    set localPos(value) {\n        if (value) {\n            this._localPos[0] = value[0];\n            this._localPos[1] = value[1];\n            this._localPos[2] = value[2];\n            this._gotLocalPos = true;\n        } else {\n            this._gotLocalPos = false;\n        }\n    }\n\n    /**\n     * Picked World-space point on surface.\n     * Only defined when a mesh and a point on its surface was picked.\n     * @property worldPos\n     * @type {Float32Array}\n     */\n    get worldPos() {\n        return this.mesh && this._gotWorldPos ? this._worldPos : null;\n    }\n\n    set worldPos(value) {\n        if (value) {\n            this._worldPos[0] = value[0];\n            this._worldPos[1] = value[1];\n            this._worldPos[2] = value[2];\n            this._gotWorldPos = true;\n        } else {\n            this._gotWorldPos = false;\n        }\n    }\n\n    /**\n     * Picked View-space point on surface.\n     * Only defined when a mesh and a point on its surface was picked.\n     * @property viewPos\n     * @type {Float32Array}\n     */\n    get viewPos() {\n        return this.mesh && this._gotViewPos ? this._viewPos : null;\n    }\n\n    set viewPos(value) {\n        if (value) {\n            this._viewPos[0] = value[0];\n            this._viewPos[1] = value[1];\n            this._viewPos[2] = value[2];\n            this._gotViewPos = true;\n        } else {\n            this._gotViewPos = false;\n        }\n    }\n\n    /**\n     * Barycentric coordinate within picked triangle.\n     * Only defined when a mesh and a point on its surface was picked.\n     * @property bary\n     * @type {Float32Array}\n     */\n    get bary() {\n        return this.mesh && this._gotBary ? this._bary : null;\n    }\n\n    set bary(value) {\n        if (value) {\n            this._bary[0] = value[0];\n            this._bary[1] = value[1];\n            this._bary[2] = value[2];\n            this._gotBary = true;\n        } else {\n            this._gotBary = false;\n        }\n    }\n\n    /**\n     * Normal vector at picked position on surface.\n     * Only defined when a mesh and a point on its surface was picked.\n     * @property normal\n     * @type {Float32Array}\n     */\n    get normal() {\n        return this.mesh && this._gotNormal ? this._normal : null;\n    }\n\n    set normal(value) {\n        if (value) {\n            this._normal[0] = value[0];\n            this._normal[1] = value[1];\n            this._normal[2] = value[2];\n            this._gotNormal = true;\n        } else {\n            this._gotNormal = false;\n        }\n    }\n\n    /**\n     * UV coordinates at picked position on surface.\n     * Only defined when a mesh and a point on its surface was picked.\n     * @property uv\n     * @type {Float32Array}\n     */\n    get uv() {\n        return this.mesh && this._gotUV ? this._uv : null;\n    }\n\n    set uv(value) {\n        if (value) {\n            this._uv[0] = value[0];\n            this._uv[1] = value[1];\n            this._gotUV = true;\n        } else {\n            this._gotUV = false;\n        }\n    }\n\n    reset() {\n        this.mesh = null;\n        this.primIndex = -1;\n        this.primitive = null;\n        this._gotOrigin = false;\n        this._gotDirection = false;\n        this._gotIndices = false;\n        this._gotLocalPos = false;\n        this._gotWorldPos = false;\n        this._gotViewPos = false;\n        this._gotBary = false;\n        this._gotNormal = false;\n        this._gotUV = false;\n    }\n}\n\nexport {PickResult};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/webgl/PickResult.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2913,
    "kind": "class",
    "name": "PickResult",
    "memberof": "scene/webgl/PickResult.js",
    "static": true,
    "longname": "scene/webgl/PickResult.js~PickResult",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/webgl/PickResult.js",
    "importStyle": "{PickResult}",
    "description": "A **PickResult** contains the results of a pick operation attempted with {@link Scene/pick:method\"}}Scene#pick(){{/crossLink}}.",
    "lineNumber": 8,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "PickResult"
      },
      {
        "tagName": "@module",
        "tagValue": "webgl"
      },
      {
        "tagName": "@submodule",
        "tagValue": "webgl"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 2914,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 10,
    "undocument": true
  },
  {
    "__docId__": 2915,
    "kind": "member",
    "name": "mesh",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#mesh",
    "access": "public",
    "description": "Picked mesh.\nNull when no mesh was picked.",
    "lineNumber": 19,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "mesh",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Mesh",
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2916,
    "kind": "member",
    "name": "primitive",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#primitive",
    "access": "public",
    "description": "Type of primitive that was picked - usually \"triangle\".\nNull when no primitive was picked.",
    "lineNumber": 27,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "primitive",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2917,
    "kind": "member",
    "name": "primIndex",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#primIndex",
    "access": "public",
    "description": "Index of primitive that was picked.\n-1 when no mesh was picked.",
    "lineNumber": 35,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "primIndex",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2918,
    "kind": "member",
    "name": "_origin",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_origin",
    "access": "private",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2919,
    "kind": "member",
    "name": "_direction",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_direction",
    "access": "private",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2920,
    "kind": "member",
    "name": "_indices",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_indices",
    "access": "private",
    "description": null,
    "lineNumber": 39,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2921,
    "kind": "member",
    "name": "_localPos",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_localPos",
    "access": "private",
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2922,
    "kind": "member",
    "name": "_worldPos",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_worldPos",
    "access": "private",
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2923,
    "kind": "member",
    "name": "_viewPos",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_viewPos",
    "access": "private",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2924,
    "kind": "member",
    "name": "_bary",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_bary",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2925,
    "kind": "member",
    "name": "_normal",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_normal",
    "access": "private",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2926,
    "kind": "member",
    "name": "_uv",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_uv",
    "access": "private",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2927,
    "kind": "get",
    "name": "origin",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#origin",
    "access": "public",
    "description": "World-space 3D ray origin when raypicked.",
    "lineNumber": 55,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "origin",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2928,
    "kind": "set",
    "name": "origin",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#origin",
    "access": "public",
    "description": null,
    "lineNumber": 59,
    "undocument": true
  },
  {
    "__docId__": 2929,
    "kind": "member",
    "name": "_gotOrigin",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_gotOrigin",
    "access": "private",
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2931,
    "kind": "get",
    "name": "direction",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#direction",
    "access": "public",
    "description": "World-space 3D ray direction when raypicked.",
    "lineNumber": 75,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "direction",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2932,
    "kind": "set",
    "name": "direction",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#direction",
    "access": "public",
    "description": null,
    "lineNumber": 79,
    "undocument": true
  },
  {
    "__docId__": 2933,
    "kind": "member",
    "name": "_gotDirection",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_gotDirection",
    "access": "private",
    "description": null,
    "lineNumber": 84,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2935,
    "kind": "get",
    "name": "indices",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#indices",
    "access": "public",
    "description": "Picked triangle's vertex indices.\nOnly defined when a mesh and triangle was picked.",
    "lineNumber": 96,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "indices",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Int32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2936,
    "kind": "set",
    "name": "indices",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#indices",
    "access": "public",
    "description": null,
    "lineNumber": 100,
    "undocument": true
  },
  {
    "__docId__": 2937,
    "kind": "member",
    "name": "_gotIndices",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_gotIndices",
    "access": "private",
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2939,
    "kind": "get",
    "name": "localPos",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#localPos",
    "access": "public",
    "description": "Picked Local-space point on surface.\nOnly defined when a mesh and a point on its surface was picked.",
    "lineNumber": 117,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "localPos",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2940,
    "kind": "set",
    "name": "localPos",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#localPos",
    "access": "public",
    "description": null,
    "lineNumber": 121,
    "undocument": true
  },
  {
    "__docId__": 2941,
    "kind": "member",
    "name": "_gotLocalPos",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_gotLocalPos",
    "access": "private",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2943,
    "kind": "get",
    "name": "worldPos",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#worldPos",
    "access": "public",
    "description": "Picked World-space point on surface.\nOnly defined when a mesh and a point on its surface was picked.",
    "lineNumber": 138,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "worldPos",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2944,
    "kind": "set",
    "name": "worldPos",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#worldPos",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true
  },
  {
    "__docId__": 2945,
    "kind": "member",
    "name": "_gotWorldPos",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_gotWorldPos",
    "access": "private",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2947,
    "kind": "get",
    "name": "viewPos",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#viewPos",
    "access": "public",
    "description": "Picked View-space point on surface.\nOnly defined when a mesh and a point on its surface was picked.",
    "lineNumber": 159,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "viewPos",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2948,
    "kind": "set",
    "name": "viewPos",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#viewPos",
    "access": "public",
    "description": null,
    "lineNumber": 163,
    "undocument": true
  },
  {
    "__docId__": 2949,
    "kind": "member",
    "name": "_gotViewPos",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_gotViewPos",
    "access": "private",
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2951,
    "kind": "get",
    "name": "bary",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#bary",
    "access": "public",
    "description": "Barycentric coordinate within picked triangle.\nOnly defined when a mesh and a point on its surface was picked.",
    "lineNumber": 180,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "bary",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2952,
    "kind": "set",
    "name": "bary",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#bary",
    "access": "public",
    "description": null,
    "lineNumber": 184,
    "undocument": true
  },
  {
    "__docId__": 2953,
    "kind": "member",
    "name": "_gotBary",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_gotBary",
    "access": "private",
    "description": null,
    "lineNumber": 189,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2955,
    "kind": "get",
    "name": "normal",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#normal",
    "access": "public",
    "description": "Normal vector at picked position on surface.\nOnly defined when a mesh and a point on its surface was picked.",
    "lineNumber": 201,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "normal",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2956,
    "kind": "set",
    "name": "normal",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#normal",
    "access": "public",
    "description": null,
    "lineNumber": 205,
    "undocument": true
  },
  {
    "__docId__": 2957,
    "kind": "member",
    "name": "_gotNormal",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_gotNormal",
    "access": "private",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2959,
    "kind": "get",
    "name": "uv",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#uv",
    "access": "public",
    "description": "UV coordinates at picked position on surface.\nOnly defined when a mesh and a point on its surface was picked.",
    "lineNumber": 222,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "uv",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Float32Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 2960,
    "kind": "set",
    "name": "uv",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#uv",
    "access": "public",
    "description": null,
    "lineNumber": 226,
    "undocument": true
  },
  {
    "__docId__": 2961,
    "kind": "member",
    "name": "_gotUV",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#_gotUV",
    "access": "private",
    "description": null,
    "lineNumber": 230,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2963,
    "kind": "method",
    "name": "reset",
    "memberof": "scene/webgl/PickResult.js~PickResult",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/PickResult.js~PickResult#reset",
    "access": "public",
    "description": null,
    "lineNumber": 236,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 2976,
    "kind": "file",
    "name": "scene/webgl/Program.js",
    "content": "import {Map} from \"../utils/Map.js\";\nimport {Shader} from \"./Shader.js\";\nimport {Sampler} from \"./Sampler.js\";\nimport {Attribute} from \"./Attribute.js\";\n\nconst ids = new Map({});\n\nfunction joinSansComments(srcLines) {\n    const src = [];\n    let line;\n    let n;\n    for (let i = 0, len = srcLines.length; i < len; i++) {\n        line = srcLines[i];\n        n = line.indexOf(\"/\");\n        if (n > 0) {\n            if (line.charAt(n + 1) === \"/\") {\n                line = line.substring(0, n);\n            }\n        }\n        src.push(line);\n    }\n    return src.join(\"\\n\");\n}\n\n/**\n A **Program** represents a WebGL program.\n\n @class Program\n @module xeokit\n @submodule webgl\n @constructor\n @param gl {WebGLRenderingContext} The WebGL rendering context.\n */\nclass Program {\n\n    constructor(gl, shaderSource) {\n        this.id = ids.addItem({});\n        this.source = shaderSource;\n        this.init(gl);\n    }\n\n    init(gl) {\n        this.gl = gl;\n        this.allocated = false;\n        this.compiled = false;\n        this.linked = false;\n        this.validated = false;\n        this.errors = null;\n        this.uniforms = {};\n        this.samplers = {};\n        this.attributes = {};\n        this._vertexShader = new Shader(gl, gl.VERTEX_SHADER, joinSansComments(this.source.vertex));\n        this._fragmentShader = new Shader(gl, gl.FRAGMENT_SHADER, joinSansComments(this.source.fragment));\n        if (!this._vertexShader.allocated) {\n            this.errors = [\"Vertex shader failed to allocate\"].concat(this._vertexShader.errors);\n            return;\n        }\n        if (!this._fragmentShader.allocated) {\n            this.errors = [\"Fragment shader failed to allocate\"].concat(this._fragmentShader.errors);\n            return;\n        }\n        this.allocated = true;\n        if (!this._vertexShader.compiled) {\n            this.errors = [\"Vertex shader failed to compile\"].concat(this._vertexShader.errors);\n            return;\n        }\n        if (!this._fragmentShader.compiled) {\n            this.errors = [\"Fragment shader failed to compile\"].concat(this._fragmentShader.errors);\n            return;\n        }\n        this.compiled = true;\n        let a;\n        let i;\n        let u;\n        let uName;\n        let location;\n        this.handle = gl.createProgram();\n        if (!this.handle) {\n            this.errors = [\"Failed to allocate program\"];\n            return;\n        }\n        gl.attachShader(this.handle, this._vertexShader.handle);\n        gl.attachShader(this.handle, this._fragmentShader.handle);\n        gl.linkProgram(this.handle);\n        this.linked = gl.getProgramParameter(this.handle, gl.LINK_STATUS);\n        // HACK: Disable validation temporarily: https://github.com/xeolabs/xeokit/issues/5\n        // Perhaps we should defer validation until render-time, when the program has values set for all inputs?\n        this.validated = true;\n        if (!this.linked || !this.validated) {\n            this.errors = [];\n            this.errors.push(\"\");\n            this.errors.push(gl.getProgramInfoLog(this.handle));\n            this.errors.push(\"\\nVertex shader:\\n\");\n            this.errors = this.errors.concat(this.source.vertex);\n            this.errors.push(\"\\nFragment shader:\\n\");\n            this.errors = this.errors.concat(this.source.fragment);\n            return;\n        }\n        const numUniforms = gl.getProgramParameter(this.handle, gl.ACTIVE_UNIFORMS);\n        for (i = 0; i < numUniforms; ++i) {\n            u = gl.getActiveUniform(this.handle, i);\n            if (u) {\n                uName = u.name;\n                if (uName[uName.length - 1] === \"\\u0000\") {\n                    uName = uName.substr(0, uName.length - 1);\n                }\n                location = gl.getUniformLocation(this.handle, uName);\n                if ((u.type === gl.SAMPLER_2D) || (u.type === gl.SAMPLER_CUBE) || (u.type === 35682)) {\n                    this.samplers[uName] = new Sampler(gl, location);\n                } else {\n                    this.uniforms[uName] = location;\n                }\n            }\n        }\n        const numAttribs = gl.getProgramParameter(this.handle, gl.ACTIVE_ATTRIBUTES);\n        for (i = 0; i < numAttribs; i++) {\n            a = gl.getActiveAttrib(this.handle, i);\n            if (a) {\n                location = gl.getAttribLocation(this.handle, a.name);\n                this.attributes[a.name] = new Attribute(gl, location);\n            }\n        }\n        this.allocated = true;\n    }\n\n    bind() {\n        if (!this.allocated) {\n            return;\n        }\n        this.gl.useProgram(this.handle);\n    }\n\n    getLocation(name) {\n        if (!this.allocated) {\n            return;\n        }\n        return this.uniforms[name];\n    }\n\n    getAttribute(name) {\n        if (!this.allocated) {\n            return;\n        }\n        return this.attributes[name];\n    }\n\n    bindTexture(name, texture, unit) {\n        if (!this.allocated) {\n            return false;\n        }\n        const sampler = this.samplers[name];\n        if (sampler) {\n            return sampler.bindTexture(texture, unit);\n        } else {\n            return false;\n        }\n    }\n\n    destroy() {\n        if (!this.allocated) {\n            return;\n        }\n        ids.removeItem(this.id);\n        this.gl.deleteProgram(this.handle);\n        this.gl.deleteShader(this._vertexShader.handle);\n        this.gl.deleteShader(this._fragmentShader.handle);\n        this.handle = null;\n        this.attributes = null;\n        this.uniforms = null;\n        this.samplers = null;\n        this.allocated = false;\n    }\n}\n\nexport {Program};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/webgl/Program.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 2977,
    "kind": "variable",
    "name": "ids",
    "memberof": "scene/webgl/Program.js",
    "static": true,
    "longname": "scene/webgl/Program.js~ids",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/webgl/Program.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "scene/utils/Map.js~Map"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2978,
    "kind": "function",
    "name": "joinSansComments",
    "memberof": "scene/webgl/Program.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/webgl/Program.js~joinSansComments",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/webgl/Program.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [
      {
        "name": "srcLines",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 2979,
    "kind": "class",
    "name": "Program",
    "memberof": "scene/webgl/Program.js",
    "static": true,
    "longname": "scene/webgl/Program.js~Program",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/webgl/Program.js",
    "importStyle": "{Program}",
    "description": "A **Program** represents a WebGL program.",
    "lineNumber": 34,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Program"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "webgl"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "gl",
        "description": "{WebGLRenderingContext} The WebGL rendering context."
      }
    ],
    "interface": false
  },
  {
    "__docId__": 2980,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/webgl/Program.js~Program",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Program.js~Program#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 36,
    "undocument": true
  },
  {
    "__docId__": 2981,
    "kind": "member",
    "name": "id",
    "memberof": "scene/webgl/Program.js~Program",
    "static": false,
    "longname": "scene/webgl/Program.js~Program#id",
    "access": "public",
    "description": null,
    "lineNumber": 37,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2982,
    "kind": "member",
    "name": "source",
    "memberof": "scene/webgl/Program.js~Program",
    "static": false,
    "longname": "scene/webgl/Program.js~Program#source",
    "access": "public",
    "description": null,
    "lineNumber": 38,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2983,
    "kind": "method",
    "name": "init",
    "memberof": "scene/webgl/Program.js~Program",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Program.js~Program#init",
    "access": "public",
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 2984,
    "kind": "member",
    "name": "gl",
    "memberof": "scene/webgl/Program.js~Program",
    "static": false,
    "longname": "scene/webgl/Program.js~Program#gl",
    "access": "public",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2985,
    "kind": "member",
    "name": "allocated",
    "memberof": "scene/webgl/Program.js~Program",
    "static": false,
    "longname": "scene/webgl/Program.js~Program#allocated",
    "access": "public",
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2986,
    "kind": "member",
    "name": "compiled",
    "memberof": "scene/webgl/Program.js~Program",
    "static": false,
    "longname": "scene/webgl/Program.js~Program#compiled",
    "access": "public",
    "description": null,
    "lineNumber": 45,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2987,
    "kind": "member",
    "name": "linked",
    "memberof": "scene/webgl/Program.js~Program",
    "static": false,
    "longname": "scene/webgl/Program.js~Program#linked",
    "access": "public",
    "description": null,
    "lineNumber": 46,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2988,
    "kind": "member",
    "name": "validated",
    "memberof": "scene/webgl/Program.js~Program",
    "static": false,
    "longname": "scene/webgl/Program.js~Program#validated",
    "access": "public",
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 2989,
    "kind": "member",
    "name": "errors",
    "memberof": "scene/webgl/Program.js~Program",
    "static": false,
    "longname": "scene/webgl/Program.js~Program#errors",
    "access": "public",
    "description": null,
    "lineNumber": 48,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2990,
    "kind": "member",
    "name": "uniforms",
    "memberof": "scene/webgl/Program.js~Program",
    "static": false,
    "longname": "scene/webgl/Program.js~Program#uniforms",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 2991,
    "kind": "member",
    "name": "samplers",
    "memberof": "scene/webgl/Program.js~Program",
    "static": false,
    "longname": "scene/webgl/Program.js~Program#samplers",
    "access": "public",
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 2992,
    "kind": "member",
    "name": "attributes",
    "memberof": "scene/webgl/Program.js~Program",
    "static": false,
    "longname": "scene/webgl/Program.js~Program#attributes",
    "access": "public",
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "{}"
      ]
    }
  },
  {
    "__docId__": 2993,
    "kind": "member",
    "name": "_vertexShader",
    "memberof": "scene/webgl/Program.js~Program",
    "static": false,
    "longname": "scene/webgl/Program.js~Program#_vertexShader",
    "access": "private",
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2994,
    "kind": "member",
    "name": "_fragmentShader",
    "memberof": "scene/webgl/Program.js~Program",
    "static": false,
    "longname": "scene/webgl/Program.js~Program#_fragmentShader",
    "access": "private",
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3001,
    "kind": "member",
    "name": "handle",
    "memberof": "scene/webgl/Program.js~Program",
    "static": false,
    "longname": "scene/webgl/Program.js~Program#handle",
    "access": "public",
    "description": null,
    "lineNumber": 77,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3009,
    "kind": "method",
    "name": "bind",
    "memberof": "scene/webgl/Program.js~Program",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Program.js~Program#bind",
    "access": "public",
    "description": null,
    "lineNumber": 126,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 3010,
    "kind": "method",
    "name": "getLocation",
    "memberof": "scene/webgl/Program.js~Program",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Program.js~Program#getLocation",
    "access": "public",
    "description": null,
    "lineNumber": 133,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3011,
    "kind": "method",
    "name": "getAttribute",
    "memberof": "scene/webgl/Program.js~Program",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Program.js~Program#getAttribute",
    "access": "public",
    "description": null,
    "lineNumber": 140,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3012,
    "kind": "method",
    "name": "bindTexture",
    "memberof": "scene/webgl/Program.js~Program",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Program.js~Program#bindTexture",
    "access": "public",
    "description": null,
    "lineNumber": 147,
    "undocument": true,
    "params": [
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "texture",
        "types": [
          "*"
        ]
      },
      {
        "name": "unit",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 3013,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/webgl/Program.js~Program",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Program.js~Program#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 159,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 3019,
    "kind": "file",
    "name": "scene/webgl/RenderBuffer.js",
    "content": "/**\n A **RenderBuffer** represents a WebGL render buffer.\n\n @class RenderBuffer\n @module xeokit\n @submodule webgl\n @constructor\n @param gl {WebGLRenderingContext} The WebGL rendering context.\n */\nclass RenderBuffer {\n\n    constructor(canvas, gl, options) {\n        options = options || {};\n        this.gl = gl;\n        this.allocated = false;\n        this.canvas = canvas;\n        this.buffer = null;\n        this.bound = false;\n        this.size = options.size;\n    }\n\n    setSize(size) {\n        this.size = size;\n    }\n\n    webglContextRestored(gl) {\n        this.gl = gl;\n        this.buffer = null;\n        this.allocated = false;\n        this.bound = false;\n    }\n\n    bind() {\n        this._touch();\n        if (this.bound) {\n            return;\n        }\n        const gl = this.gl;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.buffer.framebuf);\n        this.bound = true;\n    }\n\n    _touch() {\n\n        let width;\n        let height;\n        const gl = this.gl;\n\n        if (this.size) {\n            width = this.size[0];\n            height = this.size[1];\n\n        } else {\n            width = this.canvas.clientWidth;\n            height = this.canvas.clientHeight;\n        }\n\n        if (this.buffer) {\n\n            if (this.buffer.width === width && this.buffer.height === height) {\n                return;\n\n            } else {\n                gl.deleteTexture(this.buffer.texture);\n                gl.deleteFramebuffer(this.buffer.framebuf);\n                gl.deleteRenderbuffer(this.buffer.renderbuf);\n            }\n        }\n\n        const texture = gl.createTexture();\n        gl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\n        const renderbuf = gl.createRenderbuffer();\n        gl.bindRenderbuffer(gl.RENDERBUFFER, renderbuf);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, width, height);\n\n        const framebuf = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuf);\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderbuf);\n\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        // Verify framebuffer is OK\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, framebuf);\n        if (!gl.isFramebuffer(framebuf)) {\n            throw \"Invalid framebuffer\";\n        }\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        const status = gl.checkFramebufferStatus(gl.FRAMEBUFFER);\n\n        switch (status) {\n\n            case gl.FRAMEBUFFER_COMPLETE:\n                break;\n\n            case gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_ATTACHMENT\";\n\n            case gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\";\n\n            case gl.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_INCOMPLETE_DIMENSIONS\";\n\n            case gl.FRAMEBUFFER_UNSUPPORTED:\n                throw \"Incomplete framebuffer: FRAMEBUFFER_UNSUPPORTED\";\n\n            default:\n                throw \"Incomplete framebuffer: \" + status;\n        }\n\n        this.buffer = {\n            framebuf: framebuf,\n            renderbuf: renderbuf,\n            texture: texture,\n            width: width,\n            height: height\n        };\n\n        this.bound = false;\n    }\n\n    clear() {\n        if (!this.bound) {\n            throw \"Render buffer not bound\";\n        }\n        const gl = this.gl;\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    read(pickX, pickY) {\n        const x = pickX;\n        const y = this.canvas.height - pickY;\n        const pix = new Uint8Array(4);\n        const gl = this.gl;\n        gl.readPixels(x, y, 1, 1, gl.RGBA, gl.UNSIGNED_BYTE, pix);\n        return pix;\n    }\n\n    unbind() {\n        const gl = this.gl;\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        this.bound = false;\n    }\n\n    getTexture() {\n        const self = this;\n        return {\n            renderBuffer: this,\n            bind: function (unit) {\n                if (self.buffer && self.buffer.texture) {\n                    self.gl.activeTexture(self.gl[\"TEXTURE\" + unit]);\n                    self.gl.bindTexture(self.gl.TEXTURE_2D, self.buffer.texture);\n                    return true;\n                }\n                return false;\n            },\n            unbind: function (unit) {\n                if (self.buffer && self.buffer.texture) {\n                    self.gl.activeTexture(self.gl[\"TEXTURE\" + unit]);\n                    self.gl.bindTexture(self.gl.TEXTURE_2D, null);\n                }\n            }\n        };\n    }\n\n    destroy() {\n        if (this.allocated) {\n            const gl = this.gl;\n            gl.deleteTexture(this.buffer.texture);\n            gl.deleteFramebuffer(this.buffer.framebuf);\n            gl.deleteRenderbuffer(this.buffer.renderbuf);\n            this.allocated = false;\n            this.buffer = null;\n            this.bound = false;\n        }\n    }\n}\n\nexport {RenderBuffer};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/webgl/RenderBuffer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3020,
    "kind": "class",
    "name": "RenderBuffer",
    "memberof": "scene/webgl/RenderBuffer.js",
    "static": true,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/webgl/RenderBuffer.js",
    "importStyle": "{RenderBuffer}",
    "description": "A **RenderBuffer** represents a WebGL render buffer.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "RenderBuffer"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "webgl"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "gl",
        "description": "{WebGLRenderingContext} The WebGL rendering context."
      }
    ],
    "interface": false
  },
  {
    "__docId__": 3021,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 3022,
    "kind": "member",
    "name": "gl",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#gl",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3023,
    "kind": "member",
    "name": "allocated",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#allocated",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 3024,
    "kind": "member",
    "name": "canvas",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#canvas",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3025,
    "kind": "member",
    "name": "buffer",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#buffer",
    "access": "public",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3026,
    "kind": "member",
    "name": "bound",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#bound",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 3027,
    "kind": "member",
    "name": "size",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#size",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3028,
    "kind": "method",
    "name": "setSize",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#setSize",
    "access": "public",
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "params": [
      {
        "name": "size",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 3030,
    "kind": "method",
    "name": "webglContextRestored",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#webglContextRestored",
    "access": "public",
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 3035,
    "kind": "method",
    "name": "bind",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#bind",
    "access": "public",
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 3037,
    "kind": "method",
    "name": "_touch",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#_touch",
    "access": "private",
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 3040,
    "kind": "method",
    "name": "clear",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#clear",
    "access": "public",
    "description": null,
    "lineNumber": 134,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 3041,
    "kind": "method",
    "name": "read",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#read",
    "access": "public",
    "description": null,
    "lineNumber": 142,
    "undocument": true,
    "params": [
      {
        "name": "pickX",
        "types": [
          "*"
        ]
      },
      {
        "name": "pickY",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3042,
    "kind": "method",
    "name": "unbind",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#unbind",
    "access": "public",
    "description": null,
    "lineNumber": 151,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 3044,
    "kind": "method",
    "name": "getTexture",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#getTexture",
    "access": "public",
    "description": null,
    "lineNumber": 157,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "{\"renderBuffer\": *, \"bind\": *, \"unbind\": *}"
      ]
    }
  },
  {
    "__docId__": 3045,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/webgl/RenderBuffer.js~RenderBuffer",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/RenderBuffer.js~RenderBuffer#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 178,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 3049,
    "kind": "file",
    "name": "scene/webgl/RenderFlags.js",
    "content": "\n/**\n\n Passed to each {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} method as\n xeokit is about to render it, to query what effects the renderer should apply to it.\n\n @class RenderFlags\n @constructor\n @module xeokit\n @submodule webgl\n */\nclass RenderFlags {\n\n    constructor() {\n        this.reset();\n    }\n\n    reset() {\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs surfaces rendered solid and opaque.\n         * @property normalFillOpaque\n         * @type {boolean}\n         */\n        this.normalFillOpaque = false;\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs surfaces rendered solid and opaque.\n         * @property normalEdgesOpaque\n         * @type {boolean}\n         */\n        this.normalEdgesOpaque = false;\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs its surfaces rendered solid and transparent.\n         * @property normalFillTransparent\n         * @type {boolean}\n         */\n        this.normalFillTransparent = false;\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs edges rendered opaque.\n         * @property normalEdgesTransparent\n         * @type {boolean}\n         */\n        this.normalEdgesTransparent = false;\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs surfaces rendered filled and ghosted.\n         * @property ghostedFillOpaque\n         * @type {boolean}\n         */\n        this.ghostedFillOpaque = false;\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs edges rendered opaque and ghosted.\n         * @property ghostedEdgesOpaque\n         * @type {boolean}\n         */\n        this.ghostedEdgesOpaque = false;\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs surfaces rendered filled and transparently ghosted.\n         * @property ghostedFillTransparent\n         * @type {boolean}\n         */\n        this.ghostedFillTransparent = false;\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs edges rendered transparent and ghosted.\n         * @property ghostedEdgesTransparent\n         * @type {boolean}\n         */\n        this.ghostedEdgesTransparent = false;\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs surfaces rendered filled and highlighted.\n         * @property highlightedFillOpaque\n         * @type {boolean}\n         */\n        this.highlightedFillOpaque = false;\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs edges rendered opaque and highlighted.\n         * @property highlightedEdgesOpaque\n         * @type {boolean}\n         */\n        this.highlightedEdgesOpaque = false;\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs surfaces rendered filled and transparently highlighted.\n         * @property highlightedFillTransparent\n         * @type {boolean}\n         */\n        this.highlightedFillTransparent = false;\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs edges rendered transparent.\n         * @property highlightedEdgesTransparent\n         * @type {boolean}\n         */\n        this.highlightedEdgesTransparent = false;\n\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs surfaces rendered filled and selected.\n         * @property selectedFillOpaque\n         * @type {boolean}\n         */\n        this.selectedFillOpaque = false;\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs edges rendered opaque and selected.\n         * @property selectedEdgesOpaque\n         * @type {boolean}\n         */\n        this.selectedEdgesOpaque = false;\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs surfaces rendered filled and transparently selected.\n         * @property selectedFillTransparent\n         * @type {boolean}\n         */\n        this.selectedFillTransparent = false;\n\n        /**\n         * Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\n         * the Drawable needs edges rendered transparent.\n         * @property selectedEdgesTransparent\n         * @type {boolean}\n         */\n        this.selectedEdgesTransparent = false;\n    }\n}\n\nexport {RenderFlags};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/webgl/RenderFlags.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3050,
    "kind": "class",
    "name": "RenderFlags",
    "memberof": "scene/webgl/RenderFlags.js",
    "static": true,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/webgl/RenderFlags.js",
    "importStyle": "{RenderFlags}",
    "description": "\nPassed to each {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} method as\nxeokit is about to render it, to query what effects the renderer should apply to it.",
    "lineNumber": 12,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "RenderFlags"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "webgl"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 3051,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true
  },
  {
    "__docId__": 3052,
    "kind": "method",
    "name": "reset",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#reset",
    "access": "public",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 3053,
    "kind": "member",
    "name": "normalFillOpaque",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#normalFillOpaque",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs surfaces rendered solid and opaque.",
    "lineNumber": 26,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "normalFillOpaque",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3054,
    "kind": "member",
    "name": "normalEdgesOpaque",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#normalEdgesOpaque",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs surfaces rendered solid and opaque.",
    "lineNumber": 34,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "normalEdgesOpaque",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3055,
    "kind": "member",
    "name": "normalFillTransparent",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#normalFillTransparent",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs its surfaces rendered solid and transparent.",
    "lineNumber": 42,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "normalFillTransparent",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3056,
    "kind": "member",
    "name": "normalEdgesTransparent",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#normalEdgesTransparent",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs edges rendered opaque.",
    "lineNumber": 50,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "normalEdgesTransparent",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3057,
    "kind": "member",
    "name": "ghostedFillOpaque",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#ghostedFillOpaque",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs surfaces rendered filled and ghosted.",
    "lineNumber": 58,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghostedFillOpaque",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3058,
    "kind": "member",
    "name": "ghostedEdgesOpaque",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#ghostedEdgesOpaque",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs edges rendered opaque and ghosted.",
    "lineNumber": 66,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghostedEdgesOpaque",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3059,
    "kind": "member",
    "name": "ghostedFillTransparent",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#ghostedFillTransparent",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs surfaces rendered filled and transparently ghosted.",
    "lineNumber": 74,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghostedFillTransparent",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3060,
    "kind": "member",
    "name": "ghostedEdgesTransparent",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#ghostedEdgesTransparent",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs edges rendered transparent and ghosted.",
    "lineNumber": 82,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "ghostedEdgesTransparent",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3061,
    "kind": "member",
    "name": "highlightedFillOpaque",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#highlightedFillOpaque",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs surfaces rendered filled and highlighted.",
    "lineNumber": 90,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightedFillOpaque",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3062,
    "kind": "member",
    "name": "highlightedEdgesOpaque",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#highlightedEdgesOpaque",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs edges rendered opaque and highlighted.",
    "lineNumber": 98,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightedEdgesOpaque",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3063,
    "kind": "member",
    "name": "highlightedFillTransparent",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#highlightedFillTransparent",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs surfaces rendered filled and transparently highlighted.",
    "lineNumber": 106,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightedFillTransparent",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3064,
    "kind": "member",
    "name": "highlightedEdgesTransparent",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#highlightedEdgesTransparent",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs edges rendered transparent.",
    "lineNumber": 114,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "highlightedEdgesTransparent",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3065,
    "kind": "member",
    "name": "selectedFillOpaque",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#selectedFillOpaque",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs surfaces rendered filled and selected.",
    "lineNumber": 123,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedFillOpaque",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3066,
    "kind": "member",
    "name": "selectedEdgesOpaque",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#selectedEdgesOpaque",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs edges rendered opaque and selected.",
    "lineNumber": 131,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedEdgesOpaque",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3067,
    "kind": "member",
    "name": "selectedFillTransparent",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#selectedFillTransparent",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs surfaces rendered filled and transparently selected.",
    "lineNumber": 139,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedFillTransparent",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3068,
    "kind": "member",
    "name": "selectedEdgesTransparent",
    "memberof": "scene/webgl/RenderFlags.js~RenderFlags",
    "static": false,
    "longname": "scene/webgl/RenderFlags.js~RenderFlags#selectedEdgesTransparent",
    "access": "public",
    "description": "Set by {@link Drawable/getRenderFlags:method\"}}Drawable#getRenderFlags(){{/crossLink}} to indicate\nthe Drawable needs edges rendered transparent.",
    "lineNumber": 147,
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedEdgesTransparent",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3069,
    "kind": "file",
    "name": "scene/webgl/RenderState.js",
    "content": "import {Map} from \"../utils/Map.js\";\n\nconst ids = new Map({});\n\n/**\n A **RenderState** represents a chunk of state changes applied by the {@link Scene}'s renderer while it renders a frame.\n\n * Contains properties that represent the state changes.\n * Has a unique automatically-generated numeric ID, which the renderer can use to sort these, in order to avoid applying redundant state changes for each frame.\n * Initialize your own properties on a RenderState via its constructor.\n\n @class RenderState\n @constructor\n @module xeokit\n @submodule webgl\n @param cfg {*} RenderState configuration\n */\nclass RenderState {\n\n    constructor(cfg) {\n\n        /**\n         The RenderState's ID, unique within the renderer.\n         @property id\n         @type Number\n         @final\n         */\n        this.id = ids.addItem({});\n        for (const key in cfg) {\n            if (cfg.hasOwnProperty(key)) {\n                this[key] = cfg[key];\n            }\n        }\n    }\n\n    /**\n     Destroys this RenderState.\n     @method destroy\n     */\n    destroy() {\n        ids.removeItem(this.id);\n    }\n}\n\nexport {RenderState};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/webgl/RenderState.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3070,
    "kind": "variable",
    "name": "ids",
    "memberof": "scene/webgl/RenderState.js",
    "static": true,
    "longname": "scene/webgl/RenderState.js~ids",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/webgl/RenderState.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "scene/utils/Map.js~Map"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 3071,
    "kind": "class",
    "name": "RenderState",
    "memberof": "scene/webgl/RenderState.js",
    "static": true,
    "longname": "scene/webgl/RenderState.js~RenderState",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/webgl/RenderState.js",
    "importStyle": "{RenderState}",
    "description": "A **RenderState** represents a chunk of state changes applied by the {@link Scene}'s renderer while it renders a frame.\n\nContains properties that represent the state changes.\nHas a unique automatically-generated numeric ID, which the renderer can use to sort these, in order to avoid applying redundant state changes for each frame.\nInitialize your own properties on a RenderState via its constructor.",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "RenderState"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "webgl"
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "cfg",
        "description": "{*} RenderState configuration"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 3072,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/webgl/RenderState.js~RenderState",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/RenderState.js~RenderState#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 20,
    "undocument": true
  },
  {
    "__docId__": 3073,
    "kind": "member",
    "name": "id",
    "memberof": "scene/webgl/RenderState.js~RenderState",
    "static": false,
    "longname": "scene/webgl/RenderState.js~RenderState#id",
    "access": "public",
    "description": "The RenderState's ID, unique within the renderer.",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@final",
        "tagValue": ""
      }
    ],
    "properties": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "id",
        "description": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3074,
    "kind": "member",
    "name": "[key]",
    "memberof": "scene/webgl/RenderState.js~RenderState",
    "static": false,
    "longname": "scene/webgl/RenderState.js~RenderState#[key]",
    "access": "public",
    "description": null,
    "lineNumber": 31,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3075,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/webgl/RenderState.js~RenderState",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/RenderState.js~RenderState#destroy",
    "access": "public",
    "description": "Destroys this RenderState.",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@method",
        "tagValue": "destroy"
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 3076,
    "kind": "file",
    "name": "scene/webgl/Renderer.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\nimport {FrameContext} from './FrameContext.js';\nimport {RenderFlags} from './RenderFlags.js';\nimport {RenderBuffer} from './RenderBuffer.js';\nimport {math} from '../math/math.js';\nimport {stats} from './../stats.js';\nimport {WEBGL_INFO} from './../webglInfo.js';\nimport {Map} from \"../utils/Map.js\";\nimport {PickResult} from \"./PickResult.js\";\n\n/**\n * @private\n */\nconst Renderer = function (scene, options) {\n\n    options = options || {};\n\n    const frameCtx = new FrameContext();\n    const canvas = scene.canvas.canvas;\n    const gl = scene.canvas.gl;\n    const shadowLightMeshes = {};\n    const canvasTransparent = options.transparent === true;\n\n    const pickIDs = new Map({});\n\n    var drawableTypeInfo = {};\n    var drawables = {};\n\n    const drawableListSorted = [];\n    let drawableListSortedLen = 0;\n    const shadowMeshLists = {};\n\n    let drawableListDirty = true;\n    let stateSortDirty = true;\n    let imageDirty = true;\n    let shadowsDirty = true;\n\n    let blendOneMinusSrcAlpha = true;\n\n    let pickBuf = null;\n    let readPixelBuf = null;\n\n    const bindOutputFrameBuffer = null;\n    const unbindOutputFrameBuffer = null;\n\n    this.needStateSort = function () {\n        stateSortDirty = true;\n    };\n\n    this.shadowsDirty = function () {\n        shadowsDirty = true;\n    };\n\n    this.imageDirty = function () {\n        imageDirty = true;\n    };\n\n    this.setBlendOneMinusSrcAlpha = function (value) {\n        blendOneMinusSrcAlpha = value;\n    };\n\n    this.webglContextLost = function () {\n    };\n\n    this.webglContextRestored = function (gl) {\n        if (pickBuf) {\n            pickBuf.webglContextRestored(gl);\n        }\n        if (readPixelBuf) {\n            readPixelBuf.webglContextRestored(gl);\n        }\n        imageDirty = true;\n    };\n\n    /**\n     * Inserts a drawable into this renderer.\n     *  @private\n     */\n    this.addDrawable = function (id, drawable) {\n        var type = drawable.type;\n        if (!type) {\n            console.error(\"Renderer#addDrawable() : drawable with ID \" + id + \" has no 'type' - ignoring\");\n            return;\n        }\n        var drawableInfo = drawableTypeInfo[type];\n        if (!drawableInfo) {\n            drawableInfo = {\n                type: drawable.type,\n                count: 0,\n                isStateSortable: drawable.isStateSortable,\n                stateSortCompare: drawable.stateSortCompare,\n                drawableMap: {},\n                drawableList: [],\n                lenDrawableList: 0\n            };\n            drawableTypeInfo[type] = drawableInfo;\n        }\n        drawableInfo.count++;\n        drawableInfo.drawableMap[id] = drawable;\n        drawables[id] = drawable;\n        drawableListDirty = true;\n    };\n\n    /**\n     * Removes a drawable from this renderer.\n     *  @private\n     */\n    this.removeDrawable = function (id) {\n        const drawable = drawables[id];\n        if (!drawable) {\n            console.error(\"Renderer#removeDrawable() : drawable not found with ID \" + id + \" - ignoring\");\n            return;\n        }\n        const type = drawable.type;\n        const drawableInfo = drawableTypeInfo[type];\n        if (--drawableInfo.count <= 0) {\n            delete drawableTypeInfo[type];\n        }\n        delete drawables[id];\n        drawableListDirty = true;\n    };\n\n    /**\n     * Gets a unique pick ID for the given mesh. A mesh can be a {@link Mesh}, or\n     * anything that represents a WebGL draw call within a custom {@link Drawable}\n     * instance.\n     * @param {Mesh|*} mesh A {@link Mesh}, or anything that represents a WebGL\n     * draw call within a custom {@link Drawable} instance.\n     * @returns {Number} New pick ID.\n     */\n    this.getPickID = function (mesh) {\n        return pickIDs.addItem(mesh);\n    };\n\n    /**\n     * Released a pick ID for reuse.\n     * @param {Number} pickID Pick ID to release.\n     */\n    this.putPickID = function (pickID) {\n        pickIDs.removeItem(pickID);\n    };\n\n    /**\n     * Clears the canvas.\n     *  @private\n     */\n    this.clear = function (params) {\n        params = params || {};\n        const boundary = scene.viewport.boundary;\n        gl.viewport(boundary[0], boundary[1], boundary[2], boundary[3]);\n        if (canvasTransparent) { // Canvas is transparent\n            gl.clearColor(0, 0, 0, 0);\n        } else {\n            const color = params.ambientColor || this.lights.getAmbientColor();\n            gl.clearColor(color[0], color[1], color[2], 1.0);\n        }\n        if (bindOutputFrameBuffer) {\n            bindOutputFrameBuffer(params.pass);\n        }\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\n        if (unbindOutputFrameBuffer) {\n            unbindOutputFrameBuffer(params.pass);\n        }\n    };\n\n    /**\n     * Renders inserted drawables.\n     *  @private\n     */\n    this.render = function (params) {\n        params = params || {};\n        updateDrawlist();\n        if (imageDirty || params.force) {\n            draw(params);\n            stats.frame.frameCount++;\n            imageDirty = false;\n        }\n    };\n\n    function updateDrawlist() { // Prepares state-sorted array of drawables from maps of inserted drawables\n        if (drawableListDirty) {\n            buildDrawableList();\n            drawableListDirty = false;\n            stateSortDirty = true;\n        }\n        if (stateSortDirty) {\n            sortDrawableList();\n            stateSortDirty = false;\n            imageDirty = true;\n        }\n    }\n\n    function buildDrawableList() {\n        for (var type in drawableTypeInfo) {\n            if (drawableTypeInfo.hasOwnProperty(type)) {\n                const drawableInfo = drawableTypeInfo[type];\n                const drawableMap = drawableInfo.drawableMap;\n                const drawableList = drawableInfo.drawableList;\n                var lenDrawableList = 0;\n                for (var id in drawableMap) {\n                    if (drawableMap.hasOwnProperty(id)) {\n                        drawableList[lenDrawableList++] = drawableMap[id];\n                    }\n                }\n                drawableList.length = lenDrawableList;\n                drawableInfo.lenDrawableList = lenDrawableList;\n            }\n        }\n    }\n\n    function sortDrawableList() {\n        for (var type in drawableTypeInfo) {\n            if (drawableTypeInfo.hasOwnProperty(type)) {\n                const drawableInfo = drawableTypeInfo[type];\n                if (drawableInfo.isStateSortable) {\n                    drawableInfo.drawableList.sort(drawableInfo.stateSortCompare);\n                }\n            }\n        }\n    }\n\n    function drawShadowMaps() {\n        var lights = scene._lightsState.lights;\n        var light;\n        var i;\n        var len;\n        for (i = 0, len = lights.length; i < len; i++) {\n            light = lights[i];\n            if (!light.castShadow) {\n                continue;\n            }\n            drawShadowMap(light);\n        }\n    }\n\n    function drawShadowMap(light) {\n\n        const castShadow = light.castShadow;\n\n        if (!castShadow) {\n            return;\n        }\n\n        const renderBuf = light.getShadowRenderBuf();\n\n        if (!renderBuf) {\n            return;\n        }\n\n        renderBuf.bind();\n\n        frameCtx.reset();\n        frameCtx.backfaces = true;\n        frameCtx.frontface = true;\n        frameCtx.drawElements = 0;\n        frameCtx.useProgram = -1;\n        frameCtx.shadowViewMatrix = light.getShadowViewMatrix();\n        frameCtx.shadowProjMatrix = light.getShadowProjMatrix();\n\n        const boundary = scene.viewport.boundary;\n        gl.viewport(boundary[0], boundary[1], boundary[2], boundary[3]);\n\n        gl.clearColor(0, 0, 0, 1);\n        gl.enable(gl.DEPTH_TEST);\n        gl.disable(gl.BLEND);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        let i;\n        let drawable;\n\n        for (i = 0; i < drawableListSortedLen; i++) {\n            drawable = drawableListSorted[i];\n            if (!drawable.visible || !drawable.castShadow) {\n                continue; // For now, culled drawables still cast shadows because they are just out of view\n            }\n            // if (drawable._material._state.alpha === 0) {\n            //     continue;\n            // }\n            //    drawable.drawShadow(frameCtx, light);\n        }\n\n        renderBuf.unbind();\n    }\n\n    var draw = (function () { // Draws the drawables in drawableListSorted\n\n        // On the first pass, we'll immediately draw the opaque normal-appearance drawables, while deferring\n        // the rest to these bins, then do subsequent passes to render these bins.\n\n        const normalEdgesOpaqueBin = [];\n        const normalFillTransparentBin = [];\n        const normalEdgesTransparentBin = [];\n\n        const ghostedFillOpaqueBin = [];\n        const ghostEdgesOpaqueBin = [];\n        const ghostedFillTransparentBin = [];\n        const ghostEdgesTransparentBin = [];\n\n        const highlightedFillOpaqueBin = [];\n        const highlightedEdgesOpaqueBin = [];\n        const highlightedFillTransparentBin = [];\n        const highlightedEdgesTransparentBin = [];\n\n        const selectedFillOpaqueBin = [];\n        const selectedEdgesOpaqueBin = [];\n        const selectedFillTransparentBin = [];\n        const selectedEdgesTransparentBin = [];\n\n        const renderFlags = new RenderFlags();\n\n        return function (params) {\n\n            var opaqueOnly = !!params.opaqueOnly;\n\n            if (WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"]) {  // In case context lost/recovered\n                gl.getExtension(\"OES_element_index_uint\");\n            }\n\n            const ambientColor = scene._lightsState.getAmbientColor();\n\n            frameCtx.reset();\n            frameCtx.pass = params.pass;\n\n            const boundary = scene.viewport.boundary;\n            gl.viewport(boundary[0], boundary[1], boundary[2], boundary[3]);\n\n            if (canvasTransparent) { // Canvas is transparent\n                gl.clearColor(0, 0, 0, 0);\n            } else {\n                gl.clearColor(ambientColor[0], ambientColor[1], ambientColor[2], 1.0);\n            }\n\n            gl.enable(gl.DEPTH_TEST);\n            gl.frontFace(gl.CCW);\n            gl.enable(gl.CULL_FACE);\n            gl.depthMask(true);\n\n            let i;\n            let len;\n            let drawable;\n\n            const startTime = Date.now();\n\n            if (bindOutputFrameBuffer) {\n                bindOutputFrameBuffer(params.pass);\n            }\n\n            if (params.clear !== false) {\n                gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT | gl.STENCIL_BUFFER_BIT);\n            }\n\n            let normalEdgesOpaqueBinLen = 0;\n            let normalFillTransparentBinLen = 0;\n            let normalEdgesTransparentBinLen = 0;\n\n            let ghostedFillOpaqueBinLen = 0;\n            let ghostEdgesOpaqueBinLen = 0;\n            let ghostedFillTransparentBinLen = 0;\n            let ghostEdgesTransparentBinLen = 0;\n\n            let highlightedFillOpaqueBinLen = 0;\n            let highlightedEdgesOpaqueBinLen = 0;\n            let highlightedFillTransparentBinLen = 0;\n            let highlightedEdgesTransparentBinLen = 0;\n\n            let selectedFillOpaqueBinLen = 0;\n            let selectedEdgesOpaqueBinLen = 0;\n            let selectedFillTransparentBinLen = 0;\n            let selectedEdgesTransparentBinLen = 0;\n\n            let outlinedOpaqueBinLen = 0;\n\n            //------------------------------------------------------------------------------------------------------\n            // Render normal opaque solids, defer others to bins to render after\n            //------------------------------------------------------------------------------------------------------\n\n            for (var type in drawableTypeInfo) {\n                if (drawableTypeInfo.hasOwnProperty(type)) {\n\n                    const drawableInfo = drawableTypeInfo[type];\n                    const drawableList = drawableInfo.drawableList;\n\n                    for (i = 0, len = drawableList.length; i < len; i++) {\n\n                        drawable = drawableList[i];\n\n                        if (drawable.culled === true || drawable.visible === false) {\n                            continue;\n                        }\n\n                        drawable.getRenderFlags(renderFlags);\n\n                        if (renderFlags.normalFillOpaque) {\n                            drawable.drawNormalFillOpaque(frameCtx);\n                        }\n\n                        if (renderFlags.normalEdgesOpaque) {\n                            normalEdgesOpaqueBin[normalEdgesOpaqueBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.normalFillTransparent) {\n                            normalFillTransparentBin[normalFillTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.normalEdgesTransparent) {\n                            normalEdgesTransparentBin[normalEdgesTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.ghostedFillTransparent) {\n                            ghostedFillTransparentBin[ghostedFillTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.ghostedFillOpaque) {\n                            ghostedFillOpaqueBin[ghostedFillOpaqueBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.ghostedEdgesTransparent) {\n                            ghostEdgesTransparentBin[ghostEdgesTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.ghostedEdgesOpaque) {\n                            ghostEdgesOpaqueBin[ghostEdgesOpaqueBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.highlightedFillTransparent) {\n                            highlightedFillTransparentBin[highlightedFillTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.highlightedFillOpaque) {\n                            highlightedFillOpaqueBin[highlightedFillOpaqueBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.highlightedEdgesTransparent) {\n                            highlightedEdgesTransparentBin[highlightedEdgesTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.highlightedEdgesOpaque) {\n                            highlightedEdgesOpaqueBin[highlightedEdgesOpaqueBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.selectedFillTransparent) {\n                            selectedFillTransparentBin[selectedFillTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.selectedFillOpaque) {\n                            selectedFillOpaqueBin[selectedFillOpaqueBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.selectedEdgesTransparent) {\n                            selectedEdgesTransparentBin[selectedEdgesTransparentBinLen++] = drawable;\n                        }\n\n                        if (renderFlags.selectedEdgesOpaque) {\n                            selectedEdgesOpaqueBin[selectedEdgesOpaqueBinLen++] = drawable;\n                        }\n                    }\n                }\n            }\n\n            //------------------------------------------------------------------------------------------------------\n            // Render deferred bins\n            //------------------------------------------------------------------------------------------------------\n\n            if (normalEdgesOpaqueBinLen > 0) {\n                for (i = 0; i < normalEdgesOpaqueBinLen; i++) {\n                    normalEdgesOpaqueBin[i].drawNormalEdgesOpaque(frameCtx);\n                }\n            }\n\n            if (ghostedFillOpaqueBinLen > 0) {\n                for (i = 0; i < ghostedFillOpaqueBinLen; i++) {\n                    ghostedFillOpaqueBin[i].drawGhostedFillOpaque(frameCtx);\n                }\n            }\n\n            if (ghostEdgesOpaqueBinLen > 0) {\n                for (i = 0; i < ghostEdgesOpaqueBinLen; i++) {\n                    ghostEdgesOpaqueBin[i].drawGhostedEdgesOpaque(frameCtx);\n                }\n            }\n\n            const transparentDepthMask = true;\n            if (ghostedFillTransparentBinLen > 0 || ghostEdgesTransparentBinLen > 0 || normalFillTransparentBinLen > 0) {\n                gl.enable(gl.CULL_FACE);\n                gl.enable(gl.BLEND);\n                if (blendOneMinusSrcAlpha) { // Makes glTF windows appear correct\n                    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n                } else {\n                    gl.blendEquation(gl.FUNC_ADD);\n                    gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n                }\n                frameCtx.backfaces = false;\n                if (!transparentDepthMask) {\n                    gl.depthMask(false);\n                }\n                if (ghostEdgesTransparentBinLen > 0) {\n                    for (i = 0; i < ghostEdgesTransparentBinLen; i++) {\n                        ghostEdgesTransparentBin[i].drawGhostedEdgesTransparent(frameCtx);\n                    }\n                }\n                if (ghostedFillTransparentBinLen > 0) {\n                    for (i = 0; i < ghostedFillTransparentBinLen; i++) {\n                        ghostedFillTransparentBin[i].drawGhostedFillTransparent(frameCtx);\n                    }\n                }\n                if (normalFillTransparentBinLen > 0) {\n                    for (i = 0; i < normalFillTransparentBinLen; i++) {\n                        drawable = normalFillTransparentBin[i];\n                        drawable.drawNormalFillTransparent(frameCtx);\n                    }\n                }\n                if (normalEdgesTransparentBinLen > 0) {\n                    for (i = 0; i < normalEdgesTransparentBinLen; i++) {\n                        drawable = normalEdgesTransparentBin[i];\n                        drawable.drawNormalEdgesTransparent(frameCtx);\n                    }\n                }\n                gl.disable(gl.BLEND);\n            }\n\n            if (highlightedFillOpaqueBinLen > 0 || highlightedEdgesOpaqueBinLen > 0) {\n                frameCtx.lastProgramId = null;\n                gl.clear(gl.DEPTH_BUFFER_BIT);\n                if (highlightedEdgesOpaqueBinLen > 0) {\n                    for (i = 0; i < highlightedEdgesOpaqueBinLen; i++) {\n                        highlightedEdgesOpaqueBin[i].drawHighlightedEdgesOpaque(frameCtx);\n                    }\n                }\n                if (highlightedFillOpaqueBinLen > 0) {\n                    for (i = 0; i < highlightedFillOpaqueBinLen; i++) {\n                        highlightedFillOpaqueBin[i].drawHighlightedFillOpaque(frameCtx);\n                    }\n                }\n            }\n\n            if (highlightedFillTransparentBinLen > 0 || highlightedEdgesTransparentBinLen > 0 || highlightedFillOpaqueBinLen > 0) {\n                frameCtx.lastProgramId = null;\n                gl.clear(gl.DEPTH_BUFFER_BIT);\n                gl.enable(gl.CULL_FACE);\n                gl.enable(gl.BLEND);\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n                if (highlightedEdgesTransparentBinLen > 0) {\n                    for (i = 0; i < highlightedEdgesTransparentBinLen; i++) {\n                        highlightedEdgesTransparentBin[i].drawHighlightedEdgesTransparent(frameCtx);\n                    }\n                }\n                if (highlightedFillTransparentBinLen > 0) {\n                    for (i = 0; i < highlightedFillTransparentBinLen; i++) {\n                        highlightedFillTransparentBin[i].drawHighlightedFillTransparent(frameCtx);\n                    }\n                }\n                gl.disable(gl.BLEND);\n            }\n\n            if (selectedFillOpaqueBinLen > 0 || selectedEdgesOpaqueBinLen > 0) {\n                frameCtx.lastProgramId = null;\n                gl.clear(gl.DEPTH_BUFFER_BIT);\n                if (selectedEdgesOpaqueBinLen > 0) {\n                    for (i = 0; i < selectedEdgesOpaqueBinLen; i++) {\n                        selectedEdgesOpaqueBin[i].drawSelectedEdgesOpaque(frameCtx);\n                    }\n                }\n                if (selectedFillOpaqueBinLen > 0) {\n                    for (i = 0; i < selectedFillOpaqueBinLen; i++) {\n                        selectedFillOpaqueBin[i].drawSelectedFillOpaque(frameCtx);\n                    }\n                }\n            }\n\n            if (selectedFillTransparentBinLen > 0 || selectedEdgesTransparentBinLen > 0) {\n                frameCtx.lastProgramId = null;\n                gl.clear(gl.DEPTH_BUFFER_BIT);\n                gl.enable(gl.CULL_FACE);\n                gl.enable(gl.BLEND);\n                gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n                if (selectedEdgesTransparentBinLen > 0) {\n                    for (i = 0; i < selectedEdgesTransparentBinLen; i++) {\n                        selectedEdgesTransparentBin[i].drawSelectedEdgesTransparent(frameCtx);\n                    }\n                }\n                if (selectedFillTransparentBinLen > 0) {\n                    for (i = 0; i < selectedFillTransparentBinLen; i++) {\n                        selectedFillTransparentBin[i].drawSelectedFillTransparent(frameCtx);\n                    }\n                }\n                gl.disable(gl.BLEND);\n            }\n\n            const endTime = Date.now();\n            const frameStats = stats.frame;\n\n            frameStats.renderTime = (endTime - startTime) / 1000.0;\n            frameStats.drawElements = frameCtx.drawElements;\n            frameStats.drawElements = frameCtx.drawElements;\n            frameStats.useProgram = frameCtx.useProgram;\n            frameStats.bindTexture = frameCtx.bindTexture;\n            frameStats.bindArray = frameCtx.bindArray;\n\n            const numTextureUnits = WEBGL_INFO.MAX_TEXTURE_UNITS;\n            for (let ii = 0; ii < numTextureUnits; ii++) {\n                gl.activeTexture(gl.TEXTURE0 + ii);\n            }\n            gl.bindTexture(gl.TEXTURE_CUBE_MAP, null);\n            gl.bindTexture(gl.TEXTURE_2D, null);\n\n            // Set the backbuffer's alpha to 1.0\n            // gl.clearColor(1, 1, 1, 1);\n            // gl.colorMask(false, false, false, true);\n            // gl.clear(gl.COLOR_BUFFER_BIT);\n            // gl.colorMask(true, true, true, true);\n\n            if (unbindOutputFrameBuffer) {\n                unbindOutputFrameBuffer(params.pass);\n            }\n        };\n    })();\n\n    /**\n     * Picks a drawable in the scene.\n     * @private\n     */\n    this.pick = (function () {\n\n        const tempVec3a = math.vec3();\n        const tempMat4a = math.mat4();\n        const up = math.vec3([0, 1, 0]);\n        const pickFrustumMatrix = math.frustumMat4(-1, 1, -1, 1, 0.1, 10000);\n        const _pickResult = new PickResult();\n\n        return function (params, pickResult = _pickResult) {\n\n            pickResult.reset();\n\n            updateDrawlist();\n\n            if (WEBGL_INFO.SUPPORTED_EXTENSIONS[\"OES_element_index_uint\"]) { // In case context lost/recovered\n                gl.getExtension(\"OES_element_index_uint\");\n            }\n\n            let canvasX;\n            let canvasY;\n            let origin;\n            let direction;\n            let look;\n            let pickViewMatrix = null;\n            let pickProjMatrix = null;\n\n            if (params.canvasPos) {\n\n                canvasX = params.canvasPos[0];\n                canvasY = params.canvasPos[1];\n\n            } else {\n\n                // Picking with arbitrary World-space ray\n                // Align camera along ray and fire ray through center of canvas\n\n                origin = params.origin || math.vec3([0, 0, 0]);\n                direction = params.direction || math.vec3([0, 0, 1]);\n                look = math.addVec3(origin, direction, tempVec3a);\n\n                pickViewMatrix = math.lookAtMat4v(origin, look, up, tempMat4a);\n                pickProjMatrix = pickFrustumMatrix;\n\n                canvasX = canvas.clientWidth * 0.5;\n                canvasY = canvas.clientHeight * 0.5;\n            }\n\n            pickBuf = pickBuf || new RenderBuffer(canvas, gl);\n            pickBuf.bind();\n\n            pickMesh(canvasX, canvasY, pickViewMatrix, pickProjMatrix, params, pickResult);\n\n            if (!pickResult.mesh) {\n                pickBuf.unbind();\n                return null;\n            }\n\n            if (params.pickSurface) {\n                pickTriangle(pickResult.mesh, canvasX, canvasY, pickViewMatrix, pickProjMatrix, pickResult);\n            }\n\n            if (pickViewMatrix) {\n                pickResult.origin = origin;\n                pickResult.direction = direction;\n            }\n\n            pickBuf.unbind();\n\n            return pickResult;\n        };\n    })();\n\n    /**\n     * Picks a mesh, either through the canvas using the camera view transform, or through the center of a virtual\n     * canvas using a view matrix aligned along a World-space ray.\n     *\n     * Calls drawPickMesh() on each Drawable in this Renderer.\n     *\n     * If a mesh was picked, returns it via pickResult.mesh.\n     *\n     * @param canvasX\n     * @param canvasY\n     * @param pickViewMatrix\n     * @param pickProjMatrix\n     * @param params\n     * @params pickResult\n     * @returns {*}\n     */\n    function pickMesh(canvasX, canvasY, pickViewMatrix, pickProjMatrix, params, pickResult) {\n\n        frameCtx.reset();\n        frameCtx.backfaces = true;\n        frameCtx.frontface = true; // \"ccw\"\n        frameCtx.pickViewMatrix = pickViewMatrix;\n        frameCtx.pickProjMatrix = pickProjMatrix;\n\n        const boundary = scene.viewport.boundary;\n        gl.viewport(boundary[0], boundary[1], boundary[2], boundary[3]);\n\n        gl.clearColor(0, 0, 0, 0);\n        gl.enable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n        gl.disable(gl.BLEND);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        let i;\n        let len;\n        let mesh;\n        const includeMeshIds = params.includeMeshIds;\n        const excludeMeshIds = params.excludeMeshIds;\n\n        for (var type in drawableTypeInfo) {\n            if (drawableTypeInfo.hasOwnProperty(type)) {\n\n                const drawableInfo = drawableTypeInfo[type];\n                const drawableList = drawableInfo.drawableList;\n\n                for (i = 0, len = drawableList.length; i < len; i++) {\n\n                    const drawable = drawableList[i];\n\n                    if (!drawable.drawPickMesh || drawable.culled === true || drawable.visible === false || drawable.pickable === false) {\n                        continue;\n                    }\n                    if (includeMeshIds && !includeMeshIds[drawable.id]) { // TODO: push this logic into drawable\n                        continue;\n                    }\n                    if (excludeMeshIds && excludeMeshIds[drawable.id]) {\n                        continue;\n                    }\n\n                    drawable.drawPickMesh(frameCtx);\n                }\n            }\n        }\n\n        const pix = pickBuf.read(Math.round(canvasX), Math.round(canvasY));\n        let pickID = pix[0] + (pix[1] * 256) + (pix[2] * 256 * 256) + (pix[3] * 256 * 256 * 256);\n\n        if (pickID < 0) {\n            return;\n        }\n\n        pickResult.mesh = pickIDs.items[pickID];\n    }\n\n    function pickTriangle(mesh, canvasX, canvasY, pickViewMatrix, pickProjMatrix, pickResult) {\n\n        frameCtx.reset();\n        frameCtx.backfaces = true;\n        frameCtx.frontface = true; // \"ccw\"\n        frameCtx.pickViewMatrix = pickViewMatrix; // Can be null\n        frameCtx.pickProjMatrix = pickProjMatrix; // Can be null\n\n        const boundary = scene.viewport.boundary;\n        gl.viewport(boundary[0], boundary[1], boundary[2], boundary[3]);\n\n        gl.clearColor(0, 0, 0, 0);\n        gl.enable(gl.DEPTH_TEST);\n        gl.disable(gl.CULL_FACE);\n        gl.disable(gl.BLEND);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n\n        mesh.drawPickTriangles(frameCtx);\n\n        const pix = pickBuf.read(canvasX, canvasY);\n\n        let primIndex = pix[0] + (pix[1] * 256) + (pix[2] * 256 * 256) + (pix[3] * 256 * 256 * 256);\n\n        primIndex *= 3; // Convert from triangle number to first vertex in indices\n\n        pickResult.primIndex = primIndex;\n    }\n\n    /**\n     * Read pixels from the renderer's frameCtx buffer. Performs a force-render first\n     * @param pixels\n     * @param colors\n     * @param len\n     * @param opaqueOnly\n     * @private\n     */\n    this.readPixels = function (pixels, colors, len, opaqueOnly) {\n        readPixelBuf = readPixelBuf || (readPixelBuf = new RenderBuffer(canvas, gl));\n        readPixelBuf.bind();\n        readPixelBuf.clear();\n        this.render({force: true, opaqueOnly: opaqueOnly});\n        let color;\n        let i;\n        let j;\n        let k;\n        for (i = 0; i < len; i++) {\n            j = i * 2;\n            k = i * 4;\n            color = readPixelBuf.read(pixels[j], pixels[j + 1]);\n            colors[k] = color[0];\n            colors[k + 1] = color[1];\n            colors[k + 2] = color[2];\n            colors[k + 3] = color[3];\n        }\n        readPixelBuf.unbind();\n        imageDirty = true;\n    };\n\n    /**\n     * Destroys this renderer.\n     * @private\n     */\n    this.destroy = function () {\n        drawableTypeInfo = {};\n        drawables = {};\n        if (pickBuf) {\n            pickBuf.destroy();\n        }\n        if (readPixelBuf) {\n            readPixelBuf.destroy();\n        }\n    };\n};\n\nexport {Renderer};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/webgl/Renderer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3077,
    "kind": "function",
    "name": "Renderer",
    "memberof": "scene/webgl/Renderer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/webgl/Renderer.js~Renderer",
    "access": "private",
    "export": true,
    "importPath": "xeokit-sdk/scene/webgl/Renderer.js",
    "importStyle": "{Renderer}",
    "description": "",
    "lineNumber": 17,
    "ignore": true,
    "params": [
      {
        "name": "scene",
        "types": [
          "*"
        ]
      },
      {
        "name": "options",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 3078,
    "kind": "file",
    "name": "scene/webgl/Sampler.js",
    "content": "/**\n A **Sampler** is a low-level component that represents a WebGL Sampler.\n\n @class Sampler\n @module xeokit\n @submodule webgl\n @constructor\n @param gl {WebGLRenderingContext} The WebGL rendering context.\n */\nclass Sampler {\n\n    constructor(gl, location) {\n        this.bindTexture = function (texture, unit) {\n            if (texture.bind(unit)) {\n                gl.uniform1i(location, unit);\n                return true;\n            }\n            return false;\n        };\n    }\n}\n\nexport {Sampler};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/webgl/Sampler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3079,
    "kind": "class",
    "name": "Sampler",
    "memberof": "scene/webgl/Sampler.js",
    "static": true,
    "longname": "scene/webgl/Sampler.js~Sampler",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/webgl/Sampler.js",
    "importStyle": "{Sampler}",
    "description": "A **Sampler** is a low-level component that represents a WebGL Sampler.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Sampler"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "webgl"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "gl",
        "description": "{WebGLRenderingContext} The WebGL rendering context."
      }
    ],
    "interface": false
  },
  {
    "__docId__": 3080,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/webgl/Sampler.js~Sampler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Sampler.js~Sampler#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 3081,
    "kind": "file",
    "name": "scene/webgl/Shader.js",
    "content": "/**\n A **Shader** represents a vertex or fragment stage within a {@link Program}.\n\n @class Shader\n @module xeokit\n @submodule webgl\n @constructor\n @param gl {WebGLRenderingContext} The WebGL rendering context.\n */\nclass Shader {\n\n    constructor(gl, type, source) {\n\n        this.allocated = false;\n        this.compiled = false;\n        this.handle = gl.createShader(type);\n\n        if (!this.handle) {\n            this.errors = [\n                \"Failed to allocate\"\n            ];\n            return;\n        }\n\n        this.allocated = true;\n\n        gl.shaderSource(this.handle, source);\n        gl.compileShader(this.handle);\n\n        this.compiled = gl.getShaderParameter(this.handle, gl.COMPILE_STATUS);\n\n        if (!this.compiled) {\n\n            if (!gl.isContextLost()) { // Handled explicitly elsewhere, so won't re-handle here\n\n                const lines = source.split(\"\\n\");\n                const numberedLines = [];\n                for (let i = 0; i < lines.length; i++) {\n                    numberedLines.push((i + 1) + \": \" + lines[i] + \"\\n\");\n                }\n                this.errors = [];\n                this.errors.push(\"\");\n                this.errors.push(gl.getShaderInfoLog(this.handle));\n                this.errors = this.errors.concat(numberedLines.join(\"\"));\n            }\n        }\n    }\n\n    destroy() {\n\n    }\n}\n\nexport {Shader};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/webgl/Shader.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3082,
    "kind": "class",
    "name": "Shader",
    "memberof": "scene/webgl/Shader.js",
    "static": true,
    "longname": "scene/webgl/Shader.js~Shader",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/webgl/Shader.js",
    "importStyle": "{Shader}",
    "description": "A **Shader** represents a vertex or fragment stage within a {@link Program}.",
    "lineNumber": 10,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Shader"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "webgl"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "gl",
        "description": "{WebGLRenderingContext} The WebGL rendering context."
      }
    ],
    "interface": false
  },
  {
    "__docId__": 3083,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/webgl/Shader.js~Shader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Shader.js~Shader#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 12,
    "undocument": true
  },
  {
    "__docId__": 3084,
    "kind": "member",
    "name": "allocated",
    "memberof": "scene/webgl/Shader.js~Shader",
    "static": false,
    "longname": "scene/webgl/Shader.js~Shader#allocated",
    "access": "public",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 3085,
    "kind": "member",
    "name": "compiled",
    "memberof": "scene/webgl/Shader.js~Shader",
    "static": false,
    "longname": "scene/webgl/Shader.js~Shader#compiled",
    "access": "public",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 3086,
    "kind": "member",
    "name": "handle",
    "memberof": "scene/webgl/Shader.js~Shader",
    "static": false,
    "longname": "scene/webgl/Shader.js~Shader#handle",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3087,
    "kind": "member",
    "name": "errors",
    "memberof": "scene/webgl/Shader.js~Shader",
    "static": false,
    "longname": "scene/webgl/Shader.js~Shader#errors",
    "access": "public",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 3092,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/webgl/Shader.js~Shader",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Shader.js~Shader#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 3093,
    "kind": "file",
    "name": "scene/webgl/Texture2D.js",
    "content": "import {utils} from '../utils.js';\nimport {webglEnums} from './webglEnums.js';\n\nfunction getGLEnum(gl, name, defaultVal) {\n    if (name === undefined) {\n        return defaultVal;\n    }\n    const glName = webglEnums[name];\n    if (glName === undefined) {\n        return defaultVal;\n    }\n    return gl[glName];\n}\n\nconst color = new Uint8Array([0, 0, 0, 1]);\n\nfunction clampImageSize(image, numPixels) {\n    const n = image.width * image.height;\n    if (n > numPixels) {\n        const ratio = numPixels / n;\n        const width = image.width * ratio;\n        const height = image.height * ratio;\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = nextHighestPowerOfTwo(width);\n        canvas.height = nextHighestPowerOfTwo(height);\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(image, 0, 0, image.width, image.height, 0, 0, canvas.width, canvas.height);\n        image = canvas;\n    }\n    return image;\n}\n\nfunction ensureImageSizePowerOfTwo(image) {\n    if (!isPowerOfTwo(image.width) || !isPowerOfTwo(image.height)) {\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = nextHighestPowerOfTwo(image.width);\n        canvas.height = nextHighestPowerOfTwo(image.height);\n        const ctx = canvas.getContext(\"2d\");\n        ctx.drawImage(image,\n            0, 0, image.width, image.height,\n            0, 0, canvas.width, canvas.height);\n        image = canvas;\n    }\n    return image;\n}\n\nfunction isPowerOfTwo(x) {\n    return (x & (x - 1)) === 0;\n}\n\nfunction nextHighestPowerOfTwo(x) {\n    --x;\n    for (let i = 1; i < 32; i <<= 1) {\n        x = x | x >> i;\n    }\n    return x + 1;\n}\n\n/**\n A **Texture2D** is a low-level component that represents a 2D WebGL texture.\n\n @class Texture\n @module xeokit\n @submodule webgl\n @constructor\n @param gl {WebGLRenderingContext} The WebGL rendering context.\n */\nclass Texture2D {\n\n    constructor(gl, target) {\n        this.gl = gl;\n        this.target = target || gl.TEXTURE_2D;\n        this.texture = gl.createTexture();\n        this.setPreloadColor([0, 0, 0, 0]); // Prevents \"there is no texture bound to the unit 0\" error\n        this.allocated = true;\n    }\n\n    setPreloadColor(value) {\n\n        if (!value) {\n            color[0] = 0;\n            color[1] = 0;\n            color[2] = 0;\n            color[3] = 255;\n        } else {\n            color[0] = Math.floor(value[0] * 255);\n            color[1] = Math.floor(value[1] * 255);\n            color[2] = Math.floor(value[2] * 255);\n            color[3] = Math.floor((value[3] !== undefined ? value[3] : 1) * 255);\n        }\n\n        const gl = this.gl;\n\n        gl.bindTexture(this.target, this.texture);\n        gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\n        if (this.target === gl.TEXTURE_CUBE_MAP) {\n\n            const faces = [\n                gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n                gl.TEXTURE_CUBE_MAP_NEGATIVE_Z\n            ];\n\n            for (let i = 0, len = faces.length; i < len; i++) {\n                gl.texImage2D(faces[i], 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n            }\n\n        } else {\n            gl.texImage2D(this.target, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, color);\n        }\n\n        gl.bindTexture(this.target, null);\n    }\n\n    setTarget(target) {\n        this.target = target || this.gl.TEXTURE_2D;\n    }\n\n    setImage(image, props) {\n        const gl = this.gl;\n        gl.bindTexture(this.target, this.texture);\n        gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, props.flipY);\n        if (this.target === gl.TEXTURE_CUBE_MAP) {\n            if (utils.isArray(image)) {\n                const images = image;\n                const faces = [\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_X,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_X,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Y,\n                    gl.TEXTURE_CUBE_MAP_POSITIVE_Z,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_Z\n                ];\n                for (let i = 0, len = faces.length; i < len; i++) {\n                    gl.texImage2D(faces[i], 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, images[i]);\n                }\n            }\n        } else {\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image);\n        }\n        gl.bindTexture(this.target, null);\n    }\n\n    setProps(props) {\n        const gl = this.gl;\n        gl.bindTexture(this.target, this.texture);\n        if (props.minFilter) {\n            const minFilter = getGLEnum(gl, props.minFilter);\n            if (minFilter) {\n                gl.texParameteri(this.target, gl.TEXTURE_MIN_FILTER, minFilter);\n                if (minFilter === gl.NEAREST_MIPMAP_NEAREST ||\n                    minFilter === gl.LINEAR_MIPMAP_NEAREST ||\n                    minFilter === gl.NEAREST_MIPMAP_LINEAR ||\n                    minFilter === gl.LINEAR_MIPMAP_LINEAR) {\n\n                    gl.generateMipmap(this.target);\n                }\n            }\n        }\n        if (props.magFilter) {\n            const magFilter = getGLEnum(gl, props.magFilter);\n            if (magFilter) {\n                gl.texParameteri(this.target, gl.TEXTURE_MAG_FILTER, magFilter);\n            }\n        }\n        if (props.wrapS) {\n            const wrapS = getGLEnum(gl, props.wrapS);\n            if (wrapS) {\n                gl.texParameteri(this.target, gl.TEXTURE_WRAP_S, wrapS);\n            }\n        }\n        if (props.wrapT) {\n            const wrapT = getGLEnum(gl, props.wrapT);\n            if (wrapT) {\n                gl.texParameteri(this.target, gl.TEXTURE_WRAP_T, wrapT);\n            }\n        }\n        gl.bindTexture(this.target, null);\n    }\n\n    bind(unit) {\n        if (!this.allocated) {\n            return;\n        }\n        if (this.texture) {\n            const gl = this.gl;\n            gl.activeTexture(gl[\"TEXTURE\" + unit]);\n            gl.bindTexture(this.target, this.texture);\n            return true;\n        }\n        return false;\n    }\n\n    unbind(unit) {\n        if (!this.allocated) {\n            return;\n        }\n        if (this.texture) {\n            const gl = this.gl;\n            gl.activeTexture(gl[\"TEXTURE\" + unit]);\n            gl.bindTexture(this.target, null);\n        }\n    }\n\n    destroy() {\n        if (!this.allocated) {\n            return;\n        }\n        if (this.texture) {\n            this.gl.deleteTexture(this.texture);\n            this.texture = null;\n        }\n    }\n}\n\nexport {Texture2D};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/webgl/Texture2D.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3094,
    "kind": "function",
    "name": "getGLEnum",
    "memberof": "scene/webgl/Texture2D.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/webgl/Texture2D.js~getGLEnum",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/webgl/Texture2D.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [
      {
        "name": "gl",
        "types": [
          "*"
        ]
      },
      {
        "name": "name",
        "types": [
          "*"
        ]
      },
      {
        "name": "defaultVal",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 3095,
    "kind": "variable",
    "name": "color",
    "memberof": "scene/webgl/Texture2D.js",
    "static": true,
    "longname": "scene/webgl/Texture2D.js~color",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/webgl/Texture2D.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 3096,
    "kind": "function",
    "name": "clampImageSize",
    "memberof": "scene/webgl/Texture2D.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/webgl/Texture2D.js~clampImageSize",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/webgl/Texture2D.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "image",
        "types": [
          "*"
        ]
      },
      {
        "name": "numPixels",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 3097,
    "kind": "function",
    "name": "ensureImageSizePowerOfTwo",
    "memberof": "scene/webgl/Texture2D.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/webgl/Texture2D.js~ensureImageSizePowerOfTwo",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/webgl/Texture2D.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 33,
    "undocument": true,
    "params": [
      {
        "name": "image",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 3098,
    "kind": "function",
    "name": "isPowerOfTwo",
    "memberof": "scene/webgl/Texture2D.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/webgl/Texture2D.js~isPowerOfTwo",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/webgl/Texture2D.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 47,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 3099,
    "kind": "function",
    "name": "nextHighestPowerOfTwo",
    "memberof": "scene/webgl/Texture2D.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "scene/webgl/Texture2D.js~nextHighestPowerOfTwo",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/webgl/Texture2D.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "params": [
      {
        "name": "x",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 3100,
    "kind": "class",
    "name": "Texture2D",
    "memberof": "scene/webgl/Texture2D.js",
    "static": true,
    "longname": "scene/webgl/Texture2D.js~Texture2D",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/webgl/Texture2D.js",
    "importStyle": "{Texture2D}",
    "description": "A **Texture2D** is a low-level component that represents a 2D WebGL texture.",
    "lineNumber": 68,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Texture"
      },
      {
        "tagName": "@module",
        "tagValue": "xeokit"
      },
      {
        "tagName": "@submodule",
        "tagValue": "webgl"
      },
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "gl",
        "description": "{WebGLRenderingContext} The WebGL rendering context."
      }
    ],
    "interface": false
  },
  {
    "__docId__": 3101,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "scene/webgl/Texture2D.js~Texture2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Texture2D.js~Texture2D#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 70,
    "undocument": true
  },
  {
    "__docId__": 3102,
    "kind": "member",
    "name": "gl",
    "memberof": "scene/webgl/Texture2D.js~Texture2D",
    "static": false,
    "longname": "scene/webgl/Texture2D.js~Texture2D#gl",
    "access": "public",
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3103,
    "kind": "member",
    "name": "target",
    "memberof": "scene/webgl/Texture2D.js~Texture2D",
    "static": false,
    "longname": "scene/webgl/Texture2D.js~Texture2D#target",
    "access": "public",
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3104,
    "kind": "member",
    "name": "texture",
    "memberof": "scene/webgl/Texture2D.js~Texture2D",
    "static": false,
    "longname": "scene/webgl/Texture2D.js~Texture2D#texture",
    "access": "public",
    "description": null,
    "lineNumber": 73,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3105,
    "kind": "member",
    "name": "allocated",
    "memberof": "scene/webgl/Texture2D.js~Texture2D",
    "static": false,
    "longname": "scene/webgl/Texture2D.js~Texture2D#allocated",
    "access": "public",
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 3106,
    "kind": "method",
    "name": "setPreloadColor",
    "memberof": "scene/webgl/Texture2D.js~Texture2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Texture2D.js~Texture2D#setPreloadColor",
    "access": "public",
    "description": null,
    "lineNumber": 78,
    "undocument": true,
    "params": [
      {
        "name": "value",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 3107,
    "kind": "method",
    "name": "setTarget",
    "memberof": "scene/webgl/Texture2D.js~Texture2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Texture2D.js~Texture2D#setTarget",
    "access": "public",
    "description": null,
    "lineNumber": 120,
    "undocument": true,
    "params": [
      {
        "name": "target",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 3109,
    "kind": "method",
    "name": "setImage",
    "memberof": "scene/webgl/Texture2D.js~Texture2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Texture2D.js~Texture2D#setImage",
    "access": "public",
    "description": null,
    "lineNumber": 124,
    "undocument": true,
    "params": [
      {
        "name": "image",
        "types": [
          "*"
        ]
      },
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 3110,
    "kind": "method",
    "name": "setProps",
    "memberof": "scene/webgl/Texture2D.js~Texture2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Texture2D.js~Texture2D#setProps",
    "access": "public",
    "description": null,
    "lineNumber": 149,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 3111,
    "kind": "method",
    "name": "bind",
    "memberof": "scene/webgl/Texture2D.js~Texture2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Texture2D.js~Texture2D#bind",
    "access": "public",
    "description": null,
    "lineNumber": 186,
    "undocument": true,
    "params": [
      {
        "name": "unit",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 3112,
    "kind": "method",
    "name": "unbind",
    "memberof": "scene/webgl/Texture2D.js~Texture2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Texture2D.js~Texture2D#unbind",
    "access": "public",
    "description": null,
    "lineNumber": 199,
    "undocument": true,
    "params": [
      {
        "name": "unit",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 3113,
    "kind": "method",
    "name": "destroy",
    "memberof": "scene/webgl/Texture2D.js~Texture2D",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "scene/webgl/Texture2D.js~Texture2D#destroy",
    "access": "public",
    "description": null,
    "lineNumber": 210,
    "undocument": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 3115,
    "kind": "file",
    "name": "scene/webgl/webglEnums.js",
    "content": "/**\n * @author xeolabs / https://github.com/xeolabs\n */\n\n/**\n * Human-readable WebGL enumeration mappings.\n * @type {{rgba: string, dstAlpha: string, linearMipmapLinear: string, notequal: string, luminanceAlpha: string, nearest: string, zero: string, nearestMipmapLinear: string, oneMinusSrcColor: string, ccw: string, funcSubtract: string, unsignedByte: string, nearestMipmapNearest: string, oneMinusDstColor: string, greater: string, always: string, compareRToTexture: string, funcAdd: string, dstColor: string, gequal: string, less: string, funcReverseSubtract: string, linearMipmapNearest: string, never: string, mirroredRepeat: string, textureBinding2D: string, oneMinusDstAlpha: string, oneMinusSrcAlpha: string, srcAlpha: string, luminance: string, frontAndBack: string, lequal: string, back: string, rgb: string, oneMinusConstantAlpha: string, repeat: string, alpha: string, srcColor: string, textureBindingCubeMap: string, linear: string, one: string, contantColor: string, equal: string, oneMinusConstantColor: string, cw: string, constantAlpha: string, srcAlphaSaturate: string, clampToEdge: string, front: string}}\n */\nconst webglEnums = {\n    funcAdd: \"FUNC_ADD\",\n    funcSubtract: \"FUNC_SUBTRACT\",\n    funcReverseSubtract: \"FUNC_REVERSE_SUBTRACT\",\n    zero: \"ZERO\",\n    one: \"ONE\",\n    srcColor: \"SRC_COLOR\",\n    oneMinusSrcColor: \"ONE_MINUS_SRC_COLOR\",\n    dstColor: \"DST_COLOR\",\n    oneMinusDstColor: \"ONE_MINUS_DST_COLOR\",\n    srcAlpha: \"SRC_ALPHA\",\n    oneMinusSrcAlpha: \"ONE_MINUS_SRC_ALPHA\",\n    dstAlpha: \"DST_ALPHA\",\n    oneMinusDstAlpha: \"ONE_MINUS_DST_ALPHA\",\n    contantColor: \"CONSTANT_COLOR\",\n    oneMinusConstantColor: \"ONE_MINUS_CONSTANT_COLOR\",\n    constantAlpha: \"CONSTANT_ALPHA\",\n    oneMinusConstantAlpha: \"ONE_MINUS_CONSTANT_ALPHA\",\n    srcAlphaSaturate: \"SRC_ALPHA_SATURATE\",\n    front: \"FRONT\",\n    back: \"BACK\",\n    frontAndBack: \"FRONT_AND_BACK\",\n    never: \"NEVER\",\n    less: \"LESS\",\n    equal: \"EQUAL\",\n    lequal: \"LEQUAL\",\n    greater: \"GREATER\",\n    notequal: \"NOTEQUAL\",\n    gequal: \"GEQUAL\",\n    always: \"ALWAYS\",\n    cw: \"CW\",\n    ccw: \"CCW\",\n    linear: \"LINEAR\",\n    nearest: \"NEAREST\",\n    linearMipmapNearest: \"LINEAR_MIPMAP_NEAREST\",\n    nearestMipmapNearest: \"NEAREST_MIPMAP_NEAREST\",\n    nearestMipmapLinear: \"NEAREST_MIPMAP_LINEAR\",\n    linearMipmapLinear: \"LINEAR_MIPMAP_LINEAR\",\n    repeat: \"REPEAT\",\n    clampToEdge: \"CLAMP_TO_EDGE\",\n    mirroredRepeat: \"MIRRORED_REPEAT\",\n    alpha: \"ALPHA\",\n    rgb: \"RGB\",\n    rgba: \"RGBA\",\n    luminance: \"LUMINANCE\",\n    luminanceAlpha: \"LUMINANCE_ALPHA\",\n    textureBinding2D: \"TEXTURE_BINDING_2D\",\n    textureBindingCubeMap: \"TEXTURE_BINDING_CUBE_MAP\",\n    compareRToTexture: \"COMPARE_R_TO_TEXTURE\", // Hardware Shadowing Z-depth,\n    unsignedByte: \"UNSIGNED_BYTE\"\n};\n\nexport {webglEnums};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/webgl/webglEnums.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3116,
    "kind": "variable",
    "name": "webglEnums",
    "memberof": "scene/webgl/webglEnums.js",
    "static": true,
    "longname": "scene/webgl/webglEnums.js~webglEnums",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/webgl/webglEnums.js",
    "importStyle": "{webglEnums}",
    "description": "Human-readable WebGL enumeration mappings.",
    "lineNumber": 9,
    "type": {
      "nullable": null,
      "types": [
        "{rgba: string, dstAlpha: string, linearMipmapLinear: string, notequal: string, luminanceAlpha: string, nearest: string, zero: string, nearestMipmapLinear: string, oneMinusSrcColor: string, ccw: string, funcSubtract: string, unsignedByte: string, nearestMipmapNearest: string, oneMinusDstColor: string, greater: string, always: string, compareRToTexture: string, funcAdd: string, dstColor: string, gequal: string, less: string, funcReverseSubtract: string, linearMipmapNearest: string, never: string, mirroredRepeat: string, textureBinding2D: string, oneMinusDstAlpha: string, oneMinusSrcAlpha: string, srcAlpha: string, luminance: string, frontAndBack: string, lequal: string, back: string, rgb: string, oneMinusConstantAlpha: string, repeat: string, alpha: string, srcColor: string, textureBindingCubeMap: string, linear: string, one: string, contantColor: string, equal: string, oneMinusConstantColor: string, cw: string, constantAlpha: string, srcAlphaSaturate: string, clampToEdge: string, front: string}"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 3117,
    "kind": "file",
    "name": "scene/webglInfo.js",
    "content": "const WEBGL_INFO = {\n    WEBGL: false,\n    SUPPORTED_EXTENSIONS: {}\n};\n\nconst canvas = document.createElement(\"canvas\");\n\nif (canvas) {\n\n    const gl = canvas.getContext(\"webgl\", {antialias: true}) || canvas.getContext(\"experimental-webgl\", {antialias: true});\n\n    WEBGL_INFO.WEBGL = !!gl;\n\n    if (WEBGL_INFO.WEBGL) {\n        WEBGL_INFO.ANTIALIAS = gl.getContextAttributes().antialias;\n        if (gl.getShaderPrecisionFormat) {\n            if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT).precision > 0) {\n                WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"highp\";\n            } else if (gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT).precision > 0) {\n                WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"mediump\";\n            } else {\n                WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"lowp\";\n            }\n        } else {\n            WEBGL_INFO.FS_MAX_FLOAT_PRECISION = \"mediump\";\n        }\n        WEBGL_INFO.DEPTH_BUFFER_BITS = gl.getParameter(gl.DEPTH_BITS);\n        WEBGL_INFO.MAX_TEXTURE_SIZE = gl.getParameter(gl.MAX_TEXTURE_SIZE);\n        WEBGL_INFO.MAX_CUBE_MAP_SIZE = gl.getParameter(gl.MAX_CUBE_MAP_TEXTURE_SIZE);\n        WEBGL_INFO.MAX_RENDERBUFFER_SIZE = gl.getParameter(gl.MAX_RENDERBUFFER_SIZE);\n        WEBGL_INFO.MAX_TEXTURE_UNITS = gl.getParameter(gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        WEBGL_INFO.MAX_TEXTURE_IMAGE_UNITS = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n        WEBGL_INFO.MAX_VERTEX_ATTRIBS = gl.getParameter(gl.MAX_VERTEX_ATTRIBS);\n        WEBGL_INFO.MAX_VERTEX_UNIFORM_VECTORS = gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS);\n        WEBGL_INFO.MAX_FRAGMENT_UNIFORM_VECTORS = gl.getParameter(gl.MAX_FRAGMENT_UNIFORM_VECTORS);\n        WEBGL_INFO.MAX_VARYING_VECTORS = gl.getParameter(gl.MAX_VARYING_VECTORS);\n        gl.getSupportedExtensions().forEach(function (ext) {\n            WEBGL_INFO.SUPPORTED_EXTENSIONS[ext] = true;\n        });\n    }\n}\n\nexport {WEBGL_INFO};",
    "static": true,
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/src/scene/webglInfo.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3118,
    "kind": "variable",
    "name": "canvas",
    "memberof": "scene/webglInfo.js",
    "static": true,
    "longname": "scene/webglInfo.js~canvas",
    "access": "public",
    "export": false,
    "importPath": "xeokit-sdk/scene/webglInfo.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 3119,
    "kind": "variable",
    "name": "WEBGL_INFO",
    "memberof": "scene/webglInfo.js",
    "static": true,
    "longname": "scene/webglInfo.js~WEBGL_INFO",
    "access": "public",
    "export": true,
    "importPath": "xeokit-sdk/scene/webglInfo.js",
    "importStyle": "{WEBGL_INFO}",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "type": {
      "types": [
        "{\"WEBGL\": *, \"SUPPORTED_EXTENSIONS\": *}"
      ]
    }
  },
  {
    "kind": "index",
    "content": "# xeokit-sdk\n\nThe **xeokit-sdk** is a [GPL3-licensed](https://github.com/xeolabs/xeokit.io/wiki/License) software development kit\nfrom [xeolabs](http://xeolabs.com) for building Web-based 3D viewers for BIM and engineering. The SDK provides\na 3D viewer framework on the open source [xeogl](http://xeogl.org) WebGL library, with a collection bundled of\nplugins focused on BIM and CAD.\n\nThe SDK uses advanced rendering techniques to view and interact with high-detail\nmodels in most major browsers, on both desktop and mobile platforms.\n\n### Links\n\n* [Website](https://xeokit.io/)\n* [Examples](http://xeolabs.com/xeokit-examples/)\n* [Docs](http://xeolabs.com/xeokit-sdk/docs/)\n* [Source code](https://github.com/xeolabs/xeokit-sdk)\n* [Wiki](https://github.com/xeolabs/xeokit.io/wiki)\n* [License](https://github.com/xeolabs/xeokit.io/wiki/License)\n* [Contact](http://xeolabs.com/)\n\n![](https://xeokit.io/images/officePlan300x200.png)",
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"xeokit-sdk\",\n  \"version\": \"1.0.0\",\n  \"description\": \"SDK for building high-performance visualizations on xeogl\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/xeolabs/xeokit-sdk.git\"\n  },\n  \"keywords\": [\n    \"webgl\",\n    \"xeogl\",\n    \"bim\",\n    \"cad\"\n  ],\n  \"author\": \"Lindsay Kay\",\n  \"license\": \"SEE LICENSE IN LICENSE.txt\",\n  \"bugs\": {\n    \"url\": \"https://github.com/xeolabs/xeokit-sdk/issues\"\n  },\n  \"homepage\": \"https://github.com/xeolabs/xeokit-sdk#readme\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"gulp\": \"^3.9.1\",\n    \"gulp-yuidoc\": \"^0.1.2\",\n    \"rollup\": \"^0.55.5\",\n    \"rollup-plugin-license\": \"^0.7.0\",\n    \"rollup-plugin-uglify\": \"^5.0.2\",\n    \"rollup-watch\": \"^4.0.0\"\n  },\n  \"engines\": {\n    \"node\": \">=0.10.17\",\n    \"npm\": \"1.3.8\"\n  }\n}\n",
    "longname": "/home/lindsay/xeolabs/xeokit/xeokit-sdk/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  }
]